# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WidsprofileArgs', 'Widsprofile']

@pulumi.input_type
class WidsprofileArgs:
    def __init__(__self__, *,
                 ap_auto_suppress: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_day: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_end: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApBgscanDisableScheduleArgs']]]] = None,
                 ap_bgscan_disable_start: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_duration: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_idle: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_intv: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_period: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_report_intv: Optional[pulumi.Input[int]] = None,
                 ap_fgscan_report_intv: Optional[pulumi.Input[int]] = None,
                 ap_scan: Optional[pulumi.Input[str]] = None,
                 ap_scan_channel_list2g5gs: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList2g5gArgs']]]] = None,
                 ap_scan_channel_list6gs: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList6gArgs']]]] = None,
                 ap_scan_passive: Optional[pulumi.Input[str]] = None,
                 ap_scan_threshold: Optional[pulumi.Input[str]] = None,
                 asleap_attack: Optional[pulumi.Input[str]] = None,
                 assoc_flood_thresh: Optional[pulumi.Input[int]] = None,
                 assoc_flood_time: Optional[pulumi.Input[int]] = None,
                 assoc_frame_flood: Optional[pulumi.Input[str]] = None,
                 auth_flood_thresh: Optional[pulumi.Input[int]] = None,
                 auth_flood_time: Optional[pulumi.Input[int]] = None,
                 auth_frame_flood: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 deauth_broadcast: Optional[pulumi.Input[str]] = None,
                 deauth_unknown_src_thresh: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eapol_fail_flood: Optional[pulumi.Input[str]] = None,
                 eapol_fail_intv: Optional[pulumi.Input[int]] = None,
                 eapol_fail_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_logoff_flood: Optional[pulumi.Input[str]] = None,
                 eapol_logoff_intv: Optional[pulumi.Input[int]] = None,
                 eapol_logoff_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_pre_fail_flood: Optional[pulumi.Input[str]] = None,
                 eapol_pre_fail_intv: Optional[pulumi.Input[int]] = None,
                 eapol_pre_fail_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_pre_succ_flood: Optional[pulumi.Input[str]] = None,
                 eapol_pre_succ_intv: Optional[pulumi.Input[int]] = None,
                 eapol_pre_succ_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_start_flood: Optional[pulumi.Input[str]] = None,
                 eapol_start_intv: Optional[pulumi.Input[int]] = None,
                 eapol_start_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_succ_flood: Optional[pulumi.Input[str]] = None,
                 eapol_succ_intv: Optional[pulumi.Input[int]] = None,
                 eapol_succ_thresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 invalid_mac_oui: Optional[pulumi.Input[str]] = None,
                 long_duration_attack: Optional[pulumi.Input[str]] = None,
                 long_duration_thresh: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 null_ssid_probe_resp: Optional[pulumi.Input[str]] = None,
                 sensor_mode: Optional[pulumi.Input[str]] = None,
                 spoofed_deauth: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weak_wep_iv: Optional[pulumi.Input[str]] = None,
                 wireless_bridge: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Widsprofile resource.
        :param pulumi.Input[str] ap_auto_suppress: Enable/disable on-wire rogue AP auto-suppression (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_bgscan_disable_day: Optionally turn off scanning for one or more days of the week. Separate the days with a space. By default, no days are set. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] ap_bgscan_disable_end: End time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        :param pulumi.Input[Sequence[pulumi.Input['WidsprofileApBgscanDisableScheduleArgs']]] ap_bgscan_disable_schedules: Firewall schedules for turning off FortiAP radio background scan. Background scan will be disabled when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ap_bgscan_disable_schedules` block is documented below.
        :param pulumi.Input[str] ap_bgscan_disable_start: Start time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        :param pulumi.Input[int] ap_bgscan_duration: Listening time on a scanning channel (10 - 1000 msec, default = 20).
        :param pulumi.Input[int] ap_bgscan_idle: Waiting time for channel inactivity before scanning this channel (0 - 1000 msec, default = 0).
        :param pulumi.Input[int] ap_bgscan_intv: Period of time between scanning two channels (1 - 600 sec, default = 1).
        :param pulumi.Input[int] ap_bgscan_period: Period of time between background scans (60 - 3600 sec, default = 600).
        :param pulumi.Input[int] ap_bgscan_report_intv: Period of time between background scan reports (15 - 600 sec, default = 30).
        :param pulumi.Input[int] ap_fgscan_report_intv: Period of time between foreground scan reports (15 - 600 sec, default = 15).
        :param pulumi.Input[str] ap_scan: Enable/disable rogue AP detection. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList2g5gArgs']]] ap_scan_channel_list2g5gs: Selected ap scan channel list for 2.4G and 5G bands. The structure of `ap_scan_channel_list_2g_5g` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList6gArgs']]] ap_scan_channel_list6gs: Selected ap scan channel list for 6G band. The structure of `ap_scan_channel_list_6g` block is documented below.
        :param pulumi.Input[str] ap_scan_passive: Enable/disable passive scanning. Enable means do not send probe request on any channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_scan_threshold: Minimum signal level/threshold in dBm required for the AP to report detected rogue AP (-95 to -20, default = -90).
        :param pulumi.Input[str] asleap_attack: Enable/disable asleap attack detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] assoc_flood_thresh: The threshold value for association frame flooding.
        :param pulumi.Input[int] assoc_flood_time: Number of seconds after which a station is considered not connected.
        :param pulumi.Input[str] assoc_frame_flood: Enable/disable association frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_flood_thresh: The threshold value for authentication frame flooding.
        :param pulumi.Input[int] auth_flood_time: Number of seconds after which a station is considered not connected.
        :param pulumi.Input[str] auth_frame_flood: Enable/disable authentication frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] deauth_broadcast: Enable/disable broadcasting de-authentication detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] deauth_unknown_src_thresh: Threshold value per second to deauth unknown src for DoS attack (0: no limit).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eapol_fail_flood: Enable/disable EAPOL-Failure flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_fail_intv: The detection interval for EAPOL-Failure flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_fail_thresh: The threshold value for EAPOL-Failure flooding in specified interval.
        :param pulumi.Input[str] eapol_logoff_flood: Enable/disable EAPOL-Logoff flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_logoff_intv: The detection interval for EAPOL-Logoff flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_logoff_thresh: The threshold value for EAPOL-Logoff flooding in specified interval.
        :param pulumi.Input[str] eapol_pre_fail_flood: Enable/disable premature EAPOL-Failure flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_pre_fail_intv: The detection interval for premature EAPOL-Failure flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_pre_fail_thresh: The threshold value for premature EAPOL-Failure flooding in specified interval.
        :param pulumi.Input[str] eapol_pre_succ_flood: Enable/disable premature EAPOL-Success flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_pre_succ_intv: The detection interval for premature EAPOL-Success flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_pre_succ_thresh: The threshold value for premature EAPOL-Success flooding in specified interval.
        :param pulumi.Input[str] eapol_start_flood: Enable/disable EAPOL-Start flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_start_intv: The detection interval for EAPOL-Start flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_start_thresh: The threshold value for EAPOL-Start flooding in specified interval.
        :param pulumi.Input[str] eapol_succ_flood: Enable/disable EAPOL-Success flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_succ_intv: The detection interval for EAPOL-Success flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_succ_thresh: The threshold value for EAPOL-Success flooding in specified interval.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] invalid_mac_oui: Enable/disable invalid MAC OUI detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] long_duration_attack: Enable/disable long duration attack detection based on user configured threshold (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] long_duration_thresh: Threshold value for long duration attack detection (1000 - 32767 usec, default = 8200).
        :param pulumi.Input[str] name: WIDS profile name.
        :param pulumi.Input[str] null_ssid_probe_resp: Enable/disable null SSID probe response detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sensor_mode: Scan WiFi nearby stations (default = disable). Valid values: `disable`, `foreign`, `both`.
        :param pulumi.Input[str] spoofed_deauth: Enable/disable spoofed de-authentication attack detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
               
               The `ap_scan_channel_list_2g_5g` block supports:
        :param pulumi.Input[str] weak_wep_iv: Enable/disable weak WEP IV (Initialization Vector) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wireless_bridge: Enable/disable wireless bridge detection (default = disable). Valid values: `enable`, `disable`.
        """
        if ap_auto_suppress is not None:
            pulumi.set(__self__, "ap_auto_suppress", ap_auto_suppress)
        if ap_bgscan_disable_day is not None:
            pulumi.set(__self__, "ap_bgscan_disable_day", ap_bgscan_disable_day)
        if ap_bgscan_disable_end is not None:
            pulumi.set(__self__, "ap_bgscan_disable_end", ap_bgscan_disable_end)
        if ap_bgscan_disable_schedules is not None:
            pulumi.set(__self__, "ap_bgscan_disable_schedules", ap_bgscan_disable_schedules)
        if ap_bgscan_disable_start is not None:
            pulumi.set(__self__, "ap_bgscan_disable_start", ap_bgscan_disable_start)
        if ap_bgscan_duration is not None:
            pulumi.set(__self__, "ap_bgscan_duration", ap_bgscan_duration)
        if ap_bgscan_idle is not None:
            pulumi.set(__self__, "ap_bgscan_idle", ap_bgscan_idle)
        if ap_bgscan_intv is not None:
            pulumi.set(__self__, "ap_bgscan_intv", ap_bgscan_intv)
        if ap_bgscan_period is not None:
            pulumi.set(__self__, "ap_bgscan_period", ap_bgscan_period)
        if ap_bgscan_report_intv is not None:
            pulumi.set(__self__, "ap_bgscan_report_intv", ap_bgscan_report_intv)
        if ap_fgscan_report_intv is not None:
            pulumi.set(__self__, "ap_fgscan_report_intv", ap_fgscan_report_intv)
        if ap_scan is not None:
            pulumi.set(__self__, "ap_scan", ap_scan)
        if ap_scan_channel_list2g5gs is not None:
            pulumi.set(__self__, "ap_scan_channel_list2g5gs", ap_scan_channel_list2g5gs)
        if ap_scan_channel_list6gs is not None:
            pulumi.set(__self__, "ap_scan_channel_list6gs", ap_scan_channel_list6gs)
        if ap_scan_passive is not None:
            pulumi.set(__self__, "ap_scan_passive", ap_scan_passive)
        if ap_scan_threshold is not None:
            pulumi.set(__self__, "ap_scan_threshold", ap_scan_threshold)
        if asleap_attack is not None:
            pulumi.set(__self__, "asleap_attack", asleap_attack)
        if assoc_flood_thresh is not None:
            pulumi.set(__self__, "assoc_flood_thresh", assoc_flood_thresh)
        if assoc_flood_time is not None:
            pulumi.set(__self__, "assoc_flood_time", assoc_flood_time)
        if assoc_frame_flood is not None:
            pulumi.set(__self__, "assoc_frame_flood", assoc_frame_flood)
        if auth_flood_thresh is not None:
            pulumi.set(__self__, "auth_flood_thresh", auth_flood_thresh)
        if auth_flood_time is not None:
            pulumi.set(__self__, "auth_flood_time", auth_flood_time)
        if auth_frame_flood is not None:
            pulumi.set(__self__, "auth_frame_flood", auth_frame_flood)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if deauth_broadcast is not None:
            pulumi.set(__self__, "deauth_broadcast", deauth_broadcast)
        if deauth_unknown_src_thresh is not None:
            pulumi.set(__self__, "deauth_unknown_src_thresh", deauth_unknown_src_thresh)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if eapol_fail_flood is not None:
            pulumi.set(__self__, "eapol_fail_flood", eapol_fail_flood)
        if eapol_fail_intv is not None:
            pulumi.set(__self__, "eapol_fail_intv", eapol_fail_intv)
        if eapol_fail_thresh is not None:
            pulumi.set(__self__, "eapol_fail_thresh", eapol_fail_thresh)
        if eapol_logoff_flood is not None:
            pulumi.set(__self__, "eapol_logoff_flood", eapol_logoff_flood)
        if eapol_logoff_intv is not None:
            pulumi.set(__self__, "eapol_logoff_intv", eapol_logoff_intv)
        if eapol_logoff_thresh is not None:
            pulumi.set(__self__, "eapol_logoff_thresh", eapol_logoff_thresh)
        if eapol_pre_fail_flood is not None:
            pulumi.set(__self__, "eapol_pre_fail_flood", eapol_pre_fail_flood)
        if eapol_pre_fail_intv is not None:
            pulumi.set(__self__, "eapol_pre_fail_intv", eapol_pre_fail_intv)
        if eapol_pre_fail_thresh is not None:
            pulumi.set(__self__, "eapol_pre_fail_thresh", eapol_pre_fail_thresh)
        if eapol_pre_succ_flood is not None:
            pulumi.set(__self__, "eapol_pre_succ_flood", eapol_pre_succ_flood)
        if eapol_pre_succ_intv is not None:
            pulumi.set(__self__, "eapol_pre_succ_intv", eapol_pre_succ_intv)
        if eapol_pre_succ_thresh is not None:
            pulumi.set(__self__, "eapol_pre_succ_thresh", eapol_pre_succ_thresh)
        if eapol_start_flood is not None:
            pulumi.set(__self__, "eapol_start_flood", eapol_start_flood)
        if eapol_start_intv is not None:
            pulumi.set(__self__, "eapol_start_intv", eapol_start_intv)
        if eapol_start_thresh is not None:
            pulumi.set(__self__, "eapol_start_thresh", eapol_start_thresh)
        if eapol_succ_flood is not None:
            pulumi.set(__self__, "eapol_succ_flood", eapol_succ_flood)
        if eapol_succ_intv is not None:
            pulumi.set(__self__, "eapol_succ_intv", eapol_succ_intv)
        if eapol_succ_thresh is not None:
            pulumi.set(__self__, "eapol_succ_thresh", eapol_succ_thresh)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if invalid_mac_oui is not None:
            pulumi.set(__self__, "invalid_mac_oui", invalid_mac_oui)
        if long_duration_attack is not None:
            pulumi.set(__self__, "long_duration_attack", long_duration_attack)
        if long_duration_thresh is not None:
            pulumi.set(__self__, "long_duration_thresh", long_duration_thresh)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if null_ssid_probe_resp is not None:
            pulumi.set(__self__, "null_ssid_probe_resp", null_ssid_probe_resp)
        if sensor_mode is not None:
            pulumi.set(__self__, "sensor_mode", sensor_mode)
        if spoofed_deauth is not None:
            pulumi.set(__self__, "spoofed_deauth", spoofed_deauth)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weak_wep_iv is not None:
            pulumi.set(__self__, "weak_wep_iv", weak_wep_iv)
        if wireless_bridge is not None:
            pulumi.set(__self__, "wireless_bridge", wireless_bridge)

    @property
    @pulumi.getter(name="apAutoSuppress")
    def ap_auto_suppress(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable on-wire rogue AP auto-suppression (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_auto_suppress")

    @ap_auto_suppress.setter
    def ap_auto_suppress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_auto_suppress", value)

    @property
    @pulumi.getter(name="apBgscanDisableDay")
    def ap_bgscan_disable_day(self) -> Optional[pulumi.Input[str]]:
        """
        Optionally turn off scanning for one or more days of the week. Separate the days with a space. By default, no days are set. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "ap_bgscan_disable_day")

    @ap_bgscan_disable_day.setter
    def ap_bgscan_disable_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_bgscan_disable_day", value)

    @property
    @pulumi.getter(name="apBgscanDisableEnd")
    def ap_bgscan_disable_end(self) -> Optional[pulumi.Input[str]]:
        """
        End time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        """
        return pulumi.get(self, "ap_bgscan_disable_end")

    @ap_bgscan_disable_end.setter
    def ap_bgscan_disable_end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_bgscan_disable_end", value)

    @property
    @pulumi.getter(name="apBgscanDisableSchedules")
    def ap_bgscan_disable_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApBgscanDisableScheduleArgs']]]]:
        """
        Firewall schedules for turning off FortiAP radio background scan. Background scan will be disabled when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ap_bgscan_disable_schedules` block is documented below.
        """
        return pulumi.get(self, "ap_bgscan_disable_schedules")

    @ap_bgscan_disable_schedules.setter
    def ap_bgscan_disable_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApBgscanDisableScheduleArgs']]]]):
        pulumi.set(self, "ap_bgscan_disable_schedules", value)

    @property
    @pulumi.getter(name="apBgscanDisableStart")
    def ap_bgscan_disable_start(self) -> Optional[pulumi.Input[str]]:
        """
        Start time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        """
        return pulumi.get(self, "ap_bgscan_disable_start")

    @ap_bgscan_disable_start.setter
    def ap_bgscan_disable_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_bgscan_disable_start", value)

    @property
    @pulumi.getter(name="apBgscanDuration")
    def ap_bgscan_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Listening time on a scanning channel (10 - 1000 msec, default = 20).
        """
        return pulumi.get(self, "ap_bgscan_duration")

    @ap_bgscan_duration.setter
    def ap_bgscan_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_bgscan_duration", value)

    @property
    @pulumi.getter(name="apBgscanIdle")
    def ap_bgscan_idle(self) -> Optional[pulumi.Input[int]]:
        """
        Waiting time for channel inactivity before scanning this channel (0 - 1000 msec, default = 0).
        """
        return pulumi.get(self, "ap_bgscan_idle")

    @ap_bgscan_idle.setter
    def ap_bgscan_idle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_bgscan_idle", value)

    @property
    @pulumi.getter(name="apBgscanIntv")
    def ap_bgscan_intv(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between scanning two channels (1 - 600 sec, default = 1).
        """
        return pulumi.get(self, "ap_bgscan_intv")

    @ap_bgscan_intv.setter
    def ap_bgscan_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_bgscan_intv", value)

    @property
    @pulumi.getter(name="apBgscanPeriod")
    def ap_bgscan_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between background scans (60 - 3600 sec, default = 600).
        """
        return pulumi.get(self, "ap_bgscan_period")

    @ap_bgscan_period.setter
    def ap_bgscan_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_bgscan_period", value)

    @property
    @pulumi.getter(name="apBgscanReportIntv")
    def ap_bgscan_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between background scan reports (15 - 600 sec, default = 30).
        """
        return pulumi.get(self, "ap_bgscan_report_intv")

    @ap_bgscan_report_intv.setter
    def ap_bgscan_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_bgscan_report_intv", value)

    @property
    @pulumi.getter(name="apFgscanReportIntv")
    def ap_fgscan_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between foreground scan reports (15 - 600 sec, default = 15).
        """
        return pulumi.get(self, "ap_fgscan_report_intv")

    @ap_fgscan_report_intv.setter
    def ap_fgscan_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_fgscan_report_intv", value)

    @property
    @pulumi.getter(name="apScan")
    def ap_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable rogue AP detection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ap_scan")

    @ap_scan.setter
    def ap_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_scan", value)

    @property
    @pulumi.getter(name="apScanChannelList2g5gs")
    def ap_scan_channel_list2g5gs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList2g5gArgs']]]]:
        """
        Selected ap scan channel list for 2.4G and 5G bands. The structure of `ap_scan_channel_list_2g_5g` block is documented below.
        """
        return pulumi.get(self, "ap_scan_channel_list2g5gs")

    @ap_scan_channel_list2g5gs.setter
    def ap_scan_channel_list2g5gs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList2g5gArgs']]]]):
        pulumi.set(self, "ap_scan_channel_list2g5gs", value)

    @property
    @pulumi.getter(name="apScanChannelList6gs")
    def ap_scan_channel_list6gs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList6gArgs']]]]:
        """
        Selected ap scan channel list for 6G band. The structure of `ap_scan_channel_list_6g` block is documented below.
        """
        return pulumi.get(self, "ap_scan_channel_list6gs")

    @ap_scan_channel_list6gs.setter
    def ap_scan_channel_list6gs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList6gArgs']]]]):
        pulumi.set(self, "ap_scan_channel_list6gs", value)

    @property
    @pulumi.getter(name="apScanPassive")
    def ap_scan_passive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passive scanning. Enable means do not send probe request on any channels (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_scan_passive")

    @ap_scan_passive.setter
    def ap_scan_passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_scan_passive", value)

    @property
    @pulumi.getter(name="apScanThreshold")
    def ap_scan_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum signal level/threshold in dBm required for the AP to report detected rogue AP (-95 to -20, default = -90).
        """
        return pulumi.get(self, "ap_scan_threshold")

    @ap_scan_threshold.setter
    def ap_scan_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_scan_threshold", value)

    @property
    @pulumi.getter(name="asleapAttack")
    def asleap_attack(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable asleap attack detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asleap_attack")

    @asleap_attack.setter
    def asleap_attack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asleap_attack", value)

    @property
    @pulumi.getter(name="assocFloodThresh")
    def assoc_flood_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for association frame flooding.
        """
        return pulumi.get(self, "assoc_flood_thresh")

    @assoc_flood_thresh.setter
    def assoc_flood_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assoc_flood_thresh", value)

    @property
    @pulumi.getter(name="assocFloodTime")
    def assoc_flood_time(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which a station is considered not connected.
        """
        return pulumi.get(self, "assoc_flood_time")

    @assoc_flood_time.setter
    def assoc_flood_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assoc_flood_time", value)

    @property
    @pulumi.getter(name="assocFrameFlood")
    def assoc_frame_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable association frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "assoc_frame_flood")

    @assoc_frame_flood.setter
    def assoc_frame_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assoc_frame_flood", value)

    @property
    @pulumi.getter(name="authFloodThresh")
    def auth_flood_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for authentication frame flooding.
        """
        return pulumi.get(self, "auth_flood_thresh")

    @auth_flood_thresh.setter
    def auth_flood_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_flood_thresh", value)

    @property
    @pulumi.getter(name="authFloodTime")
    def auth_flood_time(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which a station is considered not connected.
        """
        return pulumi.get(self, "auth_flood_time")

    @auth_flood_time.setter
    def auth_flood_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_flood_time", value)

    @property
    @pulumi.getter(name="authFrameFlood")
    def auth_frame_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_frame_flood")

    @auth_frame_flood.setter
    def auth_frame_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_frame_flood", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="deauthBroadcast")
    def deauth_broadcast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable broadcasting de-authentication detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "deauth_broadcast")

    @deauth_broadcast.setter
    def deauth_broadcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deauth_broadcast", value)

    @property
    @pulumi.getter(name="deauthUnknownSrcThresh")
    def deauth_unknown_src_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold value per second to deauth unknown src for DoS attack (0: no limit).
        """
        return pulumi.get(self, "deauth_unknown_src_thresh")

    @deauth_unknown_src_thresh.setter
    def deauth_unknown_src_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deauth_unknown_src_thresh", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="eapolFailFlood")
    def eapol_fail_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EAPOL-Failure flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_fail_flood")

    @eapol_fail_flood.setter
    def eapol_fail_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_fail_flood", value)

    @property
    @pulumi.getter(name="eapolFailIntv")
    def eapol_fail_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for EAPOL-Failure flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_fail_intv")

    @eapol_fail_intv.setter
    def eapol_fail_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_fail_intv", value)

    @property
    @pulumi.getter(name="eapolFailThresh")
    def eapol_fail_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for EAPOL-Failure flooding in specified interval.
        """
        return pulumi.get(self, "eapol_fail_thresh")

    @eapol_fail_thresh.setter
    def eapol_fail_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_fail_thresh", value)

    @property
    @pulumi.getter(name="eapolLogoffFlood")
    def eapol_logoff_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EAPOL-Logoff flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_logoff_flood")

    @eapol_logoff_flood.setter
    def eapol_logoff_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_logoff_flood", value)

    @property
    @pulumi.getter(name="eapolLogoffIntv")
    def eapol_logoff_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for EAPOL-Logoff flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_logoff_intv")

    @eapol_logoff_intv.setter
    def eapol_logoff_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_logoff_intv", value)

    @property
    @pulumi.getter(name="eapolLogoffThresh")
    def eapol_logoff_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for EAPOL-Logoff flooding in specified interval.
        """
        return pulumi.get(self, "eapol_logoff_thresh")

    @eapol_logoff_thresh.setter
    def eapol_logoff_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_logoff_thresh", value)

    @property
    @pulumi.getter(name="eapolPreFailFlood")
    def eapol_pre_fail_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable premature EAPOL-Failure flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_pre_fail_flood")

    @eapol_pre_fail_flood.setter
    def eapol_pre_fail_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_pre_fail_flood", value)

    @property
    @pulumi.getter(name="eapolPreFailIntv")
    def eapol_pre_fail_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for premature EAPOL-Failure flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_pre_fail_intv")

    @eapol_pre_fail_intv.setter
    def eapol_pre_fail_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_pre_fail_intv", value)

    @property
    @pulumi.getter(name="eapolPreFailThresh")
    def eapol_pre_fail_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for premature EAPOL-Failure flooding in specified interval.
        """
        return pulumi.get(self, "eapol_pre_fail_thresh")

    @eapol_pre_fail_thresh.setter
    def eapol_pre_fail_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_pre_fail_thresh", value)

    @property
    @pulumi.getter(name="eapolPreSuccFlood")
    def eapol_pre_succ_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable premature EAPOL-Success flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_pre_succ_flood")

    @eapol_pre_succ_flood.setter
    def eapol_pre_succ_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_pre_succ_flood", value)

    @property
    @pulumi.getter(name="eapolPreSuccIntv")
    def eapol_pre_succ_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for premature EAPOL-Success flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_pre_succ_intv")

    @eapol_pre_succ_intv.setter
    def eapol_pre_succ_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_pre_succ_intv", value)

    @property
    @pulumi.getter(name="eapolPreSuccThresh")
    def eapol_pre_succ_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for premature EAPOL-Success flooding in specified interval.
        """
        return pulumi.get(self, "eapol_pre_succ_thresh")

    @eapol_pre_succ_thresh.setter
    def eapol_pre_succ_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_pre_succ_thresh", value)

    @property
    @pulumi.getter(name="eapolStartFlood")
    def eapol_start_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EAPOL-Start flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_start_flood")

    @eapol_start_flood.setter
    def eapol_start_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_start_flood", value)

    @property
    @pulumi.getter(name="eapolStartIntv")
    def eapol_start_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for EAPOL-Start flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_start_intv")

    @eapol_start_intv.setter
    def eapol_start_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_start_intv", value)

    @property
    @pulumi.getter(name="eapolStartThresh")
    def eapol_start_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for EAPOL-Start flooding in specified interval.
        """
        return pulumi.get(self, "eapol_start_thresh")

    @eapol_start_thresh.setter
    def eapol_start_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_start_thresh", value)

    @property
    @pulumi.getter(name="eapolSuccFlood")
    def eapol_succ_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EAPOL-Success flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_succ_flood")

    @eapol_succ_flood.setter
    def eapol_succ_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_succ_flood", value)

    @property
    @pulumi.getter(name="eapolSuccIntv")
    def eapol_succ_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for EAPOL-Success flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_succ_intv")

    @eapol_succ_intv.setter
    def eapol_succ_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_succ_intv", value)

    @property
    @pulumi.getter(name="eapolSuccThresh")
    def eapol_succ_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for EAPOL-Success flooding in specified interval.
        """
        return pulumi.get(self, "eapol_succ_thresh")

    @eapol_succ_thresh.setter
    def eapol_succ_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_succ_thresh", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="invalidMacOui")
    def invalid_mac_oui(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable invalid MAC OUI detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "invalid_mac_oui")

    @invalid_mac_oui.setter
    def invalid_mac_oui(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_mac_oui", value)

    @property
    @pulumi.getter(name="longDurationAttack")
    def long_duration_attack(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable long duration attack detection based on user configured threshold (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "long_duration_attack")

    @long_duration_attack.setter
    def long_duration_attack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_duration_attack", value)

    @property
    @pulumi.getter(name="longDurationThresh")
    def long_duration_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold value for long duration attack detection (1000 - 32767 usec, default = 8200).
        """
        return pulumi.get(self, "long_duration_thresh")

    @long_duration_thresh.setter
    def long_duration_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "long_duration_thresh", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        WIDS profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nullSsidProbeResp")
    def null_ssid_probe_resp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable null SSID probe response detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "null_ssid_probe_resp")

    @null_ssid_probe_resp.setter
    def null_ssid_probe_resp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_ssid_probe_resp", value)

    @property
    @pulumi.getter(name="sensorMode")
    def sensor_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Scan WiFi nearby stations (default = disable). Valid values: `disable`, `foreign`, `both`.
        """
        return pulumi.get(self, "sensor_mode")

    @sensor_mode.setter
    def sensor_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sensor_mode", value)

    @property
    @pulumi.getter(name="spoofedDeauth")
    def spoofed_deauth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spoofed de-authentication attack detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spoofed_deauth")

    @spoofed_deauth.setter
    def spoofed_deauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spoofed_deauth", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.

        The `ap_scan_channel_list_2g_5g` block supports:
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="weakWepIv")
    def weak_wep_iv(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable weak WEP IV (Initialization Vector) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "weak_wep_iv")

    @weak_wep_iv.setter
    def weak_wep_iv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weak_wep_iv", value)

    @property
    @pulumi.getter(name="wirelessBridge")
    def wireless_bridge(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable wireless bridge detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wireless_bridge")

    @wireless_bridge.setter
    def wireless_bridge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wireless_bridge", value)


@pulumi.input_type
class _WidsprofileState:
    def __init__(__self__, *,
                 ap_auto_suppress: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_day: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_end: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApBgscanDisableScheduleArgs']]]] = None,
                 ap_bgscan_disable_start: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_duration: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_idle: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_intv: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_period: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_report_intv: Optional[pulumi.Input[int]] = None,
                 ap_fgscan_report_intv: Optional[pulumi.Input[int]] = None,
                 ap_scan: Optional[pulumi.Input[str]] = None,
                 ap_scan_channel_list2g5gs: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList2g5gArgs']]]] = None,
                 ap_scan_channel_list6gs: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList6gArgs']]]] = None,
                 ap_scan_passive: Optional[pulumi.Input[str]] = None,
                 ap_scan_threshold: Optional[pulumi.Input[str]] = None,
                 asleap_attack: Optional[pulumi.Input[str]] = None,
                 assoc_flood_thresh: Optional[pulumi.Input[int]] = None,
                 assoc_flood_time: Optional[pulumi.Input[int]] = None,
                 assoc_frame_flood: Optional[pulumi.Input[str]] = None,
                 auth_flood_thresh: Optional[pulumi.Input[int]] = None,
                 auth_flood_time: Optional[pulumi.Input[int]] = None,
                 auth_frame_flood: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 deauth_broadcast: Optional[pulumi.Input[str]] = None,
                 deauth_unknown_src_thresh: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eapol_fail_flood: Optional[pulumi.Input[str]] = None,
                 eapol_fail_intv: Optional[pulumi.Input[int]] = None,
                 eapol_fail_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_logoff_flood: Optional[pulumi.Input[str]] = None,
                 eapol_logoff_intv: Optional[pulumi.Input[int]] = None,
                 eapol_logoff_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_pre_fail_flood: Optional[pulumi.Input[str]] = None,
                 eapol_pre_fail_intv: Optional[pulumi.Input[int]] = None,
                 eapol_pre_fail_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_pre_succ_flood: Optional[pulumi.Input[str]] = None,
                 eapol_pre_succ_intv: Optional[pulumi.Input[int]] = None,
                 eapol_pre_succ_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_start_flood: Optional[pulumi.Input[str]] = None,
                 eapol_start_intv: Optional[pulumi.Input[int]] = None,
                 eapol_start_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_succ_flood: Optional[pulumi.Input[str]] = None,
                 eapol_succ_intv: Optional[pulumi.Input[int]] = None,
                 eapol_succ_thresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 invalid_mac_oui: Optional[pulumi.Input[str]] = None,
                 long_duration_attack: Optional[pulumi.Input[str]] = None,
                 long_duration_thresh: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 null_ssid_probe_resp: Optional[pulumi.Input[str]] = None,
                 sensor_mode: Optional[pulumi.Input[str]] = None,
                 spoofed_deauth: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weak_wep_iv: Optional[pulumi.Input[str]] = None,
                 wireless_bridge: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Widsprofile resources.
        :param pulumi.Input[str] ap_auto_suppress: Enable/disable on-wire rogue AP auto-suppression (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_bgscan_disable_day: Optionally turn off scanning for one or more days of the week. Separate the days with a space. By default, no days are set. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] ap_bgscan_disable_end: End time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        :param pulumi.Input[Sequence[pulumi.Input['WidsprofileApBgscanDisableScheduleArgs']]] ap_bgscan_disable_schedules: Firewall schedules for turning off FortiAP radio background scan. Background scan will be disabled when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ap_bgscan_disable_schedules` block is documented below.
        :param pulumi.Input[str] ap_bgscan_disable_start: Start time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        :param pulumi.Input[int] ap_bgscan_duration: Listening time on a scanning channel (10 - 1000 msec, default = 20).
        :param pulumi.Input[int] ap_bgscan_idle: Waiting time for channel inactivity before scanning this channel (0 - 1000 msec, default = 0).
        :param pulumi.Input[int] ap_bgscan_intv: Period of time between scanning two channels (1 - 600 sec, default = 1).
        :param pulumi.Input[int] ap_bgscan_period: Period of time between background scans (60 - 3600 sec, default = 600).
        :param pulumi.Input[int] ap_bgscan_report_intv: Period of time between background scan reports (15 - 600 sec, default = 30).
        :param pulumi.Input[int] ap_fgscan_report_intv: Period of time between foreground scan reports (15 - 600 sec, default = 15).
        :param pulumi.Input[str] ap_scan: Enable/disable rogue AP detection. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList2g5gArgs']]] ap_scan_channel_list2g5gs: Selected ap scan channel list for 2.4G and 5G bands. The structure of `ap_scan_channel_list_2g_5g` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList6gArgs']]] ap_scan_channel_list6gs: Selected ap scan channel list for 6G band. The structure of `ap_scan_channel_list_6g` block is documented below.
        :param pulumi.Input[str] ap_scan_passive: Enable/disable passive scanning. Enable means do not send probe request on any channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_scan_threshold: Minimum signal level/threshold in dBm required for the AP to report detected rogue AP (-95 to -20, default = -90).
        :param pulumi.Input[str] asleap_attack: Enable/disable asleap attack detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] assoc_flood_thresh: The threshold value for association frame flooding.
        :param pulumi.Input[int] assoc_flood_time: Number of seconds after which a station is considered not connected.
        :param pulumi.Input[str] assoc_frame_flood: Enable/disable association frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_flood_thresh: The threshold value for authentication frame flooding.
        :param pulumi.Input[int] auth_flood_time: Number of seconds after which a station is considered not connected.
        :param pulumi.Input[str] auth_frame_flood: Enable/disable authentication frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] deauth_broadcast: Enable/disable broadcasting de-authentication detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] deauth_unknown_src_thresh: Threshold value per second to deauth unknown src for DoS attack (0: no limit).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eapol_fail_flood: Enable/disable EAPOL-Failure flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_fail_intv: The detection interval for EAPOL-Failure flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_fail_thresh: The threshold value for EAPOL-Failure flooding in specified interval.
        :param pulumi.Input[str] eapol_logoff_flood: Enable/disable EAPOL-Logoff flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_logoff_intv: The detection interval for EAPOL-Logoff flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_logoff_thresh: The threshold value for EAPOL-Logoff flooding in specified interval.
        :param pulumi.Input[str] eapol_pre_fail_flood: Enable/disable premature EAPOL-Failure flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_pre_fail_intv: The detection interval for premature EAPOL-Failure flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_pre_fail_thresh: The threshold value for premature EAPOL-Failure flooding in specified interval.
        :param pulumi.Input[str] eapol_pre_succ_flood: Enable/disable premature EAPOL-Success flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_pre_succ_intv: The detection interval for premature EAPOL-Success flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_pre_succ_thresh: The threshold value for premature EAPOL-Success flooding in specified interval.
        :param pulumi.Input[str] eapol_start_flood: Enable/disable EAPOL-Start flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_start_intv: The detection interval for EAPOL-Start flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_start_thresh: The threshold value for EAPOL-Start flooding in specified interval.
        :param pulumi.Input[str] eapol_succ_flood: Enable/disable EAPOL-Success flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_succ_intv: The detection interval for EAPOL-Success flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_succ_thresh: The threshold value for EAPOL-Success flooding in specified interval.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] invalid_mac_oui: Enable/disable invalid MAC OUI detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] long_duration_attack: Enable/disable long duration attack detection based on user configured threshold (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] long_duration_thresh: Threshold value for long duration attack detection (1000 - 32767 usec, default = 8200).
        :param pulumi.Input[str] name: WIDS profile name.
        :param pulumi.Input[str] null_ssid_probe_resp: Enable/disable null SSID probe response detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sensor_mode: Scan WiFi nearby stations (default = disable). Valid values: `disable`, `foreign`, `both`.
        :param pulumi.Input[str] spoofed_deauth: Enable/disable spoofed de-authentication attack detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
               
               The `ap_scan_channel_list_2g_5g` block supports:
        :param pulumi.Input[str] weak_wep_iv: Enable/disable weak WEP IV (Initialization Vector) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wireless_bridge: Enable/disable wireless bridge detection (default = disable). Valid values: `enable`, `disable`.
        """
        if ap_auto_suppress is not None:
            pulumi.set(__self__, "ap_auto_suppress", ap_auto_suppress)
        if ap_bgscan_disable_day is not None:
            pulumi.set(__self__, "ap_bgscan_disable_day", ap_bgscan_disable_day)
        if ap_bgscan_disable_end is not None:
            pulumi.set(__self__, "ap_bgscan_disable_end", ap_bgscan_disable_end)
        if ap_bgscan_disable_schedules is not None:
            pulumi.set(__self__, "ap_bgscan_disable_schedules", ap_bgscan_disable_schedules)
        if ap_bgscan_disable_start is not None:
            pulumi.set(__self__, "ap_bgscan_disable_start", ap_bgscan_disable_start)
        if ap_bgscan_duration is not None:
            pulumi.set(__self__, "ap_bgscan_duration", ap_bgscan_duration)
        if ap_bgscan_idle is not None:
            pulumi.set(__self__, "ap_bgscan_idle", ap_bgscan_idle)
        if ap_bgscan_intv is not None:
            pulumi.set(__self__, "ap_bgscan_intv", ap_bgscan_intv)
        if ap_bgscan_period is not None:
            pulumi.set(__self__, "ap_bgscan_period", ap_bgscan_period)
        if ap_bgscan_report_intv is not None:
            pulumi.set(__self__, "ap_bgscan_report_intv", ap_bgscan_report_intv)
        if ap_fgscan_report_intv is not None:
            pulumi.set(__self__, "ap_fgscan_report_intv", ap_fgscan_report_intv)
        if ap_scan is not None:
            pulumi.set(__self__, "ap_scan", ap_scan)
        if ap_scan_channel_list2g5gs is not None:
            pulumi.set(__self__, "ap_scan_channel_list2g5gs", ap_scan_channel_list2g5gs)
        if ap_scan_channel_list6gs is not None:
            pulumi.set(__self__, "ap_scan_channel_list6gs", ap_scan_channel_list6gs)
        if ap_scan_passive is not None:
            pulumi.set(__self__, "ap_scan_passive", ap_scan_passive)
        if ap_scan_threshold is not None:
            pulumi.set(__self__, "ap_scan_threshold", ap_scan_threshold)
        if asleap_attack is not None:
            pulumi.set(__self__, "asleap_attack", asleap_attack)
        if assoc_flood_thresh is not None:
            pulumi.set(__self__, "assoc_flood_thresh", assoc_flood_thresh)
        if assoc_flood_time is not None:
            pulumi.set(__self__, "assoc_flood_time", assoc_flood_time)
        if assoc_frame_flood is not None:
            pulumi.set(__self__, "assoc_frame_flood", assoc_frame_flood)
        if auth_flood_thresh is not None:
            pulumi.set(__self__, "auth_flood_thresh", auth_flood_thresh)
        if auth_flood_time is not None:
            pulumi.set(__self__, "auth_flood_time", auth_flood_time)
        if auth_frame_flood is not None:
            pulumi.set(__self__, "auth_frame_flood", auth_frame_flood)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if deauth_broadcast is not None:
            pulumi.set(__self__, "deauth_broadcast", deauth_broadcast)
        if deauth_unknown_src_thresh is not None:
            pulumi.set(__self__, "deauth_unknown_src_thresh", deauth_unknown_src_thresh)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if eapol_fail_flood is not None:
            pulumi.set(__self__, "eapol_fail_flood", eapol_fail_flood)
        if eapol_fail_intv is not None:
            pulumi.set(__self__, "eapol_fail_intv", eapol_fail_intv)
        if eapol_fail_thresh is not None:
            pulumi.set(__self__, "eapol_fail_thresh", eapol_fail_thresh)
        if eapol_logoff_flood is not None:
            pulumi.set(__self__, "eapol_logoff_flood", eapol_logoff_flood)
        if eapol_logoff_intv is not None:
            pulumi.set(__self__, "eapol_logoff_intv", eapol_logoff_intv)
        if eapol_logoff_thresh is not None:
            pulumi.set(__self__, "eapol_logoff_thresh", eapol_logoff_thresh)
        if eapol_pre_fail_flood is not None:
            pulumi.set(__self__, "eapol_pre_fail_flood", eapol_pre_fail_flood)
        if eapol_pre_fail_intv is not None:
            pulumi.set(__self__, "eapol_pre_fail_intv", eapol_pre_fail_intv)
        if eapol_pre_fail_thresh is not None:
            pulumi.set(__self__, "eapol_pre_fail_thresh", eapol_pre_fail_thresh)
        if eapol_pre_succ_flood is not None:
            pulumi.set(__self__, "eapol_pre_succ_flood", eapol_pre_succ_flood)
        if eapol_pre_succ_intv is not None:
            pulumi.set(__self__, "eapol_pre_succ_intv", eapol_pre_succ_intv)
        if eapol_pre_succ_thresh is not None:
            pulumi.set(__self__, "eapol_pre_succ_thresh", eapol_pre_succ_thresh)
        if eapol_start_flood is not None:
            pulumi.set(__self__, "eapol_start_flood", eapol_start_flood)
        if eapol_start_intv is not None:
            pulumi.set(__self__, "eapol_start_intv", eapol_start_intv)
        if eapol_start_thresh is not None:
            pulumi.set(__self__, "eapol_start_thresh", eapol_start_thresh)
        if eapol_succ_flood is not None:
            pulumi.set(__self__, "eapol_succ_flood", eapol_succ_flood)
        if eapol_succ_intv is not None:
            pulumi.set(__self__, "eapol_succ_intv", eapol_succ_intv)
        if eapol_succ_thresh is not None:
            pulumi.set(__self__, "eapol_succ_thresh", eapol_succ_thresh)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if invalid_mac_oui is not None:
            pulumi.set(__self__, "invalid_mac_oui", invalid_mac_oui)
        if long_duration_attack is not None:
            pulumi.set(__self__, "long_duration_attack", long_duration_attack)
        if long_duration_thresh is not None:
            pulumi.set(__self__, "long_duration_thresh", long_duration_thresh)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if null_ssid_probe_resp is not None:
            pulumi.set(__self__, "null_ssid_probe_resp", null_ssid_probe_resp)
        if sensor_mode is not None:
            pulumi.set(__self__, "sensor_mode", sensor_mode)
        if spoofed_deauth is not None:
            pulumi.set(__self__, "spoofed_deauth", spoofed_deauth)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weak_wep_iv is not None:
            pulumi.set(__self__, "weak_wep_iv", weak_wep_iv)
        if wireless_bridge is not None:
            pulumi.set(__self__, "wireless_bridge", wireless_bridge)

    @property
    @pulumi.getter(name="apAutoSuppress")
    def ap_auto_suppress(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable on-wire rogue AP auto-suppression (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_auto_suppress")

    @ap_auto_suppress.setter
    def ap_auto_suppress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_auto_suppress", value)

    @property
    @pulumi.getter(name="apBgscanDisableDay")
    def ap_bgscan_disable_day(self) -> Optional[pulumi.Input[str]]:
        """
        Optionally turn off scanning for one or more days of the week. Separate the days with a space. By default, no days are set. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "ap_bgscan_disable_day")

    @ap_bgscan_disable_day.setter
    def ap_bgscan_disable_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_bgscan_disable_day", value)

    @property
    @pulumi.getter(name="apBgscanDisableEnd")
    def ap_bgscan_disable_end(self) -> Optional[pulumi.Input[str]]:
        """
        End time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        """
        return pulumi.get(self, "ap_bgscan_disable_end")

    @ap_bgscan_disable_end.setter
    def ap_bgscan_disable_end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_bgscan_disable_end", value)

    @property
    @pulumi.getter(name="apBgscanDisableSchedules")
    def ap_bgscan_disable_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApBgscanDisableScheduleArgs']]]]:
        """
        Firewall schedules for turning off FortiAP radio background scan. Background scan will be disabled when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ap_bgscan_disable_schedules` block is documented below.
        """
        return pulumi.get(self, "ap_bgscan_disable_schedules")

    @ap_bgscan_disable_schedules.setter
    def ap_bgscan_disable_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApBgscanDisableScheduleArgs']]]]):
        pulumi.set(self, "ap_bgscan_disable_schedules", value)

    @property
    @pulumi.getter(name="apBgscanDisableStart")
    def ap_bgscan_disable_start(self) -> Optional[pulumi.Input[str]]:
        """
        Start time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        """
        return pulumi.get(self, "ap_bgscan_disable_start")

    @ap_bgscan_disable_start.setter
    def ap_bgscan_disable_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_bgscan_disable_start", value)

    @property
    @pulumi.getter(name="apBgscanDuration")
    def ap_bgscan_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Listening time on a scanning channel (10 - 1000 msec, default = 20).
        """
        return pulumi.get(self, "ap_bgscan_duration")

    @ap_bgscan_duration.setter
    def ap_bgscan_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_bgscan_duration", value)

    @property
    @pulumi.getter(name="apBgscanIdle")
    def ap_bgscan_idle(self) -> Optional[pulumi.Input[int]]:
        """
        Waiting time for channel inactivity before scanning this channel (0 - 1000 msec, default = 0).
        """
        return pulumi.get(self, "ap_bgscan_idle")

    @ap_bgscan_idle.setter
    def ap_bgscan_idle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_bgscan_idle", value)

    @property
    @pulumi.getter(name="apBgscanIntv")
    def ap_bgscan_intv(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between scanning two channels (1 - 600 sec, default = 1).
        """
        return pulumi.get(self, "ap_bgscan_intv")

    @ap_bgscan_intv.setter
    def ap_bgscan_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_bgscan_intv", value)

    @property
    @pulumi.getter(name="apBgscanPeriod")
    def ap_bgscan_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between background scans (60 - 3600 sec, default = 600).
        """
        return pulumi.get(self, "ap_bgscan_period")

    @ap_bgscan_period.setter
    def ap_bgscan_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_bgscan_period", value)

    @property
    @pulumi.getter(name="apBgscanReportIntv")
    def ap_bgscan_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between background scan reports (15 - 600 sec, default = 30).
        """
        return pulumi.get(self, "ap_bgscan_report_intv")

    @ap_bgscan_report_intv.setter
    def ap_bgscan_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_bgscan_report_intv", value)

    @property
    @pulumi.getter(name="apFgscanReportIntv")
    def ap_fgscan_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between foreground scan reports (15 - 600 sec, default = 15).
        """
        return pulumi.get(self, "ap_fgscan_report_intv")

    @ap_fgscan_report_intv.setter
    def ap_fgscan_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_fgscan_report_intv", value)

    @property
    @pulumi.getter(name="apScan")
    def ap_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable rogue AP detection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ap_scan")

    @ap_scan.setter
    def ap_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_scan", value)

    @property
    @pulumi.getter(name="apScanChannelList2g5gs")
    def ap_scan_channel_list2g5gs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList2g5gArgs']]]]:
        """
        Selected ap scan channel list for 2.4G and 5G bands. The structure of `ap_scan_channel_list_2g_5g` block is documented below.
        """
        return pulumi.get(self, "ap_scan_channel_list2g5gs")

    @ap_scan_channel_list2g5gs.setter
    def ap_scan_channel_list2g5gs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList2g5gArgs']]]]):
        pulumi.set(self, "ap_scan_channel_list2g5gs", value)

    @property
    @pulumi.getter(name="apScanChannelList6gs")
    def ap_scan_channel_list6gs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList6gArgs']]]]:
        """
        Selected ap scan channel list for 6G band. The structure of `ap_scan_channel_list_6g` block is documented below.
        """
        return pulumi.get(self, "ap_scan_channel_list6gs")

    @ap_scan_channel_list6gs.setter
    def ap_scan_channel_list6gs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WidsprofileApScanChannelList6gArgs']]]]):
        pulumi.set(self, "ap_scan_channel_list6gs", value)

    @property
    @pulumi.getter(name="apScanPassive")
    def ap_scan_passive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passive scanning. Enable means do not send probe request on any channels (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_scan_passive")

    @ap_scan_passive.setter
    def ap_scan_passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_scan_passive", value)

    @property
    @pulumi.getter(name="apScanThreshold")
    def ap_scan_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum signal level/threshold in dBm required for the AP to report detected rogue AP (-95 to -20, default = -90).
        """
        return pulumi.get(self, "ap_scan_threshold")

    @ap_scan_threshold.setter
    def ap_scan_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_scan_threshold", value)

    @property
    @pulumi.getter(name="asleapAttack")
    def asleap_attack(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable asleap attack detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asleap_attack")

    @asleap_attack.setter
    def asleap_attack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asleap_attack", value)

    @property
    @pulumi.getter(name="assocFloodThresh")
    def assoc_flood_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for association frame flooding.
        """
        return pulumi.get(self, "assoc_flood_thresh")

    @assoc_flood_thresh.setter
    def assoc_flood_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assoc_flood_thresh", value)

    @property
    @pulumi.getter(name="assocFloodTime")
    def assoc_flood_time(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which a station is considered not connected.
        """
        return pulumi.get(self, "assoc_flood_time")

    @assoc_flood_time.setter
    def assoc_flood_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assoc_flood_time", value)

    @property
    @pulumi.getter(name="assocFrameFlood")
    def assoc_frame_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable association frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "assoc_frame_flood")

    @assoc_frame_flood.setter
    def assoc_frame_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assoc_frame_flood", value)

    @property
    @pulumi.getter(name="authFloodThresh")
    def auth_flood_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for authentication frame flooding.
        """
        return pulumi.get(self, "auth_flood_thresh")

    @auth_flood_thresh.setter
    def auth_flood_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_flood_thresh", value)

    @property
    @pulumi.getter(name="authFloodTime")
    def auth_flood_time(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which a station is considered not connected.
        """
        return pulumi.get(self, "auth_flood_time")

    @auth_flood_time.setter
    def auth_flood_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_flood_time", value)

    @property
    @pulumi.getter(name="authFrameFlood")
    def auth_frame_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_frame_flood")

    @auth_frame_flood.setter
    def auth_frame_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_frame_flood", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="deauthBroadcast")
    def deauth_broadcast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable broadcasting de-authentication detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "deauth_broadcast")

    @deauth_broadcast.setter
    def deauth_broadcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deauth_broadcast", value)

    @property
    @pulumi.getter(name="deauthUnknownSrcThresh")
    def deauth_unknown_src_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold value per second to deauth unknown src for DoS attack (0: no limit).
        """
        return pulumi.get(self, "deauth_unknown_src_thresh")

    @deauth_unknown_src_thresh.setter
    def deauth_unknown_src_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deauth_unknown_src_thresh", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="eapolFailFlood")
    def eapol_fail_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EAPOL-Failure flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_fail_flood")

    @eapol_fail_flood.setter
    def eapol_fail_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_fail_flood", value)

    @property
    @pulumi.getter(name="eapolFailIntv")
    def eapol_fail_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for EAPOL-Failure flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_fail_intv")

    @eapol_fail_intv.setter
    def eapol_fail_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_fail_intv", value)

    @property
    @pulumi.getter(name="eapolFailThresh")
    def eapol_fail_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for EAPOL-Failure flooding in specified interval.
        """
        return pulumi.get(self, "eapol_fail_thresh")

    @eapol_fail_thresh.setter
    def eapol_fail_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_fail_thresh", value)

    @property
    @pulumi.getter(name="eapolLogoffFlood")
    def eapol_logoff_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EAPOL-Logoff flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_logoff_flood")

    @eapol_logoff_flood.setter
    def eapol_logoff_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_logoff_flood", value)

    @property
    @pulumi.getter(name="eapolLogoffIntv")
    def eapol_logoff_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for EAPOL-Logoff flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_logoff_intv")

    @eapol_logoff_intv.setter
    def eapol_logoff_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_logoff_intv", value)

    @property
    @pulumi.getter(name="eapolLogoffThresh")
    def eapol_logoff_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for EAPOL-Logoff flooding in specified interval.
        """
        return pulumi.get(self, "eapol_logoff_thresh")

    @eapol_logoff_thresh.setter
    def eapol_logoff_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_logoff_thresh", value)

    @property
    @pulumi.getter(name="eapolPreFailFlood")
    def eapol_pre_fail_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable premature EAPOL-Failure flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_pre_fail_flood")

    @eapol_pre_fail_flood.setter
    def eapol_pre_fail_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_pre_fail_flood", value)

    @property
    @pulumi.getter(name="eapolPreFailIntv")
    def eapol_pre_fail_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for premature EAPOL-Failure flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_pre_fail_intv")

    @eapol_pre_fail_intv.setter
    def eapol_pre_fail_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_pre_fail_intv", value)

    @property
    @pulumi.getter(name="eapolPreFailThresh")
    def eapol_pre_fail_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for premature EAPOL-Failure flooding in specified interval.
        """
        return pulumi.get(self, "eapol_pre_fail_thresh")

    @eapol_pre_fail_thresh.setter
    def eapol_pre_fail_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_pre_fail_thresh", value)

    @property
    @pulumi.getter(name="eapolPreSuccFlood")
    def eapol_pre_succ_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable premature EAPOL-Success flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_pre_succ_flood")

    @eapol_pre_succ_flood.setter
    def eapol_pre_succ_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_pre_succ_flood", value)

    @property
    @pulumi.getter(name="eapolPreSuccIntv")
    def eapol_pre_succ_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for premature EAPOL-Success flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_pre_succ_intv")

    @eapol_pre_succ_intv.setter
    def eapol_pre_succ_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_pre_succ_intv", value)

    @property
    @pulumi.getter(name="eapolPreSuccThresh")
    def eapol_pre_succ_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for premature EAPOL-Success flooding in specified interval.
        """
        return pulumi.get(self, "eapol_pre_succ_thresh")

    @eapol_pre_succ_thresh.setter
    def eapol_pre_succ_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_pre_succ_thresh", value)

    @property
    @pulumi.getter(name="eapolStartFlood")
    def eapol_start_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EAPOL-Start flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_start_flood")

    @eapol_start_flood.setter
    def eapol_start_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_start_flood", value)

    @property
    @pulumi.getter(name="eapolStartIntv")
    def eapol_start_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for EAPOL-Start flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_start_intv")

    @eapol_start_intv.setter
    def eapol_start_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_start_intv", value)

    @property
    @pulumi.getter(name="eapolStartThresh")
    def eapol_start_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for EAPOL-Start flooding in specified interval.
        """
        return pulumi.get(self, "eapol_start_thresh")

    @eapol_start_thresh.setter
    def eapol_start_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_start_thresh", value)

    @property
    @pulumi.getter(name="eapolSuccFlood")
    def eapol_succ_flood(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EAPOL-Success flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_succ_flood")

    @eapol_succ_flood.setter
    def eapol_succ_flood(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_succ_flood", value)

    @property
    @pulumi.getter(name="eapolSuccIntv")
    def eapol_succ_intv(self) -> Optional[pulumi.Input[int]]:
        """
        The detection interval for EAPOL-Success flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_succ_intv")

    @eapol_succ_intv.setter
    def eapol_succ_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_succ_intv", value)

    @property
    @pulumi.getter(name="eapolSuccThresh")
    def eapol_succ_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold value for EAPOL-Success flooding in specified interval.
        """
        return pulumi.get(self, "eapol_succ_thresh")

    @eapol_succ_thresh.setter
    def eapol_succ_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eapol_succ_thresh", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="invalidMacOui")
    def invalid_mac_oui(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable invalid MAC OUI detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "invalid_mac_oui")

    @invalid_mac_oui.setter
    def invalid_mac_oui(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_mac_oui", value)

    @property
    @pulumi.getter(name="longDurationAttack")
    def long_duration_attack(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable long duration attack detection based on user configured threshold (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "long_duration_attack")

    @long_duration_attack.setter
    def long_duration_attack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_duration_attack", value)

    @property
    @pulumi.getter(name="longDurationThresh")
    def long_duration_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold value for long duration attack detection (1000 - 32767 usec, default = 8200).
        """
        return pulumi.get(self, "long_duration_thresh")

    @long_duration_thresh.setter
    def long_duration_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "long_duration_thresh", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        WIDS profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nullSsidProbeResp")
    def null_ssid_probe_resp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable null SSID probe response detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "null_ssid_probe_resp")

    @null_ssid_probe_resp.setter
    def null_ssid_probe_resp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_ssid_probe_resp", value)

    @property
    @pulumi.getter(name="sensorMode")
    def sensor_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Scan WiFi nearby stations (default = disable). Valid values: `disable`, `foreign`, `both`.
        """
        return pulumi.get(self, "sensor_mode")

    @sensor_mode.setter
    def sensor_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sensor_mode", value)

    @property
    @pulumi.getter(name="spoofedDeauth")
    def spoofed_deauth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spoofed de-authentication attack detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spoofed_deauth")

    @spoofed_deauth.setter
    def spoofed_deauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spoofed_deauth", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.

        The `ap_scan_channel_list_2g_5g` block supports:
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="weakWepIv")
    def weak_wep_iv(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable weak WEP IV (Initialization Vector) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "weak_wep_iv")

    @weak_wep_iv.setter
    def weak_wep_iv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weak_wep_iv", value)

    @property
    @pulumi.getter(name="wirelessBridge")
    def wireless_bridge(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable wireless bridge detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wireless_bridge")

    @wireless_bridge.setter
    def wireless_bridge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wireless_bridge", value)


class Widsprofile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ap_auto_suppress: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_day: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_end: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApBgscanDisableScheduleArgs']]]]] = None,
                 ap_bgscan_disable_start: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_duration: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_idle: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_intv: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_period: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_report_intv: Optional[pulumi.Input[int]] = None,
                 ap_fgscan_report_intv: Optional[pulumi.Input[int]] = None,
                 ap_scan: Optional[pulumi.Input[str]] = None,
                 ap_scan_channel_list2g5gs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApScanChannelList2g5gArgs']]]]] = None,
                 ap_scan_channel_list6gs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApScanChannelList6gArgs']]]]] = None,
                 ap_scan_passive: Optional[pulumi.Input[str]] = None,
                 ap_scan_threshold: Optional[pulumi.Input[str]] = None,
                 asleap_attack: Optional[pulumi.Input[str]] = None,
                 assoc_flood_thresh: Optional[pulumi.Input[int]] = None,
                 assoc_flood_time: Optional[pulumi.Input[int]] = None,
                 assoc_frame_flood: Optional[pulumi.Input[str]] = None,
                 auth_flood_thresh: Optional[pulumi.Input[int]] = None,
                 auth_flood_time: Optional[pulumi.Input[int]] = None,
                 auth_frame_flood: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 deauth_broadcast: Optional[pulumi.Input[str]] = None,
                 deauth_unknown_src_thresh: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eapol_fail_flood: Optional[pulumi.Input[str]] = None,
                 eapol_fail_intv: Optional[pulumi.Input[int]] = None,
                 eapol_fail_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_logoff_flood: Optional[pulumi.Input[str]] = None,
                 eapol_logoff_intv: Optional[pulumi.Input[int]] = None,
                 eapol_logoff_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_pre_fail_flood: Optional[pulumi.Input[str]] = None,
                 eapol_pre_fail_intv: Optional[pulumi.Input[int]] = None,
                 eapol_pre_fail_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_pre_succ_flood: Optional[pulumi.Input[str]] = None,
                 eapol_pre_succ_intv: Optional[pulumi.Input[int]] = None,
                 eapol_pre_succ_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_start_flood: Optional[pulumi.Input[str]] = None,
                 eapol_start_intv: Optional[pulumi.Input[int]] = None,
                 eapol_start_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_succ_flood: Optional[pulumi.Input[str]] = None,
                 eapol_succ_intv: Optional[pulumi.Input[int]] = None,
                 eapol_succ_thresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 invalid_mac_oui: Optional[pulumi.Input[str]] = None,
                 long_duration_attack: Optional[pulumi.Input[str]] = None,
                 long_duration_thresh: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 null_ssid_probe_resp: Optional[pulumi.Input[str]] = None,
                 sensor_mode: Optional[pulumi.Input[str]] = None,
                 spoofed_deauth: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weak_wep_iv: Optional[pulumi.Input[str]] = None,
                 wireless_bridge: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure wireless intrusion detection system (WIDS) profiles.

        ## Import

        WirelessController WidsProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/widsprofile:Widsprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/widsprofile:Widsprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ap_auto_suppress: Enable/disable on-wire rogue AP auto-suppression (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_bgscan_disable_day: Optionally turn off scanning for one or more days of the week. Separate the days with a space. By default, no days are set. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] ap_bgscan_disable_end: End time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApBgscanDisableScheduleArgs']]]] ap_bgscan_disable_schedules: Firewall schedules for turning off FortiAP radio background scan. Background scan will be disabled when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ap_bgscan_disable_schedules` block is documented below.
        :param pulumi.Input[str] ap_bgscan_disable_start: Start time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        :param pulumi.Input[int] ap_bgscan_duration: Listening time on a scanning channel (10 - 1000 msec, default = 20).
        :param pulumi.Input[int] ap_bgscan_idle: Waiting time for channel inactivity before scanning this channel (0 - 1000 msec, default = 0).
        :param pulumi.Input[int] ap_bgscan_intv: Period of time between scanning two channels (1 - 600 sec, default = 1).
        :param pulumi.Input[int] ap_bgscan_period: Period of time between background scans (60 - 3600 sec, default = 600).
        :param pulumi.Input[int] ap_bgscan_report_intv: Period of time between background scan reports (15 - 600 sec, default = 30).
        :param pulumi.Input[int] ap_fgscan_report_intv: Period of time between foreground scan reports (15 - 600 sec, default = 15).
        :param pulumi.Input[str] ap_scan: Enable/disable rogue AP detection. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApScanChannelList2g5gArgs']]]] ap_scan_channel_list2g5gs: Selected ap scan channel list for 2.4G and 5G bands. The structure of `ap_scan_channel_list_2g_5g` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApScanChannelList6gArgs']]]] ap_scan_channel_list6gs: Selected ap scan channel list for 6G band. The structure of `ap_scan_channel_list_6g` block is documented below.
        :param pulumi.Input[str] ap_scan_passive: Enable/disable passive scanning. Enable means do not send probe request on any channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_scan_threshold: Minimum signal level/threshold in dBm required for the AP to report detected rogue AP (-95 to -20, default = -90).
        :param pulumi.Input[str] asleap_attack: Enable/disable asleap attack detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] assoc_flood_thresh: The threshold value for association frame flooding.
        :param pulumi.Input[int] assoc_flood_time: Number of seconds after which a station is considered not connected.
        :param pulumi.Input[str] assoc_frame_flood: Enable/disable association frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_flood_thresh: The threshold value for authentication frame flooding.
        :param pulumi.Input[int] auth_flood_time: Number of seconds after which a station is considered not connected.
        :param pulumi.Input[str] auth_frame_flood: Enable/disable authentication frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] deauth_broadcast: Enable/disable broadcasting de-authentication detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] deauth_unknown_src_thresh: Threshold value per second to deauth unknown src for DoS attack (0: no limit).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eapol_fail_flood: Enable/disable EAPOL-Failure flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_fail_intv: The detection interval for EAPOL-Failure flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_fail_thresh: The threshold value for EAPOL-Failure flooding in specified interval.
        :param pulumi.Input[str] eapol_logoff_flood: Enable/disable EAPOL-Logoff flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_logoff_intv: The detection interval for EAPOL-Logoff flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_logoff_thresh: The threshold value for EAPOL-Logoff flooding in specified interval.
        :param pulumi.Input[str] eapol_pre_fail_flood: Enable/disable premature EAPOL-Failure flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_pre_fail_intv: The detection interval for premature EAPOL-Failure flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_pre_fail_thresh: The threshold value for premature EAPOL-Failure flooding in specified interval.
        :param pulumi.Input[str] eapol_pre_succ_flood: Enable/disable premature EAPOL-Success flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_pre_succ_intv: The detection interval for premature EAPOL-Success flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_pre_succ_thresh: The threshold value for premature EAPOL-Success flooding in specified interval.
        :param pulumi.Input[str] eapol_start_flood: Enable/disable EAPOL-Start flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_start_intv: The detection interval for EAPOL-Start flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_start_thresh: The threshold value for EAPOL-Start flooding in specified interval.
        :param pulumi.Input[str] eapol_succ_flood: Enable/disable EAPOL-Success flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_succ_intv: The detection interval for EAPOL-Success flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_succ_thresh: The threshold value for EAPOL-Success flooding in specified interval.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] invalid_mac_oui: Enable/disable invalid MAC OUI detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] long_duration_attack: Enable/disable long duration attack detection based on user configured threshold (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] long_duration_thresh: Threshold value for long duration attack detection (1000 - 32767 usec, default = 8200).
        :param pulumi.Input[str] name: WIDS profile name.
        :param pulumi.Input[str] null_ssid_probe_resp: Enable/disable null SSID probe response detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sensor_mode: Scan WiFi nearby stations (default = disable). Valid values: `disable`, `foreign`, `both`.
        :param pulumi.Input[str] spoofed_deauth: Enable/disable spoofed de-authentication attack detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
               
               The `ap_scan_channel_list_2g_5g` block supports:
        :param pulumi.Input[str] weak_wep_iv: Enable/disable weak WEP IV (Initialization Vector) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wireless_bridge: Enable/disable wireless bridge detection (default = disable). Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WidsprofileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure wireless intrusion detection system (WIDS) profiles.

        ## Import

        WirelessController WidsProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/widsprofile:Widsprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/widsprofile:Widsprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param WidsprofileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WidsprofileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ap_auto_suppress: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_day: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_end: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_disable_schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApBgscanDisableScheduleArgs']]]]] = None,
                 ap_bgscan_disable_start: Optional[pulumi.Input[str]] = None,
                 ap_bgscan_duration: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_idle: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_intv: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_period: Optional[pulumi.Input[int]] = None,
                 ap_bgscan_report_intv: Optional[pulumi.Input[int]] = None,
                 ap_fgscan_report_intv: Optional[pulumi.Input[int]] = None,
                 ap_scan: Optional[pulumi.Input[str]] = None,
                 ap_scan_channel_list2g5gs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApScanChannelList2g5gArgs']]]]] = None,
                 ap_scan_channel_list6gs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApScanChannelList6gArgs']]]]] = None,
                 ap_scan_passive: Optional[pulumi.Input[str]] = None,
                 ap_scan_threshold: Optional[pulumi.Input[str]] = None,
                 asleap_attack: Optional[pulumi.Input[str]] = None,
                 assoc_flood_thresh: Optional[pulumi.Input[int]] = None,
                 assoc_flood_time: Optional[pulumi.Input[int]] = None,
                 assoc_frame_flood: Optional[pulumi.Input[str]] = None,
                 auth_flood_thresh: Optional[pulumi.Input[int]] = None,
                 auth_flood_time: Optional[pulumi.Input[int]] = None,
                 auth_frame_flood: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 deauth_broadcast: Optional[pulumi.Input[str]] = None,
                 deauth_unknown_src_thresh: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eapol_fail_flood: Optional[pulumi.Input[str]] = None,
                 eapol_fail_intv: Optional[pulumi.Input[int]] = None,
                 eapol_fail_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_logoff_flood: Optional[pulumi.Input[str]] = None,
                 eapol_logoff_intv: Optional[pulumi.Input[int]] = None,
                 eapol_logoff_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_pre_fail_flood: Optional[pulumi.Input[str]] = None,
                 eapol_pre_fail_intv: Optional[pulumi.Input[int]] = None,
                 eapol_pre_fail_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_pre_succ_flood: Optional[pulumi.Input[str]] = None,
                 eapol_pre_succ_intv: Optional[pulumi.Input[int]] = None,
                 eapol_pre_succ_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_start_flood: Optional[pulumi.Input[str]] = None,
                 eapol_start_intv: Optional[pulumi.Input[int]] = None,
                 eapol_start_thresh: Optional[pulumi.Input[int]] = None,
                 eapol_succ_flood: Optional[pulumi.Input[str]] = None,
                 eapol_succ_intv: Optional[pulumi.Input[int]] = None,
                 eapol_succ_thresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 invalid_mac_oui: Optional[pulumi.Input[str]] = None,
                 long_duration_attack: Optional[pulumi.Input[str]] = None,
                 long_duration_thresh: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 null_ssid_probe_resp: Optional[pulumi.Input[str]] = None,
                 sensor_mode: Optional[pulumi.Input[str]] = None,
                 spoofed_deauth: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weak_wep_iv: Optional[pulumi.Input[str]] = None,
                 wireless_bridge: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WidsprofileArgs.__new__(WidsprofileArgs)

            __props__.__dict__["ap_auto_suppress"] = ap_auto_suppress
            __props__.__dict__["ap_bgscan_disable_day"] = ap_bgscan_disable_day
            __props__.__dict__["ap_bgscan_disable_end"] = ap_bgscan_disable_end
            __props__.__dict__["ap_bgscan_disable_schedules"] = ap_bgscan_disable_schedules
            __props__.__dict__["ap_bgscan_disable_start"] = ap_bgscan_disable_start
            __props__.__dict__["ap_bgscan_duration"] = ap_bgscan_duration
            __props__.__dict__["ap_bgscan_idle"] = ap_bgscan_idle
            __props__.__dict__["ap_bgscan_intv"] = ap_bgscan_intv
            __props__.__dict__["ap_bgscan_period"] = ap_bgscan_period
            __props__.__dict__["ap_bgscan_report_intv"] = ap_bgscan_report_intv
            __props__.__dict__["ap_fgscan_report_intv"] = ap_fgscan_report_intv
            __props__.__dict__["ap_scan"] = ap_scan
            __props__.__dict__["ap_scan_channel_list2g5gs"] = ap_scan_channel_list2g5gs
            __props__.__dict__["ap_scan_channel_list6gs"] = ap_scan_channel_list6gs
            __props__.__dict__["ap_scan_passive"] = ap_scan_passive
            __props__.__dict__["ap_scan_threshold"] = ap_scan_threshold
            __props__.__dict__["asleap_attack"] = asleap_attack
            __props__.__dict__["assoc_flood_thresh"] = assoc_flood_thresh
            __props__.__dict__["assoc_flood_time"] = assoc_flood_time
            __props__.__dict__["assoc_frame_flood"] = assoc_frame_flood
            __props__.__dict__["auth_flood_thresh"] = auth_flood_thresh
            __props__.__dict__["auth_flood_time"] = auth_flood_time
            __props__.__dict__["auth_frame_flood"] = auth_frame_flood
            __props__.__dict__["comment"] = comment
            __props__.__dict__["deauth_broadcast"] = deauth_broadcast
            __props__.__dict__["deauth_unknown_src_thresh"] = deauth_unknown_src_thresh
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["eapol_fail_flood"] = eapol_fail_flood
            __props__.__dict__["eapol_fail_intv"] = eapol_fail_intv
            __props__.__dict__["eapol_fail_thresh"] = eapol_fail_thresh
            __props__.__dict__["eapol_logoff_flood"] = eapol_logoff_flood
            __props__.__dict__["eapol_logoff_intv"] = eapol_logoff_intv
            __props__.__dict__["eapol_logoff_thresh"] = eapol_logoff_thresh
            __props__.__dict__["eapol_pre_fail_flood"] = eapol_pre_fail_flood
            __props__.__dict__["eapol_pre_fail_intv"] = eapol_pre_fail_intv
            __props__.__dict__["eapol_pre_fail_thresh"] = eapol_pre_fail_thresh
            __props__.__dict__["eapol_pre_succ_flood"] = eapol_pre_succ_flood
            __props__.__dict__["eapol_pre_succ_intv"] = eapol_pre_succ_intv
            __props__.__dict__["eapol_pre_succ_thresh"] = eapol_pre_succ_thresh
            __props__.__dict__["eapol_start_flood"] = eapol_start_flood
            __props__.__dict__["eapol_start_intv"] = eapol_start_intv
            __props__.__dict__["eapol_start_thresh"] = eapol_start_thresh
            __props__.__dict__["eapol_succ_flood"] = eapol_succ_flood
            __props__.__dict__["eapol_succ_intv"] = eapol_succ_intv
            __props__.__dict__["eapol_succ_thresh"] = eapol_succ_thresh
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["invalid_mac_oui"] = invalid_mac_oui
            __props__.__dict__["long_duration_attack"] = long_duration_attack
            __props__.__dict__["long_duration_thresh"] = long_duration_thresh
            __props__.__dict__["name"] = name
            __props__.__dict__["null_ssid_probe_resp"] = null_ssid_probe_resp
            __props__.__dict__["sensor_mode"] = sensor_mode
            __props__.__dict__["spoofed_deauth"] = spoofed_deauth
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["weak_wep_iv"] = weak_wep_iv
            __props__.__dict__["wireless_bridge"] = wireless_bridge
        super(Widsprofile, __self__).__init__(
            'fortios:wirelesscontroller/widsprofile:Widsprofile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ap_auto_suppress: Optional[pulumi.Input[str]] = None,
            ap_bgscan_disable_day: Optional[pulumi.Input[str]] = None,
            ap_bgscan_disable_end: Optional[pulumi.Input[str]] = None,
            ap_bgscan_disable_schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApBgscanDisableScheduleArgs']]]]] = None,
            ap_bgscan_disable_start: Optional[pulumi.Input[str]] = None,
            ap_bgscan_duration: Optional[pulumi.Input[int]] = None,
            ap_bgscan_idle: Optional[pulumi.Input[int]] = None,
            ap_bgscan_intv: Optional[pulumi.Input[int]] = None,
            ap_bgscan_period: Optional[pulumi.Input[int]] = None,
            ap_bgscan_report_intv: Optional[pulumi.Input[int]] = None,
            ap_fgscan_report_intv: Optional[pulumi.Input[int]] = None,
            ap_scan: Optional[pulumi.Input[str]] = None,
            ap_scan_channel_list2g5gs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApScanChannelList2g5gArgs']]]]] = None,
            ap_scan_channel_list6gs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApScanChannelList6gArgs']]]]] = None,
            ap_scan_passive: Optional[pulumi.Input[str]] = None,
            ap_scan_threshold: Optional[pulumi.Input[str]] = None,
            asleap_attack: Optional[pulumi.Input[str]] = None,
            assoc_flood_thresh: Optional[pulumi.Input[int]] = None,
            assoc_flood_time: Optional[pulumi.Input[int]] = None,
            assoc_frame_flood: Optional[pulumi.Input[str]] = None,
            auth_flood_thresh: Optional[pulumi.Input[int]] = None,
            auth_flood_time: Optional[pulumi.Input[int]] = None,
            auth_frame_flood: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            deauth_broadcast: Optional[pulumi.Input[str]] = None,
            deauth_unknown_src_thresh: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            eapol_fail_flood: Optional[pulumi.Input[str]] = None,
            eapol_fail_intv: Optional[pulumi.Input[int]] = None,
            eapol_fail_thresh: Optional[pulumi.Input[int]] = None,
            eapol_logoff_flood: Optional[pulumi.Input[str]] = None,
            eapol_logoff_intv: Optional[pulumi.Input[int]] = None,
            eapol_logoff_thresh: Optional[pulumi.Input[int]] = None,
            eapol_pre_fail_flood: Optional[pulumi.Input[str]] = None,
            eapol_pre_fail_intv: Optional[pulumi.Input[int]] = None,
            eapol_pre_fail_thresh: Optional[pulumi.Input[int]] = None,
            eapol_pre_succ_flood: Optional[pulumi.Input[str]] = None,
            eapol_pre_succ_intv: Optional[pulumi.Input[int]] = None,
            eapol_pre_succ_thresh: Optional[pulumi.Input[int]] = None,
            eapol_start_flood: Optional[pulumi.Input[str]] = None,
            eapol_start_intv: Optional[pulumi.Input[int]] = None,
            eapol_start_thresh: Optional[pulumi.Input[int]] = None,
            eapol_succ_flood: Optional[pulumi.Input[str]] = None,
            eapol_succ_intv: Optional[pulumi.Input[int]] = None,
            eapol_succ_thresh: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            invalid_mac_oui: Optional[pulumi.Input[str]] = None,
            long_duration_attack: Optional[pulumi.Input[str]] = None,
            long_duration_thresh: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            null_ssid_probe_resp: Optional[pulumi.Input[str]] = None,
            sensor_mode: Optional[pulumi.Input[str]] = None,
            spoofed_deauth: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            weak_wep_iv: Optional[pulumi.Input[str]] = None,
            wireless_bridge: Optional[pulumi.Input[str]] = None) -> 'Widsprofile':
        """
        Get an existing Widsprofile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ap_auto_suppress: Enable/disable on-wire rogue AP auto-suppression (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_bgscan_disable_day: Optionally turn off scanning for one or more days of the week. Separate the days with a space. By default, no days are set. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] ap_bgscan_disable_end: End time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApBgscanDisableScheduleArgs']]]] ap_bgscan_disable_schedules: Firewall schedules for turning off FortiAP radio background scan. Background scan will be disabled when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ap_bgscan_disable_schedules` block is documented below.
        :param pulumi.Input[str] ap_bgscan_disable_start: Start time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        :param pulumi.Input[int] ap_bgscan_duration: Listening time on a scanning channel (10 - 1000 msec, default = 20).
        :param pulumi.Input[int] ap_bgscan_idle: Waiting time for channel inactivity before scanning this channel (0 - 1000 msec, default = 0).
        :param pulumi.Input[int] ap_bgscan_intv: Period of time between scanning two channels (1 - 600 sec, default = 1).
        :param pulumi.Input[int] ap_bgscan_period: Period of time between background scans (60 - 3600 sec, default = 600).
        :param pulumi.Input[int] ap_bgscan_report_intv: Period of time between background scan reports (15 - 600 sec, default = 30).
        :param pulumi.Input[int] ap_fgscan_report_intv: Period of time between foreground scan reports (15 - 600 sec, default = 15).
        :param pulumi.Input[str] ap_scan: Enable/disable rogue AP detection. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApScanChannelList2g5gArgs']]]] ap_scan_channel_list2g5gs: Selected ap scan channel list for 2.4G and 5G bands. The structure of `ap_scan_channel_list_2g_5g` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WidsprofileApScanChannelList6gArgs']]]] ap_scan_channel_list6gs: Selected ap scan channel list for 6G band. The structure of `ap_scan_channel_list_6g` block is documented below.
        :param pulumi.Input[str] ap_scan_passive: Enable/disable passive scanning. Enable means do not send probe request on any channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_scan_threshold: Minimum signal level/threshold in dBm required for the AP to report detected rogue AP (-95 to -20, default = -90).
        :param pulumi.Input[str] asleap_attack: Enable/disable asleap attack detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] assoc_flood_thresh: The threshold value for association frame flooding.
        :param pulumi.Input[int] assoc_flood_time: Number of seconds after which a station is considered not connected.
        :param pulumi.Input[str] assoc_frame_flood: Enable/disable association frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_flood_thresh: The threshold value for authentication frame flooding.
        :param pulumi.Input[int] auth_flood_time: Number of seconds after which a station is considered not connected.
        :param pulumi.Input[str] auth_frame_flood: Enable/disable authentication frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] deauth_broadcast: Enable/disable broadcasting de-authentication detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] deauth_unknown_src_thresh: Threshold value per second to deauth unknown src for DoS attack (0: no limit).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eapol_fail_flood: Enable/disable EAPOL-Failure flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_fail_intv: The detection interval for EAPOL-Failure flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_fail_thresh: The threshold value for EAPOL-Failure flooding in specified interval.
        :param pulumi.Input[str] eapol_logoff_flood: Enable/disable EAPOL-Logoff flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_logoff_intv: The detection interval for EAPOL-Logoff flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_logoff_thresh: The threshold value for EAPOL-Logoff flooding in specified interval.
        :param pulumi.Input[str] eapol_pre_fail_flood: Enable/disable premature EAPOL-Failure flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_pre_fail_intv: The detection interval for premature EAPOL-Failure flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_pre_fail_thresh: The threshold value for premature EAPOL-Failure flooding in specified interval.
        :param pulumi.Input[str] eapol_pre_succ_flood: Enable/disable premature EAPOL-Success flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_pre_succ_intv: The detection interval for premature EAPOL-Success flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_pre_succ_thresh: The threshold value for premature EAPOL-Success flooding in specified interval.
        :param pulumi.Input[str] eapol_start_flood: Enable/disable EAPOL-Start flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_start_intv: The detection interval for EAPOL-Start flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_start_thresh: The threshold value for EAPOL-Start flooding in specified interval.
        :param pulumi.Input[str] eapol_succ_flood: Enable/disable EAPOL-Success flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] eapol_succ_intv: The detection interval for EAPOL-Success flooding (1 - 3600 sec).
        :param pulumi.Input[int] eapol_succ_thresh: The threshold value for EAPOL-Success flooding in specified interval.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] invalid_mac_oui: Enable/disable invalid MAC OUI detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] long_duration_attack: Enable/disable long duration attack detection based on user configured threshold (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] long_duration_thresh: Threshold value for long duration attack detection (1000 - 32767 usec, default = 8200).
        :param pulumi.Input[str] name: WIDS profile name.
        :param pulumi.Input[str] null_ssid_probe_resp: Enable/disable null SSID probe response detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sensor_mode: Scan WiFi nearby stations (default = disable). Valid values: `disable`, `foreign`, `both`.
        :param pulumi.Input[str] spoofed_deauth: Enable/disable spoofed de-authentication attack detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
               
               The `ap_scan_channel_list_2g_5g` block supports:
        :param pulumi.Input[str] weak_wep_iv: Enable/disable weak WEP IV (Initialization Vector) detection (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wireless_bridge: Enable/disable wireless bridge detection (default = disable). Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WidsprofileState.__new__(_WidsprofileState)

        __props__.__dict__["ap_auto_suppress"] = ap_auto_suppress
        __props__.__dict__["ap_bgscan_disable_day"] = ap_bgscan_disable_day
        __props__.__dict__["ap_bgscan_disable_end"] = ap_bgscan_disable_end
        __props__.__dict__["ap_bgscan_disable_schedules"] = ap_bgscan_disable_schedules
        __props__.__dict__["ap_bgscan_disable_start"] = ap_bgscan_disable_start
        __props__.__dict__["ap_bgscan_duration"] = ap_bgscan_duration
        __props__.__dict__["ap_bgscan_idle"] = ap_bgscan_idle
        __props__.__dict__["ap_bgscan_intv"] = ap_bgscan_intv
        __props__.__dict__["ap_bgscan_period"] = ap_bgscan_period
        __props__.__dict__["ap_bgscan_report_intv"] = ap_bgscan_report_intv
        __props__.__dict__["ap_fgscan_report_intv"] = ap_fgscan_report_intv
        __props__.__dict__["ap_scan"] = ap_scan
        __props__.__dict__["ap_scan_channel_list2g5gs"] = ap_scan_channel_list2g5gs
        __props__.__dict__["ap_scan_channel_list6gs"] = ap_scan_channel_list6gs
        __props__.__dict__["ap_scan_passive"] = ap_scan_passive
        __props__.__dict__["ap_scan_threshold"] = ap_scan_threshold
        __props__.__dict__["asleap_attack"] = asleap_attack
        __props__.__dict__["assoc_flood_thresh"] = assoc_flood_thresh
        __props__.__dict__["assoc_flood_time"] = assoc_flood_time
        __props__.__dict__["assoc_frame_flood"] = assoc_frame_flood
        __props__.__dict__["auth_flood_thresh"] = auth_flood_thresh
        __props__.__dict__["auth_flood_time"] = auth_flood_time
        __props__.__dict__["auth_frame_flood"] = auth_frame_flood
        __props__.__dict__["comment"] = comment
        __props__.__dict__["deauth_broadcast"] = deauth_broadcast
        __props__.__dict__["deauth_unknown_src_thresh"] = deauth_unknown_src_thresh
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["eapol_fail_flood"] = eapol_fail_flood
        __props__.__dict__["eapol_fail_intv"] = eapol_fail_intv
        __props__.__dict__["eapol_fail_thresh"] = eapol_fail_thresh
        __props__.__dict__["eapol_logoff_flood"] = eapol_logoff_flood
        __props__.__dict__["eapol_logoff_intv"] = eapol_logoff_intv
        __props__.__dict__["eapol_logoff_thresh"] = eapol_logoff_thresh
        __props__.__dict__["eapol_pre_fail_flood"] = eapol_pre_fail_flood
        __props__.__dict__["eapol_pre_fail_intv"] = eapol_pre_fail_intv
        __props__.__dict__["eapol_pre_fail_thresh"] = eapol_pre_fail_thresh
        __props__.__dict__["eapol_pre_succ_flood"] = eapol_pre_succ_flood
        __props__.__dict__["eapol_pre_succ_intv"] = eapol_pre_succ_intv
        __props__.__dict__["eapol_pre_succ_thresh"] = eapol_pre_succ_thresh
        __props__.__dict__["eapol_start_flood"] = eapol_start_flood
        __props__.__dict__["eapol_start_intv"] = eapol_start_intv
        __props__.__dict__["eapol_start_thresh"] = eapol_start_thresh
        __props__.__dict__["eapol_succ_flood"] = eapol_succ_flood
        __props__.__dict__["eapol_succ_intv"] = eapol_succ_intv
        __props__.__dict__["eapol_succ_thresh"] = eapol_succ_thresh
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["invalid_mac_oui"] = invalid_mac_oui
        __props__.__dict__["long_duration_attack"] = long_duration_attack
        __props__.__dict__["long_duration_thresh"] = long_duration_thresh
        __props__.__dict__["name"] = name
        __props__.__dict__["null_ssid_probe_resp"] = null_ssid_probe_resp
        __props__.__dict__["sensor_mode"] = sensor_mode
        __props__.__dict__["spoofed_deauth"] = spoofed_deauth
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["weak_wep_iv"] = weak_wep_iv
        __props__.__dict__["wireless_bridge"] = wireless_bridge
        return Widsprofile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apAutoSuppress")
    def ap_auto_suppress(self) -> pulumi.Output[str]:
        """
        Enable/disable on-wire rogue AP auto-suppression (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_auto_suppress")

    @property
    @pulumi.getter(name="apBgscanDisableDay")
    def ap_bgscan_disable_day(self) -> pulumi.Output[str]:
        """
        Optionally turn off scanning for one or more days of the week. Separate the days with a space. By default, no days are set. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "ap_bgscan_disable_day")

    @property
    @pulumi.getter(name="apBgscanDisableEnd")
    def ap_bgscan_disable_end(self) -> pulumi.Output[str]:
        """
        End time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        """
        return pulumi.get(self, "ap_bgscan_disable_end")

    @property
    @pulumi.getter(name="apBgscanDisableSchedules")
    def ap_bgscan_disable_schedules(self) -> pulumi.Output[Optional[Sequence['outputs.WidsprofileApBgscanDisableSchedule']]]:
        """
        Firewall schedules for turning off FortiAP radio background scan. Background scan will be disabled when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ap_bgscan_disable_schedules` block is documented below.
        """
        return pulumi.get(self, "ap_bgscan_disable_schedules")

    @property
    @pulumi.getter(name="apBgscanDisableStart")
    def ap_bgscan_disable_start(self) -> pulumi.Output[str]:
        """
        Start time, using a 24-hour clock in the format of hh:mm, for disabling background scanning (default = 00:00).
        """
        return pulumi.get(self, "ap_bgscan_disable_start")

    @property
    @pulumi.getter(name="apBgscanDuration")
    def ap_bgscan_duration(self) -> pulumi.Output[int]:
        """
        Listening time on a scanning channel (10 - 1000 msec, default = 20).
        """
        return pulumi.get(self, "ap_bgscan_duration")

    @property
    @pulumi.getter(name="apBgscanIdle")
    def ap_bgscan_idle(self) -> pulumi.Output[int]:
        """
        Waiting time for channel inactivity before scanning this channel (0 - 1000 msec, default = 0).
        """
        return pulumi.get(self, "ap_bgscan_idle")

    @property
    @pulumi.getter(name="apBgscanIntv")
    def ap_bgscan_intv(self) -> pulumi.Output[int]:
        """
        Period of time between scanning two channels (1 - 600 sec, default = 1).
        """
        return pulumi.get(self, "ap_bgscan_intv")

    @property
    @pulumi.getter(name="apBgscanPeriod")
    def ap_bgscan_period(self) -> pulumi.Output[int]:
        """
        Period of time between background scans (60 - 3600 sec, default = 600).
        """
        return pulumi.get(self, "ap_bgscan_period")

    @property
    @pulumi.getter(name="apBgscanReportIntv")
    def ap_bgscan_report_intv(self) -> pulumi.Output[int]:
        """
        Period of time between background scan reports (15 - 600 sec, default = 30).
        """
        return pulumi.get(self, "ap_bgscan_report_intv")

    @property
    @pulumi.getter(name="apFgscanReportIntv")
    def ap_fgscan_report_intv(self) -> pulumi.Output[int]:
        """
        Period of time between foreground scan reports (15 - 600 sec, default = 15).
        """
        return pulumi.get(self, "ap_fgscan_report_intv")

    @property
    @pulumi.getter(name="apScan")
    def ap_scan(self) -> pulumi.Output[str]:
        """
        Enable/disable rogue AP detection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ap_scan")

    @property
    @pulumi.getter(name="apScanChannelList2g5gs")
    def ap_scan_channel_list2g5gs(self) -> pulumi.Output[Optional[Sequence['outputs.WidsprofileApScanChannelList2g5g']]]:
        """
        Selected ap scan channel list for 2.4G and 5G bands. The structure of `ap_scan_channel_list_2g_5g` block is documented below.
        """
        return pulumi.get(self, "ap_scan_channel_list2g5gs")

    @property
    @pulumi.getter(name="apScanChannelList6gs")
    def ap_scan_channel_list6gs(self) -> pulumi.Output[Optional[Sequence['outputs.WidsprofileApScanChannelList6g']]]:
        """
        Selected ap scan channel list for 6G band. The structure of `ap_scan_channel_list_6g` block is documented below.
        """
        return pulumi.get(self, "ap_scan_channel_list6gs")

    @property
    @pulumi.getter(name="apScanPassive")
    def ap_scan_passive(self) -> pulumi.Output[str]:
        """
        Enable/disable passive scanning. Enable means do not send probe request on any channels (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_scan_passive")

    @property
    @pulumi.getter(name="apScanThreshold")
    def ap_scan_threshold(self) -> pulumi.Output[str]:
        """
        Minimum signal level/threshold in dBm required for the AP to report detected rogue AP (-95 to -20, default = -90).
        """
        return pulumi.get(self, "ap_scan_threshold")

    @property
    @pulumi.getter(name="asleapAttack")
    def asleap_attack(self) -> pulumi.Output[str]:
        """
        Enable/disable asleap attack detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asleap_attack")

    @property
    @pulumi.getter(name="assocFloodThresh")
    def assoc_flood_thresh(self) -> pulumi.Output[int]:
        """
        The threshold value for association frame flooding.
        """
        return pulumi.get(self, "assoc_flood_thresh")

    @property
    @pulumi.getter(name="assocFloodTime")
    def assoc_flood_time(self) -> pulumi.Output[int]:
        """
        Number of seconds after which a station is considered not connected.
        """
        return pulumi.get(self, "assoc_flood_time")

    @property
    @pulumi.getter(name="assocFrameFlood")
    def assoc_frame_flood(self) -> pulumi.Output[str]:
        """
        Enable/disable association frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "assoc_frame_flood")

    @property
    @pulumi.getter(name="authFloodThresh")
    def auth_flood_thresh(self) -> pulumi.Output[int]:
        """
        The threshold value for authentication frame flooding.
        """
        return pulumi.get(self, "auth_flood_thresh")

    @property
    @pulumi.getter(name="authFloodTime")
    def auth_flood_time(self) -> pulumi.Output[int]:
        """
        Number of seconds after which a station is considered not connected.
        """
        return pulumi.get(self, "auth_flood_time")

    @property
    @pulumi.getter(name="authFrameFlood")
    def auth_frame_flood(self) -> pulumi.Output[str]:
        """
        Enable/disable authentication frame flooding detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_frame_flood")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="deauthBroadcast")
    def deauth_broadcast(self) -> pulumi.Output[str]:
        """
        Enable/disable broadcasting de-authentication detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "deauth_broadcast")

    @property
    @pulumi.getter(name="deauthUnknownSrcThresh")
    def deauth_unknown_src_thresh(self) -> pulumi.Output[int]:
        """
        Threshold value per second to deauth unknown src for DoS attack (0: no limit).
        """
        return pulumi.get(self, "deauth_unknown_src_thresh")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="eapolFailFlood")
    def eapol_fail_flood(self) -> pulumi.Output[str]:
        """
        Enable/disable EAPOL-Failure flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_fail_flood")

    @property
    @pulumi.getter(name="eapolFailIntv")
    def eapol_fail_intv(self) -> pulumi.Output[int]:
        """
        The detection interval for EAPOL-Failure flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_fail_intv")

    @property
    @pulumi.getter(name="eapolFailThresh")
    def eapol_fail_thresh(self) -> pulumi.Output[int]:
        """
        The threshold value for EAPOL-Failure flooding in specified interval.
        """
        return pulumi.get(self, "eapol_fail_thresh")

    @property
    @pulumi.getter(name="eapolLogoffFlood")
    def eapol_logoff_flood(self) -> pulumi.Output[str]:
        """
        Enable/disable EAPOL-Logoff flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_logoff_flood")

    @property
    @pulumi.getter(name="eapolLogoffIntv")
    def eapol_logoff_intv(self) -> pulumi.Output[int]:
        """
        The detection interval for EAPOL-Logoff flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_logoff_intv")

    @property
    @pulumi.getter(name="eapolLogoffThresh")
    def eapol_logoff_thresh(self) -> pulumi.Output[int]:
        """
        The threshold value for EAPOL-Logoff flooding in specified interval.
        """
        return pulumi.get(self, "eapol_logoff_thresh")

    @property
    @pulumi.getter(name="eapolPreFailFlood")
    def eapol_pre_fail_flood(self) -> pulumi.Output[str]:
        """
        Enable/disable premature EAPOL-Failure flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_pre_fail_flood")

    @property
    @pulumi.getter(name="eapolPreFailIntv")
    def eapol_pre_fail_intv(self) -> pulumi.Output[int]:
        """
        The detection interval for premature EAPOL-Failure flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_pre_fail_intv")

    @property
    @pulumi.getter(name="eapolPreFailThresh")
    def eapol_pre_fail_thresh(self) -> pulumi.Output[int]:
        """
        The threshold value for premature EAPOL-Failure flooding in specified interval.
        """
        return pulumi.get(self, "eapol_pre_fail_thresh")

    @property
    @pulumi.getter(name="eapolPreSuccFlood")
    def eapol_pre_succ_flood(self) -> pulumi.Output[str]:
        """
        Enable/disable premature EAPOL-Success flooding (to STA) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_pre_succ_flood")

    @property
    @pulumi.getter(name="eapolPreSuccIntv")
    def eapol_pre_succ_intv(self) -> pulumi.Output[int]:
        """
        The detection interval for premature EAPOL-Success flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_pre_succ_intv")

    @property
    @pulumi.getter(name="eapolPreSuccThresh")
    def eapol_pre_succ_thresh(self) -> pulumi.Output[int]:
        """
        The threshold value for premature EAPOL-Success flooding in specified interval.
        """
        return pulumi.get(self, "eapol_pre_succ_thresh")

    @property
    @pulumi.getter(name="eapolStartFlood")
    def eapol_start_flood(self) -> pulumi.Output[str]:
        """
        Enable/disable EAPOL-Start flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_start_flood")

    @property
    @pulumi.getter(name="eapolStartIntv")
    def eapol_start_intv(self) -> pulumi.Output[int]:
        """
        The detection interval for EAPOL-Start flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_start_intv")

    @property
    @pulumi.getter(name="eapolStartThresh")
    def eapol_start_thresh(self) -> pulumi.Output[int]:
        """
        The threshold value for EAPOL-Start flooding in specified interval.
        """
        return pulumi.get(self, "eapol_start_thresh")

    @property
    @pulumi.getter(name="eapolSuccFlood")
    def eapol_succ_flood(self) -> pulumi.Output[str]:
        """
        Enable/disable EAPOL-Success flooding (to AP) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eapol_succ_flood")

    @property
    @pulumi.getter(name="eapolSuccIntv")
    def eapol_succ_intv(self) -> pulumi.Output[int]:
        """
        The detection interval for EAPOL-Success flooding (1 - 3600 sec).
        """
        return pulumi.get(self, "eapol_succ_intv")

    @property
    @pulumi.getter(name="eapolSuccThresh")
    def eapol_succ_thresh(self) -> pulumi.Output[int]:
        """
        The threshold value for EAPOL-Success flooding in specified interval.
        """
        return pulumi.get(self, "eapol_succ_thresh")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="invalidMacOui")
    def invalid_mac_oui(self) -> pulumi.Output[str]:
        """
        Enable/disable invalid MAC OUI detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "invalid_mac_oui")

    @property
    @pulumi.getter(name="longDurationAttack")
    def long_duration_attack(self) -> pulumi.Output[str]:
        """
        Enable/disable long duration attack detection based on user configured threshold (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "long_duration_attack")

    @property
    @pulumi.getter(name="longDurationThresh")
    def long_duration_thresh(self) -> pulumi.Output[int]:
        """
        Threshold value for long duration attack detection (1000 - 32767 usec, default = 8200).
        """
        return pulumi.get(self, "long_duration_thresh")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        WIDS profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nullSsidProbeResp")
    def null_ssid_probe_resp(self) -> pulumi.Output[str]:
        """
        Enable/disable null SSID probe response detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "null_ssid_probe_resp")

    @property
    @pulumi.getter(name="sensorMode")
    def sensor_mode(self) -> pulumi.Output[str]:
        """
        Scan WiFi nearby stations (default = disable). Valid values: `disable`, `foreign`, `both`.
        """
        return pulumi.get(self, "sensor_mode")

    @property
    @pulumi.getter(name="spoofedDeauth")
    def spoofed_deauth(self) -> pulumi.Output[str]:
        """
        Enable/disable spoofed de-authentication attack detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spoofed_deauth")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.

        The `ap_scan_channel_list_2g_5g` block supports:
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="weakWepIv")
    def weak_wep_iv(self) -> pulumi.Output[str]:
        """
        Enable/disable weak WEP IV (Initialization Vector) detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "weak_wep_iv")

    @property
    @pulumi.getter(name="wirelessBridge")
    def wireless_bridge(self) -> pulumi.Output[str]:
        """
        Enable/disable wireless bridge detection (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wireless_bridge")

