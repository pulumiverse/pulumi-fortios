# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TimersArgs', 'Timers']

@pulumi.input_type
class TimersArgs:
    def __init__(__self__, *,
                 ap_reboot_wait_interval1: Optional[pulumi.Input[int]] = None,
                 ap_reboot_wait_interval2: Optional[pulumi.Input[int]] = None,
                 ap_reboot_wait_time: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 ble_scan_report_intv: Optional[pulumi.Input[int]] = None,
                 client_idle_rehome_timeout: Optional[pulumi.Input[int]] = None,
                 client_idle_timeout: Optional[pulumi.Input[int]] = None,
                 darrp_day: Optional[pulumi.Input[str]] = None,
                 darrp_optimize: Optional[pulumi.Input[int]] = None,
                 darrp_times: Optional[pulumi.Input[Sequence[pulumi.Input['TimersDarrpTimeArgs']]]] = None,
                 discovery_interval: Optional[pulumi.Input[int]] = None,
                 drma_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 echo_interval: Optional[pulumi.Input[int]] = None,
                 fake_ap_log: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ipsec_intf_cleanup: Optional[pulumi.Input[int]] = None,
                 nat_session_keep_alive: Optional[pulumi.Input[int]] = None,
                 radio_stats_interval: Optional[pulumi.Input[int]] = None,
                 rogue_ap_cleanup: Optional[pulumi.Input[int]] = None,
                 rogue_ap_log: Optional[pulumi.Input[int]] = None,
                 sta_capability_interval: Optional[pulumi.Input[int]] = None,
                 sta_locate_timer: Optional[pulumi.Input[int]] = None,
                 sta_stats_interval: Optional[pulumi.Input[int]] = None,
                 vap_stats_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Timers resource.
        :param pulumi.Input[int] ap_reboot_wait_interval1: Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
        :param pulumi.Input[int] ap_reboot_wait_interval2: Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
        :param pulumi.Input[str] ap_reboot_wait_time: Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
        :param pulumi.Input[int] auth_timeout: Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
        :param pulumi.Input[int] ble_scan_report_intv: Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
        :param pulumi.Input[int] client_idle_rehome_timeout: Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
        :param pulumi.Input[int] client_idle_timeout: Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
        :param pulumi.Input[str] darrp_day: Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] darrp_optimize: Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
        :param pulumi.Input[Sequence[pulumi.Input['TimersDarrpTimeArgs']]] darrp_times: Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrp_time` block is documented below.
        :param pulumi.Input[int] discovery_interval: Time between discovery requests (2 - 180 sec, default = 5).
        :param pulumi.Input[int] drma_interval: Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] echo_interval: Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
        :param pulumi.Input[int] fake_ap_log: Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] ipsec_intf_cleanup: Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
        :param pulumi.Input[int] nat_session_keep_alive: Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
        :param pulumi.Input[int] radio_stats_interval: Time between running radio reports (1 - 255 sec, default = 15).
        :param pulumi.Input[int] rogue_ap_cleanup: Time period in minutes to keep rogue AP after it is gone (default = 0).
        :param pulumi.Input[int] rogue_ap_log: Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
        :param pulumi.Input[int] sta_capability_interval: Time between running station capability reports (1 - 255 sec, default = 30).
        :param pulumi.Input[int] sta_locate_timer: Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
        :param pulumi.Input[int] sta_stats_interval: Time between running client (station) reports (1 - 255 sec, default = 1).
        :param pulumi.Input[int] vap_stats_interval: Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if ap_reboot_wait_interval1 is not None:
            pulumi.set(__self__, "ap_reboot_wait_interval1", ap_reboot_wait_interval1)
        if ap_reboot_wait_interval2 is not None:
            pulumi.set(__self__, "ap_reboot_wait_interval2", ap_reboot_wait_interval2)
        if ap_reboot_wait_time is not None:
            pulumi.set(__self__, "ap_reboot_wait_time", ap_reboot_wait_time)
        if auth_timeout is not None:
            pulumi.set(__self__, "auth_timeout", auth_timeout)
        if ble_scan_report_intv is not None:
            pulumi.set(__self__, "ble_scan_report_intv", ble_scan_report_intv)
        if client_idle_rehome_timeout is not None:
            pulumi.set(__self__, "client_idle_rehome_timeout", client_idle_rehome_timeout)
        if client_idle_timeout is not None:
            pulumi.set(__self__, "client_idle_timeout", client_idle_timeout)
        if darrp_day is not None:
            pulumi.set(__self__, "darrp_day", darrp_day)
        if darrp_optimize is not None:
            pulumi.set(__self__, "darrp_optimize", darrp_optimize)
        if darrp_times is not None:
            pulumi.set(__self__, "darrp_times", darrp_times)
        if discovery_interval is not None:
            pulumi.set(__self__, "discovery_interval", discovery_interval)
        if drma_interval is not None:
            pulumi.set(__self__, "drma_interval", drma_interval)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if echo_interval is not None:
            pulumi.set(__self__, "echo_interval", echo_interval)
        if fake_ap_log is not None:
            pulumi.set(__self__, "fake_ap_log", fake_ap_log)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ipsec_intf_cleanup is not None:
            pulumi.set(__self__, "ipsec_intf_cleanup", ipsec_intf_cleanup)
        if nat_session_keep_alive is not None:
            pulumi.set(__self__, "nat_session_keep_alive", nat_session_keep_alive)
        if radio_stats_interval is not None:
            pulumi.set(__self__, "radio_stats_interval", radio_stats_interval)
        if rogue_ap_cleanup is not None:
            pulumi.set(__self__, "rogue_ap_cleanup", rogue_ap_cleanup)
        if rogue_ap_log is not None:
            pulumi.set(__self__, "rogue_ap_log", rogue_ap_log)
        if sta_capability_interval is not None:
            pulumi.set(__self__, "sta_capability_interval", sta_capability_interval)
        if sta_locate_timer is not None:
            pulumi.set(__self__, "sta_locate_timer", sta_locate_timer)
        if sta_stats_interval is not None:
            pulumi.set(__self__, "sta_stats_interval", sta_stats_interval)
        if vap_stats_interval is not None:
            pulumi.set(__self__, "vap_stats_interval", vap_stats_interval)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="apRebootWaitInterval1")
    def ap_reboot_wait_interval1(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
        """
        return pulumi.get(self, "ap_reboot_wait_interval1")

    @ap_reboot_wait_interval1.setter
    def ap_reboot_wait_interval1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_reboot_wait_interval1", value)

    @property
    @pulumi.getter(name="apRebootWaitInterval2")
    def ap_reboot_wait_interval2(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
        """
        return pulumi.get(self, "ap_reboot_wait_interval2")

    @ap_reboot_wait_interval2.setter
    def ap_reboot_wait_interval2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_reboot_wait_interval2", value)

    @property
    @pulumi.getter(name="apRebootWaitTime")
    def ap_reboot_wait_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
        """
        return pulumi.get(self, "ap_reboot_wait_time")

    @ap_reboot_wait_time.setter
    def ap_reboot_wait_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_reboot_wait_time", value)

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
        """
        return pulumi.get(self, "auth_timeout")

    @auth_timeout.setter
    def auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_timeout", value)

    @property
    @pulumi.getter(name="bleScanReportIntv")
    def ble_scan_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
        """
        return pulumi.get(self, "ble_scan_report_intv")

    @ble_scan_report_intv.setter
    def ble_scan_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ble_scan_report_intv", value)

    @property
    @pulumi.getter(name="clientIdleRehomeTimeout")
    def client_idle_rehome_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
        """
        return pulumi.get(self, "client_idle_rehome_timeout")

    @client_idle_rehome_timeout.setter
    def client_idle_rehome_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_idle_rehome_timeout", value)

    @property
    @pulumi.getter(name="clientIdleTimeout")
    def client_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
        """
        return pulumi.get(self, "client_idle_timeout")

    @client_idle_timeout.setter
    def client_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_idle_timeout", value)

    @property
    @pulumi.getter(name="darrpDay")
    def darrp_day(self) -> Optional[pulumi.Input[str]]:
        """
        Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "darrp_day")

    @darrp_day.setter
    def darrp_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp_day", value)

    @property
    @pulumi.getter(name="darrpOptimize")
    def darrp_optimize(self) -> Optional[pulumi.Input[int]]:
        """
        Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
        """
        return pulumi.get(self, "darrp_optimize")

    @darrp_optimize.setter
    def darrp_optimize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "darrp_optimize", value)

    @property
    @pulumi.getter(name="darrpTimes")
    def darrp_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TimersDarrpTimeArgs']]]]:
        """
        Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrp_time` block is documented below.
        """
        return pulumi.get(self, "darrp_times")

    @darrp_times.setter
    def darrp_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TimersDarrpTimeArgs']]]]):
        pulumi.set(self, "darrp_times", value)

    @property
    @pulumi.getter(name="discoveryInterval")
    def discovery_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between discovery requests (2 - 180 sec, default = 5).
        """
        return pulumi.get(self, "discovery_interval")

    @discovery_interval.setter
    def discovery_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "discovery_interval", value)

    @property
    @pulumi.getter(name="drmaInterval")
    def drma_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
        """
        return pulumi.get(self, "drma_interval")

    @drma_interval.setter
    def drma_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "drma_interval", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="echoInterval")
    def echo_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
        """
        return pulumi.get(self, "echo_interval")

    @echo_interval.setter
    def echo_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "echo_interval", value)

    @property
    @pulumi.getter(name="fakeApLog")
    def fake_ap_log(self) -> Optional[pulumi.Input[int]]:
        """
        Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
        """
        return pulumi.get(self, "fake_ap_log")

    @fake_ap_log.setter
    def fake_ap_log(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fake_ap_log", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipsecIntfCleanup")
    def ipsec_intf_cleanup(self) -> Optional[pulumi.Input[int]]:
        """
        Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
        """
        return pulumi.get(self, "ipsec_intf_cleanup")

    @ipsec_intf_cleanup.setter
    def ipsec_intf_cleanup(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_intf_cleanup", value)

    @property
    @pulumi.getter(name="natSessionKeepAlive")
    def nat_session_keep_alive(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
        """
        return pulumi.get(self, "nat_session_keep_alive")

    @nat_session_keep_alive.setter
    def nat_session_keep_alive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nat_session_keep_alive", value)

    @property
    @pulumi.getter(name="radioStatsInterval")
    def radio_stats_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running radio reports (1 - 255 sec, default = 15).
        """
        return pulumi.get(self, "radio_stats_interval")

    @radio_stats_interval.setter
    def radio_stats_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_stats_interval", value)

    @property
    @pulumi.getter(name="rogueApCleanup")
    def rogue_ap_cleanup(self) -> Optional[pulumi.Input[int]]:
        """
        Time period in minutes to keep rogue AP after it is gone (default = 0).
        """
        return pulumi.get(self, "rogue_ap_cleanup")

    @rogue_ap_cleanup.setter
    def rogue_ap_cleanup(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rogue_ap_cleanup", value)

    @property
    @pulumi.getter(name="rogueApLog")
    def rogue_ap_log(self) -> Optional[pulumi.Input[int]]:
        """
        Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
        """
        return pulumi.get(self, "rogue_ap_log")

    @rogue_ap_log.setter
    def rogue_ap_log(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rogue_ap_log", value)

    @property
    @pulumi.getter(name="staCapabilityInterval")
    def sta_capability_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running station capability reports (1 - 255 sec, default = 30).
        """
        return pulumi.get(self, "sta_capability_interval")

    @sta_capability_interval.setter
    def sta_capability_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sta_capability_interval", value)

    @property
    @pulumi.getter(name="staLocateTimer")
    def sta_locate_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
        """
        return pulumi.get(self, "sta_locate_timer")

    @sta_locate_timer.setter
    def sta_locate_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sta_locate_timer", value)

    @property
    @pulumi.getter(name="staStatsInterval")
    def sta_stats_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running client (station) reports (1 - 255 sec, default = 1).
        """
        return pulumi.get(self, "sta_stats_interval")

    @sta_stats_interval.setter
    def sta_stats_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sta_stats_interval", value)

    @property
    @pulumi.getter(name="vapStatsInterval")
    def vap_stats_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
        """
        return pulumi.get(self, "vap_stats_interval")

    @vap_stats_interval.setter
    def vap_stats_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vap_stats_interval", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _TimersState:
    def __init__(__self__, *,
                 ap_reboot_wait_interval1: Optional[pulumi.Input[int]] = None,
                 ap_reboot_wait_interval2: Optional[pulumi.Input[int]] = None,
                 ap_reboot_wait_time: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 ble_scan_report_intv: Optional[pulumi.Input[int]] = None,
                 client_idle_rehome_timeout: Optional[pulumi.Input[int]] = None,
                 client_idle_timeout: Optional[pulumi.Input[int]] = None,
                 darrp_day: Optional[pulumi.Input[str]] = None,
                 darrp_optimize: Optional[pulumi.Input[int]] = None,
                 darrp_times: Optional[pulumi.Input[Sequence[pulumi.Input['TimersDarrpTimeArgs']]]] = None,
                 discovery_interval: Optional[pulumi.Input[int]] = None,
                 drma_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 echo_interval: Optional[pulumi.Input[int]] = None,
                 fake_ap_log: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ipsec_intf_cleanup: Optional[pulumi.Input[int]] = None,
                 nat_session_keep_alive: Optional[pulumi.Input[int]] = None,
                 radio_stats_interval: Optional[pulumi.Input[int]] = None,
                 rogue_ap_cleanup: Optional[pulumi.Input[int]] = None,
                 rogue_ap_log: Optional[pulumi.Input[int]] = None,
                 sta_capability_interval: Optional[pulumi.Input[int]] = None,
                 sta_locate_timer: Optional[pulumi.Input[int]] = None,
                 sta_stats_interval: Optional[pulumi.Input[int]] = None,
                 vap_stats_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Timers resources.
        :param pulumi.Input[int] ap_reboot_wait_interval1: Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
        :param pulumi.Input[int] ap_reboot_wait_interval2: Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
        :param pulumi.Input[str] ap_reboot_wait_time: Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
        :param pulumi.Input[int] auth_timeout: Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
        :param pulumi.Input[int] ble_scan_report_intv: Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
        :param pulumi.Input[int] client_idle_rehome_timeout: Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
        :param pulumi.Input[int] client_idle_timeout: Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
        :param pulumi.Input[str] darrp_day: Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] darrp_optimize: Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
        :param pulumi.Input[Sequence[pulumi.Input['TimersDarrpTimeArgs']]] darrp_times: Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrp_time` block is documented below.
        :param pulumi.Input[int] discovery_interval: Time between discovery requests (2 - 180 sec, default = 5).
        :param pulumi.Input[int] drma_interval: Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] echo_interval: Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
        :param pulumi.Input[int] fake_ap_log: Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] ipsec_intf_cleanup: Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
        :param pulumi.Input[int] nat_session_keep_alive: Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
        :param pulumi.Input[int] radio_stats_interval: Time between running radio reports (1 - 255 sec, default = 15).
        :param pulumi.Input[int] rogue_ap_cleanup: Time period in minutes to keep rogue AP after it is gone (default = 0).
        :param pulumi.Input[int] rogue_ap_log: Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
        :param pulumi.Input[int] sta_capability_interval: Time between running station capability reports (1 - 255 sec, default = 30).
        :param pulumi.Input[int] sta_locate_timer: Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
        :param pulumi.Input[int] sta_stats_interval: Time between running client (station) reports (1 - 255 sec, default = 1).
        :param pulumi.Input[int] vap_stats_interval: Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if ap_reboot_wait_interval1 is not None:
            pulumi.set(__self__, "ap_reboot_wait_interval1", ap_reboot_wait_interval1)
        if ap_reboot_wait_interval2 is not None:
            pulumi.set(__self__, "ap_reboot_wait_interval2", ap_reboot_wait_interval2)
        if ap_reboot_wait_time is not None:
            pulumi.set(__self__, "ap_reboot_wait_time", ap_reboot_wait_time)
        if auth_timeout is not None:
            pulumi.set(__self__, "auth_timeout", auth_timeout)
        if ble_scan_report_intv is not None:
            pulumi.set(__self__, "ble_scan_report_intv", ble_scan_report_intv)
        if client_idle_rehome_timeout is not None:
            pulumi.set(__self__, "client_idle_rehome_timeout", client_idle_rehome_timeout)
        if client_idle_timeout is not None:
            pulumi.set(__self__, "client_idle_timeout", client_idle_timeout)
        if darrp_day is not None:
            pulumi.set(__self__, "darrp_day", darrp_day)
        if darrp_optimize is not None:
            pulumi.set(__self__, "darrp_optimize", darrp_optimize)
        if darrp_times is not None:
            pulumi.set(__self__, "darrp_times", darrp_times)
        if discovery_interval is not None:
            pulumi.set(__self__, "discovery_interval", discovery_interval)
        if drma_interval is not None:
            pulumi.set(__self__, "drma_interval", drma_interval)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if echo_interval is not None:
            pulumi.set(__self__, "echo_interval", echo_interval)
        if fake_ap_log is not None:
            pulumi.set(__self__, "fake_ap_log", fake_ap_log)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ipsec_intf_cleanup is not None:
            pulumi.set(__self__, "ipsec_intf_cleanup", ipsec_intf_cleanup)
        if nat_session_keep_alive is not None:
            pulumi.set(__self__, "nat_session_keep_alive", nat_session_keep_alive)
        if radio_stats_interval is not None:
            pulumi.set(__self__, "radio_stats_interval", radio_stats_interval)
        if rogue_ap_cleanup is not None:
            pulumi.set(__self__, "rogue_ap_cleanup", rogue_ap_cleanup)
        if rogue_ap_log is not None:
            pulumi.set(__self__, "rogue_ap_log", rogue_ap_log)
        if sta_capability_interval is not None:
            pulumi.set(__self__, "sta_capability_interval", sta_capability_interval)
        if sta_locate_timer is not None:
            pulumi.set(__self__, "sta_locate_timer", sta_locate_timer)
        if sta_stats_interval is not None:
            pulumi.set(__self__, "sta_stats_interval", sta_stats_interval)
        if vap_stats_interval is not None:
            pulumi.set(__self__, "vap_stats_interval", vap_stats_interval)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="apRebootWaitInterval1")
    def ap_reboot_wait_interval1(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
        """
        return pulumi.get(self, "ap_reboot_wait_interval1")

    @ap_reboot_wait_interval1.setter
    def ap_reboot_wait_interval1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_reboot_wait_interval1", value)

    @property
    @pulumi.getter(name="apRebootWaitInterval2")
    def ap_reboot_wait_interval2(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
        """
        return pulumi.get(self, "ap_reboot_wait_interval2")

    @ap_reboot_wait_interval2.setter
    def ap_reboot_wait_interval2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_reboot_wait_interval2", value)

    @property
    @pulumi.getter(name="apRebootWaitTime")
    def ap_reboot_wait_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
        """
        return pulumi.get(self, "ap_reboot_wait_time")

    @ap_reboot_wait_time.setter
    def ap_reboot_wait_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_reboot_wait_time", value)

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
        """
        return pulumi.get(self, "auth_timeout")

    @auth_timeout.setter
    def auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_timeout", value)

    @property
    @pulumi.getter(name="bleScanReportIntv")
    def ble_scan_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
        """
        return pulumi.get(self, "ble_scan_report_intv")

    @ble_scan_report_intv.setter
    def ble_scan_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ble_scan_report_intv", value)

    @property
    @pulumi.getter(name="clientIdleRehomeTimeout")
    def client_idle_rehome_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
        """
        return pulumi.get(self, "client_idle_rehome_timeout")

    @client_idle_rehome_timeout.setter
    def client_idle_rehome_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_idle_rehome_timeout", value)

    @property
    @pulumi.getter(name="clientIdleTimeout")
    def client_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
        """
        return pulumi.get(self, "client_idle_timeout")

    @client_idle_timeout.setter
    def client_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_idle_timeout", value)

    @property
    @pulumi.getter(name="darrpDay")
    def darrp_day(self) -> Optional[pulumi.Input[str]]:
        """
        Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "darrp_day")

    @darrp_day.setter
    def darrp_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp_day", value)

    @property
    @pulumi.getter(name="darrpOptimize")
    def darrp_optimize(self) -> Optional[pulumi.Input[int]]:
        """
        Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
        """
        return pulumi.get(self, "darrp_optimize")

    @darrp_optimize.setter
    def darrp_optimize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "darrp_optimize", value)

    @property
    @pulumi.getter(name="darrpTimes")
    def darrp_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TimersDarrpTimeArgs']]]]:
        """
        Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrp_time` block is documented below.
        """
        return pulumi.get(self, "darrp_times")

    @darrp_times.setter
    def darrp_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TimersDarrpTimeArgs']]]]):
        pulumi.set(self, "darrp_times", value)

    @property
    @pulumi.getter(name="discoveryInterval")
    def discovery_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between discovery requests (2 - 180 sec, default = 5).
        """
        return pulumi.get(self, "discovery_interval")

    @discovery_interval.setter
    def discovery_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "discovery_interval", value)

    @property
    @pulumi.getter(name="drmaInterval")
    def drma_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
        """
        return pulumi.get(self, "drma_interval")

    @drma_interval.setter
    def drma_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "drma_interval", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="echoInterval")
    def echo_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
        """
        return pulumi.get(self, "echo_interval")

    @echo_interval.setter
    def echo_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "echo_interval", value)

    @property
    @pulumi.getter(name="fakeApLog")
    def fake_ap_log(self) -> Optional[pulumi.Input[int]]:
        """
        Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
        """
        return pulumi.get(self, "fake_ap_log")

    @fake_ap_log.setter
    def fake_ap_log(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fake_ap_log", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipsecIntfCleanup")
    def ipsec_intf_cleanup(self) -> Optional[pulumi.Input[int]]:
        """
        Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
        """
        return pulumi.get(self, "ipsec_intf_cleanup")

    @ipsec_intf_cleanup.setter
    def ipsec_intf_cleanup(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_intf_cleanup", value)

    @property
    @pulumi.getter(name="natSessionKeepAlive")
    def nat_session_keep_alive(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
        """
        return pulumi.get(self, "nat_session_keep_alive")

    @nat_session_keep_alive.setter
    def nat_session_keep_alive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nat_session_keep_alive", value)

    @property
    @pulumi.getter(name="radioStatsInterval")
    def radio_stats_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running radio reports (1 - 255 sec, default = 15).
        """
        return pulumi.get(self, "radio_stats_interval")

    @radio_stats_interval.setter
    def radio_stats_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_stats_interval", value)

    @property
    @pulumi.getter(name="rogueApCleanup")
    def rogue_ap_cleanup(self) -> Optional[pulumi.Input[int]]:
        """
        Time period in minutes to keep rogue AP after it is gone (default = 0).
        """
        return pulumi.get(self, "rogue_ap_cleanup")

    @rogue_ap_cleanup.setter
    def rogue_ap_cleanup(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rogue_ap_cleanup", value)

    @property
    @pulumi.getter(name="rogueApLog")
    def rogue_ap_log(self) -> Optional[pulumi.Input[int]]:
        """
        Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
        """
        return pulumi.get(self, "rogue_ap_log")

    @rogue_ap_log.setter
    def rogue_ap_log(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rogue_ap_log", value)

    @property
    @pulumi.getter(name="staCapabilityInterval")
    def sta_capability_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running station capability reports (1 - 255 sec, default = 30).
        """
        return pulumi.get(self, "sta_capability_interval")

    @sta_capability_interval.setter
    def sta_capability_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sta_capability_interval", value)

    @property
    @pulumi.getter(name="staLocateTimer")
    def sta_locate_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
        """
        return pulumi.get(self, "sta_locate_timer")

    @sta_locate_timer.setter
    def sta_locate_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sta_locate_timer", value)

    @property
    @pulumi.getter(name="staStatsInterval")
    def sta_stats_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running client (station) reports (1 - 255 sec, default = 1).
        """
        return pulumi.get(self, "sta_stats_interval")

    @sta_stats_interval.setter
    def sta_stats_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sta_stats_interval", value)

    @property
    @pulumi.getter(name="vapStatsInterval")
    def vap_stats_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
        """
        return pulumi.get(self, "vap_stats_interval")

    @vap_stats_interval.setter
    def vap_stats_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vap_stats_interval", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Timers(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ap_reboot_wait_interval1: Optional[pulumi.Input[int]] = None,
                 ap_reboot_wait_interval2: Optional[pulumi.Input[int]] = None,
                 ap_reboot_wait_time: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 ble_scan_report_intv: Optional[pulumi.Input[int]] = None,
                 client_idle_rehome_timeout: Optional[pulumi.Input[int]] = None,
                 client_idle_timeout: Optional[pulumi.Input[int]] = None,
                 darrp_day: Optional[pulumi.Input[str]] = None,
                 darrp_optimize: Optional[pulumi.Input[int]] = None,
                 darrp_times: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TimersDarrpTimeArgs']]]]] = None,
                 discovery_interval: Optional[pulumi.Input[int]] = None,
                 drma_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 echo_interval: Optional[pulumi.Input[int]] = None,
                 fake_ap_log: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ipsec_intf_cleanup: Optional[pulumi.Input[int]] = None,
                 nat_session_keep_alive: Optional[pulumi.Input[int]] = None,
                 radio_stats_interval: Optional[pulumi.Input[int]] = None,
                 rogue_ap_cleanup: Optional[pulumi.Input[int]] = None,
                 rogue_ap_log: Optional[pulumi.Input[int]] = None,
                 sta_capability_interval: Optional[pulumi.Input[int]] = None,
                 sta_locate_timer: Optional[pulumi.Input[int]] = None,
                 sta_stats_interval: Optional[pulumi.Input[int]] = None,
                 vap_stats_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure CAPWAP timers.

        ## Import

        WirelessController Timers can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/timers:Timers labelname WirelessControllerTimers
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/timers:Timers labelname WirelessControllerTimers
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ap_reboot_wait_interval1: Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
        :param pulumi.Input[int] ap_reboot_wait_interval2: Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
        :param pulumi.Input[str] ap_reboot_wait_time: Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
        :param pulumi.Input[int] auth_timeout: Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
        :param pulumi.Input[int] ble_scan_report_intv: Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
        :param pulumi.Input[int] client_idle_rehome_timeout: Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
        :param pulumi.Input[int] client_idle_timeout: Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
        :param pulumi.Input[str] darrp_day: Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] darrp_optimize: Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TimersDarrpTimeArgs']]]] darrp_times: Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrp_time` block is documented below.
        :param pulumi.Input[int] discovery_interval: Time between discovery requests (2 - 180 sec, default = 5).
        :param pulumi.Input[int] drma_interval: Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] echo_interval: Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
        :param pulumi.Input[int] fake_ap_log: Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] ipsec_intf_cleanup: Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
        :param pulumi.Input[int] nat_session_keep_alive: Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
        :param pulumi.Input[int] radio_stats_interval: Time between running radio reports (1 - 255 sec, default = 15).
        :param pulumi.Input[int] rogue_ap_cleanup: Time period in minutes to keep rogue AP after it is gone (default = 0).
        :param pulumi.Input[int] rogue_ap_log: Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
        :param pulumi.Input[int] sta_capability_interval: Time between running station capability reports (1 - 255 sec, default = 30).
        :param pulumi.Input[int] sta_locate_timer: Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
        :param pulumi.Input[int] sta_stats_interval: Time between running client (station) reports (1 - 255 sec, default = 1).
        :param pulumi.Input[int] vap_stats_interval: Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TimersArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure CAPWAP timers.

        ## Import

        WirelessController Timers can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/timers:Timers labelname WirelessControllerTimers
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/timers:Timers labelname WirelessControllerTimers
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param TimersArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TimersArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ap_reboot_wait_interval1: Optional[pulumi.Input[int]] = None,
                 ap_reboot_wait_interval2: Optional[pulumi.Input[int]] = None,
                 ap_reboot_wait_time: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 ble_scan_report_intv: Optional[pulumi.Input[int]] = None,
                 client_idle_rehome_timeout: Optional[pulumi.Input[int]] = None,
                 client_idle_timeout: Optional[pulumi.Input[int]] = None,
                 darrp_day: Optional[pulumi.Input[str]] = None,
                 darrp_optimize: Optional[pulumi.Input[int]] = None,
                 darrp_times: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TimersDarrpTimeArgs']]]]] = None,
                 discovery_interval: Optional[pulumi.Input[int]] = None,
                 drma_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 echo_interval: Optional[pulumi.Input[int]] = None,
                 fake_ap_log: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ipsec_intf_cleanup: Optional[pulumi.Input[int]] = None,
                 nat_session_keep_alive: Optional[pulumi.Input[int]] = None,
                 radio_stats_interval: Optional[pulumi.Input[int]] = None,
                 rogue_ap_cleanup: Optional[pulumi.Input[int]] = None,
                 rogue_ap_log: Optional[pulumi.Input[int]] = None,
                 sta_capability_interval: Optional[pulumi.Input[int]] = None,
                 sta_locate_timer: Optional[pulumi.Input[int]] = None,
                 sta_stats_interval: Optional[pulumi.Input[int]] = None,
                 vap_stats_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TimersArgs.__new__(TimersArgs)

            __props__.__dict__["ap_reboot_wait_interval1"] = ap_reboot_wait_interval1
            __props__.__dict__["ap_reboot_wait_interval2"] = ap_reboot_wait_interval2
            __props__.__dict__["ap_reboot_wait_time"] = ap_reboot_wait_time
            __props__.__dict__["auth_timeout"] = auth_timeout
            __props__.__dict__["ble_scan_report_intv"] = ble_scan_report_intv
            __props__.__dict__["client_idle_rehome_timeout"] = client_idle_rehome_timeout
            __props__.__dict__["client_idle_timeout"] = client_idle_timeout
            __props__.__dict__["darrp_day"] = darrp_day
            __props__.__dict__["darrp_optimize"] = darrp_optimize
            __props__.__dict__["darrp_times"] = darrp_times
            __props__.__dict__["discovery_interval"] = discovery_interval
            __props__.__dict__["drma_interval"] = drma_interval
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["echo_interval"] = echo_interval
            __props__.__dict__["fake_ap_log"] = fake_ap_log
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ipsec_intf_cleanup"] = ipsec_intf_cleanup
            __props__.__dict__["nat_session_keep_alive"] = nat_session_keep_alive
            __props__.__dict__["radio_stats_interval"] = radio_stats_interval
            __props__.__dict__["rogue_ap_cleanup"] = rogue_ap_cleanup
            __props__.__dict__["rogue_ap_log"] = rogue_ap_log
            __props__.__dict__["sta_capability_interval"] = sta_capability_interval
            __props__.__dict__["sta_locate_timer"] = sta_locate_timer
            __props__.__dict__["sta_stats_interval"] = sta_stats_interval
            __props__.__dict__["vap_stats_interval"] = vap_stats_interval
            __props__.__dict__["vdomparam"] = vdomparam
        super(Timers, __self__).__init__(
            'fortios:wirelesscontroller/timers:Timers',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ap_reboot_wait_interval1: Optional[pulumi.Input[int]] = None,
            ap_reboot_wait_interval2: Optional[pulumi.Input[int]] = None,
            ap_reboot_wait_time: Optional[pulumi.Input[str]] = None,
            auth_timeout: Optional[pulumi.Input[int]] = None,
            ble_scan_report_intv: Optional[pulumi.Input[int]] = None,
            client_idle_rehome_timeout: Optional[pulumi.Input[int]] = None,
            client_idle_timeout: Optional[pulumi.Input[int]] = None,
            darrp_day: Optional[pulumi.Input[str]] = None,
            darrp_optimize: Optional[pulumi.Input[int]] = None,
            darrp_times: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TimersDarrpTimeArgs']]]]] = None,
            discovery_interval: Optional[pulumi.Input[int]] = None,
            drma_interval: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            echo_interval: Optional[pulumi.Input[int]] = None,
            fake_ap_log: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ipsec_intf_cleanup: Optional[pulumi.Input[int]] = None,
            nat_session_keep_alive: Optional[pulumi.Input[int]] = None,
            radio_stats_interval: Optional[pulumi.Input[int]] = None,
            rogue_ap_cleanup: Optional[pulumi.Input[int]] = None,
            rogue_ap_log: Optional[pulumi.Input[int]] = None,
            sta_capability_interval: Optional[pulumi.Input[int]] = None,
            sta_locate_timer: Optional[pulumi.Input[int]] = None,
            sta_stats_interval: Optional[pulumi.Input[int]] = None,
            vap_stats_interval: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Timers':
        """
        Get an existing Timers resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ap_reboot_wait_interval1: Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
        :param pulumi.Input[int] ap_reboot_wait_interval2: Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
        :param pulumi.Input[str] ap_reboot_wait_time: Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
        :param pulumi.Input[int] auth_timeout: Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
        :param pulumi.Input[int] ble_scan_report_intv: Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
        :param pulumi.Input[int] client_idle_rehome_timeout: Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
        :param pulumi.Input[int] client_idle_timeout: Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
        :param pulumi.Input[str] darrp_day: Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] darrp_optimize: Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TimersDarrpTimeArgs']]]] darrp_times: Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrp_time` block is documented below.
        :param pulumi.Input[int] discovery_interval: Time between discovery requests (2 - 180 sec, default = 5).
        :param pulumi.Input[int] drma_interval: Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] echo_interval: Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
        :param pulumi.Input[int] fake_ap_log: Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] ipsec_intf_cleanup: Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
        :param pulumi.Input[int] nat_session_keep_alive: Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
        :param pulumi.Input[int] radio_stats_interval: Time between running radio reports (1 - 255 sec, default = 15).
        :param pulumi.Input[int] rogue_ap_cleanup: Time period in minutes to keep rogue AP after it is gone (default = 0).
        :param pulumi.Input[int] rogue_ap_log: Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
        :param pulumi.Input[int] sta_capability_interval: Time between running station capability reports (1 - 255 sec, default = 30).
        :param pulumi.Input[int] sta_locate_timer: Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
        :param pulumi.Input[int] sta_stats_interval: Time between running client (station) reports (1 - 255 sec, default = 1).
        :param pulumi.Input[int] vap_stats_interval: Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TimersState.__new__(_TimersState)

        __props__.__dict__["ap_reboot_wait_interval1"] = ap_reboot_wait_interval1
        __props__.__dict__["ap_reboot_wait_interval2"] = ap_reboot_wait_interval2
        __props__.__dict__["ap_reboot_wait_time"] = ap_reboot_wait_time
        __props__.__dict__["auth_timeout"] = auth_timeout
        __props__.__dict__["ble_scan_report_intv"] = ble_scan_report_intv
        __props__.__dict__["client_idle_rehome_timeout"] = client_idle_rehome_timeout
        __props__.__dict__["client_idle_timeout"] = client_idle_timeout
        __props__.__dict__["darrp_day"] = darrp_day
        __props__.__dict__["darrp_optimize"] = darrp_optimize
        __props__.__dict__["darrp_times"] = darrp_times
        __props__.__dict__["discovery_interval"] = discovery_interval
        __props__.__dict__["drma_interval"] = drma_interval
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["echo_interval"] = echo_interval
        __props__.__dict__["fake_ap_log"] = fake_ap_log
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ipsec_intf_cleanup"] = ipsec_intf_cleanup
        __props__.__dict__["nat_session_keep_alive"] = nat_session_keep_alive
        __props__.__dict__["radio_stats_interval"] = radio_stats_interval
        __props__.__dict__["rogue_ap_cleanup"] = rogue_ap_cleanup
        __props__.__dict__["rogue_ap_log"] = rogue_ap_log
        __props__.__dict__["sta_capability_interval"] = sta_capability_interval
        __props__.__dict__["sta_locate_timer"] = sta_locate_timer
        __props__.__dict__["sta_stats_interval"] = sta_stats_interval
        __props__.__dict__["vap_stats_interval"] = vap_stats_interval
        __props__.__dict__["vdomparam"] = vdomparam
        return Timers(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apRebootWaitInterval1")
    def ap_reboot_wait_interval1(self) -> pulumi.Output[int]:
        """
        Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
        """
        return pulumi.get(self, "ap_reboot_wait_interval1")

    @property
    @pulumi.getter(name="apRebootWaitInterval2")
    def ap_reboot_wait_interval2(self) -> pulumi.Output[int]:
        """
        Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
        """
        return pulumi.get(self, "ap_reboot_wait_interval2")

    @property
    @pulumi.getter(name="apRebootWaitTime")
    def ap_reboot_wait_time(self) -> pulumi.Output[str]:
        """
        Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
        """
        return pulumi.get(self, "ap_reboot_wait_time")

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> pulumi.Output[int]:
        """
        Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
        """
        return pulumi.get(self, "auth_timeout")

    @property
    @pulumi.getter(name="bleScanReportIntv")
    def ble_scan_report_intv(self) -> pulumi.Output[int]:
        """
        Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
        """
        return pulumi.get(self, "ble_scan_report_intv")

    @property
    @pulumi.getter(name="clientIdleRehomeTimeout")
    def client_idle_rehome_timeout(self) -> pulumi.Output[int]:
        """
        Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
        """
        return pulumi.get(self, "client_idle_rehome_timeout")

    @property
    @pulumi.getter(name="clientIdleTimeout")
    def client_idle_timeout(self) -> pulumi.Output[int]:
        """
        Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
        """
        return pulumi.get(self, "client_idle_timeout")

    @property
    @pulumi.getter(name="darrpDay")
    def darrp_day(self) -> pulumi.Output[str]:
        """
        Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "darrp_day")

    @property
    @pulumi.getter(name="darrpOptimize")
    def darrp_optimize(self) -> pulumi.Output[int]:
        """
        Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
        """
        return pulumi.get(self, "darrp_optimize")

    @property
    @pulumi.getter(name="darrpTimes")
    def darrp_times(self) -> pulumi.Output[Optional[Sequence['outputs.TimersDarrpTime']]]:
        """
        Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrp_time` block is documented below.
        """
        return pulumi.get(self, "darrp_times")

    @property
    @pulumi.getter(name="discoveryInterval")
    def discovery_interval(self) -> pulumi.Output[int]:
        """
        Time between discovery requests (2 - 180 sec, default = 5).
        """
        return pulumi.get(self, "discovery_interval")

    @property
    @pulumi.getter(name="drmaInterval")
    def drma_interval(self) -> pulumi.Output[int]:
        """
        Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
        """
        return pulumi.get(self, "drma_interval")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="echoInterval")
    def echo_interval(self) -> pulumi.Output[int]:
        """
        Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
        """
        return pulumi.get(self, "echo_interval")

    @property
    @pulumi.getter(name="fakeApLog")
    def fake_ap_log(self) -> pulumi.Output[int]:
        """
        Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
        """
        return pulumi.get(self, "fake_ap_log")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ipsecIntfCleanup")
    def ipsec_intf_cleanup(self) -> pulumi.Output[int]:
        """
        Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
        """
        return pulumi.get(self, "ipsec_intf_cleanup")

    @property
    @pulumi.getter(name="natSessionKeepAlive")
    def nat_session_keep_alive(self) -> pulumi.Output[int]:
        """
        Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
        """
        return pulumi.get(self, "nat_session_keep_alive")

    @property
    @pulumi.getter(name="radioStatsInterval")
    def radio_stats_interval(self) -> pulumi.Output[int]:
        """
        Time between running radio reports (1 - 255 sec, default = 15).
        """
        return pulumi.get(self, "radio_stats_interval")

    @property
    @pulumi.getter(name="rogueApCleanup")
    def rogue_ap_cleanup(self) -> pulumi.Output[int]:
        """
        Time period in minutes to keep rogue AP after it is gone (default = 0).
        """
        return pulumi.get(self, "rogue_ap_cleanup")

    @property
    @pulumi.getter(name="rogueApLog")
    def rogue_ap_log(self) -> pulumi.Output[int]:
        """
        Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
        """
        return pulumi.get(self, "rogue_ap_log")

    @property
    @pulumi.getter(name="staCapabilityInterval")
    def sta_capability_interval(self) -> pulumi.Output[int]:
        """
        Time between running station capability reports (1 - 255 sec, default = 30).
        """
        return pulumi.get(self, "sta_capability_interval")

    @property
    @pulumi.getter(name="staLocateTimer")
    def sta_locate_timer(self) -> pulumi.Output[int]:
        """
        Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
        """
        return pulumi.get(self, "sta_locate_timer")

    @property
    @pulumi.getter(name="staStatsInterval")
    def sta_stats_interval(self) -> pulumi.Output[int]:
        """
        Time between running client (station) reports (1 - 255 sec, default = 1).
        """
        return pulumi.get(self, "sta_stats_interval")

    @property
    @pulumi.getter(name="vapStatsInterval")
    def vap_stats_interval(self) -> pulumi.Output[int]:
        """
        Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
        """
        return pulumi.get(self, "vap_stats_interval")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

