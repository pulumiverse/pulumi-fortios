# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RegionArgs', 'Region']

@pulumi.input_type
class RegionArgs:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 grayscale: Optional[pulumi.Input[str]] = None,
                 image_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 opacity: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Region resource.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[str] grayscale: Region image grayscale. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] image_type: FortiAP region image type (png|jpeg|gif). Valid values: `png`, `jpeg`, `gif`.
        :param pulumi.Input[str] name: FortiAP region name.
        :param pulumi.Input[int] opacity: Region image opacity (0 - 100).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if grayscale is not None:
            pulumi.set(__self__, "grayscale", grayscale)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if opacity is not None:
            pulumi.set(__self__, "opacity", opacity)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def grayscale(self) -> Optional[pulumi.Input[str]]:
        """
        Region image grayscale. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "grayscale")

    @grayscale.setter
    def grayscale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grayscale", value)

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAP region image type (png|jpeg|gif). Valid values: `png`, `jpeg`, `gif`.
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAP region name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def opacity(self) -> Optional[pulumi.Input[int]]:
        """
        Region image opacity (0 - 100).
        """
        return pulumi.get(self, "opacity")

    @opacity.setter
    def opacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "opacity", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _RegionState:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 grayscale: Optional[pulumi.Input[str]] = None,
                 image_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 opacity: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Region resources.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[str] grayscale: Region image grayscale. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] image_type: FortiAP region image type (png|jpeg|gif). Valid values: `png`, `jpeg`, `gif`.
        :param pulumi.Input[str] name: FortiAP region name.
        :param pulumi.Input[int] opacity: Region image opacity (0 - 100).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if grayscale is not None:
            pulumi.set(__self__, "grayscale", grayscale)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if opacity is not None:
            pulumi.set(__self__, "opacity", opacity)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def grayscale(self) -> Optional[pulumi.Input[str]]:
        """
        Region image grayscale. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "grayscale")

    @grayscale.setter
    def grayscale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grayscale", value)

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAP region image type (png|jpeg|gif). Valid values: `png`, `jpeg`, `gif`.
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAP region name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def opacity(self) -> Optional[pulumi.Input[int]]:
        """
        Region image opacity (0 - 100).
        """
        return pulumi.get(self, "opacity")

    @opacity.setter
    def opacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "opacity", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Region(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 grayscale: Optional[pulumi.Input[str]] = None,
                 image_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 opacity: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FortiAP regions (for floor plans and maps).

        ## Import

        WirelessController Region can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/region:Region labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/region:Region labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[str] grayscale: Region image grayscale. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] image_type: FortiAP region image type (png|jpeg|gif). Valid values: `png`, `jpeg`, `gif`.
        :param pulumi.Input[str] name: FortiAP region name.
        :param pulumi.Input[int] opacity: Region image opacity (0 - 100).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RegionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiAP regions (for floor plans and maps).

        ## Import

        WirelessController Region can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/region:Region labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/region:Region labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param RegionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RegionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 grayscale: Optional[pulumi.Input[str]] = None,
                 image_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 opacity: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RegionArgs.__new__(RegionArgs)

            __props__.__dict__["comments"] = comments
            __props__.__dict__["grayscale"] = grayscale
            __props__.__dict__["image_type"] = image_type
            __props__.__dict__["name"] = name
            __props__.__dict__["opacity"] = opacity
            __props__.__dict__["vdomparam"] = vdomparam
        super(Region, __self__).__init__(
            'fortios:wirelesscontroller/region:Region',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comments: Optional[pulumi.Input[str]] = None,
            grayscale: Optional[pulumi.Input[str]] = None,
            image_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            opacity: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Region':
        """
        Get an existing Region resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[str] grayscale: Region image grayscale. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] image_type: FortiAP region image type (png|jpeg|gif). Valid values: `png`, `jpeg`, `gif`.
        :param pulumi.Input[str] name: FortiAP region name.
        :param pulumi.Input[int] opacity: Region image opacity (0 - 100).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RegionState.__new__(_RegionState)

        __props__.__dict__["comments"] = comments
        __props__.__dict__["grayscale"] = grayscale
        __props__.__dict__["image_type"] = image_type
        __props__.__dict__["name"] = name
        __props__.__dict__["opacity"] = opacity
        __props__.__dict__["vdomparam"] = vdomparam
        return Region(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[str]:
        """
        Comments.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def grayscale(self) -> pulumi.Output[str]:
        """
        Region image grayscale. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "grayscale")

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> pulumi.Output[str]:
        """
        FortiAP region image type (png|jpeg|gif). Valid values: `png`, `jpeg`, `gif`.
        """
        return pulumi.get(self, "image_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        FortiAP region name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def opacity(self) -> pulumi.Output[int]:
        """
        Region image opacity (0 - 100).
        """
        return pulumi.get(self, "opacity")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

