# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HsprofileArgs', 'Hsprofile']

@pulumi.input_type
class HsprofileArgs:
    def __init__(__self__, *,
                 access_network_asra: Optional[pulumi.Input[str]] = None,
                 access_network_esr: Optional[pulumi.Input[str]] = None,
                 access_network_internet: Optional[pulumi.Input[str]] = None,
                 access_network_type: Optional[pulumi.Input[str]] = None,
                 access_network_uesa: Optional[pulumi.Input[str]] = None,
                 advice_of_charge: Optional[pulumi.Input[str]] = None,
                 anqp_domain_id: Optional[pulumi.Input[int]] = None,
                 bss_transition: Optional[pulumi.Input[str]] = None,
                 conn_cap: Optional[pulumi.Input[str]] = None,
                 deauth_request_timeout: Optional[pulumi.Input[int]] = None,
                 dgaf: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 gas_comeback_delay: Optional[pulumi.Input[int]] = None,
                 gas_fragmentation_limit: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hessid: Optional[pulumi.Input[str]] = None,
                 ip_addr_type: Optional[pulumi.Input[str]] = None,
                 l2tif: Optional[pulumi.Input[str]] = None,
                 n3gpp_plmn: Optional[pulumi.Input[str]] = None,
                 nai_realm: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_auth: Optional[pulumi.Input[str]] = None,
                 oper_friendly_name: Optional[pulumi.Input[str]] = None,
                 oper_icon: Optional[pulumi.Input[str]] = None,
                 osu_provider_nai: Optional[pulumi.Input[str]] = None,
                 osu_providers: Optional[pulumi.Input[Sequence[pulumi.Input['HsprofileOsuProviderArgs']]]] = None,
                 osu_ssid: Optional[pulumi.Input[str]] = None,
                 pame_bi: Optional[pulumi.Input[str]] = None,
                 proxy_arp: Optional[pulumi.Input[str]] = None,
                 qos_map: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[int]] = None,
                 roaming_consortium: Optional[pulumi.Input[str]] = None,
                 terms_and_conditions: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 venue_group: Optional[pulumi.Input[str]] = None,
                 venue_name: Optional[pulumi.Input[str]] = None,
                 venue_type: Optional[pulumi.Input[str]] = None,
                 venue_url: Optional[pulumi.Input[str]] = None,
                 wan_metrics: Optional[pulumi.Input[str]] = None,
                 wnm_sleep_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Hsprofile resource.
        :param pulumi.Input[str] access_network_asra: Enable/disable additional step required for access (ASRA). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_esr: Enable/disable emergency services reachable (ESR). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_internet: Enable/disable connectivity to the Internet. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_type: Access network type. Valid values: `private-network`, `private-network-with-guest-access`, `chargeable-public-network`, `free-public-network`, `personal-device-network`, `emergency-services-only-network`, `test-or-experimental`, `wildcard`.
        :param pulumi.Input[str] access_network_uesa: Enable/disable unauthenticated emergency service accessible (UESA). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] advice_of_charge: Advice of charge.
        :param pulumi.Input[int] anqp_domain_id: ANQP Domain ID (0-65535).
        :param pulumi.Input[str] bss_transition: Enable/disable basic service set (BSS) transition Support. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] conn_cap: Connection capability name.
        :param pulumi.Input[int] deauth_request_timeout: Deauthentication request timeout (in seconds).
        :param pulumi.Input[str] dgaf: Enable/disable downstream group-addressed forwarding (DGAF). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] domain_name: Domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] gas_comeback_delay: GAS comeback delay (0 or 100 - 4000 milliseconds, default = 500).
        :param pulumi.Input[int] gas_fragmentation_limit: GAS fragmentation limit (512 - 4096, default = 1024).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hessid: Homogeneous extended service set identifier (HESSID).
        :param pulumi.Input[str] ip_addr_type: IP address type name.
        :param pulumi.Input[str] l2tif: Enable/disable Layer 2 traffic inspection and filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] n3gpp_plmn: 3GPP PLMN name.
        :param pulumi.Input[str] nai_realm: NAI realm list name.
        :param pulumi.Input[str] name: Hotspot profile name.
        :param pulumi.Input[str] network_auth: Network authentication name.
        :param pulumi.Input[str] oper_friendly_name: Operator friendly name.
        :param pulumi.Input[str] oper_icon: Operator icon.
        :param pulumi.Input[str] osu_provider_nai: OSU Provider NAI.
        :param pulumi.Input[Sequence[pulumi.Input['HsprofileOsuProviderArgs']]] osu_providers: Manually selected list of OSU provider(s). The structure of `osu_provider` block is documented below.
        :param pulumi.Input[str] osu_ssid: Online sign up (OSU) SSID.
        :param pulumi.Input[str] pame_bi: Enable/disable Pre-Association Message Exchange BSSID Independent (PAME-BI). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] proxy_arp: Enable/disable Proxy ARP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] qos_map: QoS MAP set ID.
        :param pulumi.Input[int] release: Hotspot 2.0 Release number (1, 2, 3, default = 2).
        :param pulumi.Input[str] roaming_consortium: Roaming consortium list name.
        :param pulumi.Input[str] terms_and_conditions: Terms and conditions.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] venue_group: Venue group. Valid values: `unspecified`, `assembly`, `business`, `educational`, `factory`, `institutional`, `mercantile`, `residential`, `storage`, `utility`, `vehicular`, `outdoor`.
        :param pulumi.Input[str] venue_name: Venue name.
        :param pulumi.Input[str] venue_type: Venue type. Valid values: `unspecified`, `arena`, `stadium`, `passenger-terminal`, `amphitheater`, `amusement-park`, `place-of-worship`, `convention-center`, `library`, `museum`, `restaurant`, `theater`, `bar`, `coffee-shop`, `zoo-or-aquarium`, `emergency-center`, `doctor-office`, `bank`, `fire-station`, `police-station`, `post-office`, `professional-office`, `research-facility`, `attorney-office`, `primary-school`, `secondary-school`, `university-or-college`, `factory`, `hospital`, `long-term-care-facility`, `rehab-center`, `group-home`, `prison-or-jail`, `retail-store`, `grocery-market`, `auto-service-station`, `shopping-mall`, `gas-station`, `private`, `hotel-or-motel`, `dormitory`, `boarding-house`, `automobile`, `airplane`, `bus`, `ferry`, `ship-or-boat`, `train`, `motor-bike`, `muni-mesh-network`, `city-park`, `rest-area`, `traffic-control`, `bus-stop`, `kiosk`.
        :param pulumi.Input[str] venue_url: Venue name.
        :param pulumi.Input[str] wan_metrics: WAN metric name.
        :param pulumi.Input[str] wnm_sleep_mode: Enable/disable wireless network management (WNM) sleep mode. Valid values: `enable`, `disable`.
        """
        if access_network_asra is not None:
            pulumi.set(__self__, "access_network_asra", access_network_asra)
        if access_network_esr is not None:
            pulumi.set(__self__, "access_network_esr", access_network_esr)
        if access_network_internet is not None:
            pulumi.set(__self__, "access_network_internet", access_network_internet)
        if access_network_type is not None:
            pulumi.set(__self__, "access_network_type", access_network_type)
        if access_network_uesa is not None:
            pulumi.set(__self__, "access_network_uesa", access_network_uesa)
        if advice_of_charge is not None:
            pulumi.set(__self__, "advice_of_charge", advice_of_charge)
        if anqp_domain_id is not None:
            pulumi.set(__self__, "anqp_domain_id", anqp_domain_id)
        if bss_transition is not None:
            pulumi.set(__self__, "bss_transition", bss_transition)
        if conn_cap is not None:
            pulumi.set(__self__, "conn_cap", conn_cap)
        if deauth_request_timeout is not None:
            pulumi.set(__self__, "deauth_request_timeout", deauth_request_timeout)
        if dgaf is not None:
            pulumi.set(__self__, "dgaf", dgaf)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if gas_comeback_delay is not None:
            pulumi.set(__self__, "gas_comeback_delay", gas_comeback_delay)
        if gas_fragmentation_limit is not None:
            pulumi.set(__self__, "gas_fragmentation_limit", gas_fragmentation_limit)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hessid is not None:
            pulumi.set(__self__, "hessid", hessid)
        if ip_addr_type is not None:
            pulumi.set(__self__, "ip_addr_type", ip_addr_type)
        if l2tif is not None:
            pulumi.set(__self__, "l2tif", l2tif)
        if n3gpp_plmn is not None:
            pulumi.set(__self__, "n3gpp_plmn", n3gpp_plmn)
        if nai_realm is not None:
            pulumi.set(__self__, "nai_realm", nai_realm)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_auth is not None:
            pulumi.set(__self__, "network_auth", network_auth)
        if oper_friendly_name is not None:
            pulumi.set(__self__, "oper_friendly_name", oper_friendly_name)
        if oper_icon is not None:
            pulumi.set(__self__, "oper_icon", oper_icon)
        if osu_provider_nai is not None:
            pulumi.set(__self__, "osu_provider_nai", osu_provider_nai)
        if osu_providers is not None:
            pulumi.set(__self__, "osu_providers", osu_providers)
        if osu_ssid is not None:
            pulumi.set(__self__, "osu_ssid", osu_ssid)
        if pame_bi is not None:
            pulumi.set(__self__, "pame_bi", pame_bi)
        if proxy_arp is not None:
            pulumi.set(__self__, "proxy_arp", proxy_arp)
        if qos_map is not None:
            pulumi.set(__self__, "qos_map", qos_map)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if roaming_consortium is not None:
            pulumi.set(__self__, "roaming_consortium", roaming_consortium)
        if terms_and_conditions is not None:
            pulumi.set(__self__, "terms_and_conditions", terms_and_conditions)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if venue_group is not None:
            pulumi.set(__self__, "venue_group", venue_group)
        if venue_name is not None:
            pulumi.set(__self__, "venue_name", venue_name)
        if venue_type is not None:
            pulumi.set(__self__, "venue_type", venue_type)
        if venue_url is not None:
            pulumi.set(__self__, "venue_url", venue_url)
        if wan_metrics is not None:
            pulumi.set(__self__, "wan_metrics", wan_metrics)
        if wnm_sleep_mode is not None:
            pulumi.set(__self__, "wnm_sleep_mode", wnm_sleep_mode)

    @property
    @pulumi.getter(name="accessNetworkAsra")
    def access_network_asra(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable additional step required for access (ASRA). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_asra")

    @access_network_asra.setter
    def access_network_asra(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_network_asra", value)

    @property
    @pulumi.getter(name="accessNetworkEsr")
    def access_network_esr(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable emergency services reachable (ESR). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_esr")

    @access_network_esr.setter
    def access_network_esr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_network_esr", value)

    @property
    @pulumi.getter(name="accessNetworkInternet")
    def access_network_internet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable connectivity to the Internet. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_internet")

    @access_network_internet.setter
    def access_network_internet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_network_internet", value)

    @property
    @pulumi.getter(name="accessNetworkType")
    def access_network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Access network type. Valid values: `private-network`, `private-network-with-guest-access`, `chargeable-public-network`, `free-public-network`, `personal-device-network`, `emergency-services-only-network`, `test-or-experimental`, `wildcard`.
        """
        return pulumi.get(self, "access_network_type")

    @access_network_type.setter
    def access_network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_network_type", value)

    @property
    @pulumi.getter(name="accessNetworkUesa")
    def access_network_uesa(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable unauthenticated emergency service accessible (UESA). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_uesa")

    @access_network_uesa.setter
    def access_network_uesa(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_network_uesa", value)

    @property
    @pulumi.getter(name="adviceOfCharge")
    def advice_of_charge(self) -> Optional[pulumi.Input[str]]:
        """
        Advice of charge.
        """
        return pulumi.get(self, "advice_of_charge")

    @advice_of_charge.setter
    def advice_of_charge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advice_of_charge", value)

    @property
    @pulumi.getter(name="anqpDomainId")
    def anqp_domain_id(self) -> Optional[pulumi.Input[int]]:
        """
        ANQP Domain ID (0-65535).
        """
        return pulumi.get(self, "anqp_domain_id")

    @anqp_domain_id.setter
    def anqp_domain_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "anqp_domain_id", value)

    @property
    @pulumi.getter(name="bssTransition")
    def bss_transition(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable basic service set (BSS) transition Support. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bss_transition")

    @bss_transition.setter
    def bss_transition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_transition", value)

    @property
    @pulumi.getter(name="connCap")
    def conn_cap(self) -> Optional[pulumi.Input[str]]:
        """
        Connection capability name.
        """
        return pulumi.get(self, "conn_cap")

    @conn_cap.setter
    def conn_cap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conn_cap", value)

    @property
    @pulumi.getter(name="deauthRequestTimeout")
    def deauth_request_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Deauthentication request timeout (in seconds).
        """
        return pulumi.get(self, "deauth_request_timeout")

    @deauth_request_timeout.setter
    def deauth_request_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deauth_request_timeout", value)

    @property
    @pulumi.getter
    def dgaf(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable downstream group-addressed forwarding (DGAF). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dgaf")

    @dgaf.setter
    def dgaf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dgaf", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="gasComebackDelay")
    def gas_comeback_delay(self) -> Optional[pulumi.Input[int]]:
        """
        GAS comeback delay (0 or 100 - 4000 milliseconds, default = 500).
        """
        return pulumi.get(self, "gas_comeback_delay")

    @gas_comeback_delay.setter
    def gas_comeback_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gas_comeback_delay", value)

    @property
    @pulumi.getter(name="gasFragmentationLimit")
    def gas_fragmentation_limit(self) -> Optional[pulumi.Input[int]]:
        """
        GAS fragmentation limit (512 - 4096, default = 1024).
        """
        return pulumi.get(self, "gas_fragmentation_limit")

    @gas_fragmentation_limit.setter
    def gas_fragmentation_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gas_fragmentation_limit", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def hessid(self) -> Optional[pulumi.Input[str]]:
        """
        Homogeneous extended service set identifier (HESSID).
        """
        return pulumi.get(self, "hessid")

    @hessid.setter
    def hessid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hessid", value)

    @property
    @pulumi.getter(name="ipAddrType")
    def ip_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        IP address type name.
        """
        return pulumi.get(self, "ip_addr_type")

    @ip_addr_type.setter
    def ip_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_addr_type", value)

    @property
    @pulumi.getter
    def l2tif(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Layer 2 traffic inspection and filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "l2tif")

    @l2tif.setter
    def l2tif(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l2tif", value)

    @property
    @pulumi.getter(name="n3gppPlmn")
    def n3gpp_plmn(self) -> Optional[pulumi.Input[str]]:
        """
        3GPP PLMN name.
        """
        return pulumi.get(self, "n3gpp_plmn")

    @n3gpp_plmn.setter
    def n3gpp_plmn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n3gpp_plmn", value)

    @property
    @pulumi.getter(name="naiRealm")
    def nai_realm(self) -> Optional[pulumi.Input[str]]:
        """
        NAI realm list name.
        """
        return pulumi.get(self, "nai_realm")

    @nai_realm.setter
    def nai_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nai_realm", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Hotspot profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkAuth")
    def network_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Network authentication name.
        """
        return pulumi.get(self, "network_auth")

    @network_auth.setter
    def network_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_auth", value)

    @property
    @pulumi.getter(name="operFriendlyName")
    def oper_friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Operator friendly name.
        """
        return pulumi.get(self, "oper_friendly_name")

    @oper_friendly_name.setter
    def oper_friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oper_friendly_name", value)

    @property
    @pulumi.getter(name="operIcon")
    def oper_icon(self) -> Optional[pulumi.Input[str]]:
        """
        Operator icon.
        """
        return pulumi.get(self, "oper_icon")

    @oper_icon.setter
    def oper_icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oper_icon", value)

    @property
    @pulumi.getter(name="osuProviderNai")
    def osu_provider_nai(self) -> Optional[pulumi.Input[str]]:
        """
        OSU Provider NAI.
        """
        return pulumi.get(self, "osu_provider_nai")

    @osu_provider_nai.setter
    def osu_provider_nai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_provider_nai", value)

    @property
    @pulumi.getter(name="osuProviders")
    def osu_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HsprofileOsuProviderArgs']]]]:
        """
        Manually selected list of OSU provider(s). The structure of `osu_provider` block is documented below.
        """
        return pulumi.get(self, "osu_providers")

    @osu_providers.setter
    def osu_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HsprofileOsuProviderArgs']]]]):
        pulumi.set(self, "osu_providers", value)

    @property
    @pulumi.getter(name="osuSsid")
    def osu_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Online sign up (OSU) SSID.
        """
        return pulumi.get(self, "osu_ssid")

    @osu_ssid.setter
    def osu_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_ssid", value)

    @property
    @pulumi.getter(name="pameBi")
    def pame_bi(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Pre-Association Message Exchange BSSID Independent (PAME-BI). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pame_bi")

    @pame_bi.setter
    def pame_bi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pame_bi", value)

    @property
    @pulumi.getter(name="proxyArp")
    def proxy_arp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Proxy ARP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_arp")

    @proxy_arp.setter
    def proxy_arp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_arp", value)

    @property
    @pulumi.getter(name="qosMap")
    def qos_map(self) -> Optional[pulumi.Input[str]]:
        """
        QoS MAP set ID.
        """
        return pulumi.get(self, "qos_map")

    @qos_map.setter
    def qos_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_map", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[int]]:
        """
        Hotspot 2.0 Release number (1, 2, 3, default = 2).
        """
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter(name="roamingConsortium")
    def roaming_consortium(self) -> Optional[pulumi.Input[str]]:
        """
        Roaming consortium list name.
        """
        return pulumi.get(self, "roaming_consortium")

    @roaming_consortium.setter
    def roaming_consortium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roaming_consortium", value)

    @property
    @pulumi.getter(name="termsAndConditions")
    def terms_and_conditions(self) -> Optional[pulumi.Input[str]]:
        """
        Terms and conditions.
        """
        return pulumi.get(self, "terms_and_conditions")

    @terms_and_conditions.setter
    def terms_and_conditions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terms_and_conditions", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="venueGroup")
    def venue_group(self) -> Optional[pulumi.Input[str]]:
        """
        Venue group. Valid values: `unspecified`, `assembly`, `business`, `educational`, `factory`, `institutional`, `mercantile`, `residential`, `storage`, `utility`, `vehicular`, `outdoor`.
        """
        return pulumi.get(self, "venue_group")

    @venue_group.setter
    def venue_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "venue_group", value)

    @property
    @pulumi.getter(name="venueName")
    def venue_name(self) -> Optional[pulumi.Input[str]]:
        """
        Venue name.
        """
        return pulumi.get(self, "venue_name")

    @venue_name.setter
    def venue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "venue_name", value)

    @property
    @pulumi.getter(name="venueType")
    def venue_type(self) -> Optional[pulumi.Input[str]]:
        """
        Venue type. Valid values: `unspecified`, `arena`, `stadium`, `passenger-terminal`, `amphitheater`, `amusement-park`, `place-of-worship`, `convention-center`, `library`, `museum`, `restaurant`, `theater`, `bar`, `coffee-shop`, `zoo-or-aquarium`, `emergency-center`, `doctor-office`, `bank`, `fire-station`, `police-station`, `post-office`, `professional-office`, `research-facility`, `attorney-office`, `primary-school`, `secondary-school`, `university-or-college`, `factory`, `hospital`, `long-term-care-facility`, `rehab-center`, `group-home`, `prison-or-jail`, `retail-store`, `grocery-market`, `auto-service-station`, `shopping-mall`, `gas-station`, `private`, `hotel-or-motel`, `dormitory`, `boarding-house`, `automobile`, `airplane`, `bus`, `ferry`, `ship-or-boat`, `train`, `motor-bike`, `muni-mesh-network`, `city-park`, `rest-area`, `traffic-control`, `bus-stop`, `kiosk`.
        """
        return pulumi.get(self, "venue_type")

    @venue_type.setter
    def venue_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "venue_type", value)

    @property
    @pulumi.getter(name="venueUrl")
    def venue_url(self) -> Optional[pulumi.Input[str]]:
        """
        Venue name.
        """
        return pulumi.get(self, "venue_url")

    @venue_url.setter
    def venue_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "venue_url", value)

    @property
    @pulumi.getter(name="wanMetrics")
    def wan_metrics(self) -> Optional[pulumi.Input[str]]:
        """
        WAN metric name.
        """
        return pulumi.get(self, "wan_metrics")

    @wan_metrics.setter
    def wan_metrics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_metrics", value)

    @property
    @pulumi.getter(name="wnmSleepMode")
    def wnm_sleep_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable wireless network management (WNM) sleep mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wnm_sleep_mode")

    @wnm_sleep_mode.setter
    def wnm_sleep_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wnm_sleep_mode", value)


@pulumi.input_type
class _HsprofileState:
    def __init__(__self__, *,
                 access_network_asra: Optional[pulumi.Input[str]] = None,
                 access_network_esr: Optional[pulumi.Input[str]] = None,
                 access_network_internet: Optional[pulumi.Input[str]] = None,
                 access_network_type: Optional[pulumi.Input[str]] = None,
                 access_network_uesa: Optional[pulumi.Input[str]] = None,
                 advice_of_charge: Optional[pulumi.Input[str]] = None,
                 anqp_domain_id: Optional[pulumi.Input[int]] = None,
                 bss_transition: Optional[pulumi.Input[str]] = None,
                 conn_cap: Optional[pulumi.Input[str]] = None,
                 deauth_request_timeout: Optional[pulumi.Input[int]] = None,
                 dgaf: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 gas_comeback_delay: Optional[pulumi.Input[int]] = None,
                 gas_fragmentation_limit: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hessid: Optional[pulumi.Input[str]] = None,
                 ip_addr_type: Optional[pulumi.Input[str]] = None,
                 l2tif: Optional[pulumi.Input[str]] = None,
                 n3gpp_plmn: Optional[pulumi.Input[str]] = None,
                 nai_realm: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_auth: Optional[pulumi.Input[str]] = None,
                 oper_friendly_name: Optional[pulumi.Input[str]] = None,
                 oper_icon: Optional[pulumi.Input[str]] = None,
                 osu_provider_nai: Optional[pulumi.Input[str]] = None,
                 osu_providers: Optional[pulumi.Input[Sequence[pulumi.Input['HsprofileOsuProviderArgs']]]] = None,
                 osu_ssid: Optional[pulumi.Input[str]] = None,
                 pame_bi: Optional[pulumi.Input[str]] = None,
                 proxy_arp: Optional[pulumi.Input[str]] = None,
                 qos_map: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[int]] = None,
                 roaming_consortium: Optional[pulumi.Input[str]] = None,
                 terms_and_conditions: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 venue_group: Optional[pulumi.Input[str]] = None,
                 venue_name: Optional[pulumi.Input[str]] = None,
                 venue_type: Optional[pulumi.Input[str]] = None,
                 venue_url: Optional[pulumi.Input[str]] = None,
                 wan_metrics: Optional[pulumi.Input[str]] = None,
                 wnm_sleep_mode: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Hsprofile resources.
        :param pulumi.Input[str] access_network_asra: Enable/disable additional step required for access (ASRA). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_esr: Enable/disable emergency services reachable (ESR). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_internet: Enable/disable connectivity to the Internet. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_type: Access network type. Valid values: `private-network`, `private-network-with-guest-access`, `chargeable-public-network`, `free-public-network`, `personal-device-network`, `emergency-services-only-network`, `test-or-experimental`, `wildcard`.
        :param pulumi.Input[str] access_network_uesa: Enable/disable unauthenticated emergency service accessible (UESA). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] advice_of_charge: Advice of charge.
        :param pulumi.Input[int] anqp_domain_id: ANQP Domain ID (0-65535).
        :param pulumi.Input[str] bss_transition: Enable/disable basic service set (BSS) transition Support. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] conn_cap: Connection capability name.
        :param pulumi.Input[int] deauth_request_timeout: Deauthentication request timeout (in seconds).
        :param pulumi.Input[str] dgaf: Enable/disable downstream group-addressed forwarding (DGAF). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] domain_name: Domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] gas_comeback_delay: GAS comeback delay (0 or 100 - 4000 milliseconds, default = 500).
        :param pulumi.Input[int] gas_fragmentation_limit: GAS fragmentation limit (512 - 4096, default = 1024).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hessid: Homogeneous extended service set identifier (HESSID).
        :param pulumi.Input[str] ip_addr_type: IP address type name.
        :param pulumi.Input[str] l2tif: Enable/disable Layer 2 traffic inspection and filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] n3gpp_plmn: 3GPP PLMN name.
        :param pulumi.Input[str] nai_realm: NAI realm list name.
        :param pulumi.Input[str] name: Hotspot profile name.
        :param pulumi.Input[str] network_auth: Network authentication name.
        :param pulumi.Input[str] oper_friendly_name: Operator friendly name.
        :param pulumi.Input[str] oper_icon: Operator icon.
        :param pulumi.Input[str] osu_provider_nai: OSU Provider NAI.
        :param pulumi.Input[Sequence[pulumi.Input['HsprofileOsuProviderArgs']]] osu_providers: Manually selected list of OSU provider(s). The structure of `osu_provider` block is documented below.
        :param pulumi.Input[str] osu_ssid: Online sign up (OSU) SSID.
        :param pulumi.Input[str] pame_bi: Enable/disable Pre-Association Message Exchange BSSID Independent (PAME-BI). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] proxy_arp: Enable/disable Proxy ARP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] qos_map: QoS MAP set ID.
        :param pulumi.Input[int] release: Hotspot 2.0 Release number (1, 2, 3, default = 2).
        :param pulumi.Input[str] roaming_consortium: Roaming consortium list name.
        :param pulumi.Input[str] terms_and_conditions: Terms and conditions.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] venue_group: Venue group. Valid values: `unspecified`, `assembly`, `business`, `educational`, `factory`, `institutional`, `mercantile`, `residential`, `storage`, `utility`, `vehicular`, `outdoor`.
        :param pulumi.Input[str] venue_name: Venue name.
        :param pulumi.Input[str] venue_type: Venue type. Valid values: `unspecified`, `arena`, `stadium`, `passenger-terminal`, `amphitheater`, `amusement-park`, `place-of-worship`, `convention-center`, `library`, `museum`, `restaurant`, `theater`, `bar`, `coffee-shop`, `zoo-or-aquarium`, `emergency-center`, `doctor-office`, `bank`, `fire-station`, `police-station`, `post-office`, `professional-office`, `research-facility`, `attorney-office`, `primary-school`, `secondary-school`, `university-or-college`, `factory`, `hospital`, `long-term-care-facility`, `rehab-center`, `group-home`, `prison-or-jail`, `retail-store`, `grocery-market`, `auto-service-station`, `shopping-mall`, `gas-station`, `private`, `hotel-or-motel`, `dormitory`, `boarding-house`, `automobile`, `airplane`, `bus`, `ferry`, `ship-or-boat`, `train`, `motor-bike`, `muni-mesh-network`, `city-park`, `rest-area`, `traffic-control`, `bus-stop`, `kiosk`.
        :param pulumi.Input[str] venue_url: Venue name.
        :param pulumi.Input[str] wan_metrics: WAN metric name.
        :param pulumi.Input[str] wnm_sleep_mode: Enable/disable wireless network management (WNM) sleep mode. Valid values: `enable`, `disable`.
        """
        if access_network_asra is not None:
            pulumi.set(__self__, "access_network_asra", access_network_asra)
        if access_network_esr is not None:
            pulumi.set(__self__, "access_network_esr", access_network_esr)
        if access_network_internet is not None:
            pulumi.set(__self__, "access_network_internet", access_network_internet)
        if access_network_type is not None:
            pulumi.set(__self__, "access_network_type", access_network_type)
        if access_network_uesa is not None:
            pulumi.set(__self__, "access_network_uesa", access_network_uesa)
        if advice_of_charge is not None:
            pulumi.set(__self__, "advice_of_charge", advice_of_charge)
        if anqp_domain_id is not None:
            pulumi.set(__self__, "anqp_domain_id", anqp_domain_id)
        if bss_transition is not None:
            pulumi.set(__self__, "bss_transition", bss_transition)
        if conn_cap is not None:
            pulumi.set(__self__, "conn_cap", conn_cap)
        if deauth_request_timeout is not None:
            pulumi.set(__self__, "deauth_request_timeout", deauth_request_timeout)
        if dgaf is not None:
            pulumi.set(__self__, "dgaf", dgaf)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if gas_comeback_delay is not None:
            pulumi.set(__self__, "gas_comeback_delay", gas_comeback_delay)
        if gas_fragmentation_limit is not None:
            pulumi.set(__self__, "gas_fragmentation_limit", gas_fragmentation_limit)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hessid is not None:
            pulumi.set(__self__, "hessid", hessid)
        if ip_addr_type is not None:
            pulumi.set(__self__, "ip_addr_type", ip_addr_type)
        if l2tif is not None:
            pulumi.set(__self__, "l2tif", l2tif)
        if n3gpp_plmn is not None:
            pulumi.set(__self__, "n3gpp_plmn", n3gpp_plmn)
        if nai_realm is not None:
            pulumi.set(__self__, "nai_realm", nai_realm)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_auth is not None:
            pulumi.set(__self__, "network_auth", network_auth)
        if oper_friendly_name is not None:
            pulumi.set(__self__, "oper_friendly_name", oper_friendly_name)
        if oper_icon is not None:
            pulumi.set(__self__, "oper_icon", oper_icon)
        if osu_provider_nai is not None:
            pulumi.set(__self__, "osu_provider_nai", osu_provider_nai)
        if osu_providers is not None:
            pulumi.set(__self__, "osu_providers", osu_providers)
        if osu_ssid is not None:
            pulumi.set(__self__, "osu_ssid", osu_ssid)
        if pame_bi is not None:
            pulumi.set(__self__, "pame_bi", pame_bi)
        if proxy_arp is not None:
            pulumi.set(__self__, "proxy_arp", proxy_arp)
        if qos_map is not None:
            pulumi.set(__self__, "qos_map", qos_map)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if roaming_consortium is not None:
            pulumi.set(__self__, "roaming_consortium", roaming_consortium)
        if terms_and_conditions is not None:
            pulumi.set(__self__, "terms_and_conditions", terms_and_conditions)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if venue_group is not None:
            pulumi.set(__self__, "venue_group", venue_group)
        if venue_name is not None:
            pulumi.set(__self__, "venue_name", venue_name)
        if venue_type is not None:
            pulumi.set(__self__, "venue_type", venue_type)
        if venue_url is not None:
            pulumi.set(__self__, "venue_url", venue_url)
        if wan_metrics is not None:
            pulumi.set(__self__, "wan_metrics", wan_metrics)
        if wnm_sleep_mode is not None:
            pulumi.set(__self__, "wnm_sleep_mode", wnm_sleep_mode)

    @property
    @pulumi.getter(name="accessNetworkAsra")
    def access_network_asra(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable additional step required for access (ASRA). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_asra")

    @access_network_asra.setter
    def access_network_asra(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_network_asra", value)

    @property
    @pulumi.getter(name="accessNetworkEsr")
    def access_network_esr(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable emergency services reachable (ESR). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_esr")

    @access_network_esr.setter
    def access_network_esr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_network_esr", value)

    @property
    @pulumi.getter(name="accessNetworkInternet")
    def access_network_internet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable connectivity to the Internet. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_internet")

    @access_network_internet.setter
    def access_network_internet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_network_internet", value)

    @property
    @pulumi.getter(name="accessNetworkType")
    def access_network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Access network type. Valid values: `private-network`, `private-network-with-guest-access`, `chargeable-public-network`, `free-public-network`, `personal-device-network`, `emergency-services-only-network`, `test-or-experimental`, `wildcard`.
        """
        return pulumi.get(self, "access_network_type")

    @access_network_type.setter
    def access_network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_network_type", value)

    @property
    @pulumi.getter(name="accessNetworkUesa")
    def access_network_uesa(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable unauthenticated emergency service accessible (UESA). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_uesa")

    @access_network_uesa.setter
    def access_network_uesa(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_network_uesa", value)

    @property
    @pulumi.getter(name="adviceOfCharge")
    def advice_of_charge(self) -> Optional[pulumi.Input[str]]:
        """
        Advice of charge.
        """
        return pulumi.get(self, "advice_of_charge")

    @advice_of_charge.setter
    def advice_of_charge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advice_of_charge", value)

    @property
    @pulumi.getter(name="anqpDomainId")
    def anqp_domain_id(self) -> Optional[pulumi.Input[int]]:
        """
        ANQP Domain ID (0-65535).
        """
        return pulumi.get(self, "anqp_domain_id")

    @anqp_domain_id.setter
    def anqp_domain_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "anqp_domain_id", value)

    @property
    @pulumi.getter(name="bssTransition")
    def bss_transition(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable basic service set (BSS) transition Support. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bss_transition")

    @bss_transition.setter
    def bss_transition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_transition", value)

    @property
    @pulumi.getter(name="connCap")
    def conn_cap(self) -> Optional[pulumi.Input[str]]:
        """
        Connection capability name.
        """
        return pulumi.get(self, "conn_cap")

    @conn_cap.setter
    def conn_cap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conn_cap", value)

    @property
    @pulumi.getter(name="deauthRequestTimeout")
    def deauth_request_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Deauthentication request timeout (in seconds).
        """
        return pulumi.get(self, "deauth_request_timeout")

    @deauth_request_timeout.setter
    def deauth_request_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deauth_request_timeout", value)

    @property
    @pulumi.getter
    def dgaf(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable downstream group-addressed forwarding (DGAF). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dgaf")

    @dgaf.setter
    def dgaf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dgaf", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="gasComebackDelay")
    def gas_comeback_delay(self) -> Optional[pulumi.Input[int]]:
        """
        GAS comeback delay (0 or 100 - 4000 milliseconds, default = 500).
        """
        return pulumi.get(self, "gas_comeback_delay")

    @gas_comeback_delay.setter
    def gas_comeback_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gas_comeback_delay", value)

    @property
    @pulumi.getter(name="gasFragmentationLimit")
    def gas_fragmentation_limit(self) -> Optional[pulumi.Input[int]]:
        """
        GAS fragmentation limit (512 - 4096, default = 1024).
        """
        return pulumi.get(self, "gas_fragmentation_limit")

    @gas_fragmentation_limit.setter
    def gas_fragmentation_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gas_fragmentation_limit", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def hessid(self) -> Optional[pulumi.Input[str]]:
        """
        Homogeneous extended service set identifier (HESSID).
        """
        return pulumi.get(self, "hessid")

    @hessid.setter
    def hessid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hessid", value)

    @property
    @pulumi.getter(name="ipAddrType")
    def ip_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        IP address type name.
        """
        return pulumi.get(self, "ip_addr_type")

    @ip_addr_type.setter
    def ip_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_addr_type", value)

    @property
    @pulumi.getter
    def l2tif(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Layer 2 traffic inspection and filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "l2tif")

    @l2tif.setter
    def l2tif(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l2tif", value)

    @property
    @pulumi.getter(name="n3gppPlmn")
    def n3gpp_plmn(self) -> Optional[pulumi.Input[str]]:
        """
        3GPP PLMN name.
        """
        return pulumi.get(self, "n3gpp_plmn")

    @n3gpp_plmn.setter
    def n3gpp_plmn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n3gpp_plmn", value)

    @property
    @pulumi.getter(name="naiRealm")
    def nai_realm(self) -> Optional[pulumi.Input[str]]:
        """
        NAI realm list name.
        """
        return pulumi.get(self, "nai_realm")

    @nai_realm.setter
    def nai_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nai_realm", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Hotspot profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkAuth")
    def network_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Network authentication name.
        """
        return pulumi.get(self, "network_auth")

    @network_auth.setter
    def network_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_auth", value)

    @property
    @pulumi.getter(name="operFriendlyName")
    def oper_friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Operator friendly name.
        """
        return pulumi.get(self, "oper_friendly_name")

    @oper_friendly_name.setter
    def oper_friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oper_friendly_name", value)

    @property
    @pulumi.getter(name="operIcon")
    def oper_icon(self) -> Optional[pulumi.Input[str]]:
        """
        Operator icon.
        """
        return pulumi.get(self, "oper_icon")

    @oper_icon.setter
    def oper_icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oper_icon", value)

    @property
    @pulumi.getter(name="osuProviderNai")
    def osu_provider_nai(self) -> Optional[pulumi.Input[str]]:
        """
        OSU Provider NAI.
        """
        return pulumi.get(self, "osu_provider_nai")

    @osu_provider_nai.setter
    def osu_provider_nai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_provider_nai", value)

    @property
    @pulumi.getter(name="osuProviders")
    def osu_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HsprofileOsuProviderArgs']]]]:
        """
        Manually selected list of OSU provider(s). The structure of `osu_provider` block is documented below.
        """
        return pulumi.get(self, "osu_providers")

    @osu_providers.setter
    def osu_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HsprofileOsuProviderArgs']]]]):
        pulumi.set(self, "osu_providers", value)

    @property
    @pulumi.getter(name="osuSsid")
    def osu_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Online sign up (OSU) SSID.
        """
        return pulumi.get(self, "osu_ssid")

    @osu_ssid.setter
    def osu_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_ssid", value)

    @property
    @pulumi.getter(name="pameBi")
    def pame_bi(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Pre-Association Message Exchange BSSID Independent (PAME-BI). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pame_bi")

    @pame_bi.setter
    def pame_bi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pame_bi", value)

    @property
    @pulumi.getter(name="proxyArp")
    def proxy_arp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Proxy ARP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_arp")

    @proxy_arp.setter
    def proxy_arp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_arp", value)

    @property
    @pulumi.getter(name="qosMap")
    def qos_map(self) -> Optional[pulumi.Input[str]]:
        """
        QoS MAP set ID.
        """
        return pulumi.get(self, "qos_map")

    @qos_map.setter
    def qos_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_map", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[int]]:
        """
        Hotspot 2.0 Release number (1, 2, 3, default = 2).
        """
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter(name="roamingConsortium")
    def roaming_consortium(self) -> Optional[pulumi.Input[str]]:
        """
        Roaming consortium list name.
        """
        return pulumi.get(self, "roaming_consortium")

    @roaming_consortium.setter
    def roaming_consortium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roaming_consortium", value)

    @property
    @pulumi.getter(name="termsAndConditions")
    def terms_and_conditions(self) -> Optional[pulumi.Input[str]]:
        """
        Terms and conditions.
        """
        return pulumi.get(self, "terms_and_conditions")

    @terms_and_conditions.setter
    def terms_and_conditions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terms_and_conditions", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="venueGroup")
    def venue_group(self) -> Optional[pulumi.Input[str]]:
        """
        Venue group. Valid values: `unspecified`, `assembly`, `business`, `educational`, `factory`, `institutional`, `mercantile`, `residential`, `storage`, `utility`, `vehicular`, `outdoor`.
        """
        return pulumi.get(self, "venue_group")

    @venue_group.setter
    def venue_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "venue_group", value)

    @property
    @pulumi.getter(name="venueName")
    def venue_name(self) -> Optional[pulumi.Input[str]]:
        """
        Venue name.
        """
        return pulumi.get(self, "venue_name")

    @venue_name.setter
    def venue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "venue_name", value)

    @property
    @pulumi.getter(name="venueType")
    def venue_type(self) -> Optional[pulumi.Input[str]]:
        """
        Venue type. Valid values: `unspecified`, `arena`, `stadium`, `passenger-terminal`, `amphitheater`, `amusement-park`, `place-of-worship`, `convention-center`, `library`, `museum`, `restaurant`, `theater`, `bar`, `coffee-shop`, `zoo-or-aquarium`, `emergency-center`, `doctor-office`, `bank`, `fire-station`, `police-station`, `post-office`, `professional-office`, `research-facility`, `attorney-office`, `primary-school`, `secondary-school`, `university-or-college`, `factory`, `hospital`, `long-term-care-facility`, `rehab-center`, `group-home`, `prison-or-jail`, `retail-store`, `grocery-market`, `auto-service-station`, `shopping-mall`, `gas-station`, `private`, `hotel-or-motel`, `dormitory`, `boarding-house`, `automobile`, `airplane`, `bus`, `ferry`, `ship-or-boat`, `train`, `motor-bike`, `muni-mesh-network`, `city-park`, `rest-area`, `traffic-control`, `bus-stop`, `kiosk`.
        """
        return pulumi.get(self, "venue_type")

    @venue_type.setter
    def venue_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "venue_type", value)

    @property
    @pulumi.getter(name="venueUrl")
    def venue_url(self) -> Optional[pulumi.Input[str]]:
        """
        Venue name.
        """
        return pulumi.get(self, "venue_url")

    @venue_url.setter
    def venue_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "venue_url", value)

    @property
    @pulumi.getter(name="wanMetrics")
    def wan_metrics(self) -> Optional[pulumi.Input[str]]:
        """
        WAN metric name.
        """
        return pulumi.get(self, "wan_metrics")

    @wan_metrics.setter
    def wan_metrics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_metrics", value)

    @property
    @pulumi.getter(name="wnmSleepMode")
    def wnm_sleep_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable wireless network management (WNM) sleep mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wnm_sleep_mode")

    @wnm_sleep_mode.setter
    def wnm_sleep_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wnm_sleep_mode", value)


class Hsprofile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_network_asra: Optional[pulumi.Input[str]] = None,
                 access_network_esr: Optional[pulumi.Input[str]] = None,
                 access_network_internet: Optional[pulumi.Input[str]] = None,
                 access_network_type: Optional[pulumi.Input[str]] = None,
                 access_network_uesa: Optional[pulumi.Input[str]] = None,
                 advice_of_charge: Optional[pulumi.Input[str]] = None,
                 anqp_domain_id: Optional[pulumi.Input[int]] = None,
                 bss_transition: Optional[pulumi.Input[str]] = None,
                 conn_cap: Optional[pulumi.Input[str]] = None,
                 deauth_request_timeout: Optional[pulumi.Input[int]] = None,
                 dgaf: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 gas_comeback_delay: Optional[pulumi.Input[int]] = None,
                 gas_fragmentation_limit: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hessid: Optional[pulumi.Input[str]] = None,
                 ip_addr_type: Optional[pulumi.Input[str]] = None,
                 l2tif: Optional[pulumi.Input[str]] = None,
                 n3gpp_plmn: Optional[pulumi.Input[str]] = None,
                 nai_realm: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_auth: Optional[pulumi.Input[str]] = None,
                 oper_friendly_name: Optional[pulumi.Input[str]] = None,
                 oper_icon: Optional[pulumi.Input[str]] = None,
                 osu_provider_nai: Optional[pulumi.Input[str]] = None,
                 osu_providers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HsprofileOsuProviderArgs']]]]] = None,
                 osu_ssid: Optional[pulumi.Input[str]] = None,
                 pame_bi: Optional[pulumi.Input[str]] = None,
                 proxy_arp: Optional[pulumi.Input[str]] = None,
                 qos_map: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[int]] = None,
                 roaming_consortium: Optional[pulumi.Input[str]] = None,
                 terms_and_conditions: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 venue_group: Optional[pulumi.Input[str]] = None,
                 venue_name: Optional[pulumi.Input[str]] = None,
                 venue_type: Optional[pulumi.Input[str]] = None,
                 venue_url: Optional[pulumi.Input[str]] = None,
                 wan_metrics: Optional[pulumi.Input[str]] = None,
                 wnm_sleep_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure hotspot profile.

        ## Import

        WirelessControllerHotspot20 HsProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/hotspot20/hsprofile:Hsprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/hotspot20/hsprofile:Hsprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_network_asra: Enable/disable additional step required for access (ASRA). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_esr: Enable/disable emergency services reachable (ESR). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_internet: Enable/disable connectivity to the Internet. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_type: Access network type. Valid values: `private-network`, `private-network-with-guest-access`, `chargeable-public-network`, `free-public-network`, `personal-device-network`, `emergency-services-only-network`, `test-or-experimental`, `wildcard`.
        :param pulumi.Input[str] access_network_uesa: Enable/disable unauthenticated emergency service accessible (UESA). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] advice_of_charge: Advice of charge.
        :param pulumi.Input[int] anqp_domain_id: ANQP Domain ID (0-65535).
        :param pulumi.Input[str] bss_transition: Enable/disable basic service set (BSS) transition Support. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] conn_cap: Connection capability name.
        :param pulumi.Input[int] deauth_request_timeout: Deauthentication request timeout (in seconds).
        :param pulumi.Input[str] dgaf: Enable/disable downstream group-addressed forwarding (DGAF). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] domain_name: Domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] gas_comeback_delay: GAS comeback delay (0 or 100 - 4000 milliseconds, default = 500).
        :param pulumi.Input[int] gas_fragmentation_limit: GAS fragmentation limit (512 - 4096, default = 1024).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hessid: Homogeneous extended service set identifier (HESSID).
        :param pulumi.Input[str] ip_addr_type: IP address type name.
        :param pulumi.Input[str] l2tif: Enable/disable Layer 2 traffic inspection and filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] n3gpp_plmn: 3GPP PLMN name.
        :param pulumi.Input[str] nai_realm: NAI realm list name.
        :param pulumi.Input[str] name: Hotspot profile name.
        :param pulumi.Input[str] network_auth: Network authentication name.
        :param pulumi.Input[str] oper_friendly_name: Operator friendly name.
        :param pulumi.Input[str] oper_icon: Operator icon.
        :param pulumi.Input[str] osu_provider_nai: OSU Provider NAI.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HsprofileOsuProviderArgs']]]] osu_providers: Manually selected list of OSU provider(s). The structure of `osu_provider` block is documented below.
        :param pulumi.Input[str] osu_ssid: Online sign up (OSU) SSID.
        :param pulumi.Input[str] pame_bi: Enable/disable Pre-Association Message Exchange BSSID Independent (PAME-BI). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] proxy_arp: Enable/disable Proxy ARP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] qos_map: QoS MAP set ID.
        :param pulumi.Input[int] release: Hotspot 2.0 Release number (1, 2, 3, default = 2).
        :param pulumi.Input[str] roaming_consortium: Roaming consortium list name.
        :param pulumi.Input[str] terms_and_conditions: Terms and conditions.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] venue_group: Venue group. Valid values: `unspecified`, `assembly`, `business`, `educational`, `factory`, `institutional`, `mercantile`, `residential`, `storage`, `utility`, `vehicular`, `outdoor`.
        :param pulumi.Input[str] venue_name: Venue name.
        :param pulumi.Input[str] venue_type: Venue type. Valid values: `unspecified`, `arena`, `stadium`, `passenger-terminal`, `amphitheater`, `amusement-park`, `place-of-worship`, `convention-center`, `library`, `museum`, `restaurant`, `theater`, `bar`, `coffee-shop`, `zoo-or-aquarium`, `emergency-center`, `doctor-office`, `bank`, `fire-station`, `police-station`, `post-office`, `professional-office`, `research-facility`, `attorney-office`, `primary-school`, `secondary-school`, `university-or-college`, `factory`, `hospital`, `long-term-care-facility`, `rehab-center`, `group-home`, `prison-or-jail`, `retail-store`, `grocery-market`, `auto-service-station`, `shopping-mall`, `gas-station`, `private`, `hotel-or-motel`, `dormitory`, `boarding-house`, `automobile`, `airplane`, `bus`, `ferry`, `ship-or-boat`, `train`, `motor-bike`, `muni-mesh-network`, `city-park`, `rest-area`, `traffic-control`, `bus-stop`, `kiosk`.
        :param pulumi.Input[str] venue_url: Venue name.
        :param pulumi.Input[str] wan_metrics: WAN metric name.
        :param pulumi.Input[str] wnm_sleep_mode: Enable/disable wireless network management (WNM) sleep mode. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[HsprofileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure hotspot profile.

        ## Import

        WirelessControllerHotspot20 HsProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/hotspot20/hsprofile:Hsprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/hotspot20/hsprofile:Hsprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param HsprofileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HsprofileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_network_asra: Optional[pulumi.Input[str]] = None,
                 access_network_esr: Optional[pulumi.Input[str]] = None,
                 access_network_internet: Optional[pulumi.Input[str]] = None,
                 access_network_type: Optional[pulumi.Input[str]] = None,
                 access_network_uesa: Optional[pulumi.Input[str]] = None,
                 advice_of_charge: Optional[pulumi.Input[str]] = None,
                 anqp_domain_id: Optional[pulumi.Input[int]] = None,
                 bss_transition: Optional[pulumi.Input[str]] = None,
                 conn_cap: Optional[pulumi.Input[str]] = None,
                 deauth_request_timeout: Optional[pulumi.Input[int]] = None,
                 dgaf: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 gas_comeback_delay: Optional[pulumi.Input[int]] = None,
                 gas_fragmentation_limit: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hessid: Optional[pulumi.Input[str]] = None,
                 ip_addr_type: Optional[pulumi.Input[str]] = None,
                 l2tif: Optional[pulumi.Input[str]] = None,
                 n3gpp_plmn: Optional[pulumi.Input[str]] = None,
                 nai_realm: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_auth: Optional[pulumi.Input[str]] = None,
                 oper_friendly_name: Optional[pulumi.Input[str]] = None,
                 oper_icon: Optional[pulumi.Input[str]] = None,
                 osu_provider_nai: Optional[pulumi.Input[str]] = None,
                 osu_providers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HsprofileOsuProviderArgs']]]]] = None,
                 osu_ssid: Optional[pulumi.Input[str]] = None,
                 pame_bi: Optional[pulumi.Input[str]] = None,
                 proxy_arp: Optional[pulumi.Input[str]] = None,
                 qos_map: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[int]] = None,
                 roaming_consortium: Optional[pulumi.Input[str]] = None,
                 terms_and_conditions: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 venue_group: Optional[pulumi.Input[str]] = None,
                 venue_name: Optional[pulumi.Input[str]] = None,
                 venue_type: Optional[pulumi.Input[str]] = None,
                 venue_url: Optional[pulumi.Input[str]] = None,
                 wan_metrics: Optional[pulumi.Input[str]] = None,
                 wnm_sleep_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HsprofileArgs.__new__(HsprofileArgs)

            __props__.__dict__["access_network_asra"] = access_network_asra
            __props__.__dict__["access_network_esr"] = access_network_esr
            __props__.__dict__["access_network_internet"] = access_network_internet
            __props__.__dict__["access_network_type"] = access_network_type
            __props__.__dict__["access_network_uesa"] = access_network_uesa
            __props__.__dict__["advice_of_charge"] = advice_of_charge
            __props__.__dict__["anqp_domain_id"] = anqp_domain_id
            __props__.__dict__["bss_transition"] = bss_transition
            __props__.__dict__["conn_cap"] = conn_cap
            __props__.__dict__["deauth_request_timeout"] = deauth_request_timeout
            __props__.__dict__["dgaf"] = dgaf
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["gas_comeback_delay"] = gas_comeback_delay
            __props__.__dict__["gas_fragmentation_limit"] = gas_fragmentation_limit
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["hessid"] = hessid
            __props__.__dict__["ip_addr_type"] = ip_addr_type
            __props__.__dict__["l2tif"] = l2tif
            __props__.__dict__["n3gpp_plmn"] = n3gpp_plmn
            __props__.__dict__["nai_realm"] = nai_realm
            __props__.__dict__["name"] = name
            __props__.__dict__["network_auth"] = network_auth
            __props__.__dict__["oper_friendly_name"] = oper_friendly_name
            __props__.__dict__["oper_icon"] = oper_icon
            __props__.__dict__["osu_provider_nai"] = osu_provider_nai
            __props__.__dict__["osu_providers"] = osu_providers
            __props__.__dict__["osu_ssid"] = osu_ssid
            __props__.__dict__["pame_bi"] = pame_bi
            __props__.__dict__["proxy_arp"] = proxy_arp
            __props__.__dict__["qos_map"] = qos_map
            __props__.__dict__["release"] = release
            __props__.__dict__["roaming_consortium"] = roaming_consortium
            __props__.__dict__["terms_and_conditions"] = terms_and_conditions
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["venue_group"] = venue_group
            __props__.__dict__["venue_name"] = venue_name
            __props__.__dict__["venue_type"] = venue_type
            __props__.__dict__["venue_url"] = venue_url
            __props__.__dict__["wan_metrics"] = wan_metrics
            __props__.__dict__["wnm_sleep_mode"] = wnm_sleep_mode
        super(Hsprofile, __self__).__init__(
            'fortios:wirelesscontroller/hotspot20/hsprofile:Hsprofile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_network_asra: Optional[pulumi.Input[str]] = None,
            access_network_esr: Optional[pulumi.Input[str]] = None,
            access_network_internet: Optional[pulumi.Input[str]] = None,
            access_network_type: Optional[pulumi.Input[str]] = None,
            access_network_uesa: Optional[pulumi.Input[str]] = None,
            advice_of_charge: Optional[pulumi.Input[str]] = None,
            anqp_domain_id: Optional[pulumi.Input[int]] = None,
            bss_transition: Optional[pulumi.Input[str]] = None,
            conn_cap: Optional[pulumi.Input[str]] = None,
            deauth_request_timeout: Optional[pulumi.Input[int]] = None,
            dgaf: Optional[pulumi.Input[str]] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            gas_comeback_delay: Optional[pulumi.Input[int]] = None,
            gas_fragmentation_limit: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            hessid: Optional[pulumi.Input[str]] = None,
            ip_addr_type: Optional[pulumi.Input[str]] = None,
            l2tif: Optional[pulumi.Input[str]] = None,
            n3gpp_plmn: Optional[pulumi.Input[str]] = None,
            nai_realm: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_auth: Optional[pulumi.Input[str]] = None,
            oper_friendly_name: Optional[pulumi.Input[str]] = None,
            oper_icon: Optional[pulumi.Input[str]] = None,
            osu_provider_nai: Optional[pulumi.Input[str]] = None,
            osu_providers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HsprofileOsuProviderArgs']]]]] = None,
            osu_ssid: Optional[pulumi.Input[str]] = None,
            pame_bi: Optional[pulumi.Input[str]] = None,
            proxy_arp: Optional[pulumi.Input[str]] = None,
            qos_map: Optional[pulumi.Input[str]] = None,
            release: Optional[pulumi.Input[int]] = None,
            roaming_consortium: Optional[pulumi.Input[str]] = None,
            terms_and_conditions: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            venue_group: Optional[pulumi.Input[str]] = None,
            venue_name: Optional[pulumi.Input[str]] = None,
            venue_type: Optional[pulumi.Input[str]] = None,
            venue_url: Optional[pulumi.Input[str]] = None,
            wan_metrics: Optional[pulumi.Input[str]] = None,
            wnm_sleep_mode: Optional[pulumi.Input[str]] = None) -> 'Hsprofile':
        """
        Get an existing Hsprofile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_network_asra: Enable/disable additional step required for access (ASRA). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_esr: Enable/disable emergency services reachable (ESR). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_internet: Enable/disable connectivity to the Internet. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] access_network_type: Access network type. Valid values: `private-network`, `private-network-with-guest-access`, `chargeable-public-network`, `free-public-network`, `personal-device-network`, `emergency-services-only-network`, `test-or-experimental`, `wildcard`.
        :param pulumi.Input[str] access_network_uesa: Enable/disable unauthenticated emergency service accessible (UESA). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] advice_of_charge: Advice of charge.
        :param pulumi.Input[int] anqp_domain_id: ANQP Domain ID (0-65535).
        :param pulumi.Input[str] bss_transition: Enable/disable basic service set (BSS) transition Support. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] conn_cap: Connection capability name.
        :param pulumi.Input[int] deauth_request_timeout: Deauthentication request timeout (in seconds).
        :param pulumi.Input[str] dgaf: Enable/disable downstream group-addressed forwarding (DGAF). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] domain_name: Domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] gas_comeback_delay: GAS comeback delay (0 or 100 - 4000 milliseconds, default = 500).
        :param pulumi.Input[int] gas_fragmentation_limit: GAS fragmentation limit (512 - 4096, default = 1024).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hessid: Homogeneous extended service set identifier (HESSID).
        :param pulumi.Input[str] ip_addr_type: IP address type name.
        :param pulumi.Input[str] l2tif: Enable/disable Layer 2 traffic inspection and filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] n3gpp_plmn: 3GPP PLMN name.
        :param pulumi.Input[str] nai_realm: NAI realm list name.
        :param pulumi.Input[str] name: Hotspot profile name.
        :param pulumi.Input[str] network_auth: Network authentication name.
        :param pulumi.Input[str] oper_friendly_name: Operator friendly name.
        :param pulumi.Input[str] oper_icon: Operator icon.
        :param pulumi.Input[str] osu_provider_nai: OSU Provider NAI.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HsprofileOsuProviderArgs']]]] osu_providers: Manually selected list of OSU provider(s). The structure of `osu_provider` block is documented below.
        :param pulumi.Input[str] osu_ssid: Online sign up (OSU) SSID.
        :param pulumi.Input[str] pame_bi: Enable/disable Pre-Association Message Exchange BSSID Independent (PAME-BI). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] proxy_arp: Enable/disable Proxy ARP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] qos_map: QoS MAP set ID.
        :param pulumi.Input[int] release: Hotspot 2.0 Release number (1, 2, 3, default = 2).
        :param pulumi.Input[str] roaming_consortium: Roaming consortium list name.
        :param pulumi.Input[str] terms_and_conditions: Terms and conditions.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] venue_group: Venue group. Valid values: `unspecified`, `assembly`, `business`, `educational`, `factory`, `institutional`, `mercantile`, `residential`, `storage`, `utility`, `vehicular`, `outdoor`.
        :param pulumi.Input[str] venue_name: Venue name.
        :param pulumi.Input[str] venue_type: Venue type. Valid values: `unspecified`, `arena`, `stadium`, `passenger-terminal`, `amphitheater`, `amusement-park`, `place-of-worship`, `convention-center`, `library`, `museum`, `restaurant`, `theater`, `bar`, `coffee-shop`, `zoo-or-aquarium`, `emergency-center`, `doctor-office`, `bank`, `fire-station`, `police-station`, `post-office`, `professional-office`, `research-facility`, `attorney-office`, `primary-school`, `secondary-school`, `university-or-college`, `factory`, `hospital`, `long-term-care-facility`, `rehab-center`, `group-home`, `prison-or-jail`, `retail-store`, `grocery-market`, `auto-service-station`, `shopping-mall`, `gas-station`, `private`, `hotel-or-motel`, `dormitory`, `boarding-house`, `automobile`, `airplane`, `bus`, `ferry`, `ship-or-boat`, `train`, `motor-bike`, `muni-mesh-network`, `city-park`, `rest-area`, `traffic-control`, `bus-stop`, `kiosk`.
        :param pulumi.Input[str] venue_url: Venue name.
        :param pulumi.Input[str] wan_metrics: WAN metric name.
        :param pulumi.Input[str] wnm_sleep_mode: Enable/disable wireless network management (WNM) sleep mode. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HsprofileState.__new__(_HsprofileState)

        __props__.__dict__["access_network_asra"] = access_network_asra
        __props__.__dict__["access_network_esr"] = access_network_esr
        __props__.__dict__["access_network_internet"] = access_network_internet
        __props__.__dict__["access_network_type"] = access_network_type
        __props__.__dict__["access_network_uesa"] = access_network_uesa
        __props__.__dict__["advice_of_charge"] = advice_of_charge
        __props__.__dict__["anqp_domain_id"] = anqp_domain_id
        __props__.__dict__["bss_transition"] = bss_transition
        __props__.__dict__["conn_cap"] = conn_cap
        __props__.__dict__["deauth_request_timeout"] = deauth_request_timeout
        __props__.__dict__["dgaf"] = dgaf
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["gas_comeback_delay"] = gas_comeback_delay
        __props__.__dict__["gas_fragmentation_limit"] = gas_fragmentation_limit
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["hessid"] = hessid
        __props__.__dict__["ip_addr_type"] = ip_addr_type
        __props__.__dict__["l2tif"] = l2tif
        __props__.__dict__["n3gpp_plmn"] = n3gpp_plmn
        __props__.__dict__["nai_realm"] = nai_realm
        __props__.__dict__["name"] = name
        __props__.__dict__["network_auth"] = network_auth
        __props__.__dict__["oper_friendly_name"] = oper_friendly_name
        __props__.__dict__["oper_icon"] = oper_icon
        __props__.__dict__["osu_provider_nai"] = osu_provider_nai
        __props__.__dict__["osu_providers"] = osu_providers
        __props__.__dict__["osu_ssid"] = osu_ssid
        __props__.__dict__["pame_bi"] = pame_bi
        __props__.__dict__["proxy_arp"] = proxy_arp
        __props__.__dict__["qos_map"] = qos_map
        __props__.__dict__["release"] = release
        __props__.__dict__["roaming_consortium"] = roaming_consortium
        __props__.__dict__["terms_and_conditions"] = terms_and_conditions
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["venue_group"] = venue_group
        __props__.__dict__["venue_name"] = venue_name
        __props__.__dict__["venue_type"] = venue_type
        __props__.__dict__["venue_url"] = venue_url
        __props__.__dict__["wan_metrics"] = wan_metrics
        __props__.__dict__["wnm_sleep_mode"] = wnm_sleep_mode
        return Hsprofile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessNetworkAsra")
    def access_network_asra(self) -> pulumi.Output[str]:
        """
        Enable/disable additional step required for access (ASRA). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_asra")

    @property
    @pulumi.getter(name="accessNetworkEsr")
    def access_network_esr(self) -> pulumi.Output[str]:
        """
        Enable/disable emergency services reachable (ESR). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_esr")

    @property
    @pulumi.getter(name="accessNetworkInternet")
    def access_network_internet(self) -> pulumi.Output[str]:
        """
        Enable/disable connectivity to the Internet. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_internet")

    @property
    @pulumi.getter(name="accessNetworkType")
    def access_network_type(self) -> pulumi.Output[str]:
        """
        Access network type. Valid values: `private-network`, `private-network-with-guest-access`, `chargeable-public-network`, `free-public-network`, `personal-device-network`, `emergency-services-only-network`, `test-or-experimental`, `wildcard`.
        """
        return pulumi.get(self, "access_network_type")

    @property
    @pulumi.getter(name="accessNetworkUesa")
    def access_network_uesa(self) -> pulumi.Output[str]:
        """
        Enable/disable unauthenticated emergency service accessible (UESA). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_network_uesa")

    @property
    @pulumi.getter(name="adviceOfCharge")
    def advice_of_charge(self) -> pulumi.Output[str]:
        """
        Advice of charge.
        """
        return pulumi.get(self, "advice_of_charge")

    @property
    @pulumi.getter(name="anqpDomainId")
    def anqp_domain_id(self) -> pulumi.Output[int]:
        """
        ANQP Domain ID (0-65535).
        """
        return pulumi.get(self, "anqp_domain_id")

    @property
    @pulumi.getter(name="bssTransition")
    def bss_transition(self) -> pulumi.Output[str]:
        """
        Enable/disable basic service set (BSS) transition Support. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bss_transition")

    @property
    @pulumi.getter(name="connCap")
    def conn_cap(self) -> pulumi.Output[str]:
        """
        Connection capability name.
        """
        return pulumi.get(self, "conn_cap")

    @property
    @pulumi.getter(name="deauthRequestTimeout")
    def deauth_request_timeout(self) -> pulumi.Output[int]:
        """
        Deauthentication request timeout (in seconds).
        """
        return pulumi.get(self, "deauth_request_timeout")

    @property
    @pulumi.getter
    def dgaf(self) -> pulumi.Output[str]:
        """
        Enable/disable downstream group-addressed forwarding (DGAF). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dgaf")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[str]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="gasComebackDelay")
    def gas_comeback_delay(self) -> pulumi.Output[int]:
        """
        GAS comeback delay (0 or 100 - 4000 milliseconds, default = 500).
        """
        return pulumi.get(self, "gas_comeback_delay")

    @property
    @pulumi.getter(name="gasFragmentationLimit")
    def gas_fragmentation_limit(self) -> pulumi.Output[int]:
        """
        GAS fragmentation limit (512 - 4096, default = 1024).
        """
        return pulumi.get(self, "gas_fragmentation_limit")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def hessid(self) -> pulumi.Output[str]:
        """
        Homogeneous extended service set identifier (HESSID).
        """
        return pulumi.get(self, "hessid")

    @property
    @pulumi.getter(name="ipAddrType")
    def ip_addr_type(self) -> pulumi.Output[str]:
        """
        IP address type name.
        """
        return pulumi.get(self, "ip_addr_type")

    @property
    @pulumi.getter
    def l2tif(self) -> pulumi.Output[str]:
        """
        Enable/disable Layer 2 traffic inspection and filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "l2tif")

    @property
    @pulumi.getter(name="n3gppPlmn")
    def n3gpp_plmn(self) -> pulumi.Output[str]:
        """
        3GPP PLMN name.
        """
        return pulumi.get(self, "n3gpp_plmn")

    @property
    @pulumi.getter(name="naiRealm")
    def nai_realm(self) -> pulumi.Output[str]:
        """
        NAI realm list name.
        """
        return pulumi.get(self, "nai_realm")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Hotspot profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkAuth")
    def network_auth(self) -> pulumi.Output[str]:
        """
        Network authentication name.
        """
        return pulumi.get(self, "network_auth")

    @property
    @pulumi.getter(name="operFriendlyName")
    def oper_friendly_name(self) -> pulumi.Output[str]:
        """
        Operator friendly name.
        """
        return pulumi.get(self, "oper_friendly_name")

    @property
    @pulumi.getter(name="operIcon")
    def oper_icon(self) -> pulumi.Output[str]:
        """
        Operator icon.
        """
        return pulumi.get(self, "oper_icon")

    @property
    @pulumi.getter(name="osuProviderNai")
    def osu_provider_nai(self) -> pulumi.Output[str]:
        """
        OSU Provider NAI.
        """
        return pulumi.get(self, "osu_provider_nai")

    @property
    @pulumi.getter(name="osuProviders")
    def osu_providers(self) -> pulumi.Output[Optional[Sequence['outputs.HsprofileOsuProvider']]]:
        """
        Manually selected list of OSU provider(s). The structure of `osu_provider` block is documented below.
        """
        return pulumi.get(self, "osu_providers")

    @property
    @pulumi.getter(name="osuSsid")
    def osu_ssid(self) -> pulumi.Output[str]:
        """
        Online sign up (OSU) SSID.
        """
        return pulumi.get(self, "osu_ssid")

    @property
    @pulumi.getter(name="pameBi")
    def pame_bi(self) -> pulumi.Output[str]:
        """
        Enable/disable Pre-Association Message Exchange BSSID Independent (PAME-BI). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pame_bi")

    @property
    @pulumi.getter(name="proxyArp")
    def proxy_arp(self) -> pulumi.Output[str]:
        """
        Enable/disable Proxy ARP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_arp")

    @property
    @pulumi.getter(name="qosMap")
    def qos_map(self) -> pulumi.Output[str]:
        """
        QoS MAP set ID.
        """
        return pulumi.get(self, "qos_map")

    @property
    @pulumi.getter
    def release(self) -> pulumi.Output[int]:
        """
        Hotspot 2.0 Release number (1, 2, 3, default = 2).
        """
        return pulumi.get(self, "release")

    @property
    @pulumi.getter(name="roamingConsortium")
    def roaming_consortium(self) -> pulumi.Output[str]:
        """
        Roaming consortium list name.
        """
        return pulumi.get(self, "roaming_consortium")

    @property
    @pulumi.getter(name="termsAndConditions")
    def terms_and_conditions(self) -> pulumi.Output[str]:
        """
        Terms and conditions.
        """
        return pulumi.get(self, "terms_and_conditions")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="venueGroup")
    def venue_group(self) -> pulumi.Output[str]:
        """
        Venue group. Valid values: `unspecified`, `assembly`, `business`, `educational`, `factory`, `institutional`, `mercantile`, `residential`, `storage`, `utility`, `vehicular`, `outdoor`.
        """
        return pulumi.get(self, "venue_group")

    @property
    @pulumi.getter(name="venueName")
    def venue_name(self) -> pulumi.Output[str]:
        """
        Venue name.
        """
        return pulumi.get(self, "venue_name")

    @property
    @pulumi.getter(name="venueType")
    def venue_type(self) -> pulumi.Output[str]:
        """
        Venue type. Valid values: `unspecified`, `arena`, `stadium`, `passenger-terminal`, `amphitheater`, `amusement-park`, `place-of-worship`, `convention-center`, `library`, `museum`, `restaurant`, `theater`, `bar`, `coffee-shop`, `zoo-or-aquarium`, `emergency-center`, `doctor-office`, `bank`, `fire-station`, `police-station`, `post-office`, `professional-office`, `research-facility`, `attorney-office`, `primary-school`, `secondary-school`, `university-or-college`, `factory`, `hospital`, `long-term-care-facility`, `rehab-center`, `group-home`, `prison-or-jail`, `retail-store`, `grocery-market`, `auto-service-station`, `shopping-mall`, `gas-station`, `private`, `hotel-or-motel`, `dormitory`, `boarding-house`, `automobile`, `airplane`, `bus`, `ferry`, `ship-or-boat`, `train`, `motor-bike`, `muni-mesh-network`, `city-park`, `rest-area`, `traffic-control`, `bus-stop`, `kiosk`.
        """
        return pulumi.get(self, "venue_type")

    @property
    @pulumi.getter(name="venueUrl")
    def venue_url(self) -> pulumi.Output[str]:
        """
        Venue name.
        """
        return pulumi.get(self, "venue_url")

    @property
    @pulumi.getter(name="wanMetrics")
    def wan_metrics(self) -> pulumi.Output[str]:
        """
        WAN metric name.
        """
        return pulumi.get(self, "wan_metrics")

    @property
    @pulumi.getter(name="wnmSleepMode")
    def wnm_sleep_mode(self) -> pulumi.Output[str]:
        """
        Enable/disable wireless network management (WNM) sleep mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wnm_sleep_mode")

