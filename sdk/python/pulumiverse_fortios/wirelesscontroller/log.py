# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LogArgs', 'Log']

@pulumi.input_type
class LogArgs:
    def __init__(__self__, *,
                 addrgrp_log: Optional[pulumi.Input[str]] = None,
                 ble_log: Optional[pulumi.Input[str]] = None,
                 clb_log: Optional[pulumi.Input[str]] = None,
                 dhcp_starv_log: Optional[pulumi.Input[str]] = None,
                 led_sched_log: Optional[pulumi.Input[str]] = None,
                 radio_event_log: Optional[pulumi.Input[str]] = None,
                 rogue_event_log: Optional[pulumi.Input[str]] = None,
                 sta_event_log: Optional[pulumi.Input[str]] = None,
                 sta_locate_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wids_log: Optional[pulumi.Input[str]] = None,
                 wtp_event_log: Optional[pulumi.Input[str]] = None,
                 wtp_fips_event_log: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Log resource.
        :param pulumi.Input[str] addrgrp_log: Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] ble_log: Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] clb_log: Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] dhcp_starv_log: Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] led_sched_log: Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] radio_event_log: Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] rogue_event_log: Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] sta_event_log: Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] sta_locate_log: Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] status: Enable/disable wireless event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wids_log: Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] wtp_event_log: Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] wtp_fips_event_log: Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        if addrgrp_log is not None:
            pulumi.set(__self__, "addrgrp_log", addrgrp_log)
        if ble_log is not None:
            pulumi.set(__self__, "ble_log", ble_log)
        if clb_log is not None:
            pulumi.set(__self__, "clb_log", clb_log)
        if dhcp_starv_log is not None:
            pulumi.set(__self__, "dhcp_starv_log", dhcp_starv_log)
        if led_sched_log is not None:
            pulumi.set(__self__, "led_sched_log", led_sched_log)
        if radio_event_log is not None:
            pulumi.set(__self__, "radio_event_log", radio_event_log)
        if rogue_event_log is not None:
            pulumi.set(__self__, "rogue_event_log", rogue_event_log)
        if sta_event_log is not None:
            pulumi.set(__self__, "sta_event_log", sta_event_log)
        if sta_locate_log is not None:
            pulumi.set(__self__, "sta_locate_log", sta_locate_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wids_log is not None:
            pulumi.set(__self__, "wids_log", wids_log)
        if wtp_event_log is not None:
            pulumi.set(__self__, "wtp_event_log", wtp_event_log)
        if wtp_fips_event_log is not None:
            pulumi.set(__self__, "wtp_fips_event_log", wtp_fips_event_log)

    @property
    @pulumi.getter(name="addrgrpLog")
    def addrgrp_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "addrgrp_log")

    @addrgrp_log.setter
    def addrgrp_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addrgrp_log", value)

    @property
    @pulumi.getter(name="bleLog")
    def ble_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "ble_log")

    @ble_log.setter
    def ble_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ble_log", value)

    @property
    @pulumi.getter(name="clbLog")
    def clb_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "clb_log")

    @clb_log.setter
    def clb_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clb_log", value)

    @property
    @pulumi.getter(name="dhcpStarvLog")
    def dhcp_starv_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "dhcp_starv_log")

    @dhcp_starv_log.setter
    def dhcp_starv_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_starv_log", value)

    @property
    @pulumi.getter(name="ledSchedLog")
    def led_sched_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "led_sched_log")

    @led_sched_log.setter
    def led_sched_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "led_sched_log", value)

    @property
    @pulumi.getter(name="radioEventLog")
    def radio_event_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "radio_event_log")

    @radio_event_log.setter
    def radio_event_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radio_event_log", value)

    @property
    @pulumi.getter(name="rogueEventLog")
    def rogue_event_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "rogue_event_log")

    @rogue_event_log.setter
    def rogue_event_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rogue_event_log", value)

    @property
    @pulumi.getter(name="staEventLog")
    def sta_event_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "sta_event_log")

    @sta_event_log.setter
    def sta_event_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sta_event_log", value)

    @property
    @pulumi.getter(name="staLocateLog")
    def sta_locate_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "sta_locate_log")

    @sta_locate_log.setter
    def sta_locate_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sta_locate_log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable wireless event logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="widsLog")
    def wids_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "wids_log")

    @wids_log.setter
    def wids_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_log", value)

    @property
    @pulumi.getter(name="wtpEventLog")
    def wtp_event_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "wtp_event_log")

    @wtp_event_log.setter
    def wtp_event_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_event_log", value)

    @property
    @pulumi.getter(name="wtpFipsEventLog")
    def wtp_fips_event_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "wtp_fips_event_log")

    @wtp_fips_event_log.setter
    def wtp_fips_event_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_fips_event_log", value)


@pulumi.input_type
class _LogState:
    def __init__(__self__, *,
                 addrgrp_log: Optional[pulumi.Input[str]] = None,
                 ble_log: Optional[pulumi.Input[str]] = None,
                 clb_log: Optional[pulumi.Input[str]] = None,
                 dhcp_starv_log: Optional[pulumi.Input[str]] = None,
                 led_sched_log: Optional[pulumi.Input[str]] = None,
                 radio_event_log: Optional[pulumi.Input[str]] = None,
                 rogue_event_log: Optional[pulumi.Input[str]] = None,
                 sta_event_log: Optional[pulumi.Input[str]] = None,
                 sta_locate_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wids_log: Optional[pulumi.Input[str]] = None,
                 wtp_event_log: Optional[pulumi.Input[str]] = None,
                 wtp_fips_event_log: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Log resources.
        :param pulumi.Input[str] addrgrp_log: Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] ble_log: Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] clb_log: Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] dhcp_starv_log: Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] led_sched_log: Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] radio_event_log: Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] rogue_event_log: Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] sta_event_log: Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] sta_locate_log: Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] status: Enable/disable wireless event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wids_log: Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] wtp_event_log: Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] wtp_fips_event_log: Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        if addrgrp_log is not None:
            pulumi.set(__self__, "addrgrp_log", addrgrp_log)
        if ble_log is not None:
            pulumi.set(__self__, "ble_log", ble_log)
        if clb_log is not None:
            pulumi.set(__self__, "clb_log", clb_log)
        if dhcp_starv_log is not None:
            pulumi.set(__self__, "dhcp_starv_log", dhcp_starv_log)
        if led_sched_log is not None:
            pulumi.set(__self__, "led_sched_log", led_sched_log)
        if radio_event_log is not None:
            pulumi.set(__self__, "radio_event_log", radio_event_log)
        if rogue_event_log is not None:
            pulumi.set(__self__, "rogue_event_log", rogue_event_log)
        if sta_event_log is not None:
            pulumi.set(__self__, "sta_event_log", sta_event_log)
        if sta_locate_log is not None:
            pulumi.set(__self__, "sta_locate_log", sta_locate_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wids_log is not None:
            pulumi.set(__self__, "wids_log", wids_log)
        if wtp_event_log is not None:
            pulumi.set(__self__, "wtp_event_log", wtp_event_log)
        if wtp_fips_event_log is not None:
            pulumi.set(__self__, "wtp_fips_event_log", wtp_fips_event_log)

    @property
    @pulumi.getter(name="addrgrpLog")
    def addrgrp_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "addrgrp_log")

    @addrgrp_log.setter
    def addrgrp_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addrgrp_log", value)

    @property
    @pulumi.getter(name="bleLog")
    def ble_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "ble_log")

    @ble_log.setter
    def ble_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ble_log", value)

    @property
    @pulumi.getter(name="clbLog")
    def clb_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "clb_log")

    @clb_log.setter
    def clb_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clb_log", value)

    @property
    @pulumi.getter(name="dhcpStarvLog")
    def dhcp_starv_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "dhcp_starv_log")

    @dhcp_starv_log.setter
    def dhcp_starv_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_starv_log", value)

    @property
    @pulumi.getter(name="ledSchedLog")
    def led_sched_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "led_sched_log")

    @led_sched_log.setter
    def led_sched_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "led_sched_log", value)

    @property
    @pulumi.getter(name="radioEventLog")
    def radio_event_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "radio_event_log")

    @radio_event_log.setter
    def radio_event_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radio_event_log", value)

    @property
    @pulumi.getter(name="rogueEventLog")
    def rogue_event_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "rogue_event_log")

    @rogue_event_log.setter
    def rogue_event_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rogue_event_log", value)

    @property
    @pulumi.getter(name="staEventLog")
    def sta_event_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "sta_event_log")

    @sta_event_log.setter
    def sta_event_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sta_event_log", value)

    @property
    @pulumi.getter(name="staLocateLog")
    def sta_locate_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "sta_locate_log")

    @sta_locate_log.setter
    def sta_locate_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sta_locate_log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable wireless event logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="widsLog")
    def wids_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "wids_log")

    @wids_log.setter
    def wids_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_log", value)

    @property
    @pulumi.getter(name="wtpEventLog")
    def wtp_event_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "wtp_event_log")

    @wtp_event_log.setter
    def wtp_event_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_event_log", value)

    @property
    @pulumi.getter(name="wtpFipsEventLog")
    def wtp_fips_event_log(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "wtp_fips_event_log")

    @wtp_fips_event_log.setter
    def wtp_fips_event_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_fips_event_log", value)


class Log(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addrgrp_log: Optional[pulumi.Input[str]] = None,
                 ble_log: Optional[pulumi.Input[str]] = None,
                 clb_log: Optional[pulumi.Input[str]] = None,
                 dhcp_starv_log: Optional[pulumi.Input[str]] = None,
                 led_sched_log: Optional[pulumi.Input[str]] = None,
                 radio_event_log: Optional[pulumi.Input[str]] = None,
                 rogue_event_log: Optional[pulumi.Input[str]] = None,
                 sta_event_log: Optional[pulumi.Input[str]] = None,
                 sta_locate_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wids_log: Optional[pulumi.Input[str]] = None,
                 wtp_event_log: Optional[pulumi.Input[str]] = None,
                 wtp_fips_event_log: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure wireless controller event log filters. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        WirelessController Log can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/log:Log labelname WirelessControllerLog
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/log:Log labelname WirelessControllerLog
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addrgrp_log: Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] ble_log: Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] clb_log: Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] dhcp_starv_log: Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] led_sched_log: Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] radio_event_log: Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] rogue_event_log: Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] sta_event_log: Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] sta_locate_log: Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] status: Enable/disable wireless event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wids_log: Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] wtp_event_log: Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] wtp_fips_event_log: Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LogArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure wireless controller event log filters. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        WirelessController Log can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/log:Log labelname WirelessControllerLog
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/log:Log labelname WirelessControllerLog
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param LogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addrgrp_log: Optional[pulumi.Input[str]] = None,
                 ble_log: Optional[pulumi.Input[str]] = None,
                 clb_log: Optional[pulumi.Input[str]] = None,
                 dhcp_starv_log: Optional[pulumi.Input[str]] = None,
                 led_sched_log: Optional[pulumi.Input[str]] = None,
                 radio_event_log: Optional[pulumi.Input[str]] = None,
                 rogue_event_log: Optional[pulumi.Input[str]] = None,
                 sta_event_log: Optional[pulumi.Input[str]] = None,
                 sta_locate_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wids_log: Optional[pulumi.Input[str]] = None,
                 wtp_event_log: Optional[pulumi.Input[str]] = None,
                 wtp_fips_event_log: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogArgs.__new__(LogArgs)

            __props__.__dict__["addrgrp_log"] = addrgrp_log
            __props__.__dict__["ble_log"] = ble_log
            __props__.__dict__["clb_log"] = clb_log
            __props__.__dict__["dhcp_starv_log"] = dhcp_starv_log
            __props__.__dict__["led_sched_log"] = led_sched_log
            __props__.__dict__["radio_event_log"] = radio_event_log
            __props__.__dict__["rogue_event_log"] = rogue_event_log
            __props__.__dict__["sta_event_log"] = sta_event_log
            __props__.__dict__["sta_locate_log"] = sta_locate_log
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wids_log"] = wids_log
            __props__.__dict__["wtp_event_log"] = wtp_event_log
            __props__.__dict__["wtp_fips_event_log"] = wtp_fips_event_log
        super(Log, __self__).__init__(
            'fortios:wirelesscontroller/log:Log',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addrgrp_log: Optional[pulumi.Input[str]] = None,
            ble_log: Optional[pulumi.Input[str]] = None,
            clb_log: Optional[pulumi.Input[str]] = None,
            dhcp_starv_log: Optional[pulumi.Input[str]] = None,
            led_sched_log: Optional[pulumi.Input[str]] = None,
            radio_event_log: Optional[pulumi.Input[str]] = None,
            rogue_event_log: Optional[pulumi.Input[str]] = None,
            sta_event_log: Optional[pulumi.Input[str]] = None,
            sta_locate_log: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wids_log: Optional[pulumi.Input[str]] = None,
            wtp_event_log: Optional[pulumi.Input[str]] = None,
            wtp_fips_event_log: Optional[pulumi.Input[str]] = None) -> 'Log':
        """
        Get an existing Log resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addrgrp_log: Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] ble_log: Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] clb_log: Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] dhcp_starv_log: Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] led_sched_log: Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] radio_event_log: Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] rogue_event_log: Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] sta_event_log: Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] sta_locate_log: Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] status: Enable/disable wireless event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wids_log: Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] wtp_event_log: Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] wtp_fips_event_log: Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogState.__new__(_LogState)

        __props__.__dict__["addrgrp_log"] = addrgrp_log
        __props__.__dict__["ble_log"] = ble_log
        __props__.__dict__["clb_log"] = clb_log
        __props__.__dict__["dhcp_starv_log"] = dhcp_starv_log
        __props__.__dict__["led_sched_log"] = led_sched_log
        __props__.__dict__["radio_event_log"] = radio_event_log
        __props__.__dict__["rogue_event_log"] = rogue_event_log
        __props__.__dict__["sta_event_log"] = sta_event_log
        __props__.__dict__["sta_locate_log"] = sta_locate_log
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wids_log"] = wids_log
        __props__.__dict__["wtp_event_log"] = wtp_event_log
        __props__.__dict__["wtp_fips_event_log"] = wtp_fips_event_log
        return Log(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addrgrpLog")
    def addrgrp_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "addrgrp_log")

    @property
    @pulumi.getter(name="bleLog")
    def ble_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "ble_log")

    @property
    @pulumi.getter(name="clbLog")
    def clb_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "clb_log")

    @property
    @pulumi.getter(name="dhcpStarvLog")
    def dhcp_starv_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "dhcp_starv_log")

    @property
    @pulumi.getter(name="ledSchedLog")
    def led_sched_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "led_sched_log")

    @property
    @pulumi.getter(name="radioEventLog")
    def radio_event_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "radio_event_log")

    @property
    @pulumi.getter(name="rogueEventLog")
    def rogue_event_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "rogue_event_log")

    @property
    @pulumi.getter(name="staEventLog")
    def sta_event_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "sta_event_log")

    @property
    @pulumi.getter(name="staLocateLog")
    def sta_locate_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "sta_locate_log")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable wireless event logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="widsLog")
    def wids_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "wids_log")

    @property
    @pulumi.getter(name="wtpEventLog")
    def wtp_event_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "wtp_event_log")

    @property
    @pulumi.getter(name="wtpFipsEventLog")
    def wtp_fips_event_log(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "wtp_fips_event_log")

