# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['WagprofileArgs', 'Wagprofile']

@pulumi.input_type
class WagprofileArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_ip_addr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ping_interval: Optional[pulumi.Input[int]] = None,
                 ping_number: Optional[pulumi.Input[int]] = None,
                 return_packet_timeout: Optional[pulumi.Input[int]] = None,
                 tunnel_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wag_ip: Optional[pulumi.Input[str]] = None,
                 wag_port: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Wagprofile resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dhcp_ip_addr: IP address of the monitoring DHCP request packet sent through the tunnel.
        :param pulumi.Input[str] name: Tunnel profile name.
        :param pulumi.Input[int] ping_interval: Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
        :param pulumi.Input[int] ping_number: Number of the tunnel mointoring echo packets (1 - 65535, default = 5).
        :param pulumi.Input[int] return_packet_timeout: Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
        :param pulumi.Input[str] tunnel_type: Tunnel type. Valid values: `l2tpv3`, `gre`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wag_ip: IP Address of the wireless access gateway.
        :param pulumi.Input[int] wag_port: UDP port of the wireless access gateway.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dhcp_ip_addr is not None:
            pulumi.set(__self__, "dhcp_ip_addr", dhcp_ip_addr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ping_interval is not None:
            pulumi.set(__self__, "ping_interval", ping_interval)
        if ping_number is not None:
            pulumi.set(__self__, "ping_number", ping_number)
        if return_packet_timeout is not None:
            pulumi.set(__self__, "return_packet_timeout", return_packet_timeout)
        if tunnel_type is not None:
            pulumi.set(__self__, "tunnel_type", tunnel_type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wag_ip is not None:
            pulumi.set(__self__, "wag_ip", wag_ip)
        if wag_port is not None:
            pulumi.set(__self__, "wag_port", wag_port)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dhcpIpAddr")
    def dhcp_ip_addr(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the monitoring DHCP request packet sent through the tunnel.
        """
        return pulumi.get(self, "dhcp_ip_addr")

    @dhcp_ip_addr.setter
    def dhcp_ip_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ip_addr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pingInterval")
    def ping_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
        """
        return pulumi.get(self, "ping_interval")

    @ping_interval.setter
    def ping_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_interval", value)

    @property
    @pulumi.getter(name="pingNumber")
    def ping_number(self) -> Optional[pulumi.Input[int]]:
        """
        Number of the tunnel mointoring echo packets (1 - 65535, default = 5).
        """
        return pulumi.get(self, "ping_number")

    @ping_number.setter
    def ping_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_number", value)

    @property
    @pulumi.getter(name="returnPacketTimeout")
    def return_packet_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
        """
        return pulumi.get(self, "return_packet_timeout")

    @return_packet_timeout.setter
    def return_packet_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "return_packet_timeout", value)

    @property
    @pulumi.getter(name="tunnelType")
    def tunnel_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel type. Valid values: `l2tpv3`, `gre`.
        """
        return pulumi.get(self, "tunnel_type")

    @tunnel_type.setter
    def tunnel_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wagIp")
    def wag_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address of the wireless access gateway.
        """
        return pulumi.get(self, "wag_ip")

    @wag_ip.setter
    def wag_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wag_ip", value)

    @property
    @pulumi.getter(name="wagPort")
    def wag_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port of the wireless access gateway.
        """
        return pulumi.get(self, "wag_port")

    @wag_port.setter
    def wag_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wag_port", value)


@pulumi.input_type
class _WagprofileState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_ip_addr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ping_interval: Optional[pulumi.Input[int]] = None,
                 ping_number: Optional[pulumi.Input[int]] = None,
                 return_packet_timeout: Optional[pulumi.Input[int]] = None,
                 tunnel_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wag_ip: Optional[pulumi.Input[str]] = None,
                 wag_port: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Wagprofile resources.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dhcp_ip_addr: IP address of the monitoring DHCP request packet sent through the tunnel.
        :param pulumi.Input[str] name: Tunnel profile name.
        :param pulumi.Input[int] ping_interval: Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
        :param pulumi.Input[int] ping_number: Number of the tunnel mointoring echo packets (1 - 65535, default = 5).
        :param pulumi.Input[int] return_packet_timeout: Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
        :param pulumi.Input[str] tunnel_type: Tunnel type. Valid values: `l2tpv3`, `gre`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wag_ip: IP Address of the wireless access gateway.
        :param pulumi.Input[int] wag_port: UDP port of the wireless access gateway.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dhcp_ip_addr is not None:
            pulumi.set(__self__, "dhcp_ip_addr", dhcp_ip_addr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ping_interval is not None:
            pulumi.set(__self__, "ping_interval", ping_interval)
        if ping_number is not None:
            pulumi.set(__self__, "ping_number", ping_number)
        if return_packet_timeout is not None:
            pulumi.set(__self__, "return_packet_timeout", return_packet_timeout)
        if tunnel_type is not None:
            pulumi.set(__self__, "tunnel_type", tunnel_type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wag_ip is not None:
            pulumi.set(__self__, "wag_ip", wag_ip)
        if wag_port is not None:
            pulumi.set(__self__, "wag_port", wag_port)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dhcpIpAddr")
    def dhcp_ip_addr(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the monitoring DHCP request packet sent through the tunnel.
        """
        return pulumi.get(self, "dhcp_ip_addr")

    @dhcp_ip_addr.setter
    def dhcp_ip_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ip_addr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pingInterval")
    def ping_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
        """
        return pulumi.get(self, "ping_interval")

    @ping_interval.setter
    def ping_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_interval", value)

    @property
    @pulumi.getter(name="pingNumber")
    def ping_number(self) -> Optional[pulumi.Input[int]]:
        """
        Number of the tunnel mointoring echo packets (1 - 65535, default = 5).
        """
        return pulumi.get(self, "ping_number")

    @ping_number.setter
    def ping_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_number", value)

    @property
    @pulumi.getter(name="returnPacketTimeout")
    def return_packet_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
        """
        return pulumi.get(self, "return_packet_timeout")

    @return_packet_timeout.setter
    def return_packet_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "return_packet_timeout", value)

    @property
    @pulumi.getter(name="tunnelType")
    def tunnel_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel type. Valid values: `l2tpv3`, `gre`.
        """
        return pulumi.get(self, "tunnel_type")

    @tunnel_type.setter
    def tunnel_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wagIp")
    def wag_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address of the wireless access gateway.
        """
        return pulumi.get(self, "wag_ip")

    @wag_ip.setter
    def wag_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wag_ip", value)

    @property
    @pulumi.getter(name="wagPort")
    def wag_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port of the wireless access gateway.
        """
        return pulumi.get(self, "wag_port")

    @wag_port.setter
    def wag_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wag_port", value)


class Wagprofile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_ip_addr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ping_interval: Optional[pulumi.Input[int]] = None,
                 ping_number: Optional[pulumi.Input[int]] = None,
                 return_packet_timeout: Optional[pulumi.Input[int]] = None,
                 tunnel_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wag_ip: Optional[pulumi.Input[str]] = None,
                 wag_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Configure wireless access gateway (WAG) profiles used for tunnels on AP. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        WirelessController WagProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/wagprofile:Wagprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/wagprofile:Wagprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dhcp_ip_addr: IP address of the monitoring DHCP request packet sent through the tunnel.
        :param pulumi.Input[str] name: Tunnel profile name.
        :param pulumi.Input[int] ping_interval: Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
        :param pulumi.Input[int] ping_number: Number of the tunnel mointoring echo packets (1 - 65535, default = 5).
        :param pulumi.Input[int] return_packet_timeout: Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
        :param pulumi.Input[str] tunnel_type: Tunnel type. Valid values: `l2tpv3`, `gre`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wag_ip: IP Address of the wireless access gateway.
        :param pulumi.Input[int] wag_port: UDP port of the wireless access gateway.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WagprofileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure wireless access gateway (WAG) profiles used for tunnels on AP. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        WirelessController WagProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/wagprofile:Wagprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/wagprofile:Wagprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param WagprofileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WagprofileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_ip_addr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ping_interval: Optional[pulumi.Input[int]] = None,
                 ping_number: Optional[pulumi.Input[int]] = None,
                 return_packet_timeout: Optional[pulumi.Input[int]] = None,
                 tunnel_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wag_ip: Optional[pulumi.Input[str]] = None,
                 wag_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WagprofileArgs.__new__(WagprofileArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["dhcp_ip_addr"] = dhcp_ip_addr
            __props__.__dict__["name"] = name
            __props__.__dict__["ping_interval"] = ping_interval
            __props__.__dict__["ping_number"] = ping_number
            __props__.__dict__["return_packet_timeout"] = return_packet_timeout
            __props__.__dict__["tunnel_type"] = tunnel_type
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wag_ip"] = wag_ip
            __props__.__dict__["wag_port"] = wag_port
        super(Wagprofile, __self__).__init__(
            'fortios:wirelesscontroller/wagprofile:Wagprofile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dhcp_ip_addr: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            ping_interval: Optional[pulumi.Input[int]] = None,
            ping_number: Optional[pulumi.Input[int]] = None,
            return_packet_timeout: Optional[pulumi.Input[int]] = None,
            tunnel_type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wag_ip: Optional[pulumi.Input[str]] = None,
            wag_port: Optional[pulumi.Input[int]] = None) -> 'Wagprofile':
        """
        Get an existing Wagprofile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dhcp_ip_addr: IP address of the monitoring DHCP request packet sent through the tunnel.
        :param pulumi.Input[str] name: Tunnel profile name.
        :param pulumi.Input[int] ping_interval: Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
        :param pulumi.Input[int] ping_number: Number of the tunnel mointoring echo packets (1 - 65535, default = 5).
        :param pulumi.Input[int] return_packet_timeout: Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
        :param pulumi.Input[str] tunnel_type: Tunnel type. Valid values: `l2tpv3`, `gre`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wag_ip: IP Address of the wireless access gateway.
        :param pulumi.Input[int] wag_port: UDP port of the wireless access gateway.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WagprofileState.__new__(_WagprofileState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["dhcp_ip_addr"] = dhcp_ip_addr
        __props__.__dict__["name"] = name
        __props__.__dict__["ping_interval"] = ping_interval
        __props__.__dict__["ping_number"] = ping_number
        __props__.__dict__["return_packet_timeout"] = return_packet_timeout
        __props__.__dict__["tunnel_type"] = tunnel_type
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wag_ip"] = wag_ip
        __props__.__dict__["wag_port"] = wag_port
        return Wagprofile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dhcpIpAddr")
    def dhcp_ip_addr(self) -> pulumi.Output[str]:
        """
        IP address of the monitoring DHCP request packet sent through the tunnel.
        """
        return pulumi.get(self, "dhcp_ip_addr")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Tunnel profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pingInterval")
    def ping_interval(self) -> pulumi.Output[int]:
        """
        Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
        """
        return pulumi.get(self, "ping_interval")

    @property
    @pulumi.getter(name="pingNumber")
    def ping_number(self) -> pulumi.Output[int]:
        """
        Number of the tunnel mointoring echo packets (1 - 65535, default = 5).
        """
        return pulumi.get(self, "ping_number")

    @property
    @pulumi.getter(name="returnPacketTimeout")
    def return_packet_timeout(self) -> pulumi.Output[int]:
        """
        Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
        """
        return pulumi.get(self, "return_packet_timeout")

    @property
    @pulumi.getter(name="tunnelType")
    def tunnel_type(self) -> pulumi.Output[str]:
        """
        Tunnel type. Valid values: `l2tpv3`, `gre`.
        """
        return pulumi.get(self, "tunnel_type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="wagIp")
    def wag_ip(self) -> pulumi.Output[str]:
        """
        IP Address of the wireless access gateway.
        """
        return pulumi.get(self, "wag_ip")

    @property
    @pulumi.getter(name="wagPort")
    def wag_port(self) -> pulumi.Output[int]:
        """
        UDP port of the wireless access gateway.
        """
        return pulumi.get(self, "wag_port")

