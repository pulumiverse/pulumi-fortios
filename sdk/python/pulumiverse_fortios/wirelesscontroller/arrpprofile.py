# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ArrpprofileArgs', 'Arrpprofile']

@pulumi.input_type
class ArrpprofileArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 darrp_optimize: Optional[pulumi.Input[int]] = None,
                 darrp_optimize_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['ArrpprofileDarrpOptimizeScheduleArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 include_dfs_channel: Optional[pulumi.Input[str]] = None,
                 include_weather_channel: Optional[pulumi.Input[str]] = None,
                 monitor_period: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_darrp_optimize: Optional[pulumi.Input[str]] = None,
                 selection_period: Optional[pulumi.Input[int]] = None,
                 threshold_ap: Optional[pulumi.Input[int]] = None,
                 threshold_channel_load: Optional[pulumi.Input[int]] = None,
                 threshold_noise_floor: Optional[pulumi.Input[str]] = None,
                 threshold_rx_errors: Optional[pulumi.Input[int]] = None,
                 threshold_spectral_rssi: Optional[pulumi.Input[str]] = None,
                 threshold_tx_retries: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight_channel_load: Optional[pulumi.Input[int]] = None,
                 weight_dfs_channel: Optional[pulumi.Input[int]] = None,
                 weight_managed_ap: Optional[pulumi.Input[int]] = None,
                 weight_noise_floor: Optional[pulumi.Input[int]] = None,
                 weight_rogue_ap: Optional[pulumi.Input[int]] = None,
                 weight_spectral_rssi: Optional[pulumi.Input[int]] = None,
                 weight_weather_channel: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Arrpprofile resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] darrp_optimize: Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
        :param pulumi.Input[Sequence[pulumi.Input['ArrpprofileDarrpOptimizeScheduleArgs']]] darrp_optimize_schedules: Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrp_optimize_schedules` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] include_dfs_channel: Enable/disable use of DFS channel in DARRP channel selection phase 1 (default = disable).
        :param pulumi.Input[str] include_weather_channel: Enable/disable use of weather channel in DARRP channel selection phase 1 (default = disable).
        :param pulumi.Input[int] monitor_period: Period in seconds to measure average transmit retries and receive errors (default = 300).
        :param pulumi.Input[str] name: WiFi ARRP profile name.
        :param pulumi.Input[str] override_darrp_optimize: Enable to override setting darrp-optimize and darrp-optimize-schedules (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] selection_period: Period in seconds to measure average channel load, noise floor, spectral RSSI (default = 3600).
        :param pulumi.Input[int] threshold_ap: Threshold to reject channel in DARRP channel selection phase 1 due to surrounding APs (0 - 500, default = 250).
        :param pulumi.Input[int] threshold_channel_load: Threshold in percentage to reject channel in DARRP channel selection phase 1 due to channel load (0 - 100, default = 60).
        :param pulumi.Input[str] threshold_noise_floor: Threshold in dBm to reject channel in DARRP channel selection phase 1 due to noise floor (-95 to -20, default = -85).
        :param pulumi.Input[int] threshold_rx_errors: Threshold in percentage for receive errors to trigger channel reselection in DARRP monitor stage (0 - 100, default = 50).
        :param pulumi.Input[str] threshold_spectral_rssi: Threshold in dBm to reject channel in DARRP channel selection phase 1 due to spectral RSSI (-95 to -20, default = -65).
        :param pulumi.Input[int] threshold_tx_retries: Threshold in percentage for transmit retries to trigger channel reselection in DARRP monitor stage (0 - 1000, default = 300).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] weight_channel_load: Weight in DARRP channel score calculation for channel load (0 - 2000, default = 20).
        :param pulumi.Input[int] weight_dfs_channel: Weight in DARRP channel score calculation for DFS channel (0 - 2000, default = 500).
        :param pulumi.Input[int] weight_managed_ap: Weight in DARRP channel score calculation for managed APs (0 - 2000, default = 50).
        :param pulumi.Input[int] weight_noise_floor: Weight in DARRP channel score calculation for noise floor (0 - 2000, default = 40).
        :param pulumi.Input[int] weight_rogue_ap: Weight in DARRP channel score calculation for rogue APs (0 - 2000, default = 10).
        :param pulumi.Input[int] weight_spectral_rssi: Weight in DARRP channel score calculation for spectral RSSI (0 - 2000, default = 40).
        :param pulumi.Input[int] weight_weather_channel: Weight in DARRP channel score calculation for weather channel (0 - 2000, default = 1000).
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if darrp_optimize is not None:
            pulumi.set(__self__, "darrp_optimize", darrp_optimize)
        if darrp_optimize_schedules is not None:
            pulumi.set(__self__, "darrp_optimize_schedules", darrp_optimize_schedules)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if include_dfs_channel is not None:
            pulumi.set(__self__, "include_dfs_channel", include_dfs_channel)
        if include_weather_channel is not None:
            pulumi.set(__self__, "include_weather_channel", include_weather_channel)
        if monitor_period is not None:
            pulumi.set(__self__, "monitor_period", monitor_period)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_darrp_optimize is not None:
            pulumi.set(__self__, "override_darrp_optimize", override_darrp_optimize)
        if selection_period is not None:
            pulumi.set(__self__, "selection_period", selection_period)
        if threshold_ap is not None:
            pulumi.set(__self__, "threshold_ap", threshold_ap)
        if threshold_channel_load is not None:
            pulumi.set(__self__, "threshold_channel_load", threshold_channel_load)
        if threshold_noise_floor is not None:
            pulumi.set(__self__, "threshold_noise_floor", threshold_noise_floor)
        if threshold_rx_errors is not None:
            pulumi.set(__self__, "threshold_rx_errors", threshold_rx_errors)
        if threshold_spectral_rssi is not None:
            pulumi.set(__self__, "threshold_spectral_rssi", threshold_spectral_rssi)
        if threshold_tx_retries is not None:
            pulumi.set(__self__, "threshold_tx_retries", threshold_tx_retries)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weight_channel_load is not None:
            pulumi.set(__self__, "weight_channel_load", weight_channel_load)
        if weight_dfs_channel is not None:
            pulumi.set(__self__, "weight_dfs_channel", weight_dfs_channel)
        if weight_managed_ap is not None:
            pulumi.set(__self__, "weight_managed_ap", weight_managed_ap)
        if weight_noise_floor is not None:
            pulumi.set(__self__, "weight_noise_floor", weight_noise_floor)
        if weight_rogue_ap is not None:
            pulumi.set(__self__, "weight_rogue_ap", weight_rogue_ap)
        if weight_spectral_rssi is not None:
            pulumi.set(__self__, "weight_spectral_rssi", weight_spectral_rssi)
        if weight_weather_channel is not None:
            pulumi.set(__self__, "weight_weather_channel", weight_weather_channel)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="darrpOptimize")
    def darrp_optimize(self) -> Optional[pulumi.Input[int]]:
        """
        Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
        """
        return pulumi.get(self, "darrp_optimize")

    @darrp_optimize.setter
    def darrp_optimize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "darrp_optimize", value)

    @property
    @pulumi.getter(name="darrpOptimizeSchedules")
    def darrp_optimize_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArrpprofileDarrpOptimizeScheduleArgs']]]]:
        """
        Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrp_optimize_schedules` block is documented below.
        """
        return pulumi.get(self, "darrp_optimize_schedules")

    @darrp_optimize_schedules.setter
    def darrp_optimize_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArrpprofileDarrpOptimizeScheduleArgs']]]]):
        pulumi.set(self, "darrp_optimize_schedules", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="includeDfsChannel")
    def include_dfs_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of DFS channel in DARRP channel selection phase 1 (default = disable).
        """
        return pulumi.get(self, "include_dfs_channel")

    @include_dfs_channel.setter
    def include_dfs_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_dfs_channel", value)

    @property
    @pulumi.getter(name="includeWeatherChannel")
    def include_weather_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of weather channel in DARRP channel selection phase 1 (default = disable).
        """
        return pulumi.get(self, "include_weather_channel")

    @include_weather_channel.setter
    def include_weather_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_weather_channel", value)

    @property
    @pulumi.getter(name="monitorPeriod")
    def monitor_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period in seconds to measure average transmit retries and receive errors (default = 300).
        """
        return pulumi.get(self, "monitor_period")

    @monitor_period.setter
    def monitor_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_period", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi ARRP profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideDarrpOptimize")
    def override_darrp_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override setting darrp-optimize and darrp-optimize-schedules (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_darrp_optimize")

    @override_darrp_optimize.setter
    def override_darrp_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_darrp_optimize", value)

    @property
    @pulumi.getter(name="selectionPeriod")
    def selection_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period in seconds to measure average channel load, noise floor, spectral RSSI (default = 3600).
        """
        return pulumi.get(self, "selection_period")

    @selection_period.setter
    def selection_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "selection_period", value)

    @property
    @pulumi.getter(name="thresholdAp")
    def threshold_ap(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold to reject channel in DARRP channel selection phase 1 due to surrounding APs (0 - 500, default = 250).
        """
        return pulumi.get(self, "threshold_ap")

    @threshold_ap.setter
    def threshold_ap(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_ap", value)

    @property
    @pulumi.getter(name="thresholdChannelLoad")
    def threshold_channel_load(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold in percentage to reject channel in DARRP channel selection phase 1 due to channel load (0 - 100, default = 60).
        """
        return pulumi.get(self, "threshold_channel_load")

    @threshold_channel_load.setter
    def threshold_channel_load(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_channel_load", value)

    @property
    @pulumi.getter(name="thresholdNoiseFloor")
    def threshold_noise_floor(self) -> Optional[pulumi.Input[str]]:
        """
        Threshold in dBm to reject channel in DARRP channel selection phase 1 due to noise floor (-95 to -20, default = -85).
        """
        return pulumi.get(self, "threshold_noise_floor")

    @threshold_noise_floor.setter
    def threshold_noise_floor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold_noise_floor", value)

    @property
    @pulumi.getter(name="thresholdRxErrors")
    def threshold_rx_errors(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold in percentage for receive errors to trigger channel reselection in DARRP monitor stage (0 - 100, default = 50).
        """
        return pulumi.get(self, "threshold_rx_errors")

    @threshold_rx_errors.setter
    def threshold_rx_errors(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_rx_errors", value)

    @property
    @pulumi.getter(name="thresholdSpectralRssi")
    def threshold_spectral_rssi(self) -> Optional[pulumi.Input[str]]:
        """
        Threshold in dBm to reject channel in DARRP channel selection phase 1 due to spectral RSSI (-95 to -20, default = -65).
        """
        return pulumi.get(self, "threshold_spectral_rssi")

    @threshold_spectral_rssi.setter
    def threshold_spectral_rssi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold_spectral_rssi", value)

    @property
    @pulumi.getter(name="thresholdTxRetries")
    def threshold_tx_retries(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold in percentage for transmit retries to trigger channel reselection in DARRP monitor stage (0 - 1000, default = 300).
        """
        return pulumi.get(self, "threshold_tx_retries")

    @threshold_tx_retries.setter
    def threshold_tx_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_tx_retries", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="weightChannelLoad")
    def weight_channel_load(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for channel load (0 - 2000, default = 20).
        """
        return pulumi.get(self, "weight_channel_load")

    @weight_channel_load.setter
    def weight_channel_load(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_channel_load", value)

    @property
    @pulumi.getter(name="weightDfsChannel")
    def weight_dfs_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for DFS channel (0 - 2000, default = 500).
        """
        return pulumi.get(self, "weight_dfs_channel")

    @weight_dfs_channel.setter
    def weight_dfs_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_dfs_channel", value)

    @property
    @pulumi.getter(name="weightManagedAp")
    def weight_managed_ap(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for managed APs (0 - 2000, default = 50).
        """
        return pulumi.get(self, "weight_managed_ap")

    @weight_managed_ap.setter
    def weight_managed_ap(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_managed_ap", value)

    @property
    @pulumi.getter(name="weightNoiseFloor")
    def weight_noise_floor(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for noise floor (0 - 2000, default = 40).
        """
        return pulumi.get(self, "weight_noise_floor")

    @weight_noise_floor.setter
    def weight_noise_floor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_noise_floor", value)

    @property
    @pulumi.getter(name="weightRogueAp")
    def weight_rogue_ap(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for rogue APs (0 - 2000, default = 10).
        """
        return pulumi.get(self, "weight_rogue_ap")

    @weight_rogue_ap.setter
    def weight_rogue_ap(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_rogue_ap", value)

    @property
    @pulumi.getter(name="weightSpectralRssi")
    def weight_spectral_rssi(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for spectral RSSI (0 - 2000, default = 40).
        """
        return pulumi.get(self, "weight_spectral_rssi")

    @weight_spectral_rssi.setter
    def weight_spectral_rssi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_spectral_rssi", value)

    @property
    @pulumi.getter(name="weightWeatherChannel")
    def weight_weather_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for weather channel (0 - 2000, default = 1000).
        """
        return pulumi.get(self, "weight_weather_channel")

    @weight_weather_channel.setter
    def weight_weather_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_weather_channel", value)


@pulumi.input_type
class _ArrpprofileState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 darrp_optimize: Optional[pulumi.Input[int]] = None,
                 darrp_optimize_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['ArrpprofileDarrpOptimizeScheduleArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 include_dfs_channel: Optional[pulumi.Input[str]] = None,
                 include_weather_channel: Optional[pulumi.Input[str]] = None,
                 monitor_period: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_darrp_optimize: Optional[pulumi.Input[str]] = None,
                 selection_period: Optional[pulumi.Input[int]] = None,
                 threshold_ap: Optional[pulumi.Input[int]] = None,
                 threshold_channel_load: Optional[pulumi.Input[int]] = None,
                 threshold_noise_floor: Optional[pulumi.Input[str]] = None,
                 threshold_rx_errors: Optional[pulumi.Input[int]] = None,
                 threshold_spectral_rssi: Optional[pulumi.Input[str]] = None,
                 threshold_tx_retries: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight_channel_load: Optional[pulumi.Input[int]] = None,
                 weight_dfs_channel: Optional[pulumi.Input[int]] = None,
                 weight_managed_ap: Optional[pulumi.Input[int]] = None,
                 weight_noise_floor: Optional[pulumi.Input[int]] = None,
                 weight_rogue_ap: Optional[pulumi.Input[int]] = None,
                 weight_spectral_rssi: Optional[pulumi.Input[int]] = None,
                 weight_weather_channel: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Arrpprofile resources.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] darrp_optimize: Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
        :param pulumi.Input[Sequence[pulumi.Input['ArrpprofileDarrpOptimizeScheduleArgs']]] darrp_optimize_schedules: Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrp_optimize_schedules` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] include_dfs_channel: Enable/disable use of DFS channel in DARRP channel selection phase 1 (default = disable).
        :param pulumi.Input[str] include_weather_channel: Enable/disable use of weather channel in DARRP channel selection phase 1 (default = disable).
        :param pulumi.Input[int] monitor_period: Period in seconds to measure average transmit retries and receive errors (default = 300).
        :param pulumi.Input[str] name: WiFi ARRP profile name.
        :param pulumi.Input[str] override_darrp_optimize: Enable to override setting darrp-optimize and darrp-optimize-schedules (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] selection_period: Period in seconds to measure average channel load, noise floor, spectral RSSI (default = 3600).
        :param pulumi.Input[int] threshold_ap: Threshold to reject channel in DARRP channel selection phase 1 due to surrounding APs (0 - 500, default = 250).
        :param pulumi.Input[int] threshold_channel_load: Threshold in percentage to reject channel in DARRP channel selection phase 1 due to channel load (0 - 100, default = 60).
        :param pulumi.Input[str] threshold_noise_floor: Threshold in dBm to reject channel in DARRP channel selection phase 1 due to noise floor (-95 to -20, default = -85).
        :param pulumi.Input[int] threshold_rx_errors: Threshold in percentage for receive errors to trigger channel reselection in DARRP monitor stage (0 - 100, default = 50).
        :param pulumi.Input[str] threshold_spectral_rssi: Threshold in dBm to reject channel in DARRP channel selection phase 1 due to spectral RSSI (-95 to -20, default = -65).
        :param pulumi.Input[int] threshold_tx_retries: Threshold in percentage for transmit retries to trigger channel reselection in DARRP monitor stage (0 - 1000, default = 300).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] weight_channel_load: Weight in DARRP channel score calculation for channel load (0 - 2000, default = 20).
        :param pulumi.Input[int] weight_dfs_channel: Weight in DARRP channel score calculation for DFS channel (0 - 2000, default = 500).
        :param pulumi.Input[int] weight_managed_ap: Weight in DARRP channel score calculation for managed APs (0 - 2000, default = 50).
        :param pulumi.Input[int] weight_noise_floor: Weight in DARRP channel score calculation for noise floor (0 - 2000, default = 40).
        :param pulumi.Input[int] weight_rogue_ap: Weight in DARRP channel score calculation for rogue APs (0 - 2000, default = 10).
        :param pulumi.Input[int] weight_spectral_rssi: Weight in DARRP channel score calculation for spectral RSSI (0 - 2000, default = 40).
        :param pulumi.Input[int] weight_weather_channel: Weight in DARRP channel score calculation for weather channel (0 - 2000, default = 1000).
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if darrp_optimize is not None:
            pulumi.set(__self__, "darrp_optimize", darrp_optimize)
        if darrp_optimize_schedules is not None:
            pulumi.set(__self__, "darrp_optimize_schedules", darrp_optimize_schedules)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if include_dfs_channel is not None:
            pulumi.set(__self__, "include_dfs_channel", include_dfs_channel)
        if include_weather_channel is not None:
            pulumi.set(__self__, "include_weather_channel", include_weather_channel)
        if monitor_period is not None:
            pulumi.set(__self__, "monitor_period", monitor_period)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_darrp_optimize is not None:
            pulumi.set(__self__, "override_darrp_optimize", override_darrp_optimize)
        if selection_period is not None:
            pulumi.set(__self__, "selection_period", selection_period)
        if threshold_ap is not None:
            pulumi.set(__self__, "threshold_ap", threshold_ap)
        if threshold_channel_load is not None:
            pulumi.set(__self__, "threshold_channel_load", threshold_channel_load)
        if threshold_noise_floor is not None:
            pulumi.set(__self__, "threshold_noise_floor", threshold_noise_floor)
        if threshold_rx_errors is not None:
            pulumi.set(__self__, "threshold_rx_errors", threshold_rx_errors)
        if threshold_spectral_rssi is not None:
            pulumi.set(__self__, "threshold_spectral_rssi", threshold_spectral_rssi)
        if threshold_tx_retries is not None:
            pulumi.set(__self__, "threshold_tx_retries", threshold_tx_retries)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weight_channel_load is not None:
            pulumi.set(__self__, "weight_channel_load", weight_channel_load)
        if weight_dfs_channel is not None:
            pulumi.set(__self__, "weight_dfs_channel", weight_dfs_channel)
        if weight_managed_ap is not None:
            pulumi.set(__self__, "weight_managed_ap", weight_managed_ap)
        if weight_noise_floor is not None:
            pulumi.set(__self__, "weight_noise_floor", weight_noise_floor)
        if weight_rogue_ap is not None:
            pulumi.set(__self__, "weight_rogue_ap", weight_rogue_ap)
        if weight_spectral_rssi is not None:
            pulumi.set(__self__, "weight_spectral_rssi", weight_spectral_rssi)
        if weight_weather_channel is not None:
            pulumi.set(__self__, "weight_weather_channel", weight_weather_channel)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="darrpOptimize")
    def darrp_optimize(self) -> Optional[pulumi.Input[int]]:
        """
        Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
        """
        return pulumi.get(self, "darrp_optimize")

    @darrp_optimize.setter
    def darrp_optimize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "darrp_optimize", value)

    @property
    @pulumi.getter(name="darrpOptimizeSchedules")
    def darrp_optimize_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArrpprofileDarrpOptimizeScheduleArgs']]]]:
        """
        Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrp_optimize_schedules` block is documented below.
        """
        return pulumi.get(self, "darrp_optimize_schedules")

    @darrp_optimize_schedules.setter
    def darrp_optimize_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArrpprofileDarrpOptimizeScheduleArgs']]]]):
        pulumi.set(self, "darrp_optimize_schedules", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="includeDfsChannel")
    def include_dfs_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of DFS channel in DARRP channel selection phase 1 (default = disable).
        """
        return pulumi.get(self, "include_dfs_channel")

    @include_dfs_channel.setter
    def include_dfs_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_dfs_channel", value)

    @property
    @pulumi.getter(name="includeWeatherChannel")
    def include_weather_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of weather channel in DARRP channel selection phase 1 (default = disable).
        """
        return pulumi.get(self, "include_weather_channel")

    @include_weather_channel.setter
    def include_weather_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_weather_channel", value)

    @property
    @pulumi.getter(name="monitorPeriod")
    def monitor_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period in seconds to measure average transmit retries and receive errors (default = 300).
        """
        return pulumi.get(self, "monitor_period")

    @monitor_period.setter
    def monitor_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_period", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi ARRP profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideDarrpOptimize")
    def override_darrp_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override setting darrp-optimize and darrp-optimize-schedules (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_darrp_optimize")

    @override_darrp_optimize.setter
    def override_darrp_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_darrp_optimize", value)

    @property
    @pulumi.getter(name="selectionPeriod")
    def selection_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period in seconds to measure average channel load, noise floor, spectral RSSI (default = 3600).
        """
        return pulumi.get(self, "selection_period")

    @selection_period.setter
    def selection_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "selection_period", value)

    @property
    @pulumi.getter(name="thresholdAp")
    def threshold_ap(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold to reject channel in DARRP channel selection phase 1 due to surrounding APs (0 - 500, default = 250).
        """
        return pulumi.get(self, "threshold_ap")

    @threshold_ap.setter
    def threshold_ap(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_ap", value)

    @property
    @pulumi.getter(name="thresholdChannelLoad")
    def threshold_channel_load(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold in percentage to reject channel in DARRP channel selection phase 1 due to channel load (0 - 100, default = 60).
        """
        return pulumi.get(self, "threshold_channel_load")

    @threshold_channel_load.setter
    def threshold_channel_load(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_channel_load", value)

    @property
    @pulumi.getter(name="thresholdNoiseFloor")
    def threshold_noise_floor(self) -> Optional[pulumi.Input[str]]:
        """
        Threshold in dBm to reject channel in DARRP channel selection phase 1 due to noise floor (-95 to -20, default = -85).
        """
        return pulumi.get(self, "threshold_noise_floor")

    @threshold_noise_floor.setter
    def threshold_noise_floor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold_noise_floor", value)

    @property
    @pulumi.getter(name="thresholdRxErrors")
    def threshold_rx_errors(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold in percentage for receive errors to trigger channel reselection in DARRP monitor stage (0 - 100, default = 50).
        """
        return pulumi.get(self, "threshold_rx_errors")

    @threshold_rx_errors.setter
    def threshold_rx_errors(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_rx_errors", value)

    @property
    @pulumi.getter(name="thresholdSpectralRssi")
    def threshold_spectral_rssi(self) -> Optional[pulumi.Input[str]]:
        """
        Threshold in dBm to reject channel in DARRP channel selection phase 1 due to spectral RSSI (-95 to -20, default = -65).
        """
        return pulumi.get(self, "threshold_spectral_rssi")

    @threshold_spectral_rssi.setter
    def threshold_spectral_rssi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold_spectral_rssi", value)

    @property
    @pulumi.getter(name="thresholdTxRetries")
    def threshold_tx_retries(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold in percentage for transmit retries to trigger channel reselection in DARRP monitor stage (0 - 1000, default = 300).
        """
        return pulumi.get(self, "threshold_tx_retries")

    @threshold_tx_retries.setter
    def threshold_tx_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_tx_retries", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="weightChannelLoad")
    def weight_channel_load(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for channel load (0 - 2000, default = 20).
        """
        return pulumi.get(self, "weight_channel_load")

    @weight_channel_load.setter
    def weight_channel_load(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_channel_load", value)

    @property
    @pulumi.getter(name="weightDfsChannel")
    def weight_dfs_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for DFS channel (0 - 2000, default = 500).
        """
        return pulumi.get(self, "weight_dfs_channel")

    @weight_dfs_channel.setter
    def weight_dfs_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_dfs_channel", value)

    @property
    @pulumi.getter(name="weightManagedAp")
    def weight_managed_ap(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for managed APs (0 - 2000, default = 50).
        """
        return pulumi.get(self, "weight_managed_ap")

    @weight_managed_ap.setter
    def weight_managed_ap(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_managed_ap", value)

    @property
    @pulumi.getter(name="weightNoiseFloor")
    def weight_noise_floor(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for noise floor (0 - 2000, default = 40).
        """
        return pulumi.get(self, "weight_noise_floor")

    @weight_noise_floor.setter
    def weight_noise_floor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_noise_floor", value)

    @property
    @pulumi.getter(name="weightRogueAp")
    def weight_rogue_ap(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for rogue APs (0 - 2000, default = 10).
        """
        return pulumi.get(self, "weight_rogue_ap")

    @weight_rogue_ap.setter
    def weight_rogue_ap(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_rogue_ap", value)

    @property
    @pulumi.getter(name="weightSpectralRssi")
    def weight_spectral_rssi(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for spectral RSSI (0 - 2000, default = 40).
        """
        return pulumi.get(self, "weight_spectral_rssi")

    @weight_spectral_rssi.setter
    def weight_spectral_rssi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_spectral_rssi", value)

    @property
    @pulumi.getter(name="weightWeatherChannel")
    def weight_weather_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Weight in DARRP channel score calculation for weather channel (0 - 2000, default = 1000).
        """
        return pulumi.get(self, "weight_weather_channel")

    @weight_weather_channel.setter
    def weight_weather_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight_weather_channel", value)


class Arrpprofile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 darrp_optimize: Optional[pulumi.Input[int]] = None,
                 darrp_optimize_schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ArrpprofileDarrpOptimizeScheduleArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 include_dfs_channel: Optional[pulumi.Input[str]] = None,
                 include_weather_channel: Optional[pulumi.Input[str]] = None,
                 monitor_period: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_darrp_optimize: Optional[pulumi.Input[str]] = None,
                 selection_period: Optional[pulumi.Input[int]] = None,
                 threshold_ap: Optional[pulumi.Input[int]] = None,
                 threshold_channel_load: Optional[pulumi.Input[int]] = None,
                 threshold_noise_floor: Optional[pulumi.Input[str]] = None,
                 threshold_rx_errors: Optional[pulumi.Input[int]] = None,
                 threshold_spectral_rssi: Optional[pulumi.Input[str]] = None,
                 threshold_tx_retries: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight_channel_load: Optional[pulumi.Input[int]] = None,
                 weight_dfs_channel: Optional[pulumi.Input[int]] = None,
                 weight_managed_ap: Optional[pulumi.Input[int]] = None,
                 weight_noise_floor: Optional[pulumi.Input[int]] = None,
                 weight_rogue_ap: Optional[pulumi.Input[int]] = None,
                 weight_spectral_rssi: Optional[pulumi.Input[int]] = None,
                 weight_weather_channel: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Configure WiFi Automatic Radio Resource Provisioning (ARRP) profiles. Applies to FortiOS Version `>= 6.4.2`.

        ## Import

        WirelessController ArrpProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/arrpprofile:Arrpprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/arrpprofile:Arrpprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] darrp_optimize: Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ArrpprofileDarrpOptimizeScheduleArgs']]]] darrp_optimize_schedules: Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrp_optimize_schedules` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] include_dfs_channel: Enable/disable use of DFS channel in DARRP channel selection phase 1 (default = disable).
        :param pulumi.Input[str] include_weather_channel: Enable/disable use of weather channel in DARRP channel selection phase 1 (default = disable).
        :param pulumi.Input[int] monitor_period: Period in seconds to measure average transmit retries and receive errors (default = 300).
        :param pulumi.Input[str] name: WiFi ARRP profile name.
        :param pulumi.Input[str] override_darrp_optimize: Enable to override setting darrp-optimize and darrp-optimize-schedules (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] selection_period: Period in seconds to measure average channel load, noise floor, spectral RSSI (default = 3600).
        :param pulumi.Input[int] threshold_ap: Threshold to reject channel in DARRP channel selection phase 1 due to surrounding APs (0 - 500, default = 250).
        :param pulumi.Input[int] threshold_channel_load: Threshold in percentage to reject channel in DARRP channel selection phase 1 due to channel load (0 - 100, default = 60).
        :param pulumi.Input[str] threshold_noise_floor: Threshold in dBm to reject channel in DARRP channel selection phase 1 due to noise floor (-95 to -20, default = -85).
        :param pulumi.Input[int] threshold_rx_errors: Threshold in percentage for receive errors to trigger channel reselection in DARRP monitor stage (0 - 100, default = 50).
        :param pulumi.Input[str] threshold_spectral_rssi: Threshold in dBm to reject channel in DARRP channel selection phase 1 due to spectral RSSI (-95 to -20, default = -65).
        :param pulumi.Input[int] threshold_tx_retries: Threshold in percentage for transmit retries to trigger channel reselection in DARRP monitor stage (0 - 1000, default = 300).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] weight_channel_load: Weight in DARRP channel score calculation for channel load (0 - 2000, default = 20).
        :param pulumi.Input[int] weight_dfs_channel: Weight in DARRP channel score calculation for DFS channel (0 - 2000, default = 500).
        :param pulumi.Input[int] weight_managed_ap: Weight in DARRP channel score calculation for managed APs (0 - 2000, default = 50).
        :param pulumi.Input[int] weight_noise_floor: Weight in DARRP channel score calculation for noise floor (0 - 2000, default = 40).
        :param pulumi.Input[int] weight_rogue_ap: Weight in DARRP channel score calculation for rogue APs (0 - 2000, default = 10).
        :param pulumi.Input[int] weight_spectral_rssi: Weight in DARRP channel score calculation for spectral RSSI (0 - 2000, default = 40).
        :param pulumi.Input[int] weight_weather_channel: Weight in DARRP channel score calculation for weather channel (0 - 2000, default = 1000).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ArrpprofileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure WiFi Automatic Radio Resource Provisioning (ARRP) profiles. Applies to FortiOS Version `>= 6.4.2`.

        ## Import

        WirelessController ArrpProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/arrpprofile:Arrpprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/arrpprofile:Arrpprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ArrpprofileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ArrpprofileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 darrp_optimize: Optional[pulumi.Input[int]] = None,
                 darrp_optimize_schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ArrpprofileDarrpOptimizeScheduleArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 include_dfs_channel: Optional[pulumi.Input[str]] = None,
                 include_weather_channel: Optional[pulumi.Input[str]] = None,
                 monitor_period: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_darrp_optimize: Optional[pulumi.Input[str]] = None,
                 selection_period: Optional[pulumi.Input[int]] = None,
                 threshold_ap: Optional[pulumi.Input[int]] = None,
                 threshold_channel_load: Optional[pulumi.Input[int]] = None,
                 threshold_noise_floor: Optional[pulumi.Input[str]] = None,
                 threshold_rx_errors: Optional[pulumi.Input[int]] = None,
                 threshold_spectral_rssi: Optional[pulumi.Input[str]] = None,
                 threshold_tx_retries: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight_channel_load: Optional[pulumi.Input[int]] = None,
                 weight_dfs_channel: Optional[pulumi.Input[int]] = None,
                 weight_managed_ap: Optional[pulumi.Input[int]] = None,
                 weight_noise_floor: Optional[pulumi.Input[int]] = None,
                 weight_rogue_ap: Optional[pulumi.Input[int]] = None,
                 weight_spectral_rssi: Optional[pulumi.Input[int]] = None,
                 weight_weather_channel: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ArrpprofileArgs.__new__(ArrpprofileArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["darrp_optimize"] = darrp_optimize
            __props__.__dict__["darrp_optimize_schedules"] = darrp_optimize_schedules
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["include_dfs_channel"] = include_dfs_channel
            __props__.__dict__["include_weather_channel"] = include_weather_channel
            __props__.__dict__["monitor_period"] = monitor_period
            __props__.__dict__["name"] = name
            __props__.__dict__["override_darrp_optimize"] = override_darrp_optimize
            __props__.__dict__["selection_period"] = selection_period
            __props__.__dict__["threshold_ap"] = threshold_ap
            __props__.__dict__["threshold_channel_load"] = threshold_channel_load
            __props__.__dict__["threshold_noise_floor"] = threshold_noise_floor
            __props__.__dict__["threshold_rx_errors"] = threshold_rx_errors
            __props__.__dict__["threshold_spectral_rssi"] = threshold_spectral_rssi
            __props__.__dict__["threshold_tx_retries"] = threshold_tx_retries
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["weight_channel_load"] = weight_channel_load
            __props__.__dict__["weight_dfs_channel"] = weight_dfs_channel
            __props__.__dict__["weight_managed_ap"] = weight_managed_ap
            __props__.__dict__["weight_noise_floor"] = weight_noise_floor
            __props__.__dict__["weight_rogue_ap"] = weight_rogue_ap
            __props__.__dict__["weight_spectral_rssi"] = weight_spectral_rssi
            __props__.__dict__["weight_weather_channel"] = weight_weather_channel
        super(Arrpprofile, __self__).__init__(
            'fortios:wirelesscontroller/arrpprofile:Arrpprofile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            darrp_optimize: Optional[pulumi.Input[int]] = None,
            darrp_optimize_schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ArrpprofileDarrpOptimizeScheduleArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            include_dfs_channel: Optional[pulumi.Input[str]] = None,
            include_weather_channel: Optional[pulumi.Input[str]] = None,
            monitor_period: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            override_darrp_optimize: Optional[pulumi.Input[str]] = None,
            selection_period: Optional[pulumi.Input[int]] = None,
            threshold_ap: Optional[pulumi.Input[int]] = None,
            threshold_channel_load: Optional[pulumi.Input[int]] = None,
            threshold_noise_floor: Optional[pulumi.Input[str]] = None,
            threshold_rx_errors: Optional[pulumi.Input[int]] = None,
            threshold_spectral_rssi: Optional[pulumi.Input[str]] = None,
            threshold_tx_retries: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            weight_channel_load: Optional[pulumi.Input[int]] = None,
            weight_dfs_channel: Optional[pulumi.Input[int]] = None,
            weight_managed_ap: Optional[pulumi.Input[int]] = None,
            weight_noise_floor: Optional[pulumi.Input[int]] = None,
            weight_rogue_ap: Optional[pulumi.Input[int]] = None,
            weight_spectral_rssi: Optional[pulumi.Input[int]] = None,
            weight_weather_channel: Optional[pulumi.Input[int]] = None) -> 'Arrpprofile':
        """
        Get an existing Arrpprofile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] darrp_optimize: Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ArrpprofileDarrpOptimizeScheduleArgs']]]] darrp_optimize_schedules: Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrp_optimize_schedules` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] include_dfs_channel: Enable/disable use of DFS channel in DARRP channel selection phase 1 (default = disable).
        :param pulumi.Input[str] include_weather_channel: Enable/disable use of weather channel in DARRP channel selection phase 1 (default = disable).
        :param pulumi.Input[int] monitor_period: Period in seconds to measure average transmit retries and receive errors (default = 300).
        :param pulumi.Input[str] name: WiFi ARRP profile name.
        :param pulumi.Input[str] override_darrp_optimize: Enable to override setting darrp-optimize and darrp-optimize-schedules (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] selection_period: Period in seconds to measure average channel load, noise floor, spectral RSSI (default = 3600).
        :param pulumi.Input[int] threshold_ap: Threshold to reject channel in DARRP channel selection phase 1 due to surrounding APs (0 - 500, default = 250).
        :param pulumi.Input[int] threshold_channel_load: Threshold in percentage to reject channel in DARRP channel selection phase 1 due to channel load (0 - 100, default = 60).
        :param pulumi.Input[str] threshold_noise_floor: Threshold in dBm to reject channel in DARRP channel selection phase 1 due to noise floor (-95 to -20, default = -85).
        :param pulumi.Input[int] threshold_rx_errors: Threshold in percentage for receive errors to trigger channel reselection in DARRP monitor stage (0 - 100, default = 50).
        :param pulumi.Input[str] threshold_spectral_rssi: Threshold in dBm to reject channel in DARRP channel selection phase 1 due to spectral RSSI (-95 to -20, default = -65).
        :param pulumi.Input[int] threshold_tx_retries: Threshold in percentage for transmit retries to trigger channel reselection in DARRP monitor stage (0 - 1000, default = 300).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] weight_channel_load: Weight in DARRP channel score calculation for channel load (0 - 2000, default = 20).
        :param pulumi.Input[int] weight_dfs_channel: Weight in DARRP channel score calculation for DFS channel (0 - 2000, default = 500).
        :param pulumi.Input[int] weight_managed_ap: Weight in DARRP channel score calculation for managed APs (0 - 2000, default = 50).
        :param pulumi.Input[int] weight_noise_floor: Weight in DARRP channel score calculation for noise floor (0 - 2000, default = 40).
        :param pulumi.Input[int] weight_rogue_ap: Weight in DARRP channel score calculation for rogue APs (0 - 2000, default = 10).
        :param pulumi.Input[int] weight_spectral_rssi: Weight in DARRP channel score calculation for spectral RSSI (0 - 2000, default = 40).
        :param pulumi.Input[int] weight_weather_channel: Weight in DARRP channel score calculation for weather channel (0 - 2000, default = 1000).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ArrpprofileState.__new__(_ArrpprofileState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["darrp_optimize"] = darrp_optimize
        __props__.__dict__["darrp_optimize_schedules"] = darrp_optimize_schedules
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["include_dfs_channel"] = include_dfs_channel
        __props__.__dict__["include_weather_channel"] = include_weather_channel
        __props__.__dict__["monitor_period"] = monitor_period
        __props__.__dict__["name"] = name
        __props__.__dict__["override_darrp_optimize"] = override_darrp_optimize
        __props__.__dict__["selection_period"] = selection_period
        __props__.__dict__["threshold_ap"] = threshold_ap
        __props__.__dict__["threshold_channel_load"] = threshold_channel_load
        __props__.__dict__["threshold_noise_floor"] = threshold_noise_floor
        __props__.__dict__["threshold_rx_errors"] = threshold_rx_errors
        __props__.__dict__["threshold_spectral_rssi"] = threshold_spectral_rssi
        __props__.__dict__["threshold_tx_retries"] = threshold_tx_retries
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["weight_channel_load"] = weight_channel_load
        __props__.__dict__["weight_dfs_channel"] = weight_dfs_channel
        __props__.__dict__["weight_managed_ap"] = weight_managed_ap
        __props__.__dict__["weight_noise_floor"] = weight_noise_floor
        __props__.__dict__["weight_rogue_ap"] = weight_rogue_ap
        __props__.__dict__["weight_spectral_rssi"] = weight_spectral_rssi
        __props__.__dict__["weight_weather_channel"] = weight_weather_channel
        return Arrpprofile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="darrpOptimize")
    def darrp_optimize(self) -> pulumi.Output[int]:
        """
        Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
        """
        return pulumi.get(self, "darrp_optimize")

    @property
    @pulumi.getter(name="darrpOptimizeSchedules")
    def darrp_optimize_schedules(self) -> pulumi.Output[Optional[Sequence['outputs.ArrpprofileDarrpOptimizeSchedule']]]:
        """
        Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrp_optimize_schedules` block is documented below.
        """
        return pulumi.get(self, "darrp_optimize_schedules")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="includeDfsChannel")
    def include_dfs_channel(self) -> pulumi.Output[str]:
        """
        Enable/disable use of DFS channel in DARRP channel selection phase 1 (default = disable).
        """
        return pulumi.get(self, "include_dfs_channel")

    @property
    @pulumi.getter(name="includeWeatherChannel")
    def include_weather_channel(self) -> pulumi.Output[str]:
        """
        Enable/disable use of weather channel in DARRP channel selection phase 1 (default = disable).
        """
        return pulumi.get(self, "include_weather_channel")

    @property
    @pulumi.getter(name="monitorPeriod")
    def monitor_period(self) -> pulumi.Output[int]:
        """
        Period in seconds to measure average transmit retries and receive errors (default = 300).
        """
        return pulumi.get(self, "monitor_period")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        WiFi ARRP profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideDarrpOptimize")
    def override_darrp_optimize(self) -> pulumi.Output[str]:
        """
        Enable to override setting darrp-optimize and darrp-optimize-schedules (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_darrp_optimize")

    @property
    @pulumi.getter(name="selectionPeriod")
    def selection_period(self) -> pulumi.Output[int]:
        """
        Period in seconds to measure average channel load, noise floor, spectral RSSI (default = 3600).
        """
        return pulumi.get(self, "selection_period")

    @property
    @pulumi.getter(name="thresholdAp")
    def threshold_ap(self) -> pulumi.Output[int]:
        """
        Threshold to reject channel in DARRP channel selection phase 1 due to surrounding APs (0 - 500, default = 250).
        """
        return pulumi.get(self, "threshold_ap")

    @property
    @pulumi.getter(name="thresholdChannelLoad")
    def threshold_channel_load(self) -> pulumi.Output[int]:
        """
        Threshold in percentage to reject channel in DARRP channel selection phase 1 due to channel load (0 - 100, default = 60).
        """
        return pulumi.get(self, "threshold_channel_load")

    @property
    @pulumi.getter(name="thresholdNoiseFloor")
    def threshold_noise_floor(self) -> pulumi.Output[str]:
        """
        Threshold in dBm to reject channel in DARRP channel selection phase 1 due to noise floor (-95 to -20, default = -85).
        """
        return pulumi.get(self, "threshold_noise_floor")

    @property
    @pulumi.getter(name="thresholdRxErrors")
    def threshold_rx_errors(self) -> pulumi.Output[int]:
        """
        Threshold in percentage for receive errors to trigger channel reselection in DARRP monitor stage (0 - 100, default = 50).
        """
        return pulumi.get(self, "threshold_rx_errors")

    @property
    @pulumi.getter(name="thresholdSpectralRssi")
    def threshold_spectral_rssi(self) -> pulumi.Output[str]:
        """
        Threshold in dBm to reject channel in DARRP channel selection phase 1 due to spectral RSSI (-95 to -20, default = -65).
        """
        return pulumi.get(self, "threshold_spectral_rssi")

    @property
    @pulumi.getter(name="thresholdTxRetries")
    def threshold_tx_retries(self) -> pulumi.Output[int]:
        """
        Threshold in percentage for transmit retries to trigger channel reselection in DARRP monitor stage (0 - 1000, default = 300).
        """
        return pulumi.get(self, "threshold_tx_retries")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="weightChannelLoad")
    def weight_channel_load(self) -> pulumi.Output[int]:
        """
        Weight in DARRP channel score calculation for channel load (0 - 2000, default = 20).
        """
        return pulumi.get(self, "weight_channel_load")

    @property
    @pulumi.getter(name="weightDfsChannel")
    def weight_dfs_channel(self) -> pulumi.Output[int]:
        """
        Weight in DARRP channel score calculation for DFS channel (0 - 2000, default = 500).
        """
        return pulumi.get(self, "weight_dfs_channel")

    @property
    @pulumi.getter(name="weightManagedAp")
    def weight_managed_ap(self) -> pulumi.Output[int]:
        """
        Weight in DARRP channel score calculation for managed APs (0 - 2000, default = 50).
        """
        return pulumi.get(self, "weight_managed_ap")

    @property
    @pulumi.getter(name="weightNoiseFloor")
    def weight_noise_floor(self) -> pulumi.Output[int]:
        """
        Weight in DARRP channel score calculation for noise floor (0 - 2000, default = 40).
        """
        return pulumi.get(self, "weight_noise_floor")

    @property
    @pulumi.getter(name="weightRogueAp")
    def weight_rogue_ap(self) -> pulumi.Output[int]:
        """
        Weight in DARRP channel score calculation for rogue APs (0 - 2000, default = 10).
        """
        return pulumi.get(self, "weight_rogue_ap")

    @property
    @pulumi.getter(name="weightSpectralRssi")
    def weight_spectral_rssi(self) -> pulumi.Output[int]:
        """
        Weight in DARRP channel score calculation for spectral RSSI (0 - 2000, default = 40).
        """
        return pulumi.get(self, "weight_spectral_rssi")

    @property
    @pulumi.getter(name="weightWeatherChannel")
    def weight_weather_channel(self) -> pulumi.Output[int]:
        """
        Weight in DARRP channel score calculation for weather channel (0 - 2000, default = 1000).
        """
        return pulumi.get(self, "weight_weather_channel")

