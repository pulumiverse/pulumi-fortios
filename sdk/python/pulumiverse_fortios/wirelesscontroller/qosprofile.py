# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['QosprofileArgs', 'Qosprofile']

@pulumi.input_type
class QosprofileArgs:
    def __init__(__self__, *,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 burst: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 downlink: Optional[pulumi.Input[int]] = None,
                 downlink_sta: Optional[pulumi.Input[int]] = None,
                 dscp_wmm_bes: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBeArgs']]]] = None,
                 dscp_wmm_bks: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBkArgs']]]] = None,
                 dscp_wmm_mapping: Optional[pulumi.Input[str]] = None,
                 dscp_wmm_vis: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmViArgs']]]] = None,
                 dscp_wmm_vos: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmVoArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uplink: Optional[pulumi.Input[int]] = None,
                 uplink_sta: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wmm: Optional[pulumi.Input[str]] = None,
                 wmm_be_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_bk_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_dscp_marking: Optional[pulumi.Input[str]] = None,
                 wmm_uapsd: Optional[pulumi.Input[str]] = None,
                 wmm_vi_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_vo_dscp: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Qosprofile resource.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[str] burst: Enable/disable client rate burst. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] downlink: Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[int] downlink_sta: Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBeArgs']]] dscp_wmm_bes: DSCP mapping for best effort access (default = 0 24). The structure of `dscp_wmm_be` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBkArgs']]] dscp_wmm_bks: DSCP mapping for background access (default = 8 16). The structure of `dscp_wmm_bk` block is documented below.
        :param pulumi.Input[str] dscp_wmm_mapping: Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmViArgs']]] dscp_wmm_vis: DSCP mapping for video access (default = 32 40). The structure of `dscp_wmm_vi` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmVoArgs']]] dscp_wmm_vos: DSCP mapping for voice access (default = 48 56). The structure of `dscp_wmm_vo` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: WiFi QoS profile name.
        :param pulumi.Input[int] uplink: Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[int] uplink_sta: Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wmm: Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] wmm_be_dscp: DSCP marking for best effort access (default = 0).
        :param pulumi.Input[int] wmm_bk_dscp: DSCP marking for background access (default = 8).
        :param pulumi.Input[str] wmm_dscp_marking: Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wmm_uapsd: Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] wmm_vi_dscp: DSCP marking for video access (default = 32).
        :param pulumi.Input[int] wmm_vo_dscp: DSCP marking for voice access (default = 48).
        """
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if downlink is not None:
            pulumi.set(__self__, "downlink", downlink)
        if downlink_sta is not None:
            pulumi.set(__self__, "downlink_sta", downlink_sta)
        if dscp_wmm_bes is not None:
            pulumi.set(__self__, "dscp_wmm_bes", dscp_wmm_bes)
        if dscp_wmm_bks is not None:
            pulumi.set(__self__, "dscp_wmm_bks", dscp_wmm_bks)
        if dscp_wmm_mapping is not None:
            pulumi.set(__self__, "dscp_wmm_mapping", dscp_wmm_mapping)
        if dscp_wmm_vis is not None:
            pulumi.set(__self__, "dscp_wmm_vis", dscp_wmm_vis)
        if dscp_wmm_vos is not None:
            pulumi.set(__self__, "dscp_wmm_vos", dscp_wmm_vos)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uplink is not None:
            pulumi.set(__self__, "uplink", uplink)
        if uplink_sta is not None:
            pulumi.set(__self__, "uplink_sta", uplink_sta)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wmm is not None:
            pulumi.set(__self__, "wmm", wmm)
        if wmm_be_dscp is not None:
            pulumi.set(__self__, "wmm_be_dscp", wmm_be_dscp)
        if wmm_bk_dscp is not None:
            pulumi.set(__self__, "wmm_bk_dscp", wmm_bk_dscp)
        if wmm_dscp_marking is not None:
            pulumi.set(__self__, "wmm_dscp_marking", wmm_dscp_marking)
        if wmm_uapsd is not None:
            pulumi.set(__self__, "wmm_uapsd", wmm_uapsd)
        if wmm_vi_dscp is not None:
            pulumi.set(__self__, "wmm_vi_dscp", wmm_vi_dscp)
        if wmm_vo_dscp is not None:
            pulumi.set(__self__, "wmm_vo_dscp", wmm_vo_dscp)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        """
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter
    def burst(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable client rate burst. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "burst")

    @burst.setter
    def burst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "burst", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
        """
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def downlink(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "downlink")

    @downlink.setter
    def downlink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "downlink", value)

    @property
    @pulumi.getter(name="downlinkSta")
    def downlink_sta(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "downlink_sta")

    @downlink_sta.setter
    def downlink_sta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "downlink_sta", value)

    @property
    @pulumi.getter(name="dscpWmmBes")
    def dscp_wmm_bes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBeArgs']]]]:
        """
        DSCP mapping for best effort access (default = 0 24). The structure of `dscp_wmm_be` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_bes")

    @dscp_wmm_bes.setter
    def dscp_wmm_bes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBeArgs']]]]):
        pulumi.set(self, "dscp_wmm_bes", value)

    @property
    @pulumi.getter(name="dscpWmmBks")
    def dscp_wmm_bks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBkArgs']]]]:
        """
        DSCP mapping for background access (default = 8 16). The structure of `dscp_wmm_bk` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_bks")

    @dscp_wmm_bks.setter
    def dscp_wmm_bks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBkArgs']]]]):
        pulumi.set(self, "dscp_wmm_bks", value)

    @property
    @pulumi.getter(name="dscpWmmMapping")
    def dscp_wmm_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_wmm_mapping")

    @dscp_wmm_mapping.setter
    def dscp_wmm_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_wmm_mapping", value)

    @property
    @pulumi.getter(name="dscpWmmVis")
    def dscp_wmm_vis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmViArgs']]]]:
        """
        DSCP mapping for video access (default = 32 40). The structure of `dscp_wmm_vi` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_vis")

    @dscp_wmm_vis.setter
    def dscp_wmm_vis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmViArgs']]]]):
        pulumi.set(self, "dscp_wmm_vis", value)

    @property
    @pulumi.getter(name="dscpWmmVos")
    def dscp_wmm_vos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmVoArgs']]]]:
        """
        DSCP mapping for voice access (default = 48 56). The structure of `dscp_wmm_vo` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_vos")

    @dscp_wmm_vos.setter
    def dscp_wmm_vos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmVoArgs']]]]):
        pulumi.set(self, "dscp_wmm_vos", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi QoS profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uplink(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "uplink")

    @uplink.setter
    def uplink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink", value)

    @property
    @pulumi.getter(name="uplinkSta")
    def uplink_sta(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "uplink_sta")

    @uplink_sta.setter
    def uplink_sta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink_sta", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def wmm(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wmm")

    @wmm.setter
    def wmm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm", value)

    @property
    @pulumi.getter(name="wmmBeDscp")
    def wmm_be_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP marking for best effort access (default = 0).
        """
        return pulumi.get(self, "wmm_be_dscp")

    @wmm_be_dscp.setter
    def wmm_be_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_be_dscp", value)

    @property
    @pulumi.getter(name="wmmBkDscp")
    def wmm_bk_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP marking for background access (default = 8).
        """
        return pulumi.get(self, "wmm_bk_dscp")

    @wmm_bk_dscp.setter
    def wmm_bk_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_bk_dscp", value)

    @property
    @pulumi.getter(name="wmmDscpMarking")
    def wmm_dscp_marking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wmm_dscp_marking")

    @wmm_dscp_marking.setter
    def wmm_dscp_marking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm_dscp_marking", value)

    @property
    @pulumi.getter(name="wmmUapsd")
    def wmm_uapsd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wmm_uapsd")

    @wmm_uapsd.setter
    def wmm_uapsd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm_uapsd", value)

    @property
    @pulumi.getter(name="wmmViDscp")
    def wmm_vi_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP marking for video access (default = 32).
        """
        return pulumi.get(self, "wmm_vi_dscp")

    @wmm_vi_dscp.setter
    def wmm_vi_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_vi_dscp", value)

    @property
    @pulumi.getter(name="wmmVoDscp")
    def wmm_vo_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP marking for voice access (default = 48).
        """
        return pulumi.get(self, "wmm_vo_dscp")

    @wmm_vo_dscp.setter
    def wmm_vo_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_vo_dscp", value)


@pulumi.input_type
class _QosprofileState:
    def __init__(__self__, *,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 burst: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 downlink: Optional[pulumi.Input[int]] = None,
                 downlink_sta: Optional[pulumi.Input[int]] = None,
                 dscp_wmm_bes: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBeArgs']]]] = None,
                 dscp_wmm_bks: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBkArgs']]]] = None,
                 dscp_wmm_mapping: Optional[pulumi.Input[str]] = None,
                 dscp_wmm_vis: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmViArgs']]]] = None,
                 dscp_wmm_vos: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmVoArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uplink: Optional[pulumi.Input[int]] = None,
                 uplink_sta: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wmm: Optional[pulumi.Input[str]] = None,
                 wmm_be_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_bk_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_dscp_marking: Optional[pulumi.Input[str]] = None,
                 wmm_uapsd: Optional[pulumi.Input[str]] = None,
                 wmm_vi_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_vo_dscp: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Qosprofile resources.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[str] burst: Enable/disable client rate burst. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] downlink: Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[int] downlink_sta: Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBeArgs']]] dscp_wmm_bes: DSCP mapping for best effort access (default = 0 24). The structure of `dscp_wmm_be` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBkArgs']]] dscp_wmm_bks: DSCP mapping for background access (default = 8 16). The structure of `dscp_wmm_bk` block is documented below.
        :param pulumi.Input[str] dscp_wmm_mapping: Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmViArgs']]] dscp_wmm_vis: DSCP mapping for video access (default = 32 40). The structure of `dscp_wmm_vi` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmVoArgs']]] dscp_wmm_vos: DSCP mapping for voice access (default = 48 56). The structure of `dscp_wmm_vo` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: WiFi QoS profile name.
        :param pulumi.Input[int] uplink: Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[int] uplink_sta: Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wmm: Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] wmm_be_dscp: DSCP marking for best effort access (default = 0).
        :param pulumi.Input[int] wmm_bk_dscp: DSCP marking for background access (default = 8).
        :param pulumi.Input[str] wmm_dscp_marking: Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wmm_uapsd: Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] wmm_vi_dscp: DSCP marking for video access (default = 32).
        :param pulumi.Input[int] wmm_vo_dscp: DSCP marking for voice access (default = 48).
        """
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if downlink is not None:
            pulumi.set(__self__, "downlink", downlink)
        if downlink_sta is not None:
            pulumi.set(__self__, "downlink_sta", downlink_sta)
        if dscp_wmm_bes is not None:
            pulumi.set(__self__, "dscp_wmm_bes", dscp_wmm_bes)
        if dscp_wmm_bks is not None:
            pulumi.set(__self__, "dscp_wmm_bks", dscp_wmm_bks)
        if dscp_wmm_mapping is not None:
            pulumi.set(__self__, "dscp_wmm_mapping", dscp_wmm_mapping)
        if dscp_wmm_vis is not None:
            pulumi.set(__self__, "dscp_wmm_vis", dscp_wmm_vis)
        if dscp_wmm_vos is not None:
            pulumi.set(__self__, "dscp_wmm_vos", dscp_wmm_vos)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uplink is not None:
            pulumi.set(__self__, "uplink", uplink)
        if uplink_sta is not None:
            pulumi.set(__self__, "uplink_sta", uplink_sta)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wmm is not None:
            pulumi.set(__self__, "wmm", wmm)
        if wmm_be_dscp is not None:
            pulumi.set(__self__, "wmm_be_dscp", wmm_be_dscp)
        if wmm_bk_dscp is not None:
            pulumi.set(__self__, "wmm_bk_dscp", wmm_bk_dscp)
        if wmm_dscp_marking is not None:
            pulumi.set(__self__, "wmm_dscp_marking", wmm_dscp_marking)
        if wmm_uapsd is not None:
            pulumi.set(__self__, "wmm_uapsd", wmm_uapsd)
        if wmm_vi_dscp is not None:
            pulumi.set(__self__, "wmm_vi_dscp", wmm_vi_dscp)
        if wmm_vo_dscp is not None:
            pulumi.set(__self__, "wmm_vo_dscp", wmm_vo_dscp)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        """
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter
    def burst(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable client rate burst. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "burst")

    @burst.setter
    def burst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "burst", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
        """
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def downlink(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "downlink")

    @downlink.setter
    def downlink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "downlink", value)

    @property
    @pulumi.getter(name="downlinkSta")
    def downlink_sta(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "downlink_sta")

    @downlink_sta.setter
    def downlink_sta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "downlink_sta", value)

    @property
    @pulumi.getter(name="dscpWmmBes")
    def dscp_wmm_bes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBeArgs']]]]:
        """
        DSCP mapping for best effort access (default = 0 24). The structure of `dscp_wmm_be` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_bes")

    @dscp_wmm_bes.setter
    def dscp_wmm_bes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBeArgs']]]]):
        pulumi.set(self, "dscp_wmm_bes", value)

    @property
    @pulumi.getter(name="dscpWmmBks")
    def dscp_wmm_bks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBkArgs']]]]:
        """
        DSCP mapping for background access (default = 8 16). The structure of `dscp_wmm_bk` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_bks")

    @dscp_wmm_bks.setter
    def dscp_wmm_bks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmBkArgs']]]]):
        pulumi.set(self, "dscp_wmm_bks", value)

    @property
    @pulumi.getter(name="dscpWmmMapping")
    def dscp_wmm_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_wmm_mapping")

    @dscp_wmm_mapping.setter
    def dscp_wmm_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_wmm_mapping", value)

    @property
    @pulumi.getter(name="dscpWmmVis")
    def dscp_wmm_vis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmViArgs']]]]:
        """
        DSCP mapping for video access (default = 32 40). The structure of `dscp_wmm_vi` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_vis")

    @dscp_wmm_vis.setter
    def dscp_wmm_vis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmViArgs']]]]):
        pulumi.set(self, "dscp_wmm_vis", value)

    @property
    @pulumi.getter(name="dscpWmmVos")
    def dscp_wmm_vos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmVoArgs']]]]:
        """
        DSCP mapping for voice access (default = 48 56). The structure of `dscp_wmm_vo` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_vos")

    @dscp_wmm_vos.setter
    def dscp_wmm_vos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QosprofileDscpWmmVoArgs']]]]):
        pulumi.set(self, "dscp_wmm_vos", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi QoS profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uplink(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "uplink")

    @uplink.setter
    def uplink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink", value)

    @property
    @pulumi.getter(name="uplinkSta")
    def uplink_sta(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "uplink_sta")

    @uplink_sta.setter
    def uplink_sta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink_sta", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def wmm(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wmm")

    @wmm.setter
    def wmm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm", value)

    @property
    @pulumi.getter(name="wmmBeDscp")
    def wmm_be_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP marking for best effort access (default = 0).
        """
        return pulumi.get(self, "wmm_be_dscp")

    @wmm_be_dscp.setter
    def wmm_be_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_be_dscp", value)

    @property
    @pulumi.getter(name="wmmBkDscp")
    def wmm_bk_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP marking for background access (default = 8).
        """
        return pulumi.get(self, "wmm_bk_dscp")

    @wmm_bk_dscp.setter
    def wmm_bk_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_bk_dscp", value)

    @property
    @pulumi.getter(name="wmmDscpMarking")
    def wmm_dscp_marking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wmm_dscp_marking")

    @wmm_dscp_marking.setter
    def wmm_dscp_marking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm_dscp_marking", value)

    @property
    @pulumi.getter(name="wmmUapsd")
    def wmm_uapsd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wmm_uapsd")

    @wmm_uapsd.setter
    def wmm_uapsd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm_uapsd", value)

    @property
    @pulumi.getter(name="wmmViDscp")
    def wmm_vi_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP marking for video access (default = 32).
        """
        return pulumi.get(self, "wmm_vi_dscp")

    @wmm_vi_dscp.setter
    def wmm_vi_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_vi_dscp", value)

    @property
    @pulumi.getter(name="wmmVoDscp")
    def wmm_vo_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP marking for voice access (default = 48).
        """
        return pulumi.get(self, "wmm_vo_dscp")

    @wmm_vo_dscp.setter
    def wmm_vo_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_vo_dscp", value)


class Qosprofile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 burst: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 downlink: Optional[pulumi.Input[int]] = None,
                 downlink_sta: Optional[pulumi.Input[int]] = None,
                 dscp_wmm_bes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmBeArgs']]]]] = None,
                 dscp_wmm_bks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmBkArgs']]]]] = None,
                 dscp_wmm_mapping: Optional[pulumi.Input[str]] = None,
                 dscp_wmm_vis: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmViArgs']]]]] = None,
                 dscp_wmm_vos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmVoArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uplink: Optional[pulumi.Input[int]] = None,
                 uplink_sta: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wmm: Optional[pulumi.Input[str]] = None,
                 wmm_be_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_bk_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_dscp_marking: Optional[pulumi.Input[str]] = None,
                 wmm_uapsd: Optional[pulumi.Input[str]] = None,
                 wmm_vi_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_vo_dscp: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Configure WiFi quality of service (QoS) profiles.

        ## Import

        WirelessController QosProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/qosprofile:Qosprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/qosprofile:Qosprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[str] burst: Enable/disable client rate burst. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] downlink: Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[int] downlink_sta: Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmBeArgs']]]] dscp_wmm_bes: DSCP mapping for best effort access (default = 0 24). The structure of `dscp_wmm_be` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmBkArgs']]]] dscp_wmm_bks: DSCP mapping for background access (default = 8 16). The structure of `dscp_wmm_bk` block is documented below.
        :param pulumi.Input[str] dscp_wmm_mapping: Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmViArgs']]]] dscp_wmm_vis: DSCP mapping for video access (default = 32 40). The structure of `dscp_wmm_vi` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmVoArgs']]]] dscp_wmm_vos: DSCP mapping for voice access (default = 48 56). The structure of `dscp_wmm_vo` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: WiFi QoS profile name.
        :param pulumi.Input[int] uplink: Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[int] uplink_sta: Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wmm: Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] wmm_be_dscp: DSCP marking for best effort access (default = 0).
        :param pulumi.Input[int] wmm_bk_dscp: DSCP marking for background access (default = 8).
        :param pulumi.Input[str] wmm_dscp_marking: Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wmm_uapsd: Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] wmm_vi_dscp: DSCP marking for video access (default = 32).
        :param pulumi.Input[int] wmm_vo_dscp: DSCP marking for voice access (default = 48).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[QosprofileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure WiFi quality of service (QoS) profiles.

        ## Import

        WirelessController QosProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/qosprofile:Qosprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/qosprofile:Qosprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param QosprofileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QosprofileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 burst: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 downlink: Optional[pulumi.Input[int]] = None,
                 downlink_sta: Optional[pulumi.Input[int]] = None,
                 dscp_wmm_bes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmBeArgs']]]]] = None,
                 dscp_wmm_bks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmBkArgs']]]]] = None,
                 dscp_wmm_mapping: Optional[pulumi.Input[str]] = None,
                 dscp_wmm_vis: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmViArgs']]]]] = None,
                 dscp_wmm_vos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmVoArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uplink: Optional[pulumi.Input[int]] = None,
                 uplink_sta: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wmm: Optional[pulumi.Input[str]] = None,
                 wmm_be_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_bk_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_dscp_marking: Optional[pulumi.Input[str]] = None,
                 wmm_uapsd: Optional[pulumi.Input[str]] = None,
                 wmm_vi_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_vo_dscp: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QosprofileArgs.__new__(QosprofileArgs)

            __props__.__dict__["bandwidth_admission_control"] = bandwidth_admission_control
            __props__.__dict__["bandwidth_capacity"] = bandwidth_capacity
            __props__.__dict__["burst"] = burst
            __props__.__dict__["call_admission_control"] = call_admission_control
            __props__.__dict__["call_capacity"] = call_capacity
            __props__.__dict__["comment"] = comment
            __props__.__dict__["downlink"] = downlink
            __props__.__dict__["downlink_sta"] = downlink_sta
            __props__.__dict__["dscp_wmm_bes"] = dscp_wmm_bes
            __props__.__dict__["dscp_wmm_bks"] = dscp_wmm_bks
            __props__.__dict__["dscp_wmm_mapping"] = dscp_wmm_mapping
            __props__.__dict__["dscp_wmm_vis"] = dscp_wmm_vis
            __props__.__dict__["dscp_wmm_vos"] = dscp_wmm_vos
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["name"] = name
            __props__.__dict__["uplink"] = uplink
            __props__.__dict__["uplink_sta"] = uplink_sta
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wmm"] = wmm
            __props__.__dict__["wmm_be_dscp"] = wmm_be_dscp
            __props__.__dict__["wmm_bk_dscp"] = wmm_bk_dscp
            __props__.__dict__["wmm_dscp_marking"] = wmm_dscp_marking
            __props__.__dict__["wmm_uapsd"] = wmm_uapsd
            __props__.__dict__["wmm_vi_dscp"] = wmm_vi_dscp
            __props__.__dict__["wmm_vo_dscp"] = wmm_vo_dscp
        super(Qosprofile, __self__).__init__(
            'fortios:wirelesscontroller/qosprofile:Qosprofile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
            bandwidth_capacity: Optional[pulumi.Input[int]] = None,
            burst: Optional[pulumi.Input[str]] = None,
            call_admission_control: Optional[pulumi.Input[str]] = None,
            call_capacity: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            downlink: Optional[pulumi.Input[int]] = None,
            downlink_sta: Optional[pulumi.Input[int]] = None,
            dscp_wmm_bes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmBeArgs']]]]] = None,
            dscp_wmm_bks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmBkArgs']]]]] = None,
            dscp_wmm_mapping: Optional[pulumi.Input[str]] = None,
            dscp_wmm_vis: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmViArgs']]]]] = None,
            dscp_wmm_vos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmVoArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            uplink: Optional[pulumi.Input[int]] = None,
            uplink_sta: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wmm: Optional[pulumi.Input[str]] = None,
            wmm_be_dscp: Optional[pulumi.Input[int]] = None,
            wmm_bk_dscp: Optional[pulumi.Input[int]] = None,
            wmm_dscp_marking: Optional[pulumi.Input[str]] = None,
            wmm_uapsd: Optional[pulumi.Input[str]] = None,
            wmm_vi_dscp: Optional[pulumi.Input[int]] = None,
            wmm_vo_dscp: Optional[pulumi.Input[int]] = None) -> 'Qosprofile':
        """
        Get an existing Qosprofile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[str] burst: Enable/disable client rate burst. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] downlink: Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[int] downlink_sta: Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmBeArgs']]]] dscp_wmm_bes: DSCP mapping for best effort access (default = 0 24). The structure of `dscp_wmm_be` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmBkArgs']]]] dscp_wmm_bks: DSCP mapping for background access (default = 8 16). The structure of `dscp_wmm_bk` block is documented below.
        :param pulumi.Input[str] dscp_wmm_mapping: Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmViArgs']]]] dscp_wmm_vis: DSCP mapping for video access (default = 32 40). The structure of `dscp_wmm_vi` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QosprofileDscpWmmVoArgs']]]] dscp_wmm_vos: DSCP mapping for voice access (default = 48 56). The structure of `dscp_wmm_vo` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: WiFi QoS profile name.
        :param pulumi.Input[int] uplink: Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[int] uplink_sta: Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wmm: Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] wmm_be_dscp: DSCP marking for best effort access (default = 0).
        :param pulumi.Input[int] wmm_bk_dscp: DSCP marking for background access (default = 8).
        :param pulumi.Input[str] wmm_dscp_marking: Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wmm_uapsd: Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] wmm_vi_dscp: DSCP marking for video access (default = 32).
        :param pulumi.Input[int] wmm_vo_dscp: DSCP marking for voice access (default = 48).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _QosprofileState.__new__(_QosprofileState)

        __props__.__dict__["bandwidth_admission_control"] = bandwidth_admission_control
        __props__.__dict__["bandwidth_capacity"] = bandwidth_capacity
        __props__.__dict__["burst"] = burst
        __props__.__dict__["call_admission_control"] = call_admission_control
        __props__.__dict__["call_capacity"] = call_capacity
        __props__.__dict__["comment"] = comment
        __props__.__dict__["downlink"] = downlink
        __props__.__dict__["downlink_sta"] = downlink_sta
        __props__.__dict__["dscp_wmm_bes"] = dscp_wmm_bes
        __props__.__dict__["dscp_wmm_bks"] = dscp_wmm_bks
        __props__.__dict__["dscp_wmm_mapping"] = dscp_wmm_mapping
        __props__.__dict__["dscp_wmm_vis"] = dscp_wmm_vis
        __props__.__dict__["dscp_wmm_vos"] = dscp_wmm_vos
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["name"] = name
        __props__.__dict__["uplink"] = uplink
        __props__.__dict__["uplink_sta"] = uplink_sta
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wmm"] = wmm
        __props__.__dict__["wmm_be_dscp"] = wmm_be_dscp
        __props__.__dict__["wmm_bk_dscp"] = wmm_bk_dscp
        __props__.__dict__["wmm_dscp_marking"] = wmm_dscp_marking
        __props__.__dict__["wmm_uapsd"] = wmm_uapsd
        __props__.__dict__["wmm_vi_dscp"] = wmm_vi_dscp
        __props__.__dict__["wmm_vo_dscp"] = wmm_vo_dscp
        return Qosprofile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> pulumi.Output[str]:
        """
        Enable/disable WMM bandwidth admission control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bandwidth_admission_control")

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> pulumi.Output[int]:
        """
        Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        """
        return pulumi.get(self, "bandwidth_capacity")

    @property
    @pulumi.getter
    def burst(self) -> pulumi.Output[str]:
        """
        Enable/disable client rate burst. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "burst")

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> pulumi.Output[str]:
        """
        Enable/disable WMM call admission control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "call_admission_control")

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> pulumi.Output[int]:
        """
        Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
        """
        return pulumi.get(self, "call_capacity")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def downlink(self) -> pulumi.Output[int]:
        """
        Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "downlink")

    @property
    @pulumi.getter(name="downlinkSta")
    def downlink_sta(self) -> pulumi.Output[int]:
        """
        Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "downlink_sta")

    @property
    @pulumi.getter(name="dscpWmmBes")
    def dscp_wmm_bes(self) -> pulumi.Output[Optional[Sequence['outputs.QosprofileDscpWmmBe']]]:
        """
        DSCP mapping for best effort access (default = 0 24). The structure of `dscp_wmm_be` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_bes")

    @property
    @pulumi.getter(name="dscpWmmBks")
    def dscp_wmm_bks(self) -> pulumi.Output[Optional[Sequence['outputs.QosprofileDscpWmmBk']]]:
        """
        DSCP mapping for background access (default = 8 16). The structure of `dscp_wmm_bk` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_bks")

    @property
    @pulumi.getter(name="dscpWmmMapping")
    def dscp_wmm_mapping(self) -> pulumi.Output[str]:
        """
        Enable/disable Differentiated Services Code Point (DSCP) mapping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_wmm_mapping")

    @property
    @pulumi.getter(name="dscpWmmVis")
    def dscp_wmm_vis(self) -> pulumi.Output[Optional[Sequence['outputs.QosprofileDscpWmmVi']]]:
        """
        DSCP mapping for video access (default = 32 40). The structure of `dscp_wmm_vi` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_vis")

    @property
    @pulumi.getter(name="dscpWmmVos")
    def dscp_wmm_vos(self) -> pulumi.Output[Optional[Sequence['outputs.QosprofileDscpWmmVo']]]:
        """
        DSCP mapping for voice access (default = 48 56). The structure of `dscp_wmm_vo` block is documented below.
        """
        return pulumi.get(self, "dscp_wmm_vos")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        WiFi QoS profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uplink(self) -> pulumi.Output[int]:
        """
        Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "uplink")

    @property
    @pulumi.getter(name="uplinkSta")
    def uplink_sta(self) -> pulumi.Output[int]:
        """
        Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
        """
        return pulumi.get(self, "uplink_sta")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def wmm(self) -> pulumi.Output[str]:
        """
        Enable/disable WiFi multi-media (WMM) control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wmm")

    @property
    @pulumi.getter(name="wmmBeDscp")
    def wmm_be_dscp(self) -> pulumi.Output[int]:
        """
        DSCP marking for best effort access (default = 0).
        """
        return pulumi.get(self, "wmm_be_dscp")

    @property
    @pulumi.getter(name="wmmBkDscp")
    def wmm_bk_dscp(self) -> pulumi.Output[int]:
        """
        DSCP marking for background access (default = 8).
        """
        return pulumi.get(self, "wmm_bk_dscp")

    @property
    @pulumi.getter(name="wmmDscpMarking")
    def wmm_dscp_marking(self) -> pulumi.Output[str]:
        """
        Enable/disable WMM Differentiated Services Code Point (DSCP) marking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wmm_dscp_marking")

    @property
    @pulumi.getter(name="wmmUapsd")
    def wmm_uapsd(self) -> pulumi.Output[str]:
        """
        Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wmm_uapsd")

    @property
    @pulumi.getter(name="wmmViDscp")
    def wmm_vi_dscp(self) -> pulumi.Output[int]:
        """
        DSCP marking for video access (default = 32).
        """
        return pulumi.get(self, "wmm_vi_dscp")

    @property
    @pulumi.getter(name="wmmVoDscp")
    def wmm_vo_dscp(self) -> pulumi.Output[int]:
        """
        DSCP marking for voice access (default = 48).
        """
        return pulumi.get(self, "wmm_vo_dscp")

