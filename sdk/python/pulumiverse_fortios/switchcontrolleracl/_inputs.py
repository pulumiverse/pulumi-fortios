# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GroupIngressArgs',
    'IngressActionArgs',
    'IngressClassifierArgs',
]

@pulumi.input_type
class GroupIngressArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: ACL ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ACL ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class IngressActionArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[str]] = None,
                 drop: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] count: Enable/disable count. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drop: Enable/disable drop. Valid values: `enable`, `disable`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable count. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable drop. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop", value)


@pulumi.input_type
class IngressClassifierArgs:
    def __init__(__self__, *,
                 dst_ip_prefix: Optional[pulumi.Input[str]] = None,
                 dst_mac: Optional[pulumi.Input[str]] = None,
                 src_ip_prefix: Optional[pulumi.Input[str]] = None,
                 src_mac: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dst_ip_prefix: Destination IP address to be matched.
        :param pulumi.Input[str] dst_mac: Destination MAC address to be matched.
        :param pulumi.Input[str] src_ip_prefix: Source IP address to be matched.
        :param pulumi.Input[str] src_mac: Source MAC address to be matched.
        :param pulumi.Input[int] vlan: VLAN ID to be matched.
        """
        if dst_ip_prefix is not None:
            pulumi.set(__self__, "dst_ip_prefix", dst_ip_prefix)
        if dst_mac is not None:
            pulumi.set(__self__, "dst_mac", dst_mac)
        if src_ip_prefix is not None:
            pulumi.set(__self__, "src_ip_prefix", src_ip_prefix)
        if src_mac is not None:
            pulumi.set(__self__, "src_mac", src_mac)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="dstIpPrefix")
    def dst_ip_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP address to be matched.
        """
        return pulumi.get(self, "dst_ip_prefix")

    @dst_ip_prefix.setter
    def dst_ip_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip_prefix", value)

    @property
    @pulumi.getter(name="dstMac")
    def dst_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Destination MAC address to be matched.
        """
        return pulumi.get(self, "dst_mac")

    @dst_mac.setter
    def dst_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_mac", value)

    @property
    @pulumi.getter(name="srcIpPrefix")
    def src_ip_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address to be matched.
        """
        return pulumi.get(self, "src_ip_prefix")

    @src_ip_prefix.setter
    def src_ip_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ip_prefix", value)

    @property
    @pulumi.getter(name="srcMac")
    def src_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Source MAC address to be matched.
        """
        return pulumi.get(self, "src_mac")

    @src_mac.setter
    def src_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_mac", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID to be matched.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


