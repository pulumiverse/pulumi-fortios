# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProfileArgs', 'Profile']

@pulumi.input_type
class ProfileArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 dailymotion: Optional[pulumi.Input[str]] = None,
                 default_action: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFilterArgs']]]] = None,
                 fortiguard_category: Optional[pulumi.Input['ProfileFortiguardCategoryArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vimeo: Optional[pulumi.Input[str]] = None,
                 youtube: Optional[pulumi.Input[str]] = None,
                 youtube_channel_filter: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Profile resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dailymotion: Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_action: Video filter default action. Valid values: `allow`, `monitor`, `block`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFilterArgs']]] filters: YouTube filter entries. The structure of `filters` block is documented below.
        :param pulumi.Input['ProfileFortiguardCategoryArgs'] fortiguard_category: Configure FortiGuard categories. The structure of `fortiguard_category` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vimeo: Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] youtube: Enable/disable YouTube video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] youtube_channel_filter: Set YouTube channel filter.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dailymotion is not None:
            pulumi.set(__self__, "dailymotion", dailymotion)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if fortiguard_category is not None:
            pulumi.set(__self__, "fortiguard_category", fortiguard_category)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vimeo is not None:
            pulumi.set(__self__, "vimeo", vimeo)
        if youtube is not None:
            pulumi.set(__self__, "youtube", youtube)
        if youtube_channel_filter is not None:
            pulumi.set(__self__, "youtube_channel_filter", youtube_channel_filter)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dailymotion(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dailymotion")

    @dailymotion.setter
    def dailymotion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dailymotion", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        """
        Video filter default action. Valid values: `allow`, `monitor`, `block`.
        """
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFilterArgs']]]]:
        """
        YouTube filter entries. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="fortiguardCategory")
    def fortiguard_category(self) -> Optional[pulumi.Input['ProfileFortiguardCategoryArgs']]:
        """
        Configure FortiGuard categories. The structure of `fortiguard_category` block is documented below.
        """
        return pulumi.get(self, "fortiguard_category")

    @fortiguard_category.setter
    def fortiguard_category(self, value: Optional[pulumi.Input['ProfileFortiguardCategoryArgs']]):
        pulumi.set(self, "fortiguard_category", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vimeo(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vimeo")

    @vimeo.setter
    def vimeo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vimeo", value)

    @property
    @pulumi.getter
    def youtube(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable YouTube video source. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "youtube")

    @youtube.setter
    def youtube(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "youtube", value)

    @property
    @pulumi.getter(name="youtubeChannelFilter")
    def youtube_channel_filter(self) -> Optional[pulumi.Input[int]]:
        """
        Set YouTube channel filter.
        """
        return pulumi.get(self, "youtube_channel_filter")

    @youtube_channel_filter.setter
    def youtube_channel_filter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "youtube_channel_filter", value)


@pulumi.input_type
class _ProfileState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 dailymotion: Optional[pulumi.Input[str]] = None,
                 default_action: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFilterArgs']]]] = None,
                 fortiguard_category: Optional[pulumi.Input['ProfileFortiguardCategoryArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vimeo: Optional[pulumi.Input[str]] = None,
                 youtube: Optional[pulumi.Input[str]] = None,
                 youtube_channel_filter: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Profile resources.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dailymotion: Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_action: Video filter default action. Valid values: `allow`, `monitor`, `block`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFilterArgs']]] filters: YouTube filter entries. The structure of `filters` block is documented below.
        :param pulumi.Input['ProfileFortiguardCategoryArgs'] fortiguard_category: Configure FortiGuard categories. The structure of `fortiguard_category` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vimeo: Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] youtube: Enable/disable YouTube video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] youtube_channel_filter: Set YouTube channel filter.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dailymotion is not None:
            pulumi.set(__self__, "dailymotion", dailymotion)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if fortiguard_category is not None:
            pulumi.set(__self__, "fortiguard_category", fortiguard_category)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vimeo is not None:
            pulumi.set(__self__, "vimeo", vimeo)
        if youtube is not None:
            pulumi.set(__self__, "youtube", youtube)
        if youtube_channel_filter is not None:
            pulumi.set(__self__, "youtube_channel_filter", youtube_channel_filter)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dailymotion(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dailymotion")

    @dailymotion.setter
    def dailymotion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dailymotion", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        """
        Video filter default action. Valid values: `allow`, `monitor`, `block`.
        """
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFilterArgs']]]]:
        """
        YouTube filter entries. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="fortiguardCategory")
    def fortiguard_category(self) -> Optional[pulumi.Input['ProfileFortiguardCategoryArgs']]:
        """
        Configure FortiGuard categories. The structure of `fortiguard_category` block is documented below.
        """
        return pulumi.get(self, "fortiguard_category")

    @fortiguard_category.setter
    def fortiguard_category(self, value: Optional[pulumi.Input['ProfileFortiguardCategoryArgs']]):
        pulumi.set(self, "fortiguard_category", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vimeo(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vimeo")

    @vimeo.setter
    def vimeo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vimeo", value)

    @property
    @pulumi.getter
    def youtube(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable YouTube video source. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "youtube")

    @youtube.setter
    def youtube(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "youtube", value)

    @property
    @pulumi.getter(name="youtubeChannelFilter")
    def youtube_channel_filter(self) -> Optional[pulumi.Input[int]]:
        """
        Set YouTube channel filter.
        """
        return pulumi.get(self, "youtube_channel_filter")

    @youtube_channel_filter.setter
    def youtube_channel_filter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "youtube_channel_filter", value)


class Profile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dailymotion: Optional[pulumi.Input[str]] = None,
                 default_action: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileFilterArgs']]]]] = None,
                 fortiguard_category: Optional[pulumi.Input[pulumi.InputType['ProfileFortiguardCategoryArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vimeo: Optional[pulumi.Input[str]] = None,
                 youtube: Optional[pulumi.Input[str]] = None,
                 youtube_channel_filter: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Configure VideoFilter profile. Applies to FortiOS Version `>= 7.0.1`.

        ## Import

        Videofilter Profile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:filter/video/profile:Profile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:filter/video/profile:Profile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dailymotion: Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_action: Video filter default action. Valid values: `allow`, `monitor`, `block`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileFilterArgs']]]] filters: YouTube filter entries. The structure of `filters` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileFortiguardCategoryArgs']] fortiguard_category: Configure FortiGuard categories. The structure of `fortiguard_category` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vimeo: Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] youtube: Enable/disable YouTube video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] youtube_channel_filter: Set YouTube channel filter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure VideoFilter profile. Applies to FortiOS Version `>= 7.0.1`.

        ## Import

        Videofilter Profile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:filter/video/profile:Profile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:filter/video/profile:Profile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dailymotion: Optional[pulumi.Input[str]] = None,
                 default_action: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileFilterArgs']]]]] = None,
                 fortiguard_category: Optional[pulumi.Input[pulumi.InputType['ProfileFortiguardCategoryArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vimeo: Optional[pulumi.Input[str]] = None,
                 youtube: Optional[pulumi.Input[str]] = None,
                 youtube_channel_filter: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProfileArgs.__new__(ProfileArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["dailymotion"] = dailymotion
            __props__.__dict__["default_action"] = default_action
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["filters"] = filters
            __props__.__dict__["fortiguard_category"] = fortiguard_category
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["log"] = log
            __props__.__dict__["name"] = name
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vimeo"] = vimeo
            __props__.__dict__["youtube"] = youtube
            __props__.__dict__["youtube_channel_filter"] = youtube_channel_filter
        super(Profile, __self__).__init__(
            'fortios:filter/video/profile:Profile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dailymotion: Optional[pulumi.Input[str]] = None,
            default_action: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileFilterArgs']]]]] = None,
            fortiguard_category: Optional[pulumi.Input[pulumi.InputType['ProfileFortiguardCategoryArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            log: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vimeo: Optional[pulumi.Input[str]] = None,
            youtube: Optional[pulumi.Input[str]] = None,
            youtube_channel_filter: Optional[pulumi.Input[int]] = None) -> 'Profile':
        """
        Get an existing Profile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dailymotion: Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_action: Video filter default action. Valid values: `allow`, `monitor`, `block`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileFilterArgs']]]] filters: YouTube filter entries. The structure of `filters` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileFortiguardCategoryArgs']] fortiguard_category: Configure FortiGuard categories. The structure of `fortiguard_category` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vimeo: Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] youtube: Enable/disable YouTube video source. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] youtube_channel_filter: Set YouTube channel filter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProfileState.__new__(_ProfileState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["dailymotion"] = dailymotion
        __props__.__dict__["default_action"] = default_action
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["filters"] = filters
        __props__.__dict__["fortiguard_category"] = fortiguard_category
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["log"] = log
        __props__.__dict__["name"] = name
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vimeo"] = vimeo
        __props__.__dict__["youtube"] = youtube
        __props__.__dict__["youtube_channel_filter"] = youtube_channel_filter
        return Profile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def dailymotion(self) -> pulumi.Output[str]:
        """
        Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dailymotion")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> pulumi.Output[str]:
        """
        Video filter default action. Valid values: `allow`, `monitor`, `block`.
        """
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Optional[Sequence['outputs.ProfileFilter']]]:
        """
        YouTube filter entries. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="fortiguardCategory")
    def fortiguard_category(self) -> pulumi.Output['outputs.ProfileFortiguardCategory']:
        """
        Configure FortiGuard categories. The structure of `fortiguard_category` block is documented below.
        """
        return pulumi.get(self, "fortiguard_category")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def log(self) -> pulumi.Output[str]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vimeo(self) -> pulumi.Output[str]:
        """
        Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vimeo")

    @property
    @pulumi.getter
    def youtube(self) -> pulumi.Output[str]:
        """
        Enable/disable YouTube video source. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "youtube")

    @property
    @pulumi.getter(name="youtubeChannelFilter")
    def youtube_channel_filter(self) -> pulumi.Output[int]:
        """
        Set YouTube channel filter.
        """
        return pulumi.get(self, "youtube_channel_filter")

