# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'BlockallowlistEntryArgs',
    'BwlEntryArgs',
    'BwordEntryArgs',
    'DnsblEntryArgs',
    'IptrustEntryArgs',
    'MheaderEntryArgs',
    'ProfileFileFilterArgs',
    'ProfileFileFilterEntryArgs',
    'ProfileFileFilterEntryFileTypeArgs',
    'ProfileGmailArgs',
    'ProfileImapArgs',
    'ProfileMapiArgs',
    'ProfileMsnHotmailArgs',
    'ProfileOtherWebmailsArgs',
    'ProfilePop3Args',
    'ProfileSmtpArgs',
    'ProfileYahooMailArgs',
]

@pulumi.input_type
class BlockallowlistEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 email_pattern: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
        :param pulumi.Input[str] addr_type: IP address type. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] email_pattern: Email address pattern.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] ip4_subnet: IPv4 network address/subnet mask bits.
        :param pulumi.Input[str] ip6_subnet: IPv6 network address/subnet mask bits.
        :param pulumi.Input[str] pattern: Pattern to match.
        :param pulumi.Input[str] pattern_type: Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Entry type.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if email_pattern is not None:
            pulumi.set(__self__, "email_pattern", email_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        IP address type. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="emailPattern")
    def email_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Email address pattern.
        """
        return pulumi.get(self, "email_pattern")

    @email_pattern.setter
    def email_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_pattern", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern to match.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Entry type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class BwlEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 email_pattern: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
        :param pulumi.Input[str] addr_type: IP address type. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] email_pattern: Email address pattern.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] ip4_subnet: IPv4 network address/subnet mask bits.
        :param pulumi.Input[str] ip6_subnet: IPv6 network address/subnet mask bits.
        :param pulumi.Input[str] pattern_type: Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Entry type. Valid values: `ip`, `email`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if email_pattern is not None:
            pulumi.set(__self__, "email_pattern", email_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        IP address type. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="emailPattern")
    def email_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Email address pattern.
        """
        return pulumi.get(self, "email_pattern")

    @email_pattern.setter
    def email_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_pattern", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Entry type. Valid values: `ip`, `email`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class BwordEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 score: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 where: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Mark spam or good. Valid values: `spam`, `clear`.
        :param pulumi.Input[int] id: Banned word entry ID.
        :param pulumi.Input[str] language: Language for the banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`.
        :param pulumi.Input[str] pattern: Pattern for the banned word.
        :param pulumi.Input[str] pattern_type: Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[int] score: Score value.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] where: Component of the email to be scanned. Valid values: `subject`, `body`, `all`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if where is not None:
            pulumi.set(__self__, "where", where)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Mark spam or good. Valid values: `spam`, `clear`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Banned word entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        """
        Language for the banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern for the banned word.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        """
        Score value.
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def where(self) -> Optional[pulumi.Input[str]]:
        """
        Component of the email to be scanned. Valid values: `subject`, `body`, `all`.
        """
        return pulumi.get(self, "where")

    @where.setter
    def where(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "where", value)


@pulumi.input_type
class DnsblEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Reject connection or mark as spam email. Valid values: `reject`, `spam`.
        :param pulumi.Input[int] id: DNSBL/ORBL entry ID.
        :param pulumi.Input[str] server: DNSBL or ORBL server name.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Reject connection or mark as spam email. Valid values: `reject`, `spam`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DNSBL/ORBL entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        DNSBL or ORBL server name.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class IptrustEntryArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr_type: Type of address. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] id: Trusted IP entry ID.
        :param pulumi.Input[str] ip4_subnet: IPv4 network address or network address/subnet mask bits.
        :param pulumi.Input[str] ip6_subnet: IPv6 network address/subnet mask bits.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Trusted IP entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 network address or network address/subnet mask bits.
        """
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class MheaderEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 fieldbody: Optional[pulumi.Input[str]] = None,
                 fieldname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Mark spam or good. Valid values: `spam`, `clear`.
        :param pulumi.Input[str] fieldbody: Pattern for the header field body.
        :param pulumi.Input[str] fieldname: Pattern for header field name.
        :param pulumi.Input[int] id: Mime header entry ID.
        :param pulumi.Input[str] pattern_type: Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if fieldbody is not None:
            pulumi.set(__self__, "fieldbody", fieldbody)
        if fieldname is not None:
            pulumi.set(__self__, "fieldname", fieldname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Mark spam or good. Valid values: `spam`, `clear`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def fieldbody(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern for the header field body.
        """
        return pulumi.get(self, "fieldbody")

    @fieldbody.setter
    def fieldbody(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fieldbody", value)

    @property
    @pulumi.getter
    def fieldname(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern for header field name.
        """
        return pulumi.get(self, "fieldname")

    @fieldname.setter
    def fieldname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fieldname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Mime header entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileFileFilterArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 scan_archive_contents: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]] entries: File filter entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] log: Enable/disable file filter logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_archive_contents: Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]]]:
        """
        File filter entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_archive_contents")

    @scan_archive_contents.setter
    def scan_archive_contents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_archive_contents", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileFileFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 password_protected: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action taken for matched file. Valid values: `log`, `block`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]] file_types: Select file type. The structure of `file_type` block is documented below.
        :param pulumi.Input[str] filter: Add a file filter.
        :param pulumi.Input[str] password_protected: Match password-protected files. Valid values: `yes`, `any`.
        :param pulumi.Input[str] protocol: Protocols to apply with. Valid values: `smtp`, `imap`, `pop3`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken for matched file. Valid values: `log`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]]]:
        """
        Select file type. The structure of `file_type` block is documented below.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFileFilterEntryFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Add a file filter.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[pulumi.Input[str]]:
        """
        Match password-protected files. Valid values: `yes`, `any`.
        """
        return pulumi.get(self, "password_protected")

    @password_protected.setter
    def password_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_protected", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols to apply with. Valid values: `smtp`, `imap`, `pop3`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class ProfileFileFilterEntryFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: File type name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File type name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileGmailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class ProfileImapArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `tag`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag_msg: Subject text or header added to spam email.
        :param pulumi.Input[str] tag_type: Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `tag`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        """
        Subject text or header added to spam email.
        """
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class ProfileMapiArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `discard`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `discard`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class ProfileMsnHotmailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class ProfileOtherWebmailsArgs:
    def __init__(__self__, *,
                 log_all: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class ProfilePop3Args:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class ProfileSmtpArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 hdrip: Optional[pulumi.Input[str]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `tag`, `discard`.
        :param pulumi.Input[str] hdrip: Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] local_override: Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag_msg: Subject text or header added to spam email.
        :param pulumi.Input[str] tag_type: Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if hdrip is not None:
            pulumi.set(__self__, "hdrip", hdrip)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `tag`, `discard`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def hdrip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "hdrip")

    @hdrip.setter
    def hdrip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hdrip", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        """
        Subject text or header added to spam email.
        """
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class ProfileYahooMailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


