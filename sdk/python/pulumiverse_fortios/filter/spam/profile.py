# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProfileArgs', 'Profile']

@pulumi.input_type
class ProfileArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 flow_based: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gmail: Optional[pulumi.Input['ProfileGmailArgs']] = None,
                 imap: Optional[pulumi.Input['ProfileImapArgs']] = None,
                 mapi: Optional[pulumi.Input['ProfileMapiArgs']] = None,
                 msn_hotmail: Optional[pulumi.Input['ProfileMsnHotmailArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input['ProfilePop3Args']] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input['ProfileSmtpArgs']] = None,
                 spam_bwl_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_threshold: Optional[pulumi.Input[int]] = None,
                 spam_filtering: Optional[pulumi.Input[str]] = None,
                 spam_iptrust_table: Optional[pulumi.Input[int]] = None,
                 spam_log: Optional[pulumi.Input[str]] = None,
                 spam_log_fortiguard_response: Optional[pulumi.Input[str]] = None,
                 spam_mheader_table: Optional[pulumi.Input[int]] = None,
                 spam_rbl_table: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 yahoo_mail: Optional[pulumi.Input['ProfileYahooMailArgs']] = None):
        """
        The set of arguments for constructing a Profile resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] external: Enable/disable external Email inspection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] flow_based: Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input['ProfileGmailArgs'] gmail: Gmail. The structure of `gmail` block is documented below.
        :param pulumi.Input['ProfileImapArgs'] imap: IMAP. The structure of `imap` block is documented below.
        :param pulumi.Input['ProfileMapiArgs'] mapi: MAPI. The structure of `mapi` block is documented below.
        :param pulumi.Input['ProfileMsnHotmailArgs'] msn_hotmail: MSN Hotmail. The structure of `msn_hotmail` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] options: Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
        :param pulumi.Input['ProfilePop3Args'] pop3: POP3. The structure of `pop3` block is documented below.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input['ProfileSmtpArgs'] smtp: SMTP. The structure of `smtp` block is documented below.
        :param pulumi.Input[int] spam_bwl_table: Anti-spam black/white list table ID.
        :param pulumi.Input[int] spam_bword_table: Anti-spam banned word table ID.
        :param pulumi.Input[int] spam_bword_threshold: Spam banned word threshold.
        :param pulumi.Input[str] spam_filtering: Enable/disable spam filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] spam_iptrust_table: Anti-spam IP trust table ID.
        :param pulumi.Input[str] spam_log: Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] spam_log_fortiguard_response: Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] spam_mheader_table: Anti-spam MIME header table ID.
        :param pulumi.Input[int] spam_rbl_table: Anti-spam DNSBL table ID.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input['ProfileYahooMailArgs'] yahoo_mail: Yahoo! Mail. The structure of `yahoo_mail` block is documented below.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if flow_based is not None:
            pulumi.set(__self__, "flow_based", flow_based)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gmail is not None:
            pulumi.set(__self__, "gmail", gmail)
        if imap is not None:
            pulumi.set(__self__, "imap", imap)
        if mapi is not None:
            pulumi.set(__self__, "mapi", mapi)
        if msn_hotmail is not None:
            pulumi.set(__self__, "msn_hotmail", msn_hotmail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if pop3 is not None:
            pulumi.set(__self__, "pop3", pop3)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if smtp is not None:
            pulumi.set(__self__, "smtp", smtp)
        if spam_bwl_table is not None:
            pulumi.set(__self__, "spam_bwl_table", spam_bwl_table)
        if spam_bword_table is not None:
            pulumi.set(__self__, "spam_bword_table", spam_bword_table)
        if spam_bword_threshold is not None:
            pulumi.set(__self__, "spam_bword_threshold", spam_bword_threshold)
        if spam_filtering is not None:
            pulumi.set(__self__, "spam_filtering", spam_filtering)
        if spam_iptrust_table is not None:
            pulumi.set(__self__, "spam_iptrust_table", spam_iptrust_table)
        if spam_log is not None:
            pulumi.set(__self__, "spam_log", spam_log)
        if spam_log_fortiguard_response is not None:
            pulumi.set(__self__, "spam_log_fortiguard_response", spam_log_fortiguard_response)
        if spam_mheader_table is not None:
            pulumi.set(__self__, "spam_mheader_table", spam_mheader_table)
        if spam_rbl_table is not None:
            pulumi.set(__self__, "spam_rbl_table", spam_rbl_table)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if yahoo_mail is not None:
            pulumi.set(__self__, "yahoo_mail", yahoo_mail)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external Email inspection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="flowBased")
    def flow_based(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "flow_based")

    @flow_based.setter
    def flow_based(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_based", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def gmail(self) -> Optional[pulumi.Input['ProfileGmailArgs']]:
        """
        Gmail. The structure of `gmail` block is documented below.
        """
        return pulumi.get(self, "gmail")

    @gmail.setter
    def gmail(self, value: Optional[pulumi.Input['ProfileGmailArgs']]):
        pulumi.set(self, "gmail", value)

    @property
    @pulumi.getter
    def imap(self) -> Optional[pulumi.Input['ProfileImapArgs']]:
        """
        IMAP. The structure of `imap` block is documented below.
        """
        return pulumi.get(self, "imap")

    @imap.setter
    def imap(self, value: Optional[pulumi.Input['ProfileImapArgs']]):
        pulumi.set(self, "imap", value)

    @property
    @pulumi.getter
    def mapi(self) -> Optional[pulumi.Input['ProfileMapiArgs']]:
        """
        MAPI. The structure of `mapi` block is documented below.
        """
        return pulumi.get(self, "mapi")

    @mapi.setter
    def mapi(self, value: Optional[pulumi.Input['ProfileMapiArgs']]):
        pulumi.set(self, "mapi", value)

    @property
    @pulumi.getter(name="msnHotmail")
    def msn_hotmail(self) -> Optional[pulumi.Input['ProfileMsnHotmailArgs']]:
        """
        MSN Hotmail. The structure of `msn_hotmail` block is documented below.
        """
        return pulumi.get(self, "msn_hotmail")

    @msn_hotmail.setter
    def msn_hotmail(self, value: Optional[pulumi.Input['ProfileMsnHotmailArgs']]):
        pulumi.set(self, "msn_hotmail", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def pop3(self) -> Optional[pulumi.Input['ProfilePop3Args']]:
        """
        POP3. The structure of `pop3` block is documented below.
        """
        return pulumi.get(self, "pop3")

    @pop3.setter
    def pop3(self, value: Optional[pulumi.Input['ProfilePop3Args']]):
        pulumi.set(self, "pop3", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def smtp(self) -> Optional[pulumi.Input['ProfileSmtpArgs']]:
        """
        SMTP. The structure of `smtp` block is documented below.
        """
        return pulumi.get(self, "smtp")

    @smtp.setter
    def smtp(self, value: Optional[pulumi.Input['ProfileSmtpArgs']]):
        pulumi.set(self, "smtp", value)

    @property
    @pulumi.getter(name="spamBwlTable")
    def spam_bwl_table(self) -> Optional[pulumi.Input[int]]:
        """
        Anti-spam black/white list table ID.
        """
        return pulumi.get(self, "spam_bwl_table")

    @spam_bwl_table.setter
    def spam_bwl_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bwl_table", value)

    @property
    @pulumi.getter(name="spamBwordTable")
    def spam_bword_table(self) -> Optional[pulumi.Input[int]]:
        """
        Anti-spam banned word table ID.
        """
        return pulumi.get(self, "spam_bword_table")

    @spam_bword_table.setter
    def spam_bword_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bword_table", value)

    @property
    @pulumi.getter(name="spamBwordThreshold")
    def spam_bword_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Spam banned word threshold.
        """
        return pulumi.get(self, "spam_bword_threshold")

    @spam_bword_threshold.setter
    def spam_bword_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bword_threshold", value)

    @property
    @pulumi.getter(name="spamFiltering")
    def spam_filtering(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spam filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spam_filtering")

    @spam_filtering.setter
    def spam_filtering(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_filtering", value)

    @property
    @pulumi.getter(name="spamIptrustTable")
    def spam_iptrust_table(self) -> Optional[pulumi.Input[int]]:
        """
        Anti-spam IP trust table ID.
        """
        return pulumi.get(self, "spam_iptrust_table")

    @spam_iptrust_table.setter
    def spam_iptrust_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_iptrust_table", value)

    @property
    @pulumi.getter(name="spamLog")
    def spam_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "spam_log")

    @spam_log.setter
    def spam_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_log", value)

    @property
    @pulumi.getter(name="spamLogFortiguardResponse")
    def spam_log_fortiguard_response(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "spam_log_fortiguard_response")

    @spam_log_fortiguard_response.setter
    def spam_log_fortiguard_response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_log_fortiguard_response", value)

    @property
    @pulumi.getter(name="spamMheaderTable")
    def spam_mheader_table(self) -> Optional[pulumi.Input[int]]:
        """
        Anti-spam MIME header table ID.
        """
        return pulumi.get(self, "spam_mheader_table")

    @spam_mheader_table.setter
    def spam_mheader_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_mheader_table", value)

    @property
    @pulumi.getter(name="spamRblTable")
    def spam_rbl_table(self) -> Optional[pulumi.Input[int]]:
        """
        Anti-spam DNSBL table ID.
        """
        return pulumi.get(self, "spam_rbl_table")

    @spam_rbl_table.setter
    def spam_rbl_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_rbl_table", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="yahooMail")
    def yahoo_mail(self) -> Optional[pulumi.Input['ProfileYahooMailArgs']]:
        """
        Yahoo! Mail. The structure of `yahoo_mail` block is documented below.
        """
        return pulumi.get(self, "yahoo_mail")

    @yahoo_mail.setter
    def yahoo_mail(self, value: Optional[pulumi.Input['ProfileYahooMailArgs']]):
        pulumi.set(self, "yahoo_mail", value)


@pulumi.input_type
class _ProfileState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 flow_based: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gmail: Optional[pulumi.Input['ProfileGmailArgs']] = None,
                 imap: Optional[pulumi.Input['ProfileImapArgs']] = None,
                 mapi: Optional[pulumi.Input['ProfileMapiArgs']] = None,
                 msn_hotmail: Optional[pulumi.Input['ProfileMsnHotmailArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input['ProfilePop3Args']] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input['ProfileSmtpArgs']] = None,
                 spam_bwl_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_threshold: Optional[pulumi.Input[int]] = None,
                 spam_filtering: Optional[pulumi.Input[str]] = None,
                 spam_iptrust_table: Optional[pulumi.Input[int]] = None,
                 spam_log: Optional[pulumi.Input[str]] = None,
                 spam_log_fortiguard_response: Optional[pulumi.Input[str]] = None,
                 spam_mheader_table: Optional[pulumi.Input[int]] = None,
                 spam_rbl_table: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 yahoo_mail: Optional[pulumi.Input['ProfileYahooMailArgs']] = None):
        """
        Input properties used for looking up and filtering Profile resources.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] external: Enable/disable external Email inspection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] flow_based: Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input['ProfileGmailArgs'] gmail: Gmail. The structure of `gmail` block is documented below.
        :param pulumi.Input['ProfileImapArgs'] imap: IMAP. The structure of `imap` block is documented below.
        :param pulumi.Input['ProfileMapiArgs'] mapi: MAPI. The structure of `mapi` block is documented below.
        :param pulumi.Input['ProfileMsnHotmailArgs'] msn_hotmail: MSN Hotmail. The structure of `msn_hotmail` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] options: Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
        :param pulumi.Input['ProfilePop3Args'] pop3: POP3. The structure of `pop3` block is documented below.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input['ProfileSmtpArgs'] smtp: SMTP. The structure of `smtp` block is documented below.
        :param pulumi.Input[int] spam_bwl_table: Anti-spam black/white list table ID.
        :param pulumi.Input[int] spam_bword_table: Anti-spam banned word table ID.
        :param pulumi.Input[int] spam_bword_threshold: Spam banned word threshold.
        :param pulumi.Input[str] spam_filtering: Enable/disable spam filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] spam_iptrust_table: Anti-spam IP trust table ID.
        :param pulumi.Input[str] spam_log: Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] spam_log_fortiguard_response: Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] spam_mheader_table: Anti-spam MIME header table ID.
        :param pulumi.Input[int] spam_rbl_table: Anti-spam DNSBL table ID.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input['ProfileYahooMailArgs'] yahoo_mail: Yahoo! Mail. The structure of `yahoo_mail` block is documented below.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if flow_based is not None:
            pulumi.set(__self__, "flow_based", flow_based)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gmail is not None:
            pulumi.set(__self__, "gmail", gmail)
        if imap is not None:
            pulumi.set(__self__, "imap", imap)
        if mapi is not None:
            pulumi.set(__self__, "mapi", mapi)
        if msn_hotmail is not None:
            pulumi.set(__self__, "msn_hotmail", msn_hotmail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if pop3 is not None:
            pulumi.set(__self__, "pop3", pop3)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if smtp is not None:
            pulumi.set(__self__, "smtp", smtp)
        if spam_bwl_table is not None:
            pulumi.set(__self__, "spam_bwl_table", spam_bwl_table)
        if spam_bword_table is not None:
            pulumi.set(__self__, "spam_bword_table", spam_bword_table)
        if spam_bword_threshold is not None:
            pulumi.set(__self__, "spam_bword_threshold", spam_bword_threshold)
        if spam_filtering is not None:
            pulumi.set(__self__, "spam_filtering", spam_filtering)
        if spam_iptrust_table is not None:
            pulumi.set(__self__, "spam_iptrust_table", spam_iptrust_table)
        if spam_log is not None:
            pulumi.set(__self__, "spam_log", spam_log)
        if spam_log_fortiguard_response is not None:
            pulumi.set(__self__, "spam_log_fortiguard_response", spam_log_fortiguard_response)
        if spam_mheader_table is not None:
            pulumi.set(__self__, "spam_mheader_table", spam_mheader_table)
        if spam_rbl_table is not None:
            pulumi.set(__self__, "spam_rbl_table", spam_rbl_table)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if yahoo_mail is not None:
            pulumi.set(__self__, "yahoo_mail", yahoo_mail)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external Email inspection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="flowBased")
    def flow_based(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "flow_based")

    @flow_based.setter
    def flow_based(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_based", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def gmail(self) -> Optional[pulumi.Input['ProfileGmailArgs']]:
        """
        Gmail. The structure of `gmail` block is documented below.
        """
        return pulumi.get(self, "gmail")

    @gmail.setter
    def gmail(self, value: Optional[pulumi.Input['ProfileGmailArgs']]):
        pulumi.set(self, "gmail", value)

    @property
    @pulumi.getter
    def imap(self) -> Optional[pulumi.Input['ProfileImapArgs']]:
        """
        IMAP. The structure of `imap` block is documented below.
        """
        return pulumi.get(self, "imap")

    @imap.setter
    def imap(self, value: Optional[pulumi.Input['ProfileImapArgs']]):
        pulumi.set(self, "imap", value)

    @property
    @pulumi.getter
    def mapi(self) -> Optional[pulumi.Input['ProfileMapiArgs']]:
        """
        MAPI. The structure of `mapi` block is documented below.
        """
        return pulumi.get(self, "mapi")

    @mapi.setter
    def mapi(self, value: Optional[pulumi.Input['ProfileMapiArgs']]):
        pulumi.set(self, "mapi", value)

    @property
    @pulumi.getter(name="msnHotmail")
    def msn_hotmail(self) -> Optional[pulumi.Input['ProfileMsnHotmailArgs']]:
        """
        MSN Hotmail. The structure of `msn_hotmail` block is documented below.
        """
        return pulumi.get(self, "msn_hotmail")

    @msn_hotmail.setter
    def msn_hotmail(self, value: Optional[pulumi.Input['ProfileMsnHotmailArgs']]):
        pulumi.set(self, "msn_hotmail", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def pop3(self) -> Optional[pulumi.Input['ProfilePop3Args']]:
        """
        POP3. The structure of `pop3` block is documented below.
        """
        return pulumi.get(self, "pop3")

    @pop3.setter
    def pop3(self, value: Optional[pulumi.Input['ProfilePop3Args']]):
        pulumi.set(self, "pop3", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def smtp(self) -> Optional[pulumi.Input['ProfileSmtpArgs']]:
        """
        SMTP. The structure of `smtp` block is documented below.
        """
        return pulumi.get(self, "smtp")

    @smtp.setter
    def smtp(self, value: Optional[pulumi.Input['ProfileSmtpArgs']]):
        pulumi.set(self, "smtp", value)

    @property
    @pulumi.getter(name="spamBwlTable")
    def spam_bwl_table(self) -> Optional[pulumi.Input[int]]:
        """
        Anti-spam black/white list table ID.
        """
        return pulumi.get(self, "spam_bwl_table")

    @spam_bwl_table.setter
    def spam_bwl_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bwl_table", value)

    @property
    @pulumi.getter(name="spamBwordTable")
    def spam_bword_table(self) -> Optional[pulumi.Input[int]]:
        """
        Anti-spam banned word table ID.
        """
        return pulumi.get(self, "spam_bword_table")

    @spam_bword_table.setter
    def spam_bword_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bword_table", value)

    @property
    @pulumi.getter(name="spamBwordThreshold")
    def spam_bword_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Spam banned word threshold.
        """
        return pulumi.get(self, "spam_bword_threshold")

    @spam_bword_threshold.setter
    def spam_bword_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bword_threshold", value)

    @property
    @pulumi.getter(name="spamFiltering")
    def spam_filtering(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spam filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spam_filtering")

    @spam_filtering.setter
    def spam_filtering(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_filtering", value)

    @property
    @pulumi.getter(name="spamIptrustTable")
    def spam_iptrust_table(self) -> Optional[pulumi.Input[int]]:
        """
        Anti-spam IP trust table ID.
        """
        return pulumi.get(self, "spam_iptrust_table")

    @spam_iptrust_table.setter
    def spam_iptrust_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_iptrust_table", value)

    @property
    @pulumi.getter(name="spamLog")
    def spam_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "spam_log")

    @spam_log.setter
    def spam_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_log", value)

    @property
    @pulumi.getter(name="spamLogFortiguardResponse")
    def spam_log_fortiguard_response(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "spam_log_fortiguard_response")

    @spam_log_fortiguard_response.setter
    def spam_log_fortiguard_response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_log_fortiguard_response", value)

    @property
    @pulumi.getter(name="spamMheaderTable")
    def spam_mheader_table(self) -> Optional[pulumi.Input[int]]:
        """
        Anti-spam MIME header table ID.
        """
        return pulumi.get(self, "spam_mheader_table")

    @spam_mheader_table.setter
    def spam_mheader_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_mheader_table", value)

    @property
    @pulumi.getter(name="spamRblTable")
    def spam_rbl_table(self) -> Optional[pulumi.Input[int]]:
        """
        Anti-spam DNSBL table ID.
        """
        return pulumi.get(self, "spam_rbl_table")

    @spam_rbl_table.setter
    def spam_rbl_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_rbl_table", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="yahooMail")
    def yahoo_mail(self) -> Optional[pulumi.Input['ProfileYahooMailArgs']]:
        """
        Yahoo! Mail. The structure of `yahoo_mail` block is documented below.
        """
        return pulumi.get(self, "yahoo_mail")

    @yahoo_mail.setter
    def yahoo_mail(self, value: Optional[pulumi.Input['ProfileYahooMailArgs']]):
        pulumi.set(self, "yahoo_mail", value)


class Profile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 flow_based: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gmail: Optional[pulumi.Input[pulumi.InputType['ProfileGmailArgs']]] = None,
                 imap: Optional[pulumi.Input[pulumi.InputType['ProfileImapArgs']]] = None,
                 mapi: Optional[pulumi.Input[pulumi.InputType['ProfileMapiArgs']]] = None,
                 msn_hotmail: Optional[pulumi.Input[pulumi.InputType['ProfileMsnHotmailArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input[pulumi.InputType['ProfilePop3Args']]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input[pulumi.InputType['ProfileSmtpArgs']]] = None,
                 spam_bwl_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_threshold: Optional[pulumi.Input[int]] = None,
                 spam_filtering: Optional[pulumi.Input[str]] = None,
                 spam_iptrust_table: Optional[pulumi.Input[int]] = None,
                 spam_log: Optional[pulumi.Input[str]] = None,
                 spam_log_fortiguard_response: Optional[pulumi.Input[str]] = None,
                 spam_mheader_table: Optional[pulumi.Input[int]] = None,
                 spam_rbl_table: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 yahoo_mail: Optional[pulumi.Input[pulumi.InputType['ProfileYahooMailArgs']]] = None,
                 __props__=None):
        """
        Configure AntiSpam profiles. Applies to FortiOS Version `<= 6.2.0`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.filter.spam.Profile("trname",
            comment="terraform test",
            external="disable",
            flow_based="disable",
            gmail=fortios.filter.spam.ProfileGmailArgs(
                log="disable",
            ),
            imap=fortios.filter.spam.ProfileImapArgs(
                action="tag",
                log="disable",
                tag_msg="Spam",
                tag_type="subject spaminfo",
            ),
            mapi=fortios.filter.spam.ProfileMapiArgs(
                action="discard",
                log="disable",
            ),
            msn_hotmail=fortios.filter.spam.ProfileMsnHotmailArgs(
                log="disable",
            ),
            pop3=fortios.filter.spam.ProfilePop3Args(
                action="tag",
                log="disable",
                tag_msg="Spam",
                tag_type="subject spaminfo",
            ),
            smtp=fortios.filter.spam.ProfileSmtpArgs(
                action="discard",
                hdrip="disable",
                local_override="disable",
                log="disable",
                tag_msg="Spam",
                tag_type="subject spaminfo",
            ),
            spam_bwl_table=0,
            spam_bword_table=0,
            spam_bword_threshold=10,
            spam_filtering="disable",
            spam_iptrust_table=0,
            spam_log="enable",
            spam_log_fortiguard_response="disable",
            spam_mheader_table=0,
            spam_rbl_table=0,
            yahoo_mail=fortios.filter.spam.ProfileYahooMailArgs(
                log="disable",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Spamfilter Profile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:filter/spam/profile:Profile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:filter/spam/profile:Profile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] external: Enable/disable external Email inspection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] flow_based: Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[pulumi.InputType['ProfileGmailArgs']] gmail: Gmail. The structure of `gmail` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileImapArgs']] imap: IMAP. The structure of `imap` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileMapiArgs']] mapi: MAPI. The structure of `mapi` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileMsnHotmailArgs']] msn_hotmail: MSN Hotmail. The structure of `msn_hotmail` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] options: Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
        :param pulumi.Input[pulumi.InputType['ProfilePop3Args']] pop3: POP3. The structure of `pop3` block is documented below.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[pulumi.InputType['ProfileSmtpArgs']] smtp: SMTP. The structure of `smtp` block is documented below.
        :param pulumi.Input[int] spam_bwl_table: Anti-spam black/white list table ID.
        :param pulumi.Input[int] spam_bword_table: Anti-spam banned word table ID.
        :param pulumi.Input[int] spam_bword_threshold: Spam banned word threshold.
        :param pulumi.Input[str] spam_filtering: Enable/disable spam filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] spam_iptrust_table: Anti-spam IP trust table ID.
        :param pulumi.Input[str] spam_log: Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] spam_log_fortiguard_response: Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] spam_mheader_table: Anti-spam MIME header table ID.
        :param pulumi.Input[int] spam_rbl_table: Anti-spam DNSBL table ID.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[pulumi.InputType['ProfileYahooMailArgs']] yahoo_mail: Yahoo! Mail. The structure of `yahoo_mail` block is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure AntiSpam profiles. Applies to FortiOS Version `<= 6.2.0`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.filter.spam.Profile("trname",
            comment="terraform test",
            external="disable",
            flow_based="disable",
            gmail=fortios.filter.spam.ProfileGmailArgs(
                log="disable",
            ),
            imap=fortios.filter.spam.ProfileImapArgs(
                action="tag",
                log="disable",
                tag_msg="Spam",
                tag_type="subject spaminfo",
            ),
            mapi=fortios.filter.spam.ProfileMapiArgs(
                action="discard",
                log="disable",
            ),
            msn_hotmail=fortios.filter.spam.ProfileMsnHotmailArgs(
                log="disable",
            ),
            pop3=fortios.filter.spam.ProfilePop3Args(
                action="tag",
                log="disable",
                tag_msg="Spam",
                tag_type="subject spaminfo",
            ),
            smtp=fortios.filter.spam.ProfileSmtpArgs(
                action="discard",
                hdrip="disable",
                local_override="disable",
                log="disable",
                tag_msg="Spam",
                tag_type="subject spaminfo",
            ),
            spam_bwl_table=0,
            spam_bword_table=0,
            spam_bword_threshold=10,
            spam_filtering="disable",
            spam_iptrust_table=0,
            spam_log="enable",
            spam_log_fortiguard_response="disable",
            spam_mheader_table=0,
            spam_rbl_table=0,
            yahoo_mail=fortios.filter.spam.ProfileYahooMailArgs(
                log="disable",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Spamfilter Profile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:filter/spam/profile:Profile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:filter/spam/profile:Profile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 flow_based: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gmail: Optional[pulumi.Input[pulumi.InputType['ProfileGmailArgs']]] = None,
                 imap: Optional[pulumi.Input[pulumi.InputType['ProfileImapArgs']]] = None,
                 mapi: Optional[pulumi.Input[pulumi.InputType['ProfileMapiArgs']]] = None,
                 msn_hotmail: Optional[pulumi.Input[pulumi.InputType['ProfileMsnHotmailArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input[pulumi.InputType['ProfilePop3Args']]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input[pulumi.InputType['ProfileSmtpArgs']]] = None,
                 spam_bwl_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_threshold: Optional[pulumi.Input[int]] = None,
                 spam_filtering: Optional[pulumi.Input[str]] = None,
                 spam_iptrust_table: Optional[pulumi.Input[int]] = None,
                 spam_log: Optional[pulumi.Input[str]] = None,
                 spam_log_fortiguard_response: Optional[pulumi.Input[str]] = None,
                 spam_mheader_table: Optional[pulumi.Input[int]] = None,
                 spam_rbl_table: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 yahoo_mail: Optional[pulumi.Input[pulumi.InputType['ProfileYahooMailArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProfileArgs.__new__(ProfileArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["external"] = external
            __props__.__dict__["flow_based"] = flow_based
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["gmail"] = gmail
            __props__.__dict__["imap"] = imap
            __props__.__dict__["mapi"] = mapi
            __props__.__dict__["msn_hotmail"] = msn_hotmail
            __props__.__dict__["name"] = name
            __props__.__dict__["options"] = options
            __props__.__dict__["pop3"] = pop3
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["smtp"] = smtp
            __props__.__dict__["spam_bwl_table"] = spam_bwl_table
            __props__.__dict__["spam_bword_table"] = spam_bword_table
            __props__.__dict__["spam_bword_threshold"] = spam_bword_threshold
            __props__.__dict__["spam_filtering"] = spam_filtering
            __props__.__dict__["spam_iptrust_table"] = spam_iptrust_table
            __props__.__dict__["spam_log"] = spam_log
            __props__.__dict__["spam_log_fortiguard_response"] = spam_log_fortiguard_response
            __props__.__dict__["spam_mheader_table"] = spam_mheader_table
            __props__.__dict__["spam_rbl_table"] = spam_rbl_table
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["yahoo_mail"] = yahoo_mail
        super(Profile, __self__).__init__(
            'fortios:filter/spam/profile:Profile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            external: Optional[pulumi.Input[str]] = None,
            flow_based: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            gmail: Optional[pulumi.Input[pulumi.InputType['ProfileGmailArgs']]] = None,
            imap: Optional[pulumi.Input[pulumi.InputType['ProfileImapArgs']]] = None,
            mapi: Optional[pulumi.Input[pulumi.InputType['ProfileMapiArgs']]] = None,
            msn_hotmail: Optional[pulumi.Input[pulumi.InputType['ProfileMsnHotmailArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[str]] = None,
            pop3: Optional[pulumi.Input[pulumi.InputType['ProfilePop3Args']]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            smtp: Optional[pulumi.Input[pulumi.InputType['ProfileSmtpArgs']]] = None,
            spam_bwl_table: Optional[pulumi.Input[int]] = None,
            spam_bword_table: Optional[pulumi.Input[int]] = None,
            spam_bword_threshold: Optional[pulumi.Input[int]] = None,
            spam_filtering: Optional[pulumi.Input[str]] = None,
            spam_iptrust_table: Optional[pulumi.Input[int]] = None,
            spam_log: Optional[pulumi.Input[str]] = None,
            spam_log_fortiguard_response: Optional[pulumi.Input[str]] = None,
            spam_mheader_table: Optional[pulumi.Input[int]] = None,
            spam_rbl_table: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            yahoo_mail: Optional[pulumi.Input[pulumi.InputType['ProfileYahooMailArgs']]] = None) -> 'Profile':
        """
        Get an existing Profile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] external: Enable/disable external Email inspection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] flow_based: Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[pulumi.InputType['ProfileGmailArgs']] gmail: Gmail. The structure of `gmail` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileImapArgs']] imap: IMAP. The structure of `imap` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileMapiArgs']] mapi: MAPI. The structure of `mapi` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileMsnHotmailArgs']] msn_hotmail: MSN Hotmail. The structure of `msn_hotmail` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] options: Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
        :param pulumi.Input[pulumi.InputType['ProfilePop3Args']] pop3: POP3. The structure of `pop3` block is documented below.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[pulumi.InputType['ProfileSmtpArgs']] smtp: SMTP. The structure of `smtp` block is documented below.
        :param pulumi.Input[int] spam_bwl_table: Anti-spam black/white list table ID.
        :param pulumi.Input[int] spam_bword_table: Anti-spam banned word table ID.
        :param pulumi.Input[int] spam_bword_threshold: Spam banned word threshold.
        :param pulumi.Input[str] spam_filtering: Enable/disable spam filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] spam_iptrust_table: Anti-spam IP trust table ID.
        :param pulumi.Input[str] spam_log: Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] spam_log_fortiguard_response: Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] spam_mheader_table: Anti-spam MIME header table ID.
        :param pulumi.Input[int] spam_rbl_table: Anti-spam DNSBL table ID.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[pulumi.InputType['ProfileYahooMailArgs']] yahoo_mail: Yahoo! Mail. The structure of `yahoo_mail` block is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProfileState.__new__(_ProfileState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["external"] = external
        __props__.__dict__["flow_based"] = flow_based
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["gmail"] = gmail
        __props__.__dict__["imap"] = imap
        __props__.__dict__["mapi"] = mapi
        __props__.__dict__["msn_hotmail"] = msn_hotmail
        __props__.__dict__["name"] = name
        __props__.__dict__["options"] = options
        __props__.__dict__["pop3"] = pop3
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["smtp"] = smtp
        __props__.__dict__["spam_bwl_table"] = spam_bwl_table
        __props__.__dict__["spam_bword_table"] = spam_bword_table
        __props__.__dict__["spam_bword_threshold"] = spam_bword_threshold
        __props__.__dict__["spam_filtering"] = spam_filtering
        __props__.__dict__["spam_iptrust_table"] = spam_iptrust_table
        __props__.__dict__["spam_log"] = spam_log
        __props__.__dict__["spam_log_fortiguard_response"] = spam_log_fortiguard_response
        __props__.__dict__["spam_mheader_table"] = spam_mheader_table
        __props__.__dict__["spam_rbl_table"] = spam_rbl_table
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["yahoo_mail"] = yahoo_mail
        return Profile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def external(self) -> pulumi.Output[str]:
        """
        Enable/disable external Email inspection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "external")

    @property
    @pulumi.getter(name="flowBased")
    def flow_based(self) -> pulumi.Output[str]:
        """
        Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "flow_based")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def gmail(self) -> pulumi.Output['outputs.ProfileGmail']:
        """
        Gmail. The structure of `gmail` block is documented below.
        """
        return pulumi.get(self, "gmail")

    @property
    @pulumi.getter
    def imap(self) -> pulumi.Output['outputs.ProfileImap']:
        """
        IMAP. The structure of `imap` block is documented below.
        """
        return pulumi.get(self, "imap")

    @property
    @pulumi.getter
    def mapi(self) -> pulumi.Output['outputs.ProfileMapi']:
        """
        MAPI. The structure of `mapi` block is documented below.
        """
        return pulumi.get(self, "mapi")

    @property
    @pulumi.getter(name="msnHotmail")
    def msn_hotmail(self) -> pulumi.Output['outputs.ProfileMsnHotmail']:
        """
        MSN Hotmail. The structure of `msn_hotmail` block is documented below.
        """
        return pulumi.get(self, "msn_hotmail")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[str]:
        """
        Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def pop3(self) -> pulumi.Output['outputs.ProfilePop3']:
        """
        POP3. The structure of `pop3` block is documented below.
        """
        return pulumi.get(self, "pop3")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter
    def smtp(self) -> pulumi.Output['outputs.ProfileSmtp']:
        """
        SMTP. The structure of `smtp` block is documented below.
        """
        return pulumi.get(self, "smtp")

    @property
    @pulumi.getter(name="spamBwlTable")
    def spam_bwl_table(self) -> pulumi.Output[int]:
        """
        Anti-spam black/white list table ID.
        """
        return pulumi.get(self, "spam_bwl_table")

    @property
    @pulumi.getter(name="spamBwordTable")
    def spam_bword_table(self) -> pulumi.Output[int]:
        """
        Anti-spam banned word table ID.
        """
        return pulumi.get(self, "spam_bword_table")

    @property
    @pulumi.getter(name="spamBwordThreshold")
    def spam_bword_threshold(self) -> pulumi.Output[int]:
        """
        Spam banned word threshold.
        """
        return pulumi.get(self, "spam_bword_threshold")

    @property
    @pulumi.getter(name="spamFiltering")
    def spam_filtering(self) -> pulumi.Output[str]:
        """
        Enable/disable spam filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spam_filtering")

    @property
    @pulumi.getter(name="spamIptrustTable")
    def spam_iptrust_table(self) -> pulumi.Output[int]:
        """
        Anti-spam IP trust table ID.
        """
        return pulumi.get(self, "spam_iptrust_table")

    @property
    @pulumi.getter(name="spamLog")
    def spam_log(self) -> pulumi.Output[str]:
        """
        Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "spam_log")

    @property
    @pulumi.getter(name="spamLogFortiguardResponse")
    def spam_log_fortiguard_response(self) -> pulumi.Output[str]:
        """
        Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "spam_log_fortiguard_response")

    @property
    @pulumi.getter(name="spamMheaderTable")
    def spam_mheader_table(self) -> pulumi.Output[int]:
        """
        Anti-spam MIME header table ID.
        """
        return pulumi.get(self, "spam_mheader_table")

    @property
    @pulumi.getter(name="spamRblTable")
    def spam_rbl_table(self) -> pulumi.Output[int]:
        """
        Anti-spam DNSBL table ID.
        """
        return pulumi.get(self, "spam_rbl_table")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="yahooMail")
    def yahoo_mail(self) -> pulumi.Output['outputs.ProfileYahooMail']:
        """
        Yahoo! Mail. The structure of `yahoo_mail` block is documented below.
        """
        return pulumi.get(self, "yahoo_mail")

