# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UrlfilterArgs', 'Urlfilter']

@pulumi.input_type
class UrlfilterArgs:
    def __init__(__self__, *,
                 fosid: pulumi.Input[int],
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['UrlfilterEntryArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip4_mapped_ip6: Optional[pulumi.Input[str]] = None,
                 ip_addr_block: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 one_arm_ips_urlfilter: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Urlfilter resource.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['UrlfilterEntryArgs']]] entries: URL filter entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ip4_mapped_ip6: Enable/disable matching of IPv4 mapped IPv6 URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ip_addr_block: Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name of URL filter list.
        :param pulumi.Input[str] one_arm_ips_urlfilter: Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "fosid", fosid)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip4_mapped_ip6 is not None:
            pulumi.set(__self__, "ip4_mapped_ip6", ip4_mapped_ip6)
        if ip_addr_block is not None:
            pulumi.set(__self__, "ip_addr_block", ip_addr_block)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if one_arm_ips_urlfilter is not None:
            pulumi.set(__self__, "one_arm_ips_urlfilter", one_arm_ips_urlfilter)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Input[int]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: pulumi.Input[int]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UrlfilterEntryArgs']]]]:
        """
        URL filter entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UrlfilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ip4MappedIp6")
    def ip4_mapped_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable matching of IPv4 mapped IPv6 URLs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip4_mapped_ip6")

    @ip4_mapped_ip6.setter
    def ip4_mapped_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_mapped_ip6", value)

    @property
    @pulumi.getter(name="ipAddrBlock")
    def ip_addr_block(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip_addr_block")

    @ip_addr_block.setter
    def ip_addr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_addr_block", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of URL filter list.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oneArmIpsUrlfilter")
    def one_arm_ips_urlfilter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "one_arm_ips_urlfilter")

    @one_arm_ips_urlfilter.setter
    def one_arm_ips_urlfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "one_arm_ips_urlfilter", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _UrlfilterState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['UrlfilterEntryArgs']]]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip4_mapped_ip6: Optional[pulumi.Input[str]] = None,
                 ip_addr_block: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 one_arm_ips_urlfilter: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Urlfilter resources.
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['UrlfilterEntryArgs']]] entries: URL filter entries. The structure of `entries` block is documented below.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ip4_mapped_ip6: Enable/disable matching of IPv4 mapped IPv6 URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ip_addr_block: Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name of URL filter list.
        :param pulumi.Input[str] one_arm_ips_urlfilter: Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip4_mapped_ip6 is not None:
            pulumi.set(__self__, "ip4_mapped_ip6", ip4_mapped_ip6)
        if ip_addr_block is not None:
            pulumi.set(__self__, "ip_addr_block", ip_addr_block)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if one_arm_ips_urlfilter is not None:
            pulumi.set(__self__, "one_arm_ips_urlfilter", one_arm_ips_urlfilter)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UrlfilterEntryArgs']]]]:
        """
        URL filter entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UrlfilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ip4MappedIp6")
    def ip4_mapped_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable matching of IPv4 mapped IPv6 URLs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip4_mapped_ip6")

    @ip4_mapped_ip6.setter
    def ip4_mapped_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_mapped_ip6", value)

    @property
    @pulumi.getter(name="ipAddrBlock")
    def ip_addr_block(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip_addr_block")

    @ip_addr_block.setter
    def ip_addr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_addr_block", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of URL filter list.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oneArmIpsUrlfilter")
    def one_arm_ips_urlfilter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "one_arm_ips_urlfilter")

    @one_arm_ips_urlfilter.setter
    def one_arm_ips_urlfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "one_arm_ips_urlfilter", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Urlfilter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UrlfilterEntryArgs']]]]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip4_mapped_ip6: Optional[pulumi.Input[str]] = None,
                 ip_addr_block: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 one_arm_ips_urlfilter: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure URL filter lists.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.filter.web.Urlfilter("trname",
            fosid=1,
            ip_addr_block="enable",
            one_arm_ips_urlfilter="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Webfilter Urlfilter can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:filter/web/urlfilter:Urlfilter labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:filter/web/urlfilter:Urlfilter labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UrlfilterEntryArgs']]]] entries: URL filter entries. The structure of `entries` block is documented below.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ip4_mapped_ip6: Enable/disable matching of IPv4 mapped IPv6 URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ip_addr_block: Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name of URL filter list.
        :param pulumi.Input[str] one_arm_ips_urlfilter: Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UrlfilterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure URL filter lists.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.filter.web.Urlfilter("trname",
            fosid=1,
            ip_addr_block="enable",
            one_arm_ips_urlfilter="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Webfilter Urlfilter can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:filter/web/urlfilter:Urlfilter labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:filter/web/urlfilter:Urlfilter labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param UrlfilterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UrlfilterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UrlfilterEntryArgs']]]]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip4_mapped_ip6: Optional[pulumi.Input[str]] = None,
                 ip_addr_block: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 one_arm_ips_urlfilter: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UrlfilterArgs.__new__(UrlfilterArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["entries"] = entries
            if fosid is None and not opts.urn:
                raise TypeError("Missing required property 'fosid'")
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ip4_mapped_ip6"] = ip4_mapped_ip6
            __props__.__dict__["ip_addr_block"] = ip_addr_block
            __props__.__dict__["name"] = name
            __props__.__dict__["one_arm_ips_urlfilter"] = one_arm_ips_urlfilter
            __props__.__dict__["vdomparam"] = vdomparam
        super(Urlfilter, __self__).__init__(
            'fortios:filter/web/urlfilter:Urlfilter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UrlfilterEntryArgs']]]]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ip4_mapped_ip6: Optional[pulumi.Input[str]] = None,
            ip_addr_block: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            one_arm_ips_urlfilter: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Urlfilter':
        """
        Get an existing Urlfilter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UrlfilterEntryArgs']]]] entries: URL filter entries. The structure of `entries` block is documented below.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ip4_mapped_ip6: Enable/disable matching of IPv4 mapped IPv6 URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ip_addr_block: Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name of URL filter list.
        :param pulumi.Input[str] one_arm_ips_urlfilter: Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UrlfilterState.__new__(_UrlfilterState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["entries"] = entries
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ip4_mapped_ip6"] = ip4_mapped_ip6
        __props__.__dict__["ip_addr_block"] = ip_addr_block
        __props__.__dict__["name"] = name
        __props__.__dict__["one_arm_ips_urlfilter"] = one_arm_ips_urlfilter
        __props__.__dict__["vdomparam"] = vdomparam
        return Urlfilter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def entries(self) -> pulumi.Output[Optional[Sequence['outputs.UrlfilterEntry']]]:
        """
        URL filter entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ip4MappedIp6")
    def ip4_mapped_ip6(self) -> pulumi.Output[str]:
        """
        Enable/disable matching of IPv4 mapped IPv6 URLs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip4_mapped_ip6")

    @property
    @pulumi.getter(name="ipAddrBlock")
    def ip_addr_block(self) -> pulumi.Output[str]:
        """
        Enable/disable blocking URLs when the hostname appears as an IP address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip_addr_block")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of URL filter list.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oneArmIpsUrlfilter")
    def one_arm_ips_urlfilter(self) -> pulumi.Output[str]:
        """
        Enable/disable DNS resolver for one-arm IPS URL filter operation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "one_arm_ips_urlfilter")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

