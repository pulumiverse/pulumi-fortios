# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['IpsurlfiltercachesettingArgs', 'Ipsurlfiltercachesetting']

@pulumi.input_type
class IpsurlfiltercachesettingArgs:
    def __init__(__self__, *,
                 dns_retry_interval: Optional[pulumi.Input[int]] = None,
                 extended_ttl: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ipsurlfiltercachesetting resource.
        :param pulumi.Input[int] dns_retry_interval: Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
        :param pulumi.Input[int] extended_ttl: Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if dns_retry_interval is not None:
            pulumi.set(__self__, "dns_retry_interval", dns_retry_interval)
        if extended_ttl is not None:
            pulumi.set(__self__, "extended_ttl", extended_ttl)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dnsRetryInterval")
    def dns_retry_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
        """
        return pulumi.get(self, "dns_retry_interval")

    @dns_retry_interval.setter
    def dns_retry_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_retry_interval", value)

    @property
    @pulumi.getter(name="extendedTtl")
    def extended_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
        """
        return pulumi.get(self, "extended_ttl")

    @extended_ttl.setter
    def extended_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "extended_ttl", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _IpsurlfiltercachesettingState:
    def __init__(__self__, *,
                 dns_retry_interval: Optional[pulumi.Input[int]] = None,
                 extended_ttl: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ipsurlfiltercachesetting resources.
        :param pulumi.Input[int] dns_retry_interval: Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
        :param pulumi.Input[int] extended_ttl: Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if dns_retry_interval is not None:
            pulumi.set(__self__, "dns_retry_interval", dns_retry_interval)
        if extended_ttl is not None:
            pulumi.set(__self__, "extended_ttl", extended_ttl)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dnsRetryInterval")
    def dns_retry_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
        """
        return pulumi.get(self, "dns_retry_interval")

    @dns_retry_interval.setter
    def dns_retry_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_retry_interval", value)

    @property
    @pulumi.getter(name="extendedTtl")
    def extended_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
        """
        return pulumi.get(self, "extended_ttl")

    @extended_ttl.setter
    def extended_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "extended_ttl", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Ipsurlfiltercachesetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_retry_interval: Optional[pulumi.Input[int]] = None,
                 extended_ttl: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IPS URL filter cache settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.filter.web.Ipsurlfiltercachesetting("trname",
            dns_retry_interval=0,
            extended_ttl=0)
        ```

        ## Import

        Webfilter IpsUrlfilterCacheSetting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:filter/web/ipsurlfiltercachesetting:Ipsurlfiltercachesetting labelname WebfilterIpsUrlfilterCacheSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:filter/web/ipsurlfiltercachesetting:Ipsurlfiltercachesetting labelname WebfilterIpsUrlfilterCacheSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] dns_retry_interval: Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
        :param pulumi.Input[int] extended_ttl: Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IpsurlfiltercachesettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IPS URL filter cache settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.filter.web.Ipsurlfiltercachesetting("trname",
            dns_retry_interval=0,
            extended_ttl=0)
        ```

        ## Import

        Webfilter IpsUrlfilterCacheSetting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:filter/web/ipsurlfiltercachesetting:Ipsurlfiltercachesetting labelname WebfilterIpsUrlfilterCacheSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:filter/web/ipsurlfiltercachesetting:Ipsurlfiltercachesetting labelname WebfilterIpsUrlfilterCacheSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param IpsurlfiltercachesettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpsurlfiltercachesettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_retry_interval: Optional[pulumi.Input[int]] = None,
                 extended_ttl: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpsurlfiltercachesettingArgs.__new__(IpsurlfiltercachesettingArgs)

            __props__.__dict__["dns_retry_interval"] = dns_retry_interval
            __props__.__dict__["extended_ttl"] = extended_ttl
            __props__.__dict__["vdomparam"] = vdomparam
        super(Ipsurlfiltercachesetting, __self__).__init__(
            'fortios:filter/web/ipsurlfiltercachesetting:Ipsurlfiltercachesetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dns_retry_interval: Optional[pulumi.Input[int]] = None,
            extended_ttl: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Ipsurlfiltercachesetting':
        """
        Get an existing Ipsurlfiltercachesetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] dns_retry_interval: Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
        :param pulumi.Input[int] extended_ttl: Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpsurlfiltercachesettingState.__new__(_IpsurlfiltercachesettingState)

        __props__.__dict__["dns_retry_interval"] = dns_retry_interval
        __props__.__dict__["extended_ttl"] = extended_ttl
        __props__.__dict__["vdomparam"] = vdomparam
        return Ipsurlfiltercachesetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dnsRetryInterval")
    def dns_retry_interval(self) -> pulumi.Output[int]:
        """
        Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
        """
        return pulumi.get(self, "dns_retry_interval")

    @property
    @pulumi.getter(name="extendedTtl")
    def extended_ttl(self) -> pulumi.Output[int]:
        """
        Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
        """
        return pulumi.get(self, "extended_ttl")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

