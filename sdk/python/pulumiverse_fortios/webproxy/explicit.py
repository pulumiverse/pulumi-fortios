# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExplicitArgs', 'Explicit']

@pulumi.input_type
class ExplicitArgs:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftp_incoming_port: Optional[pulumi.Input[str]] = None,
                 ftp_over_http: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_connection_mode: Optional[pulumi.Input[str]] = None,
                 http_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_replacement_message: Optional[pulumi.Input[str]] = None,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_ip6: Optional[pulumi.Input[str]] = None,
                 ipv6_status: Optional[pulumi.Input[str]] = None,
                 message_upon_server_error: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 outgoing_ip6: Optional[pulumi.Input[str]] = None,
                 pac_file_data: Optional[pulumi.Input[str]] = None,
                 pac_file_name: Optional[pulumi.Input[str]] = None,
                 pac_file_server_port: Optional[pulumi.Input[str]] = None,
                 pac_file_server_status: Optional[pulumi.Input[str]] = None,
                 pac_file_through_https: Optional[pulumi.Input[str]] = None,
                 pac_file_url: Optional[pulumi.Input[str]] = None,
                 pac_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitPacPolicyArgs']]]] = None,
                 pref_dns_result: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy_certs: Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitSecureWebProxyCertArgs']]]] = None,
                 socks: Optional[pulumi.Input[str]] = None,
                 socks_incoming_port: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_guest: Optional[pulumi.Input[str]] = None,
                 trace_auth_no_rsp: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Explicit resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ftp_incoming_port: Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] ftp_over_http: Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] http_connection_mode: HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
        :param pulumi.Input[str] http_incoming_port: Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
        :param pulumi.Input[str] https_incoming_port: Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
        :param pulumi.Input[str] https_replacement_message: Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] incoming_ip: Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
        :param pulumi.Input[str] incoming_ip6: Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
        :param pulumi.Input[str] ipv6_status: Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] message_upon_server_error: Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outgoing_ip: Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
        :param pulumi.Input[str] outgoing_ip6: Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
        :param pulumi.Input[str] pac_file_data: PAC file contents enclosed in quotes (maximum of 256K bytes).
        :param pulumi.Input[str] pac_file_name: Pac file name.
        :param pulumi.Input[str] pac_file_server_port: Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] pac_file_server_status: Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pac_file_through_https: Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pac_file_url: PAC file access URL.
        :param pulumi.Input[Sequence[pulumi.Input['ExplicitPacPolicyArgs']]] pac_policies: PAC policies. The structure of `pac_policy` block is documented below.
        :param pulumi.Input[str] pref_dns_result: Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] realm: Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
        :param pulumi.Input[str] sec_default_action: Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
        :param pulumi.Input[str] secure_web_proxy: Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
        :param pulumi.Input[Sequence[pulumi.Input['ExplicitSecureWebProxyCertArgs']]] secure_web_proxy_certs: Name of certificates for secure web proxy. The structure of `secure_web_proxy_cert` block is documented below.
        :param pulumi.Input[str] socks: Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] socks_incoming_port: Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] ssl_algorithm: Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] ssl_dh_bits: Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
        :param pulumi.Input[str] status: Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_guest: Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trace_auth_no_rsp: Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unknown_http_version: Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ftp_incoming_port is not None:
            pulumi.set(__self__, "ftp_incoming_port", ftp_incoming_port)
        if ftp_over_http is not None:
            pulumi.set(__self__, "ftp_over_http", ftp_over_http)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http_connection_mode is not None:
            pulumi.set(__self__, "http_connection_mode", http_connection_mode)
        if http_incoming_port is not None:
            pulumi.set(__self__, "http_incoming_port", http_incoming_port)
        if https_incoming_port is not None:
            pulumi.set(__self__, "https_incoming_port", https_incoming_port)
        if https_replacement_message is not None:
            pulumi.set(__self__, "https_replacement_message", https_replacement_message)
        if incoming_ip is not None:
            pulumi.set(__self__, "incoming_ip", incoming_ip)
        if incoming_ip6 is not None:
            pulumi.set(__self__, "incoming_ip6", incoming_ip6)
        if ipv6_status is not None:
            pulumi.set(__self__, "ipv6_status", ipv6_status)
        if message_upon_server_error is not None:
            pulumi.set(__self__, "message_upon_server_error", message_upon_server_error)
        if outgoing_ip is not None:
            pulumi.set(__self__, "outgoing_ip", outgoing_ip)
        if outgoing_ip6 is not None:
            pulumi.set(__self__, "outgoing_ip6", outgoing_ip6)
        if pac_file_data is not None:
            pulumi.set(__self__, "pac_file_data", pac_file_data)
        if pac_file_name is not None:
            pulumi.set(__self__, "pac_file_name", pac_file_name)
        if pac_file_server_port is not None:
            pulumi.set(__self__, "pac_file_server_port", pac_file_server_port)
        if pac_file_server_status is not None:
            pulumi.set(__self__, "pac_file_server_status", pac_file_server_status)
        if pac_file_through_https is not None:
            pulumi.set(__self__, "pac_file_through_https", pac_file_through_https)
        if pac_file_url is not None:
            pulumi.set(__self__, "pac_file_url", pac_file_url)
        if pac_policies is not None:
            pulumi.set(__self__, "pac_policies", pac_policies)
        if pref_dns_result is not None:
            pulumi.set(__self__, "pref_dns_result", pref_dns_result)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if sec_default_action is not None:
            pulumi.set(__self__, "sec_default_action", sec_default_action)
        if secure_web_proxy is not None:
            pulumi.set(__self__, "secure_web_proxy", secure_web_proxy)
        if secure_web_proxy_certs is not None:
            pulumi.set(__self__, "secure_web_proxy_certs", secure_web_proxy_certs)
        if socks is not None:
            pulumi.set(__self__, "socks", socks)
        if socks_incoming_port is not None:
            pulumi.set(__self__, "socks_incoming_port", socks_incoming_port)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strict_guest is not None:
            pulumi.set(__self__, "strict_guest", strict_guest)
        if trace_auth_no_rsp is not None:
            pulumi.set(__self__, "trace_auth_no_rsp", trace_auth_no_rsp)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="ftpIncomingPort")
    def ftp_incoming_port(self) -> Optional[pulumi.Input[str]]:
        """
        Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        """
        return pulumi.get(self, "ftp_incoming_port")

    @ftp_incoming_port.setter
    def ftp_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_incoming_port", value)

    @property
    @pulumi.getter(name="ftpOverHttp")
    def ftp_over_http(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ftp_over_http")

    @ftp_over_http.setter
    def ftp_over_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_over_http", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpConnectionMode")
    def http_connection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
        """
        return pulumi.get(self, "http_connection_mode")

    @http_connection_mode.setter
    def http_connection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_connection_mode", value)

    @property
    @pulumi.getter(name="httpIncomingPort")
    def http_incoming_port(self) -> Optional[pulumi.Input[str]]:
        """
        Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
        """
        return pulumi.get(self, "http_incoming_port")

    @http_incoming_port.setter
    def http_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_incoming_port", value)

    @property
    @pulumi.getter(name="httpsIncomingPort")
    def https_incoming_port(self) -> Optional[pulumi.Input[str]]:
        """
        Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
        """
        return pulumi.get(self, "https_incoming_port")

    @https_incoming_port.setter
    def https_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_incoming_port", value)

    @property
    @pulumi.getter(name="httpsReplacementMessage")
    def https_replacement_message(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "https_replacement_message")

    @https_replacement_message.setter
    def https_replacement_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_replacement_message", value)

    @property
    @pulumi.getter(name="incomingIp")
    def incoming_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
        """
        return pulumi.get(self, "incoming_ip")

    @incoming_ip.setter
    def incoming_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_ip", value)

    @property
    @pulumi.getter(name="incomingIp6")
    def incoming_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
        """
        return pulumi.get(self, "incoming_ip6")

    @incoming_ip6.setter
    def incoming_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_ip6", value)

    @property
    @pulumi.getter(name="ipv6Status")
    def ipv6_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv6_status")

    @ipv6_status.setter
    def ipv6_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_status", value)

    @property
    @pulumi.getter(name="messageUponServerError")
    def message_upon_server_error(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "message_upon_server_error")

    @message_upon_server_error.setter
    def message_upon_server_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_upon_server_error", value)

    @property
    @pulumi.getter(name="outgoingIp")
    def outgoing_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
        """
        return pulumi.get(self, "outgoing_ip")

    @outgoing_ip.setter
    def outgoing_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outgoing_ip", value)

    @property
    @pulumi.getter(name="outgoingIp6")
    def outgoing_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
        """
        return pulumi.get(self, "outgoing_ip6")

    @outgoing_ip6.setter
    def outgoing_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outgoing_ip6", value)

    @property
    @pulumi.getter(name="pacFileData")
    def pac_file_data(self) -> Optional[pulumi.Input[str]]:
        """
        PAC file contents enclosed in quotes (maximum of 256K bytes).
        """
        return pulumi.get(self, "pac_file_data")

    @pac_file_data.setter
    def pac_file_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_data", value)

    @property
    @pulumi.getter(name="pacFileName")
    def pac_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Pac file name.
        """
        return pulumi.get(self, "pac_file_name")

    @pac_file_name.setter
    def pac_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_name", value)

    @property
    @pulumi.getter(name="pacFileServerPort")
    def pac_file_server_port(self) -> Optional[pulumi.Input[str]]:
        """
        Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
        """
        return pulumi.get(self, "pac_file_server_port")

    @pac_file_server_port.setter
    def pac_file_server_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_server_port", value)

    @property
    @pulumi.getter(name="pacFileServerStatus")
    def pac_file_server_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pac_file_server_status")

    @pac_file_server_status.setter
    def pac_file_server_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_server_status", value)

    @property
    @pulumi.getter(name="pacFileThroughHttps")
    def pac_file_through_https(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pac_file_through_https")

    @pac_file_through_https.setter
    def pac_file_through_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_through_https", value)

    @property
    @pulumi.getter(name="pacFileUrl")
    def pac_file_url(self) -> Optional[pulumi.Input[str]]:
        """
        PAC file access URL.
        """
        return pulumi.get(self, "pac_file_url")

    @pac_file_url.setter
    def pac_file_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_url", value)

    @property
    @pulumi.getter(name="pacPolicies")
    def pac_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitPacPolicyArgs']]]]:
        """
        PAC policies. The structure of `pac_policy` block is documented below.
        """
        return pulumi.get(self, "pac_policies")

    @pac_policies.setter
    def pac_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitPacPolicyArgs']]]]):
        pulumi.set(self, "pac_policies", value)

    @property
    @pulumi.getter(name="prefDnsResult")
    def pref_dns_result(self) -> Optional[pulumi.Input[str]]:
        """
        Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "pref_dns_result")

    @pref_dns_result.setter
    def pref_dns_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pref_dns_result", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="secDefaultAction")
    def sec_default_action(self) -> Optional[pulumi.Input[str]]:
        """
        Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "sec_default_action")

    @sec_default_action.setter
    def sec_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_default_action", value)

    @property
    @pulumi.getter(name="secureWebProxy")
    def secure_web_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
        """
        return pulumi.get(self, "secure_web_proxy")

    @secure_web_proxy.setter
    def secure_web_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_web_proxy", value)

    @property
    @pulumi.getter(name="secureWebProxyCerts")
    def secure_web_proxy_certs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitSecureWebProxyCertArgs']]]]:
        """
        Name of certificates for secure web proxy. The structure of `secure_web_proxy_cert` block is documented below.
        """
        return pulumi.get(self, "secure_web_proxy_certs")

    @secure_web_proxy_certs.setter
    def secure_web_proxy_certs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitSecureWebProxyCertArgs']]]]):
        pulumi.set(self, "secure_web_proxy_certs", value)

    @property
    @pulumi.getter
    def socks(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "socks")

    @socks.setter
    def socks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socks", value)

    @property
    @pulumi.getter(name="socksIncomingPort")
    def socks_incoming_port(self) -> Optional[pulumi.Input[str]]:
        """
        Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        """
        return pulumi.get(self, "socks_incoming_port")

    @socks_incoming_port.setter
    def socks_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socks_incoming_port", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="strictGuest")
    def strict_guest(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_guest")

    @strict_guest.setter
    def strict_guest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_guest", value)

    @property
    @pulumi.getter(name="traceAuthNoRsp")
    def trace_auth_no_rsp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trace_auth_no_rsp")

    @trace_auth_no_rsp.setter
    def trace_auth_no_rsp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trace_auth_no_rsp", value)

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[pulumi.Input[str]]:
        """
        Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
        """
        return pulumi.get(self, "unknown_http_version")

    @unknown_http_version.setter
    def unknown_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_http_version", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ExplicitState:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftp_incoming_port: Optional[pulumi.Input[str]] = None,
                 ftp_over_http: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_connection_mode: Optional[pulumi.Input[str]] = None,
                 http_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_replacement_message: Optional[pulumi.Input[str]] = None,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_ip6: Optional[pulumi.Input[str]] = None,
                 ipv6_status: Optional[pulumi.Input[str]] = None,
                 message_upon_server_error: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 outgoing_ip6: Optional[pulumi.Input[str]] = None,
                 pac_file_data: Optional[pulumi.Input[str]] = None,
                 pac_file_name: Optional[pulumi.Input[str]] = None,
                 pac_file_server_port: Optional[pulumi.Input[str]] = None,
                 pac_file_server_status: Optional[pulumi.Input[str]] = None,
                 pac_file_through_https: Optional[pulumi.Input[str]] = None,
                 pac_file_url: Optional[pulumi.Input[str]] = None,
                 pac_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitPacPolicyArgs']]]] = None,
                 pref_dns_result: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy_certs: Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitSecureWebProxyCertArgs']]]] = None,
                 socks: Optional[pulumi.Input[str]] = None,
                 socks_incoming_port: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_guest: Optional[pulumi.Input[str]] = None,
                 trace_auth_no_rsp: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Explicit resources.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ftp_incoming_port: Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] ftp_over_http: Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] http_connection_mode: HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
        :param pulumi.Input[str] http_incoming_port: Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
        :param pulumi.Input[str] https_incoming_port: Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
        :param pulumi.Input[str] https_replacement_message: Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] incoming_ip: Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
        :param pulumi.Input[str] incoming_ip6: Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
        :param pulumi.Input[str] ipv6_status: Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] message_upon_server_error: Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outgoing_ip: Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
        :param pulumi.Input[str] outgoing_ip6: Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
        :param pulumi.Input[str] pac_file_data: PAC file contents enclosed in quotes (maximum of 256K bytes).
        :param pulumi.Input[str] pac_file_name: Pac file name.
        :param pulumi.Input[str] pac_file_server_port: Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] pac_file_server_status: Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pac_file_through_https: Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pac_file_url: PAC file access URL.
        :param pulumi.Input[Sequence[pulumi.Input['ExplicitPacPolicyArgs']]] pac_policies: PAC policies. The structure of `pac_policy` block is documented below.
        :param pulumi.Input[str] pref_dns_result: Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] realm: Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
        :param pulumi.Input[str] sec_default_action: Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
        :param pulumi.Input[str] secure_web_proxy: Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
        :param pulumi.Input[Sequence[pulumi.Input['ExplicitSecureWebProxyCertArgs']]] secure_web_proxy_certs: Name of certificates for secure web proxy. The structure of `secure_web_proxy_cert` block is documented below.
        :param pulumi.Input[str] socks: Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] socks_incoming_port: Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] ssl_algorithm: Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] ssl_dh_bits: Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
        :param pulumi.Input[str] status: Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_guest: Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trace_auth_no_rsp: Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unknown_http_version: Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ftp_incoming_port is not None:
            pulumi.set(__self__, "ftp_incoming_port", ftp_incoming_port)
        if ftp_over_http is not None:
            pulumi.set(__self__, "ftp_over_http", ftp_over_http)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http_connection_mode is not None:
            pulumi.set(__self__, "http_connection_mode", http_connection_mode)
        if http_incoming_port is not None:
            pulumi.set(__self__, "http_incoming_port", http_incoming_port)
        if https_incoming_port is not None:
            pulumi.set(__self__, "https_incoming_port", https_incoming_port)
        if https_replacement_message is not None:
            pulumi.set(__self__, "https_replacement_message", https_replacement_message)
        if incoming_ip is not None:
            pulumi.set(__self__, "incoming_ip", incoming_ip)
        if incoming_ip6 is not None:
            pulumi.set(__self__, "incoming_ip6", incoming_ip6)
        if ipv6_status is not None:
            pulumi.set(__self__, "ipv6_status", ipv6_status)
        if message_upon_server_error is not None:
            pulumi.set(__self__, "message_upon_server_error", message_upon_server_error)
        if outgoing_ip is not None:
            pulumi.set(__self__, "outgoing_ip", outgoing_ip)
        if outgoing_ip6 is not None:
            pulumi.set(__self__, "outgoing_ip6", outgoing_ip6)
        if pac_file_data is not None:
            pulumi.set(__self__, "pac_file_data", pac_file_data)
        if pac_file_name is not None:
            pulumi.set(__self__, "pac_file_name", pac_file_name)
        if pac_file_server_port is not None:
            pulumi.set(__self__, "pac_file_server_port", pac_file_server_port)
        if pac_file_server_status is not None:
            pulumi.set(__self__, "pac_file_server_status", pac_file_server_status)
        if pac_file_through_https is not None:
            pulumi.set(__self__, "pac_file_through_https", pac_file_through_https)
        if pac_file_url is not None:
            pulumi.set(__self__, "pac_file_url", pac_file_url)
        if pac_policies is not None:
            pulumi.set(__self__, "pac_policies", pac_policies)
        if pref_dns_result is not None:
            pulumi.set(__self__, "pref_dns_result", pref_dns_result)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if sec_default_action is not None:
            pulumi.set(__self__, "sec_default_action", sec_default_action)
        if secure_web_proxy is not None:
            pulumi.set(__self__, "secure_web_proxy", secure_web_proxy)
        if secure_web_proxy_certs is not None:
            pulumi.set(__self__, "secure_web_proxy_certs", secure_web_proxy_certs)
        if socks is not None:
            pulumi.set(__self__, "socks", socks)
        if socks_incoming_port is not None:
            pulumi.set(__self__, "socks_incoming_port", socks_incoming_port)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strict_guest is not None:
            pulumi.set(__self__, "strict_guest", strict_guest)
        if trace_auth_no_rsp is not None:
            pulumi.set(__self__, "trace_auth_no_rsp", trace_auth_no_rsp)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="ftpIncomingPort")
    def ftp_incoming_port(self) -> Optional[pulumi.Input[str]]:
        """
        Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        """
        return pulumi.get(self, "ftp_incoming_port")

    @ftp_incoming_port.setter
    def ftp_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_incoming_port", value)

    @property
    @pulumi.getter(name="ftpOverHttp")
    def ftp_over_http(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ftp_over_http")

    @ftp_over_http.setter
    def ftp_over_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_over_http", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpConnectionMode")
    def http_connection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
        """
        return pulumi.get(self, "http_connection_mode")

    @http_connection_mode.setter
    def http_connection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_connection_mode", value)

    @property
    @pulumi.getter(name="httpIncomingPort")
    def http_incoming_port(self) -> Optional[pulumi.Input[str]]:
        """
        Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
        """
        return pulumi.get(self, "http_incoming_port")

    @http_incoming_port.setter
    def http_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_incoming_port", value)

    @property
    @pulumi.getter(name="httpsIncomingPort")
    def https_incoming_port(self) -> Optional[pulumi.Input[str]]:
        """
        Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
        """
        return pulumi.get(self, "https_incoming_port")

    @https_incoming_port.setter
    def https_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_incoming_port", value)

    @property
    @pulumi.getter(name="httpsReplacementMessage")
    def https_replacement_message(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "https_replacement_message")

    @https_replacement_message.setter
    def https_replacement_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_replacement_message", value)

    @property
    @pulumi.getter(name="incomingIp")
    def incoming_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
        """
        return pulumi.get(self, "incoming_ip")

    @incoming_ip.setter
    def incoming_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_ip", value)

    @property
    @pulumi.getter(name="incomingIp6")
    def incoming_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
        """
        return pulumi.get(self, "incoming_ip6")

    @incoming_ip6.setter
    def incoming_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_ip6", value)

    @property
    @pulumi.getter(name="ipv6Status")
    def ipv6_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv6_status")

    @ipv6_status.setter
    def ipv6_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_status", value)

    @property
    @pulumi.getter(name="messageUponServerError")
    def message_upon_server_error(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "message_upon_server_error")

    @message_upon_server_error.setter
    def message_upon_server_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_upon_server_error", value)

    @property
    @pulumi.getter(name="outgoingIp")
    def outgoing_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
        """
        return pulumi.get(self, "outgoing_ip")

    @outgoing_ip.setter
    def outgoing_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outgoing_ip", value)

    @property
    @pulumi.getter(name="outgoingIp6")
    def outgoing_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
        """
        return pulumi.get(self, "outgoing_ip6")

    @outgoing_ip6.setter
    def outgoing_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outgoing_ip6", value)

    @property
    @pulumi.getter(name="pacFileData")
    def pac_file_data(self) -> Optional[pulumi.Input[str]]:
        """
        PAC file contents enclosed in quotes (maximum of 256K bytes).
        """
        return pulumi.get(self, "pac_file_data")

    @pac_file_data.setter
    def pac_file_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_data", value)

    @property
    @pulumi.getter(name="pacFileName")
    def pac_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Pac file name.
        """
        return pulumi.get(self, "pac_file_name")

    @pac_file_name.setter
    def pac_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_name", value)

    @property
    @pulumi.getter(name="pacFileServerPort")
    def pac_file_server_port(self) -> Optional[pulumi.Input[str]]:
        """
        Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
        """
        return pulumi.get(self, "pac_file_server_port")

    @pac_file_server_port.setter
    def pac_file_server_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_server_port", value)

    @property
    @pulumi.getter(name="pacFileServerStatus")
    def pac_file_server_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pac_file_server_status")

    @pac_file_server_status.setter
    def pac_file_server_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_server_status", value)

    @property
    @pulumi.getter(name="pacFileThroughHttps")
    def pac_file_through_https(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pac_file_through_https")

    @pac_file_through_https.setter
    def pac_file_through_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_through_https", value)

    @property
    @pulumi.getter(name="pacFileUrl")
    def pac_file_url(self) -> Optional[pulumi.Input[str]]:
        """
        PAC file access URL.
        """
        return pulumi.get(self, "pac_file_url")

    @pac_file_url.setter
    def pac_file_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_url", value)

    @property
    @pulumi.getter(name="pacPolicies")
    def pac_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitPacPolicyArgs']]]]:
        """
        PAC policies. The structure of `pac_policy` block is documented below.
        """
        return pulumi.get(self, "pac_policies")

    @pac_policies.setter
    def pac_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitPacPolicyArgs']]]]):
        pulumi.set(self, "pac_policies", value)

    @property
    @pulumi.getter(name="prefDnsResult")
    def pref_dns_result(self) -> Optional[pulumi.Input[str]]:
        """
        Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "pref_dns_result")

    @pref_dns_result.setter
    def pref_dns_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pref_dns_result", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="secDefaultAction")
    def sec_default_action(self) -> Optional[pulumi.Input[str]]:
        """
        Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "sec_default_action")

    @sec_default_action.setter
    def sec_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_default_action", value)

    @property
    @pulumi.getter(name="secureWebProxy")
    def secure_web_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
        """
        return pulumi.get(self, "secure_web_proxy")

    @secure_web_proxy.setter
    def secure_web_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_web_proxy", value)

    @property
    @pulumi.getter(name="secureWebProxyCerts")
    def secure_web_proxy_certs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitSecureWebProxyCertArgs']]]]:
        """
        Name of certificates for secure web proxy. The structure of `secure_web_proxy_cert` block is documented below.
        """
        return pulumi.get(self, "secure_web_proxy_certs")

    @secure_web_proxy_certs.setter
    def secure_web_proxy_certs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExplicitSecureWebProxyCertArgs']]]]):
        pulumi.set(self, "secure_web_proxy_certs", value)

    @property
    @pulumi.getter
    def socks(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "socks")

    @socks.setter
    def socks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socks", value)

    @property
    @pulumi.getter(name="socksIncomingPort")
    def socks_incoming_port(self) -> Optional[pulumi.Input[str]]:
        """
        Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        """
        return pulumi.get(self, "socks_incoming_port")

    @socks_incoming_port.setter
    def socks_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socks_incoming_port", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="strictGuest")
    def strict_guest(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_guest")

    @strict_guest.setter
    def strict_guest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_guest", value)

    @property
    @pulumi.getter(name="traceAuthNoRsp")
    def trace_auth_no_rsp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trace_auth_no_rsp")

    @trace_auth_no_rsp.setter
    def trace_auth_no_rsp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trace_auth_no_rsp", value)

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[pulumi.Input[str]]:
        """
        Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
        """
        return pulumi.get(self, "unknown_http_version")

    @unknown_http_version.setter
    def unknown_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_http_version", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Explicit(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftp_incoming_port: Optional[pulumi.Input[str]] = None,
                 ftp_over_http: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_connection_mode: Optional[pulumi.Input[str]] = None,
                 http_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_replacement_message: Optional[pulumi.Input[str]] = None,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_ip6: Optional[pulumi.Input[str]] = None,
                 ipv6_status: Optional[pulumi.Input[str]] = None,
                 message_upon_server_error: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 outgoing_ip6: Optional[pulumi.Input[str]] = None,
                 pac_file_data: Optional[pulumi.Input[str]] = None,
                 pac_file_name: Optional[pulumi.Input[str]] = None,
                 pac_file_server_port: Optional[pulumi.Input[str]] = None,
                 pac_file_server_status: Optional[pulumi.Input[str]] = None,
                 pac_file_through_https: Optional[pulumi.Input[str]] = None,
                 pac_file_url: Optional[pulumi.Input[str]] = None,
                 pac_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExplicitPacPolicyArgs']]]]] = None,
                 pref_dns_result: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy_certs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExplicitSecureWebProxyCertArgs']]]]] = None,
                 socks: Optional[pulumi.Input[str]] = None,
                 socks_incoming_port: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_guest: Optional[pulumi.Input[str]] = None,
                 trace_auth_no_rsp: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure explicit Web proxy settings.

        ## Import

        WebProxy Explicit can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:webproxy/explicit:Explicit labelname WebProxyExplicit
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:webproxy/explicit:Explicit labelname WebProxyExplicit
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ftp_incoming_port: Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] ftp_over_http: Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] http_connection_mode: HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
        :param pulumi.Input[str] http_incoming_port: Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
        :param pulumi.Input[str] https_incoming_port: Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
        :param pulumi.Input[str] https_replacement_message: Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] incoming_ip: Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
        :param pulumi.Input[str] incoming_ip6: Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
        :param pulumi.Input[str] ipv6_status: Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] message_upon_server_error: Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outgoing_ip: Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
        :param pulumi.Input[str] outgoing_ip6: Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
        :param pulumi.Input[str] pac_file_data: PAC file contents enclosed in quotes (maximum of 256K bytes).
        :param pulumi.Input[str] pac_file_name: Pac file name.
        :param pulumi.Input[str] pac_file_server_port: Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] pac_file_server_status: Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pac_file_through_https: Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pac_file_url: PAC file access URL.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExplicitPacPolicyArgs']]]] pac_policies: PAC policies. The structure of `pac_policy` block is documented below.
        :param pulumi.Input[str] pref_dns_result: Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] realm: Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
        :param pulumi.Input[str] sec_default_action: Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
        :param pulumi.Input[str] secure_web_proxy: Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExplicitSecureWebProxyCertArgs']]]] secure_web_proxy_certs: Name of certificates for secure web proxy. The structure of `secure_web_proxy_cert` block is documented below.
        :param pulumi.Input[str] socks: Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] socks_incoming_port: Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] ssl_algorithm: Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] ssl_dh_bits: Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
        :param pulumi.Input[str] status: Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_guest: Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trace_auth_no_rsp: Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unknown_http_version: Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ExplicitArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure explicit Web proxy settings.

        ## Import

        WebProxy Explicit can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:webproxy/explicit:Explicit labelname WebProxyExplicit
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:webproxy/explicit:Explicit labelname WebProxyExplicit
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ExplicitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExplicitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftp_incoming_port: Optional[pulumi.Input[str]] = None,
                 ftp_over_http: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_connection_mode: Optional[pulumi.Input[str]] = None,
                 http_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_replacement_message: Optional[pulumi.Input[str]] = None,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_ip6: Optional[pulumi.Input[str]] = None,
                 ipv6_status: Optional[pulumi.Input[str]] = None,
                 message_upon_server_error: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 outgoing_ip6: Optional[pulumi.Input[str]] = None,
                 pac_file_data: Optional[pulumi.Input[str]] = None,
                 pac_file_name: Optional[pulumi.Input[str]] = None,
                 pac_file_server_port: Optional[pulumi.Input[str]] = None,
                 pac_file_server_status: Optional[pulumi.Input[str]] = None,
                 pac_file_through_https: Optional[pulumi.Input[str]] = None,
                 pac_file_url: Optional[pulumi.Input[str]] = None,
                 pac_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExplicitPacPolicyArgs']]]]] = None,
                 pref_dns_result: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy_certs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExplicitSecureWebProxyCertArgs']]]]] = None,
                 socks: Optional[pulumi.Input[str]] = None,
                 socks_incoming_port: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_guest: Optional[pulumi.Input[str]] = None,
                 trace_auth_no_rsp: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExplicitArgs.__new__(ExplicitArgs)

            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["ftp_incoming_port"] = ftp_incoming_port
            __props__.__dict__["ftp_over_http"] = ftp_over_http
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["http_connection_mode"] = http_connection_mode
            __props__.__dict__["http_incoming_port"] = http_incoming_port
            __props__.__dict__["https_incoming_port"] = https_incoming_port
            __props__.__dict__["https_replacement_message"] = https_replacement_message
            __props__.__dict__["incoming_ip"] = incoming_ip
            __props__.__dict__["incoming_ip6"] = incoming_ip6
            __props__.__dict__["ipv6_status"] = ipv6_status
            __props__.__dict__["message_upon_server_error"] = message_upon_server_error
            __props__.__dict__["outgoing_ip"] = outgoing_ip
            __props__.__dict__["outgoing_ip6"] = outgoing_ip6
            __props__.__dict__["pac_file_data"] = pac_file_data
            __props__.__dict__["pac_file_name"] = pac_file_name
            __props__.__dict__["pac_file_server_port"] = pac_file_server_port
            __props__.__dict__["pac_file_server_status"] = pac_file_server_status
            __props__.__dict__["pac_file_through_https"] = pac_file_through_https
            __props__.__dict__["pac_file_url"] = pac_file_url
            __props__.__dict__["pac_policies"] = pac_policies
            __props__.__dict__["pref_dns_result"] = pref_dns_result
            __props__.__dict__["realm"] = realm
            __props__.__dict__["sec_default_action"] = sec_default_action
            __props__.__dict__["secure_web_proxy"] = secure_web_proxy
            __props__.__dict__["secure_web_proxy_certs"] = secure_web_proxy_certs
            __props__.__dict__["socks"] = socks
            __props__.__dict__["socks_incoming_port"] = socks_incoming_port
            __props__.__dict__["ssl_algorithm"] = ssl_algorithm
            __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
            __props__.__dict__["status"] = status
            __props__.__dict__["strict_guest"] = strict_guest
            __props__.__dict__["trace_auth_no_rsp"] = trace_auth_no_rsp
            __props__.__dict__["unknown_http_version"] = unknown_http_version
            __props__.__dict__["vdomparam"] = vdomparam
        super(Explicit, __self__).__init__(
            'fortios:webproxy/explicit:Explicit',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            ftp_incoming_port: Optional[pulumi.Input[str]] = None,
            ftp_over_http: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            http_connection_mode: Optional[pulumi.Input[str]] = None,
            http_incoming_port: Optional[pulumi.Input[str]] = None,
            https_incoming_port: Optional[pulumi.Input[str]] = None,
            https_replacement_message: Optional[pulumi.Input[str]] = None,
            incoming_ip: Optional[pulumi.Input[str]] = None,
            incoming_ip6: Optional[pulumi.Input[str]] = None,
            ipv6_status: Optional[pulumi.Input[str]] = None,
            message_upon_server_error: Optional[pulumi.Input[str]] = None,
            outgoing_ip: Optional[pulumi.Input[str]] = None,
            outgoing_ip6: Optional[pulumi.Input[str]] = None,
            pac_file_data: Optional[pulumi.Input[str]] = None,
            pac_file_name: Optional[pulumi.Input[str]] = None,
            pac_file_server_port: Optional[pulumi.Input[str]] = None,
            pac_file_server_status: Optional[pulumi.Input[str]] = None,
            pac_file_through_https: Optional[pulumi.Input[str]] = None,
            pac_file_url: Optional[pulumi.Input[str]] = None,
            pac_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExplicitPacPolicyArgs']]]]] = None,
            pref_dns_result: Optional[pulumi.Input[str]] = None,
            realm: Optional[pulumi.Input[str]] = None,
            sec_default_action: Optional[pulumi.Input[str]] = None,
            secure_web_proxy: Optional[pulumi.Input[str]] = None,
            secure_web_proxy_certs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExplicitSecureWebProxyCertArgs']]]]] = None,
            socks: Optional[pulumi.Input[str]] = None,
            socks_incoming_port: Optional[pulumi.Input[str]] = None,
            ssl_algorithm: Optional[pulumi.Input[str]] = None,
            ssl_dh_bits: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            strict_guest: Optional[pulumi.Input[str]] = None,
            trace_auth_no_rsp: Optional[pulumi.Input[str]] = None,
            unknown_http_version: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Explicit':
        """
        Get an existing Explicit resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ftp_incoming_port: Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] ftp_over_http: Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] http_connection_mode: HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
        :param pulumi.Input[str] http_incoming_port: Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
        :param pulumi.Input[str] https_incoming_port: Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
        :param pulumi.Input[str] https_replacement_message: Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] incoming_ip: Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
        :param pulumi.Input[str] incoming_ip6: Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
        :param pulumi.Input[str] ipv6_status: Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] message_upon_server_error: Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outgoing_ip: Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
        :param pulumi.Input[str] outgoing_ip6: Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
        :param pulumi.Input[str] pac_file_data: PAC file contents enclosed in quotes (maximum of 256K bytes).
        :param pulumi.Input[str] pac_file_name: Pac file name.
        :param pulumi.Input[str] pac_file_server_port: Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] pac_file_server_status: Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pac_file_through_https: Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pac_file_url: PAC file access URL.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExplicitPacPolicyArgs']]]] pac_policies: PAC policies. The structure of `pac_policy` block is documented below.
        :param pulumi.Input[str] pref_dns_result: Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] realm: Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
        :param pulumi.Input[str] sec_default_action: Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
        :param pulumi.Input[str] secure_web_proxy: Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExplicitSecureWebProxyCertArgs']]]] secure_web_proxy_certs: Name of certificates for secure web proxy. The structure of `secure_web_proxy_cert` block is documented below.
        :param pulumi.Input[str] socks: Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] socks_incoming_port: Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        :param pulumi.Input[str] ssl_algorithm: Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] ssl_dh_bits: Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
        :param pulumi.Input[str] status: Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_guest: Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trace_auth_no_rsp: Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unknown_http_version: Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExplicitState.__new__(_ExplicitState)

        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["ftp_incoming_port"] = ftp_incoming_port
        __props__.__dict__["ftp_over_http"] = ftp_over_http
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["http_connection_mode"] = http_connection_mode
        __props__.__dict__["http_incoming_port"] = http_incoming_port
        __props__.__dict__["https_incoming_port"] = https_incoming_port
        __props__.__dict__["https_replacement_message"] = https_replacement_message
        __props__.__dict__["incoming_ip"] = incoming_ip
        __props__.__dict__["incoming_ip6"] = incoming_ip6
        __props__.__dict__["ipv6_status"] = ipv6_status
        __props__.__dict__["message_upon_server_error"] = message_upon_server_error
        __props__.__dict__["outgoing_ip"] = outgoing_ip
        __props__.__dict__["outgoing_ip6"] = outgoing_ip6
        __props__.__dict__["pac_file_data"] = pac_file_data
        __props__.__dict__["pac_file_name"] = pac_file_name
        __props__.__dict__["pac_file_server_port"] = pac_file_server_port
        __props__.__dict__["pac_file_server_status"] = pac_file_server_status
        __props__.__dict__["pac_file_through_https"] = pac_file_through_https
        __props__.__dict__["pac_file_url"] = pac_file_url
        __props__.__dict__["pac_policies"] = pac_policies
        __props__.__dict__["pref_dns_result"] = pref_dns_result
        __props__.__dict__["realm"] = realm
        __props__.__dict__["sec_default_action"] = sec_default_action
        __props__.__dict__["secure_web_proxy"] = secure_web_proxy
        __props__.__dict__["secure_web_proxy_certs"] = secure_web_proxy_certs
        __props__.__dict__["socks"] = socks
        __props__.__dict__["socks_incoming_port"] = socks_incoming_port
        __props__.__dict__["ssl_algorithm"] = ssl_algorithm
        __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
        __props__.__dict__["status"] = status
        __props__.__dict__["strict_guest"] = strict_guest
        __props__.__dict__["trace_auth_no_rsp"] = trace_auth_no_rsp
        __props__.__dict__["unknown_http_version"] = unknown_http_version
        __props__.__dict__["vdomparam"] = vdomparam
        return Explicit(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="ftpIncomingPort")
    def ftp_incoming_port(self) -> pulumi.Output[str]:
        """
        Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        """
        return pulumi.get(self, "ftp_incoming_port")

    @property
    @pulumi.getter(name="ftpOverHttp")
    def ftp_over_http(self) -> pulumi.Output[str]:
        """
        Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ftp_over_http")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="httpConnectionMode")
    def http_connection_mode(self) -> pulumi.Output[str]:
        """
        HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
        """
        return pulumi.get(self, "http_connection_mode")

    @property
    @pulumi.getter(name="httpIncomingPort")
    def http_incoming_port(self) -> pulumi.Output[str]:
        """
        Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
        """
        return pulumi.get(self, "http_incoming_port")

    @property
    @pulumi.getter(name="httpsIncomingPort")
    def https_incoming_port(self) -> pulumi.Output[str]:
        """
        Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
        """
        return pulumi.get(self, "https_incoming_port")

    @property
    @pulumi.getter(name="httpsReplacementMessage")
    def https_replacement_message(self) -> pulumi.Output[str]:
        """
        Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "https_replacement_message")

    @property
    @pulumi.getter(name="incomingIp")
    def incoming_ip(self) -> pulumi.Output[str]:
        """
        Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
        """
        return pulumi.get(self, "incoming_ip")

    @property
    @pulumi.getter(name="incomingIp6")
    def incoming_ip6(self) -> pulumi.Output[str]:
        """
        Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
        """
        return pulumi.get(self, "incoming_ip6")

    @property
    @pulumi.getter(name="ipv6Status")
    def ipv6_status(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv6_status")

    @property
    @pulumi.getter(name="messageUponServerError")
    def message_upon_server_error(self) -> pulumi.Output[str]:
        """
        Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "message_upon_server_error")

    @property
    @pulumi.getter(name="outgoingIp")
    def outgoing_ip(self) -> pulumi.Output[str]:
        """
        Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
        """
        return pulumi.get(self, "outgoing_ip")

    @property
    @pulumi.getter(name="outgoingIp6")
    def outgoing_ip6(self) -> pulumi.Output[str]:
        """
        Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
        """
        return pulumi.get(self, "outgoing_ip6")

    @property
    @pulumi.getter(name="pacFileData")
    def pac_file_data(self) -> pulumi.Output[str]:
        """
        PAC file contents enclosed in quotes (maximum of 256K bytes).
        """
        return pulumi.get(self, "pac_file_data")

    @property
    @pulumi.getter(name="pacFileName")
    def pac_file_name(self) -> pulumi.Output[str]:
        """
        Pac file name.
        """
        return pulumi.get(self, "pac_file_name")

    @property
    @pulumi.getter(name="pacFileServerPort")
    def pac_file_server_port(self) -> pulumi.Output[str]:
        """
        Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
        """
        return pulumi.get(self, "pac_file_server_port")

    @property
    @pulumi.getter(name="pacFileServerStatus")
    def pac_file_server_status(self) -> pulumi.Output[str]:
        """
        Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pac_file_server_status")

    @property
    @pulumi.getter(name="pacFileThroughHttps")
    def pac_file_through_https(self) -> pulumi.Output[str]:
        """
        Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pac_file_through_https")

    @property
    @pulumi.getter(name="pacFileUrl")
    def pac_file_url(self) -> pulumi.Output[str]:
        """
        PAC file access URL.
        """
        return pulumi.get(self, "pac_file_url")

    @property
    @pulumi.getter(name="pacPolicies")
    def pac_policies(self) -> pulumi.Output[Optional[Sequence['outputs.ExplicitPacPolicy']]]:
        """
        PAC policies. The structure of `pac_policy` block is documented below.
        """
        return pulumi.get(self, "pac_policies")

    @property
    @pulumi.getter(name="prefDnsResult")
    def pref_dns_result(self) -> pulumi.Output[str]:
        """
        Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "pref_dns_result")

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Output[str]:
        """
        Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
        """
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="secDefaultAction")
    def sec_default_action(self) -> pulumi.Output[str]:
        """
        Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "sec_default_action")

    @property
    @pulumi.getter(name="secureWebProxy")
    def secure_web_proxy(self) -> pulumi.Output[str]:
        """
        Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
        """
        return pulumi.get(self, "secure_web_proxy")

    @property
    @pulumi.getter(name="secureWebProxyCerts")
    def secure_web_proxy_certs(self) -> pulumi.Output[Optional[Sequence['outputs.ExplicitSecureWebProxyCert']]]:
        """
        Name of certificates for secure web proxy. The structure of `secure_web_proxy_cert` block is documented below.
        """
        return pulumi.get(self, "secure_web_proxy_certs")

    @property
    @pulumi.getter
    def socks(self) -> pulumi.Output[str]:
        """
        Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "socks")

    @property
    @pulumi.getter(name="socksIncomingPort")
    def socks_incoming_port(self) -> pulumi.Output[str]:
        """
        Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
        """
        return pulumi.get(self, "socks_incoming_port")

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> pulumi.Output[str]:
        """
        Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> pulumi.Output[str]:
        """
        Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="strictGuest")
    def strict_guest(self) -> pulumi.Output[str]:
        """
        Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_guest")

    @property
    @pulumi.getter(name="traceAuthNoRsp")
    def trace_auth_no_rsp(self) -> pulumi.Output[str]:
        """
        Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trace_auth_no_rsp")

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> pulumi.Output[str]:
        """
        Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
        """
        return pulumi.get(self, "unknown_http_version")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

