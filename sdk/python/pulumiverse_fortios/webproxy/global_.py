# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GlobalArgs', 'Global']

@pulumi.input_type
class GlobalArgs:
    def __init__(__self__, *,
                 proxy_fqdn: pulumi.Input[str],
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fast_policy_match: Optional[pulumi.Input[str]] = None,
                 forward_proxy_auth: Optional[pulumi.Input[str]] = None,
                 forward_server_affinity_timeout: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldap_user_cache: Optional[pulumi.Input[str]] = None,
                 learn_client_ip: Optional[pulumi.Input[str]] = None,
                 learn_client_ip_from_header: Optional[pulumi.Input[str]] = None,
                 learn_client_ip_srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddr6Args']]]] = None,
                 learn_client_ip_srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddrArgs']]]] = None,
                 log_app_id: Optional[pulumi.Input[str]] = None,
                 log_forward_server: Optional[pulumi.Input[str]] = None,
                 log_policy_pending: Optional[pulumi.Input[str]] = None,
                 max_message_length: Optional[pulumi.Input[int]] = None,
                 max_request_length: Optional[pulumi.Input[int]] = None,
                 max_waf_body_cache_length: Optional[pulumi.Input[int]] = None,
                 policy_category_deep_inspect: Optional[pulumi.Input[str]] = None,
                 src_affinity_exempt_addr: Optional[pulumi.Input[str]] = None,
                 src_affinity_exempt_addr6: Optional[pulumi.Input[str]] = None,
                 ssl_ca_cert: Optional[pulumi.Input[str]] = None,
                 ssl_cert: Optional[pulumi.Input[str]] = None,
                 strict_web_check: Optional[pulumi.Input[str]] = None,
                 tunnel_non_http: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Global resource.
        :param pulumi.Input[str] proxy_fqdn: Fully Qualified Domain Name (FQDN) that clients connect to (default = default.fqdn) to connect to the explicit web proxy.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fast_policy_match: Enable/disable fast matching algorithm for explicit and transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forward_proxy_auth: Enable/disable forwarding proxy authentication headers. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] forward_server_affinity_timeout: Period of time before the source IP's traffic is no longer assigned to the forwarding server (6 - 60 min, default = 30).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ldap_user_cache: Enable/disable LDAP user cache for explicit and transparent proxy user. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] learn_client_ip: Enable/disable learning the client's IP address from headers. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] learn_client_ip_from_header: Learn client IP address from the specified headers. Valid values: `true-client-ip`, `x-real-ip`, `x-forwarded-for`.
        :param pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddr6Args']]] learn_client_ip_srcaddr6s: IPv6 Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddrArgs']]] learn_client_ip_srcaddrs: Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr` block is documented below.
        :param pulumi.Input[str] log_app_id: Enable/disable always log application type in traffic log. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_forward_server: Enable/disable forward server name logging in forward traffic log. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_pending: Enable/disable logging sessions that are pending on policy matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_message_length: Maximum length of HTTP message, not including body (16 - 256 Kbytes, default = 32).
        :param pulumi.Input[int] max_request_length: Maximum length of HTTP request line (2 - 64 Kbytes, default = 4).
        :param pulumi.Input[int] max_waf_body_cache_length: Maximum length of HTTP messages processed by Web Application Firewall (WAF) (10 - 1024 Kbytes, default = 32).
        :param pulumi.Input[str] policy_category_deep_inspect: Enable/disable deep inspection for application level category policy matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] src_affinity_exempt_addr: IPv4 source addresses to exempt proxy affinity.
        :param pulumi.Input[str] src_affinity_exempt_addr6: IPv6 source addresses to exempt proxy affinity.
        :param pulumi.Input[str] ssl_ca_cert: SSL CA certificate for SSL interception.
        :param pulumi.Input[str] ssl_cert: SSL certificate for SSL interception.
        :param pulumi.Input[str] strict_web_check: Enable/disable strict web checking to block web sites that send incorrect headers that don't conform to HTTP 1.1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_non_http: Enable/disable allowing non-HTTP traffic. Allowed non-HTTP traffic is tunneled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unknown_http_version: Action to take when an unknown version of HTTP is encountered: reject, allow (tunnel), or proceed with best-effort. Valid values: `reject`, `tunnel`, `best-effort`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webproxy_profile: Name of the web proxy profile to apply when explicit proxy traffic is allowed by default and traffic is accepted that does not match an explicit proxy policy.
        """
        pulumi.set(__self__, "proxy_fqdn", proxy_fqdn)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fast_policy_match is not None:
            pulumi.set(__self__, "fast_policy_match", fast_policy_match)
        if forward_proxy_auth is not None:
            pulumi.set(__self__, "forward_proxy_auth", forward_proxy_auth)
        if forward_server_affinity_timeout is not None:
            pulumi.set(__self__, "forward_server_affinity_timeout", forward_server_affinity_timeout)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ldap_user_cache is not None:
            pulumi.set(__self__, "ldap_user_cache", ldap_user_cache)
        if learn_client_ip is not None:
            pulumi.set(__self__, "learn_client_ip", learn_client_ip)
        if learn_client_ip_from_header is not None:
            pulumi.set(__self__, "learn_client_ip_from_header", learn_client_ip_from_header)
        if learn_client_ip_srcaddr6s is not None:
            pulumi.set(__self__, "learn_client_ip_srcaddr6s", learn_client_ip_srcaddr6s)
        if learn_client_ip_srcaddrs is not None:
            pulumi.set(__self__, "learn_client_ip_srcaddrs", learn_client_ip_srcaddrs)
        if log_app_id is not None:
            pulumi.set(__self__, "log_app_id", log_app_id)
        if log_forward_server is not None:
            pulumi.set(__self__, "log_forward_server", log_forward_server)
        if log_policy_pending is not None:
            pulumi.set(__self__, "log_policy_pending", log_policy_pending)
        if max_message_length is not None:
            pulumi.set(__self__, "max_message_length", max_message_length)
        if max_request_length is not None:
            pulumi.set(__self__, "max_request_length", max_request_length)
        if max_waf_body_cache_length is not None:
            pulumi.set(__self__, "max_waf_body_cache_length", max_waf_body_cache_length)
        if policy_category_deep_inspect is not None:
            pulumi.set(__self__, "policy_category_deep_inspect", policy_category_deep_inspect)
        if src_affinity_exempt_addr is not None:
            pulumi.set(__self__, "src_affinity_exempt_addr", src_affinity_exempt_addr)
        if src_affinity_exempt_addr6 is not None:
            pulumi.set(__self__, "src_affinity_exempt_addr6", src_affinity_exempt_addr6)
        if ssl_ca_cert is not None:
            pulumi.set(__self__, "ssl_ca_cert", ssl_ca_cert)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if strict_web_check is not None:
            pulumi.set(__self__, "strict_web_check", strict_web_check)
        if tunnel_non_http is not None:
            pulumi.set(__self__, "tunnel_non_http", tunnel_non_http)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webproxy_profile is not None:
            pulumi.set(__self__, "webproxy_profile", webproxy_profile)

    @property
    @pulumi.getter(name="proxyFqdn")
    def proxy_fqdn(self) -> pulumi.Input[str]:
        """
        Fully Qualified Domain Name (FQDN) that clients connect to (default = default.fqdn) to connect to the explicit web proxy.
        """
        return pulumi.get(self, "proxy_fqdn")

    @proxy_fqdn.setter
    def proxy_fqdn(self, value: pulumi.Input[str]):
        pulumi.set(self, "proxy_fqdn", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fastPolicyMatch")
    def fast_policy_match(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable fast matching algorithm for explicit and transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fast_policy_match")

    @fast_policy_match.setter
    def fast_policy_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fast_policy_match", value)

    @property
    @pulumi.getter(name="forwardProxyAuth")
    def forward_proxy_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forwarding proxy authentication headers. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forward_proxy_auth")

    @forward_proxy_auth.setter
    def forward_proxy_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_proxy_auth", value)

    @property
    @pulumi.getter(name="forwardServerAffinityTimeout")
    def forward_server_affinity_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time before the source IP's traffic is no longer assigned to the forwarding server (6 - 60 min, default = 30).
        """
        return pulumi.get(self, "forward_server_affinity_timeout")

    @forward_server_affinity_timeout.setter
    def forward_server_affinity_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forward_server_affinity_timeout", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ldapUserCache")
    def ldap_user_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable LDAP user cache for explicit and transparent proxy user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ldap_user_cache")

    @ldap_user_cache.setter
    def ldap_user_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_user_cache", value)

    @property
    @pulumi.getter(name="learnClientIp")
    def learn_client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable learning the client's IP address from headers. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "learn_client_ip")

    @learn_client_ip.setter
    def learn_client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learn_client_ip", value)

    @property
    @pulumi.getter(name="learnClientIpFromHeader")
    def learn_client_ip_from_header(self) -> Optional[pulumi.Input[str]]:
        """
        Learn client IP address from the specified headers. Valid values: `true-client-ip`, `x-real-ip`, `x-forwarded-for`.
        """
        return pulumi.get(self, "learn_client_ip_from_header")

    @learn_client_ip_from_header.setter
    def learn_client_ip_from_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learn_client_ip_from_header", value)

    @property
    @pulumi.getter(name="learnClientIpSrcaddr6s")
    def learn_client_ip_srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddr6Args']]]]:
        """
        IPv6 Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr6` block is documented below.
        """
        return pulumi.get(self, "learn_client_ip_srcaddr6s")

    @learn_client_ip_srcaddr6s.setter
    def learn_client_ip_srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddr6Args']]]]):
        pulumi.set(self, "learn_client_ip_srcaddr6s", value)

    @property
    @pulumi.getter(name="learnClientIpSrcaddrs")
    def learn_client_ip_srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddrArgs']]]]:
        """
        Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr` block is documented below.
        """
        return pulumi.get(self, "learn_client_ip_srcaddrs")

    @learn_client_ip_srcaddrs.setter
    def learn_client_ip_srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddrArgs']]]]):
        pulumi.set(self, "learn_client_ip_srcaddrs", value)

    @property
    @pulumi.getter(name="logAppId")
    def log_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable always log application type in traffic log. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_app_id")

    @log_app_id.setter
    def log_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_app_id", value)

    @property
    @pulumi.getter(name="logForwardServer")
    def log_forward_server(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forward server name logging in forward traffic log. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_forward_server")

    @log_forward_server.setter
    def log_forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_forward_server", value)

    @property
    @pulumi.getter(name="logPolicyPending")
    def log_policy_pending(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging sessions that are pending on policy matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_policy_pending")

    @log_policy_pending.setter
    def log_policy_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_policy_pending", value)

    @property
    @pulumi.getter(name="maxMessageLength")
    def max_message_length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of HTTP message, not including body (16 - 256 Kbytes, default = 32).
        """
        return pulumi.get(self, "max_message_length")

    @max_message_length.setter
    def max_message_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_message_length", value)

    @property
    @pulumi.getter(name="maxRequestLength")
    def max_request_length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of HTTP request line (2 - 64 Kbytes, default = 4).
        """
        return pulumi.get(self, "max_request_length")

    @max_request_length.setter
    def max_request_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_request_length", value)

    @property
    @pulumi.getter(name="maxWafBodyCacheLength")
    def max_waf_body_cache_length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of HTTP messages processed by Web Application Firewall (WAF) (10 - 1024 Kbytes, default = 32).
        """
        return pulumi.get(self, "max_waf_body_cache_length")

    @max_waf_body_cache_length.setter
    def max_waf_body_cache_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_waf_body_cache_length", value)

    @property
    @pulumi.getter(name="policyCategoryDeepInspect")
    def policy_category_deep_inspect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable deep inspection for application level category policy matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "policy_category_deep_inspect")

    @policy_category_deep_inspect.setter
    def policy_category_deep_inspect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_category_deep_inspect", value)

    @property
    @pulumi.getter(name="srcAffinityExemptAddr")
    def src_affinity_exempt_addr(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 source addresses to exempt proxy affinity.
        """
        return pulumi.get(self, "src_affinity_exempt_addr")

    @src_affinity_exempt_addr.setter
    def src_affinity_exempt_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_affinity_exempt_addr", value)

    @property
    @pulumi.getter(name="srcAffinityExemptAddr6")
    def src_affinity_exempt_addr6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 source addresses to exempt proxy affinity.
        """
        return pulumi.get(self, "src_affinity_exempt_addr6")

    @src_affinity_exempt_addr6.setter
    def src_affinity_exempt_addr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_affinity_exempt_addr6", value)

    @property
    @pulumi.getter(name="sslCaCert")
    def ssl_ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        SSL CA certificate for SSL interception.
        """
        return pulumi.get(self, "ssl_ca_cert")

    @ssl_ca_cert.setter
    def ssl_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ca_cert", value)

    @property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[pulumi.Input[str]]:
        """
        SSL certificate for SSL interception.
        """
        return pulumi.get(self, "ssl_cert")

    @ssl_cert.setter
    def ssl_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_cert", value)

    @property
    @pulumi.getter(name="strictWebCheck")
    def strict_web_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict web checking to block web sites that send incorrect headers that don't conform to HTTP 1.1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_web_check")

    @strict_web_check.setter
    def strict_web_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_web_check", value)

    @property
    @pulumi.getter(name="tunnelNonHttp")
    def tunnel_non_http(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing non-HTTP traffic. Allowed non-HTTP traffic is tunneled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_non_http")

    @tunnel_non_http.setter
    def tunnel_non_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_non_http", value)

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take when an unknown version of HTTP is encountered: reject, allow (tunnel), or proceed with best-effort. Valid values: `reject`, `tunnel`, `best-effort`.
        """
        return pulumi.get(self, "unknown_http_version")

    @unknown_http_version.setter
    def unknown_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_http_version", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the web proxy profile to apply when explicit proxy traffic is allowed by default and traffic is accepted that does not match an explicit proxy policy.
        """
        return pulumi.get(self, "webproxy_profile")

    @webproxy_profile.setter
    def webproxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_profile", value)


@pulumi.input_type
class _GlobalState:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fast_policy_match: Optional[pulumi.Input[str]] = None,
                 forward_proxy_auth: Optional[pulumi.Input[str]] = None,
                 forward_server_affinity_timeout: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldap_user_cache: Optional[pulumi.Input[str]] = None,
                 learn_client_ip: Optional[pulumi.Input[str]] = None,
                 learn_client_ip_from_header: Optional[pulumi.Input[str]] = None,
                 learn_client_ip_srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddr6Args']]]] = None,
                 learn_client_ip_srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddrArgs']]]] = None,
                 log_app_id: Optional[pulumi.Input[str]] = None,
                 log_forward_server: Optional[pulumi.Input[str]] = None,
                 log_policy_pending: Optional[pulumi.Input[str]] = None,
                 max_message_length: Optional[pulumi.Input[int]] = None,
                 max_request_length: Optional[pulumi.Input[int]] = None,
                 max_waf_body_cache_length: Optional[pulumi.Input[int]] = None,
                 policy_category_deep_inspect: Optional[pulumi.Input[str]] = None,
                 proxy_fqdn: Optional[pulumi.Input[str]] = None,
                 src_affinity_exempt_addr: Optional[pulumi.Input[str]] = None,
                 src_affinity_exempt_addr6: Optional[pulumi.Input[str]] = None,
                 ssl_ca_cert: Optional[pulumi.Input[str]] = None,
                 ssl_cert: Optional[pulumi.Input[str]] = None,
                 strict_web_check: Optional[pulumi.Input[str]] = None,
                 tunnel_non_http: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Global resources.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fast_policy_match: Enable/disable fast matching algorithm for explicit and transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forward_proxy_auth: Enable/disable forwarding proxy authentication headers. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] forward_server_affinity_timeout: Period of time before the source IP's traffic is no longer assigned to the forwarding server (6 - 60 min, default = 30).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ldap_user_cache: Enable/disable LDAP user cache for explicit and transparent proxy user. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] learn_client_ip: Enable/disable learning the client's IP address from headers. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] learn_client_ip_from_header: Learn client IP address from the specified headers. Valid values: `true-client-ip`, `x-real-ip`, `x-forwarded-for`.
        :param pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddr6Args']]] learn_client_ip_srcaddr6s: IPv6 Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddrArgs']]] learn_client_ip_srcaddrs: Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr` block is documented below.
        :param pulumi.Input[str] log_app_id: Enable/disable always log application type in traffic log. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_forward_server: Enable/disable forward server name logging in forward traffic log. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_pending: Enable/disable logging sessions that are pending on policy matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_message_length: Maximum length of HTTP message, not including body (16 - 256 Kbytes, default = 32).
        :param pulumi.Input[int] max_request_length: Maximum length of HTTP request line (2 - 64 Kbytes, default = 4).
        :param pulumi.Input[int] max_waf_body_cache_length: Maximum length of HTTP messages processed by Web Application Firewall (WAF) (10 - 1024 Kbytes, default = 32).
        :param pulumi.Input[str] policy_category_deep_inspect: Enable/disable deep inspection for application level category policy matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] proxy_fqdn: Fully Qualified Domain Name (FQDN) that clients connect to (default = default.fqdn) to connect to the explicit web proxy.
        :param pulumi.Input[str] src_affinity_exempt_addr: IPv4 source addresses to exempt proxy affinity.
        :param pulumi.Input[str] src_affinity_exempt_addr6: IPv6 source addresses to exempt proxy affinity.
        :param pulumi.Input[str] ssl_ca_cert: SSL CA certificate for SSL interception.
        :param pulumi.Input[str] ssl_cert: SSL certificate for SSL interception.
        :param pulumi.Input[str] strict_web_check: Enable/disable strict web checking to block web sites that send incorrect headers that don't conform to HTTP 1.1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_non_http: Enable/disable allowing non-HTTP traffic. Allowed non-HTTP traffic is tunneled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unknown_http_version: Action to take when an unknown version of HTTP is encountered: reject, allow (tunnel), or proceed with best-effort. Valid values: `reject`, `tunnel`, `best-effort`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webproxy_profile: Name of the web proxy profile to apply when explicit proxy traffic is allowed by default and traffic is accepted that does not match an explicit proxy policy.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fast_policy_match is not None:
            pulumi.set(__self__, "fast_policy_match", fast_policy_match)
        if forward_proxy_auth is not None:
            pulumi.set(__self__, "forward_proxy_auth", forward_proxy_auth)
        if forward_server_affinity_timeout is not None:
            pulumi.set(__self__, "forward_server_affinity_timeout", forward_server_affinity_timeout)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ldap_user_cache is not None:
            pulumi.set(__self__, "ldap_user_cache", ldap_user_cache)
        if learn_client_ip is not None:
            pulumi.set(__self__, "learn_client_ip", learn_client_ip)
        if learn_client_ip_from_header is not None:
            pulumi.set(__self__, "learn_client_ip_from_header", learn_client_ip_from_header)
        if learn_client_ip_srcaddr6s is not None:
            pulumi.set(__self__, "learn_client_ip_srcaddr6s", learn_client_ip_srcaddr6s)
        if learn_client_ip_srcaddrs is not None:
            pulumi.set(__self__, "learn_client_ip_srcaddrs", learn_client_ip_srcaddrs)
        if log_app_id is not None:
            pulumi.set(__self__, "log_app_id", log_app_id)
        if log_forward_server is not None:
            pulumi.set(__self__, "log_forward_server", log_forward_server)
        if log_policy_pending is not None:
            pulumi.set(__self__, "log_policy_pending", log_policy_pending)
        if max_message_length is not None:
            pulumi.set(__self__, "max_message_length", max_message_length)
        if max_request_length is not None:
            pulumi.set(__self__, "max_request_length", max_request_length)
        if max_waf_body_cache_length is not None:
            pulumi.set(__self__, "max_waf_body_cache_length", max_waf_body_cache_length)
        if policy_category_deep_inspect is not None:
            pulumi.set(__self__, "policy_category_deep_inspect", policy_category_deep_inspect)
        if proxy_fqdn is not None:
            pulumi.set(__self__, "proxy_fqdn", proxy_fqdn)
        if src_affinity_exempt_addr is not None:
            pulumi.set(__self__, "src_affinity_exempt_addr", src_affinity_exempt_addr)
        if src_affinity_exempt_addr6 is not None:
            pulumi.set(__self__, "src_affinity_exempt_addr6", src_affinity_exempt_addr6)
        if ssl_ca_cert is not None:
            pulumi.set(__self__, "ssl_ca_cert", ssl_ca_cert)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if strict_web_check is not None:
            pulumi.set(__self__, "strict_web_check", strict_web_check)
        if tunnel_non_http is not None:
            pulumi.set(__self__, "tunnel_non_http", tunnel_non_http)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webproxy_profile is not None:
            pulumi.set(__self__, "webproxy_profile", webproxy_profile)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fastPolicyMatch")
    def fast_policy_match(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable fast matching algorithm for explicit and transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fast_policy_match")

    @fast_policy_match.setter
    def fast_policy_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fast_policy_match", value)

    @property
    @pulumi.getter(name="forwardProxyAuth")
    def forward_proxy_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forwarding proxy authentication headers. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forward_proxy_auth")

    @forward_proxy_auth.setter
    def forward_proxy_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_proxy_auth", value)

    @property
    @pulumi.getter(name="forwardServerAffinityTimeout")
    def forward_server_affinity_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time before the source IP's traffic is no longer assigned to the forwarding server (6 - 60 min, default = 30).
        """
        return pulumi.get(self, "forward_server_affinity_timeout")

    @forward_server_affinity_timeout.setter
    def forward_server_affinity_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forward_server_affinity_timeout", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ldapUserCache")
    def ldap_user_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable LDAP user cache for explicit and transparent proxy user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ldap_user_cache")

    @ldap_user_cache.setter
    def ldap_user_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_user_cache", value)

    @property
    @pulumi.getter(name="learnClientIp")
    def learn_client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable learning the client's IP address from headers. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "learn_client_ip")

    @learn_client_ip.setter
    def learn_client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learn_client_ip", value)

    @property
    @pulumi.getter(name="learnClientIpFromHeader")
    def learn_client_ip_from_header(self) -> Optional[pulumi.Input[str]]:
        """
        Learn client IP address from the specified headers. Valid values: `true-client-ip`, `x-real-ip`, `x-forwarded-for`.
        """
        return pulumi.get(self, "learn_client_ip_from_header")

    @learn_client_ip_from_header.setter
    def learn_client_ip_from_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learn_client_ip_from_header", value)

    @property
    @pulumi.getter(name="learnClientIpSrcaddr6s")
    def learn_client_ip_srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddr6Args']]]]:
        """
        IPv6 Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr6` block is documented below.
        """
        return pulumi.get(self, "learn_client_ip_srcaddr6s")

    @learn_client_ip_srcaddr6s.setter
    def learn_client_ip_srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddr6Args']]]]):
        pulumi.set(self, "learn_client_ip_srcaddr6s", value)

    @property
    @pulumi.getter(name="learnClientIpSrcaddrs")
    def learn_client_ip_srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddrArgs']]]]:
        """
        Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr` block is documented below.
        """
        return pulumi.get(self, "learn_client_ip_srcaddrs")

    @learn_client_ip_srcaddrs.setter
    def learn_client_ip_srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalLearnClientIpSrcaddrArgs']]]]):
        pulumi.set(self, "learn_client_ip_srcaddrs", value)

    @property
    @pulumi.getter(name="logAppId")
    def log_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable always log application type in traffic log. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_app_id")

    @log_app_id.setter
    def log_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_app_id", value)

    @property
    @pulumi.getter(name="logForwardServer")
    def log_forward_server(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forward server name logging in forward traffic log. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_forward_server")

    @log_forward_server.setter
    def log_forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_forward_server", value)

    @property
    @pulumi.getter(name="logPolicyPending")
    def log_policy_pending(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging sessions that are pending on policy matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_policy_pending")

    @log_policy_pending.setter
    def log_policy_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_policy_pending", value)

    @property
    @pulumi.getter(name="maxMessageLength")
    def max_message_length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of HTTP message, not including body (16 - 256 Kbytes, default = 32).
        """
        return pulumi.get(self, "max_message_length")

    @max_message_length.setter
    def max_message_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_message_length", value)

    @property
    @pulumi.getter(name="maxRequestLength")
    def max_request_length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of HTTP request line (2 - 64 Kbytes, default = 4).
        """
        return pulumi.get(self, "max_request_length")

    @max_request_length.setter
    def max_request_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_request_length", value)

    @property
    @pulumi.getter(name="maxWafBodyCacheLength")
    def max_waf_body_cache_length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of HTTP messages processed by Web Application Firewall (WAF) (10 - 1024 Kbytes, default = 32).
        """
        return pulumi.get(self, "max_waf_body_cache_length")

    @max_waf_body_cache_length.setter
    def max_waf_body_cache_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_waf_body_cache_length", value)

    @property
    @pulumi.getter(name="policyCategoryDeepInspect")
    def policy_category_deep_inspect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable deep inspection for application level category policy matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "policy_category_deep_inspect")

    @policy_category_deep_inspect.setter
    def policy_category_deep_inspect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_category_deep_inspect", value)

    @property
    @pulumi.getter(name="proxyFqdn")
    def proxy_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Fully Qualified Domain Name (FQDN) that clients connect to (default = default.fqdn) to connect to the explicit web proxy.
        """
        return pulumi.get(self, "proxy_fqdn")

    @proxy_fqdn.setter
    def proxy_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_fqdn", value)

    @property
    @pulumi.getter(name="srcAffinityExemptAddr")
    def src_affinity_exempt_addr(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 source addresses to exempt proxy affinity.
        """
        return pulumi.get(self, "src_affinity_exempt_addr")

    @src_affinity_exempt_addr.setter
    def src_affinity_exempt_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_affinity_exempt_addr", value)

    @property
    @pulumi.getter(name="srcAffinityExemptAddr6")
    def src_affinity_exempt_addr6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 source addresses to exempt proxy affinity.
        """
        return pulumi.get(self, "src_affinity_exempt_addr6")

    @src_affinity_exempt_addr6.setter
    def src_affinity_exempt_addr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_affinity_exempt_addr6", value)

    @property
    @pulumi.getter(name="sslCaCert")
    def ssl_ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        SSL CA certificate for SSL interception.
        """
        return pulumi.get(self, "ssl_ca_cert")

    @ssl_ca_cert.setter
    def ssl_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ca_cert", value)

    @property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[pulumi.Input[str]]:
        """
        SSL certificate for SSL interception.
        """
        return pulumi.get(self, "ssl_cert")

    @ssl_cert.setter
    def ssl_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_cert", value)

    @property
    @pulumi.getter(name="strictWebCheck")
    def strict_web_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict web checking to block web sites that send incorrect headers that don't conform to HTTP 1.1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_web_check")

    @strict_web_check.setter
    def strict_web_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_web_check", value)

    @property
    @pulumi.getter(name="tunnelNonHttp")
    def tunnel_non_http(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing non-HTTP traffic. Allowed non-HTTP traffic is tunneled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_non_http")

    @tunnel_non_http.setter
    def tunnel_non_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_non_http", value)

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take when an unknown version of HTTP is encountered: reject, allow (tunnel), or proceed with best-effort. Valid values: `reject`, `tunnel`, `best-effort`.
        """
        return pulumi.get(self, "unknown_http_version")

    @unknown_http_version.setter
    def unknown_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_http_version", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the web proxy profile to apply when explicit proxy traffic is allowed by default and traffic is accepted that does not match an explicit proxy policy.
        """
        return pulumi.get(self, "webproxy_profile")

    @webproxy_profile.setter
    def webproxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_profile", value)


class Global(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fast_policy_match: Optional[pulumi.Input[str]] = None,
                 forward_proxy_auth: Optional[pulumi.Input[str]] = None,
                 forward_server_affinity_timeout: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldap_user_cache: Optional[pulumi.Input[str]] = None,
                 learn_client_ip: Optional[pulumi.Input[str]] = None,
                 learn_client_ip_from_header: Optional[pulumi.Input[str]] = None,
                 learn_client_ip_srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalLearnClientIpSrcaddr6Args']]]]] = None,
                 learn_client_ip_srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalLearnClientIpSrcaddrArgs']]]]] = None,
                 log_app_id: Optional[pulumi.Input[str]] = None,
                 log_forward_server: Optional[pulumi.Input[str]] = None,
                 log_policy_pending: Optional[pulumi.Input[str]] = None,
                 max_message_length: Optional[pulumi.Input[int]] = None,
                 max_request_length: Optional[pulumi.Input[int]] = None,
                 max_waf_body_cache_length: Optional[pulumi.Input[int]] = None,
                 policy_category_deep_inspect: Optional[pulumi.Input[str]] = None,
                 proxy_fqdn: Optional[pulumi.Input[str]] = None,
                 src_affinity_exempt_addr: Optional[pulumi.Input[str]] = None,
                 src_affinity_exempt_addr6: Optional[pulumi.Input[str]] = None,
                 ssl_ca_cert: Optional[pulumi.Input[str]] = None,
                 ssl_cert: Optional[pulumi.Input[str]] = None,
                 strict_web_check: Optional[pulumi.Input[str]] = None,
                 tunnel_non_http: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure Web proxy global settings.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.webproxy.Global("trname",
            fast_policy_match="enable",
            forward_proxy_auth="disable",
            forward_server_affinity_timeout=30,
            learn_client_ip="disable",
            max_message_length=32,
            max_request_length=4,
            max_waf_body_cache_length=32,
            proxy_fqdn="default.fqdn",
            ssl_ca_cert="Fortinet_CA_SSL",
            ssl_cert="Fortinet_Factory",
            strict_web_check="disable",
            tunnel_non_http="enable",
            unknown_http_version="best-effort")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        WebProxy Global can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:webproxy/global:Global labelname WebProxyGlobal
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:webproxy/global:Global labelname WebProxyGlobal
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fast_policy_match: Enable/disable fast matching algorithm for explicit and transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forward_proxy_auth: Enable/disable forwarding proxy authentication headers. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] forward_server_affinity_timeout: Period of time before the source IP's traffic is no longer assigned to the forwarding server (6 - 60 min, default = 30).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ldap_user_cache: Enable/disable LDAP user cache for explicit and transparent proxy user. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] learn_client_ip: Enable/disable learning the client's IP address from headers. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] learn_client_ip_from_header: Learn client IP address from the specified headers. Valid values: `true-client-ip`, `x-real-ip`, `x-forwarded-for`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalLearnClientIpSrcaddr6Args']]]] learn_client_ip_srcaddr6s: IPv6 Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalLearnClientIpSrcaddrArgs']]]] learn_client_ip_srcaddrs: Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr` block is documented below.
        :param pulumi.Input[str] log_app_id: Enable/disable always log application type in traffic log. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_forward_server: Enable/disable forward server name logging in forward traffic log. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_pending: Enable/disable logging sessions that are pending on policy matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_message_length: Maximum length of HTTP message, not including body (16 - 256 Kbytes, default = 32).
        :param pulumi.Input[int] max_request_length: Maximum length of HTTP request line (2 - 64 Kbytes, default = 4).
        :param pulumi.Input[int] max_waf_body_cache_length: Maximum length of HTTP messages processed by Web Application Firewall (WAF) (10 - 1024 Kbytes, default = 32).
        :param pulumi.Input[str] policy_category_deep_inspect: Enable/disable deep inspection for application level category policy matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] proxy_fqdn: Fully Qualified Domain Name (FQDN) that clients connect to (default = default.fqdn) to connect to the explicit web proxy.
        :param pulumi.Input[str] src_affinity_exempt_addr: IPv4 source addresses to exempt proxy affinity.
        :param pulumi.Input[str] src_affinity_exempt_addr6: IPv6 source addresses to exempt proxy affinity.
        :param pulumi.Input[str] ssl_ca_cert: SSL CA certificate for SSL interception.
        :param pulumi.Input[str] ssl_cert: SSL certificate for SSL interception.
        :param pulumi.Input[str] strict_web_check: Enable/disable strict web checking to block web sites that send incorrect headers that don't conform to HTTP 1.1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_non_http: Enable/disable allowing non-HTTP traffic. Allowed non-HTTP traffic is tunneled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unknown_http_version: Action to take when an unknown version of HTTP is encountered: reject, allow (tunnel), or proceed with best-effort. Valid values: `reject`, `tunnel`, `best-effort`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webproxy_profile: Name of the web proxy profile to apply when explicit proxy traffic is allowed by default and traffic is accepted that does not match an explicit proxy policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GlobalArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure Web proxy global settings.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.webproxy.Global("trname",
            fast_policy_match="enable",
            forward_proxy_auth="disable",
            forward_server_affinity_timeout=30,
            learn_client_ip="disable",
            max_message_length=32,
            max_request_length=4,
            max_waf_body_cache_length=32,
            proxy_fqdn="default.fqdn",
            ssl_ca_cert="Fortinet_CA_SSL",
            ssl_cert="Fortinet_Factory",
            strict_web_check="disable",
            tunnel_non_http="enable",
            unknown_http_version="best-effort")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        WebProxy Global can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:webproxy/global:Global labelname WebProxyGlobal
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:webproxy/global:Global labelname WebProxyGlobal
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param GlobalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fast_policy_match: Optional[pulumi.Input[str]] = None,
                 forward_proxy_auth: Optional[pulumi.Input[str]] = None,
                 forward_server_affinity_timeout: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldap_user_cache: Optional[pulumi.Input[str]] = None,
                 learn_client_ip: Optional[pulumi.Input[str]] = None,
                 learn_client_ip_from_header: Optional[pulumi.Input[str]] = None,
                 learn_client_ip_srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalLearnClientIpSrcaddr6Args']]]]] = None,
                 learn_client_ip_srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalLearnClientIpSrcaddrArgs']]]]] = None,
                 log_app_id: Optional[pulumi.Input[str]] = None,
                 log_forward_server: Optional[pulumi.Input[str]] = None,
                 log_policy_pending: Optional[pulumi.Input[str]] = None,
                 max_message_length: Optional[pulumi.Input[int]] = None,
                 max_request_length: Optional[pulumi.Input[int]] = None,
                 max_waf_body_cache_length: Optional[pulumi.Input[int]] = None,
                 policy_category_deep_inspect: Optional[pulumi.Input[str]] = None,
                 proxy_fqdn: Optional[pulumi.Input[str]] = None,
                 src_affinity_exempt_addr: Optional[pulumi.Input[str]] = None,
                 src_affinity_exempt_addr6: Optional[pulumi.Input[str]] = None,
                 ssl_ca_cert: Optional[pulumi.Input[str]] = None,
                 ssl_cert: Optional[pulumi.Input[str]] = None,
                 strict_web_check: Optional[pulumi.Input[str]] = None,
                 tunnel_non_http: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalArgs.__new__(GlobalArgs)

            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fast_policy_match"] = fast_policy_match
            __props__.__dict__["forward_proxy_auth"] = forward_proxy_auth
            __props__.__dict__["forward_server_affinity_timeout"] = forward_server_affinity_timeout
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ldap_user_cache"] = ldap_user_cache
            __props__.__dict__["learn_client_ip"] = learn_client_ip
            __props__.__dict__["learn_client_ip_from_header"] = learn_client_ip_from_header
            __props__.__dict__["learn_client_ip_srcaddr6s"] = learn_client_ip_srcaddr6s
            __props__.__dict__["learn_client_ip_srcaddrs"] = learn_client_ip_srcaddrs
            __props__.__dict__["log_app_id"] = log_app_id
            __props__.__dict__["log_forward_server"] = log_forward_server
            __props__.__dict__["log_policy_pending"] = log_policy_pending
            __props__.__dict__["max_message_length"] = max_message_length
            __props__.__dict__["max_request_length"] = max_request_length
            __props__.__dict__["max_waf_body_cache_length"] = max_waf_body_cache_length
            __props__.__dict__["policy_category_deep_inspect"] = policy_category_deep_inspect
            if proxy_fqdn is None and not opts.urn:
                raise TypeError("Missing required property 'proxy_fqdn'")
            __props__.__dict__["proxy_fqdn"] = proxy_fqdn
            __props__.__dict__["src_affinity_exempt_addr"] = src_affinity_exempt_addr
            __props__.__dict__["src_affinity_exempt_addr6"] = src_affinity_exempt_addr6
            __props__.__dict__["ssl_ca_cert"] = ssl_ca_cert
            __props__.__dict__["ssl_cert"] = ssl_cert
            __props__.__dict__["strict_web_check"] = strict_web_check
            __props__.__dict__["tunnel_non_http"] = tunnel_non_http
            __props__.__dict__["unknown_http_version"] = unknown_http_version
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["webproxy_profile"] = webproxy_profile
        super(Global, __self__).__init__(
            'fortios:webproxy/global:Global',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fast_policy_match: Optional[pulumi.Input[str]] = None,
            forward_proxy_auth: Optional[pulumi.Input[str]] = None,
            forward_server_affinity_timeout: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ldap_user_cache: Optional[pulumi.Input[str]] = None,
            learn_client_ip: Optional[pulumi.Input[str]] = None,
            learn_client_ip_from_header: Optional[pulumi.Input[str]] = None,
            learn_client_ip_srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalLearnClientIpSrcaddr6Args']]]]] = None,
            learn_client_ip_srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalLearnClientIpSrcaddrArgs']]]]] = None,
            log_app_id: Optional[pulumi.Input[str]] = None,
            log_forward_server: Optional[pulumi.Input[str]] = None,
            log_policy_pending: Optional[pulumi.Input[str]] = None,
            max_message_length: Optional[pulumi.Input[int]] = None,
            max_request_length: Optional[pulumi.Input[int]] = None,
            max_waf_body_cache_length: Optional[pulumi.Input[int]] = None,
            policy_category_deep_inspect: Optional[pulumi.Input[str]] = None,
            proxy_fqdn: Optional[pulumi.Input[str]] = None,
            src_affinity_exempt_addr: Optional[pulumi.Input[str]] = None,
            src_affinity_exempt_addr6: Optional[pulumi.Input[str]] = None,
            ssl_ca_cert: Optional[pulumi.Input[str]] = None,
            ssl_cert: Optional[pulumi.Input[str]] = None,
            strict_web_check: Optional[pulumi.Input[str]] = None,
            tunnel_non_http: Optional[pulumi.Input[str]] = None,
            unknown_http_version: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            webproxy_profile: Optional[pulumi.Input[str]] = None) -> 'Global':
        """
        Get an existing Global resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fast_policy_match: Enable/disable fast matching algorithm for explicit and transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forward_proxy_auth: Enable/disable forwarding proxy authentication headers. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] forward_server_affinity_timeout: Period of time before the source IP's traffic is no longer assigned to the forwarding server (6 - 60 min, default = 30).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ldap_user_cache: Enable/disable LDAP user cache for explicit and transparent proxy user. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] learn_client_ip: Enable/disable learning the client's IP address from headers. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] learn_client_ip_from_header: Learn client IP address from the specified headers. Valid values: `true-client-ip`, `x-real-ip`, `x-forwarded-for`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalLearnClientIpSrcaddr6Args']]]] learn_client_ip_srcaddr6s: IPv6 Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalLearnClientIpSrcaddrArgs']]]] learn_client_ip_srcaddrs: Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr` block is documented below.
        :param pulumi.Input[str] log_app_id: Enable/disable always log application type in traffic log. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_forward_server: Enable/disable forward server name logging in forward traffic log. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_pending: Enable/disable logging sessions that are pending on policy matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_message_length: Maximum length of HTTP message, not including body (16 - 256 Kbytes, default = 32).
        :param pulumi.Input[int] max_request_length: Maximum length of HTTP request line (2 - 64 Kbytes, default = 4).
        :param pulumi.Input[int] max_waf_body_cache_length: Maximum length of HTTP messages processed by Web Application Firewall (WAF) (10 - 1024 Kbytes, default = 32).
        :param pulumi.Input[str] policy_category_deep_inspect: Enable/disable deep inspection for application level category policy matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] proxy_fqdn: Fully Qualified Domain Name (FQDN) that clients connect to (default = default.fqdn) to connect to the explicit web proxy.
        :param pulumi.Input[str] src_affinity_exempt_addr: IPv4 source addresses to exempt proxy affinity.
        :param pulumi.Input[str] src_affinity_exempt_addr6: IPv6 source addresses to exempt proxy affinity.
        :param pulumi.Input[str] ssl_ca_cert: SSL CA certificate for SSL interception.
        :param pulumi.Input[str] ssl_cert: SSL certificate for SSL interception.
        :param pulumi.Input[str] strict_web_check: Enable/disable strict web checking to block web sites that send incorrect headers that don't conform to HTTP 1.1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_non_http: Enable/disable allowing non-HTTP traffic. Allowed non-HTTP traffic is tunneled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unknown_http_version: Action to take when an unknown version of HTTP is encountered: reject, allow (tunnel), or proceed with best-effort. Valid values: `reject`, `tunnel`, `best-effort`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webproxy_profile: Name of the web proxy profile to apply when explicit proxy traffic is allowed by default and traffic is accepted that does not match an explicit proxy policy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalState.__new__(_GlobalState)

        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fast_policy_match"] = fast_policy_match
        __props__.__dict__["forward_proxy_auth"] = forward_proxy_auth
        __props__.__dict__["forward_server_affinity_timeout"] = forward_server_affinity_timeout
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ldap_user_cache"] = ldap_user_cache
        __props__.__dict__["learn_client_ip"] = learn_client_ip
        __props__.__dict__["learn_client_ip_from_header"] = learn_client_ip_from_header
        __props__.__dict__["learn_client_ip_srcaddr6s"] = learn_client_ip_srcaddr6s
        __props__.__dict__["learn_client_ip_srcaddrs"] = learn_client_ip_srcaddrs
        __props__.__dict__["log_app_id"] = log_app_id
        __props__.__dict__["log_forward_server"] = log_forward_server
        __props__.__dict__["log_policy_pending"] = log_policy_pending
        __props__.__dict__["max_message_length"] = max_message_length
        __props__.__dict__["max_request_length"] = max_request_length
        __props__.__dict__["max_waf_body_cache_length"] = max_waf_body_cache_length
        __props__.__dict__["policy_category_deep_inspect"] = policy_category_deep_inspect
        __props__.__dict__["proxy_fqdn"] = proxy_fqdn
        __props__.__dict__["src_affinity_exempt_addr"] = src_affinity_exempt_addr
        __props__.__dict__["src_affinity_exempt_addr6"] = src_affinity_exempt_addr6
        __props__.__dict__["ssl_ca_cert"] = ssl_ca_cert
        __props__.__dict__["ssl_cert"] = ssl_cert
        __props__.__dict__["strict_web_check"] = strict_web_check
        __props__.__dict__["tunnel_non_http"] = tunnel_non_http
        __props__.__dict__["unknown_http_version"] = unknown_http_version
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["webproxy_profile"] = webproxy_profile
        return Global(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fastPolicyMatch")
    def fast_policy_match(self) -> pulumi.Output[str]:
        """
        Enable/disable fast matching algorithm for explicit and transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fast_policy_match")

    @property
    @pulumi.getter(name="forwardProxyAuth")
    def forward_proxy_auth(self) -> pulumi.Output[str]:
        """
        Enable/disable forwarding proxy authentication headers. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forward_proxy_auth")

    @property
    @pulumi.getter(name="forwardServerAffinityTimeout")
    def forward_server_affinity_timeout(self) -> pulumi.Output[int]:
        """
        Period of time before the source IP's traffic is no longer assigned to the forwarding server (6 - 60 min, default = 30).
        """
        return pulumi.get(self, "forward_server_affinity_timeout")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ldapUserCache")
    def ldap_user_cache(self) -> pulumi.Output[str]:
        """
        Enable/disable LDAP user cache for explicit and transparent proxy user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ldap_user_cache")

    @property
    @pulumi.getter(name="learnClientIp")
    def learn_client_ip(self) -> pulumi.Output[str]:
        """
        Enable/disable learning the client's IP address from headers. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "learn_client_ip")

    @property
    @pulumi.getter(name="learnClientIpFromHeader")
    def learn_client_ip_from_header(self) -> pulumi.Output[str]:
        """
        Learn client IP address from the specified headers. Valid values: `true-client-ip`, `x-real-ip`, `x-forwarded-for`.
        """
        return pulumi.get(self, "learn_client_ip_from_header")

    @property
    @pulumi.getter(name="learnClientIpSrcaddr6s")
    def learn_client_ip_srcaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.GlobalLearnClientIpSrcaddr6']]]:
        """
        IPv6 Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr6` block is documented below.
        """
        return pulumi.get(self, "learn_client_ip_srcaddr6s")

    @property
    @pulumi.getter(name="learnClientIpSrcaddrs")
    def learn_client_ip_srcaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.GlobalLearnClientIpSrcaddr']]]:
        """
        Source address name (srcaddr or srcaddr6 must be set). The structure of `learn_client_ip_srcaddr` block is documented below.
        """
        return pulumi.get(self, "learn_client_ip_srcaddrs")

    @property
    @pulumi.getter(name="logAppId")
    def log_app_id(self) -> pulumi.Output[str]:
        """
        Enable/disable always log application type in traffic log. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_app_id")

    @property
    @pulumi.getter(name="logForwardServer")
    def log_forward_server(self) -> pulumi.Output[str]:
        """
        Enable/disable forward server name logging in forward traffic log. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_forward_server")

    @property
    @pulumi.getter(name="logPolicyPending")
    def log_policy_pending(self) -> pulumi.Output[str]:
        """
        Enable/disable logging sessions that are pending on policy matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_policy_pending")

    @property
    @pulumi.getter(name="maxMessageLength")
    def max_message_length(self) -> pulumi.Output[int]:
        """
        Maximum length of HTTP message, not including body (16 - 256 Kbytes, default = 32).
        """
        return pulumi.get(self, "max_message_length")

    @property
    @pulumi.getter(name="maxRequestLength")
    def max_request_length(self) -> pulumi.Output[int]:
        """
        Maximum length of HTTP request line (2 - 64 Kbytes, default = 4).
        """
        return pulumi.get(self, "max_request_length")

    @property
    @pulumi.getter(name="maxWafBodyCacheLength")
    def max_waf_body_cache_length(self) -> pulumi.Output[int]:
        """
        Maximum length of HTTP messages processed by Web Application Firewall (WAF) (10 - 1024 Kbytes, default = 32).
        """
        return pulumi.get(self, "max_waf_body_cache_length")

    @property
    @pulumi.getter(name="policyCategoryDeepInspect")
    def policy_category_deep_inspect(self) -> pulumi.Output[str]:
        """
        Enable/disable deep inspection for application level category policy matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "policy_category_deep_inspect")

    @property
    @pulumi.getter(name="proxyFqdn")
    def proxy_fqdn(self) -> pulumi.Output[str]:
        """
        Fully Qualified Domain Name (FQDN) that clients connect to (default = default.fqdn) to connect to the explicit web proxy.
        """
        return pulumi.get(self, "proxy_fqdn")

    @property
    @pulumi.getter(name="srcAffinityExemptAddr")
    def src_affinity_exempt_addr(self) -> pulumi.Output[str]:
        """
        IPv4 source addresses to exempt proxy affinity.
        """
        return pulumi.get(self, "src_affinity_exempt_addr")

    @property
    @pulumi.getter(name="srcAffinityExemptAddr6")
    def src_affinity_exempt_addr6(self) -> pulumi.Output[str]:
        """
        IPv6 source addresses to exempt proxy affinity.
        """
        return pulumi.get(self, "src_affinity_exempt_addr6")

    @property
    @pulumi.getter(name="sslCaCert")
    def ssl_ca_cert(self) -> pulumi.Output[str]:
        """
        SSL CA certificate for SSL interception.
        """
        return pulumi.get(self, "ssl_ca_cert")

    @property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> pulumi.Output[str]:
        """
        SSL certificate for SSL interception.
        """
        return pulumi.get(self, "ssl_cert")

    @property
    @pulumi.getter(name="strictWebCheck")
    def strict_web_check(self) -> pulumi.Output[str]:
        """
        Enable/disable strict web checking to block web sites that send incorrect headers that don't conform to HTTP 1.1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_web_check")

    @property
    @pulumi.getter(name="tunnelNonHttp")
    def tunnel_non_http(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing non-HTTP traffic. Allowed non-HTTP traffic is tunneled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_non_http")

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> pulumi.Output[str]:
        """
        Action to take when an unknown version of HTTP is encountered: reject, allow (tunnel), or proceed with best-effort. Valid values: `reject`, `tunnel`, `best-effort`.
        """
        return pulumi.get(self, "unknown_http_version")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> pulumi.Output[str]:
        """
        Name of the web proxy profile to apply when explicit proxy traffic is allowed by default and traffic is accepted that does not match an explicit proxy policy.
        """
        return pulumi.get(self, "webproxy_profile")

