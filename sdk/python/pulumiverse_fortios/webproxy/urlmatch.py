# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UrlmatchArgs', 'Urlmatch']

@pulumi.input_type
class UrlmatchArgs:
    def __init__(__self__, *,
                 url_pattern: pulumi.Input[str],
                 cache_exemption: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 fast_fallback: Optional[pulumi.Input[str]] = None,
                 forward_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Urlmatch resource.
        :param pulumi.Input[str] url_pattern: URL pattern to be exempted from web proxy forwarding and caching.
        :param pulumi.Input[str] cache_exemption: Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] fast_fallback: Fast fallback configuration entry name.
        :param pulumi.Input[str] forward_server: Forward server name.
        :param pulumi.Input[str] name: Configure a name for the URL to be exempted.
        :param pulumi.Input[str] status: Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "url_pattern", url_pattern)
        if cache_exemption is not None:
            pulumi.set(__self__, "cache_exemption", cache_exemption)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if fast_fallback is not None:
            pulumi.set(__self__, "fast_fallback", fast_fallback)
        if forward_server is not None:
            pulumi.set(__self__, "forward_server", forward_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="urlPattern")
    def url_pattern(self) -> pulumi.Input[str]:
        """
        URL pattern to be exempted from web proxy forwarding and caching.
        """
        return pulumi.get(self, "url_pattern")

    @url_pattern.setter
    def url_pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "url_pattern", value)

    @property
    @pulumi.getter(name="cacheExemption")
    def cache_exemption(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cache_exemption")

    @cache_exemption.setter
    def cache_exemption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_exemption", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="fastFallback")
    def fast_fallback(self) -> Optional[pulumi.Input[str]]:
        """
        Fast fallback configuration entry name.
        """
        return pulumi.get(self, "fast_fallback")

    @fast_fallback.setter
    def fast_fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fast_fallback", value)

    @property
    @pulumi.getter(name="forwardServer")
    def forward_server(self) -> Optional[pulumi.Input[str]]:
        """
        Forward server name.
        """
        return pulumi.get(self, "forward_server")

    @forward_server.setter
    def forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configure a name for the URL to be exempted.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _UrlmatchState:
    def __init__(__self__, *,
                 cache_exemption: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 fast_fallback: Optional[pulumi.Input[str]] = None,
                 forward_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url_pattern: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Urlmatch resources.
        :param pulumi.Input[str] cache_exemption: Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] fast_fallback: Fast fallback configuration entry name.
        :param pulumi.Input[str] forward_server: Forward server name.
        :param pulumi.Input[str] name: Configure a name for the URL to be exempted.
        :param pulumi.Input[str] status: Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_pattern: URL pattern to be exempted from web proxy forwarding and caching.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if cache_exemption is not None:
            pulumi.set(__self__, "cache_exemption", cache_exemption)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if fast_fallback is not None:
            pulumi.set(__self__, "fast_fallback", fast_fallback)
        if forward_server is not None:
            pulumi.set(__self__, "forward_server", forward_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url_pattern is not None:
            pulumi.set(__self__, "url_pattern", url_pattern)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="cacheExemption")
    def cache_exemption(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cache_exemption")

    @cache_exemption.setter
    def cache_exemption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_exemption", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="fastFallback")
    def fast_fallback(self) -> Optional[pulumi.Input[str]]:
        """
        Fast fallback configuration entry name.
        """
        return pulumi.get(self, "fast_fallback")

    @fast_fallback.setter
    def fast_fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fast_fallback", value)

    @property
    @pulumi.getter(name="forwardServer")
    def forward_server(self) -> Optional[pulumi.Input[str]]:
        """
        Forward server name.
        """
        return pulumi.get(self, "forward_server")

    @forward_server.setter
    def forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configure a name for the URL to be exempted.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="urlPattern")
    def url_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern to be exempted from web proxy forwarding and caching.
        """
        return pulumi.get(self, "url_pattern")

    @url_pattern.setter
    def url_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_pattern", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Urlmatch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_exemption: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 fast_fallback: Optional[pulumi.Input[str]] = None,
                 forward_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url_pattern: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Exempt URLs from web proxy forwarding and caching.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname2 = fortios.webproxy.Forwardserver("trname2",
            addr_type="fqdn",
            healthcheck="disable",
            ip="0.0.0.0",
            monitor="http://www.google.com",
            port=3128,
            server_down_option="block")
        trname = fortios.webproxy.Urlmatch("trname",
            cache_exemption="disable",
            forward_server=trname2.name,
            status="enable",
            url_pattern="/examples/servlet/*Servlet")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        WebProxy UrlMatch can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:webproxy/urlmatch:Urlmatch labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:webproxy/urlmatch:Urlmatch labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cache_exemption: Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] fast_fallback: Fast fallback configuration entry name.
        :param pulumi.Input[str] forward_server: Forward server name.
        :param pulumi.Input[str] name: Configure a name for the URL to be exempted.
        :param pulumi.Input[str] status: Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_pattern: URL pattern to be exempted from web proxy forwarding and caching.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UrlmatchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Exempt URLs from web proxy forwarding and caching.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname2 = fortios.webproxy.Forwardserver("trname2",
            addr_type="fqdn",
            healthcheck="disable",
            ip="0.0.0.0",
            monitor="http://www.google.com",
            port=3128,
            server_down_option="block")
        trname = fortios.webproxy.Urlmatch("trname",
            cache_exemption="disable",
            forward_server=trname2.name,
            status="enable",
            url_pattern="/examples/servlet/*Servlet")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        WebProxy UrlMatch can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:webproxy/urlmatch:Urlmatch labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:webproxy/urlmatch:Urlmatch labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param UrlmatchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UrlmatchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_exemption: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 fast_fallback: Optional[pulumi.Input[str]] = None,
                 forward_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url_pattern: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UrlmatchArgs.__new__(UrlmatchArgs)

            __props__.__dict__["cache_exemption"] = cache_exemption
            __props__.__dict__["comment"] = comment
            __props__.__dict__["fast_fallback"] = fast_fallback
            __props__.__dict__["forward_server"] = forward_server
            __props__.__dict__["name"] = name
            __props__.__dict__["status"] = status
            if url_pattern is None and not opts.urn:
                raise TypeError("Missing required property 'url_pattern'")
            __props__.__dict__["url_pattern"] = url_pattern
            __props__.__dict__["vdomparam"] = vdomparam
        super(Urlmatch, __self__).__init__(
            'fortios:webproxy/urlmatch:Urlmatch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cache_exemption: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            fast_fallback: Optional[pulumi.Input[str]] = None,
            forward_server: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            url_pattern: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Urlmatch':
        """
        Get an existing Urlmatch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cache_exemption: Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] fast_fallback: Fast fallback configuration entry name.
        :param pulumi.Input[str] forward_server: Forward server name.
        :param pulumi.Input[str] name: Configure a name for the URL to be exempted.
        :param pulumi.Input[str] status: Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_pattern: URL pattern to be exempted from web proxy forwarding and caching.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UrlmatchState.__new__(_UrlmatchState)

        __props__.__dict__["cache_exemption"] = cache_exemption
        __props__.__dict__["comment"] = comment
        __props__.__dict__["fast_fallback"] = fast_fallback
        __props__.__dict__["forward_server"] = forward_server
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["url_pattern"] = url_pattern
        __props__.__dict__["vdomparam"] = vdomparam
        return Urlmatch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cacheExemption")
    def cache_exemption(self) -> pulumi.Output[str]:
        """
        Enable/disable exempting this URL pattern from caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cache_exemption")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="fastFallback")
    def fast_fallback(self) -> pulumi.Output[str]:
        """
        Fast fallback configuration entry name.
        """
        return pulumi.get(self, "fast_fallback")

    @property
    @pulumi.getter(name="forwardServer")
    def forward_server(self) -> pulumi.Output[str]:
        """
        Forward server name.
        """
        return pulumi.get(self, "forward_server")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Configure a name for the URL to be exempted.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable exempting the URLs matching the URL pattern from web proxy forwarding and caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="urlPattern")
    def url_pattern(self) -> pulumi.Output[str]:
        """
        URL pattern to be exempted from web proxy forwarding and caching.
        """
        return pulumi.get(self, "url_pattern")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

