# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExtenderArgs', 'Extender']

@pulumi.input_type
class ExtenderArgs:
    def __init__(__self__, *,
                 admin: pulumi.Input[str],
                 fosid: pulumi.Input[str],
                 role: pulumi.Input[str],
                 aaa_shared_secret: Optional[pulumi.Input[str]] = None,
                 access_point_name: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 at_dial_script: Optional[pulumi.Input[str]] = None,
                 authorized: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 billing_start_day: Optional[pulumi.Input[int]] = None,
                 cdma_aaa_spi: Optional[pulumi.Input[str]] = None,
                 cdma_ha_spi: Optional[pulumi.Input[str]] = None,
                 cdma_nai: Optional[pulumi.Input[str]] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 controller_report: Optional[pulumi.Input['ExtenderControllerReportArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 dial_mode: Optional[pulumi.Input[str]] = None,
                 dial_status: Optional[pulumi.Input[int]] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 ext_name: Optional[pulumi.Input[str]] = None,
                 extension_type: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_shared_secret: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 initiated_update: Optional[pulumi.Input[str]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 modem1: Optional[pulumi.Input['ExtenderModem1Args']] = None,
                 modem2: Optional[pulumi.Input['ExtenderModem2Args']] = None,
                 modem_passwd: Optional[pulumi.Input[str]] = None,
                 modem_type: Optional[pulumi.Input[str]] = None,
                 multi_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_allowaccess: Optional[pulumi.Input[str]] = None,
                 override_enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 override_login_password_change: Optional[pulumi.Input[str]] = None,
                 ppp_auth_protocol: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request: Optional[pulumi.Input[str]] = None,
                 ppp_password: Optional[pulumi.Input[str]] = None,
                 ppp_username: Optional[pulumi.Input[str]] = None,
                 primary_ha: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 quota_limit_mb: Optional[pulumi.Input[int]] = None,
                 redial: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 roaming: Optional[pulumi.Input[str]] = None,
                 secondary_ha: Optional[pulumi.Input[str]] = None,
                 sim_pin: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_extension: Optional[pulumi.Input['ExtenderWanExtensionArgs']] = None,
                 wimax_auth_protocol: Optional[pulumi.Input[str]] = None,
                 wimax_carrier: Optional[pulumi.Input[str]] = None,
                 wimax_realm: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Extender resource.
        :param pulumi.Input[str] admin: FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
        :param pulumi.Input[str] fosid: FortiExtender serial number.
        :param pulumi.Input[str] role: FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
        :param pulumi.Input[str] aaa_shared_secret: AAA shared secret.
        :param pulumi.Input[str] access_point_name: Access point name(APN).
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[str] at_dial_script: Initialization AT commands specific to the MODEM.
        :param pulumi.Input[str] authorized: FortiExtender Administration (enable or disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] bandwidth_limit: FortiExtender LAN extension bandwidth limit (Mbps).
        :param pulumi.Input[int] billing_start_day: Billing start day.
        :param pulumi.Input[str] cdma_aaa_spi: CDMA AAA SPI.
        :param pulumi.Input[str] cdma_ha_spi: CDMA HA SPI.
        :param pulumi.Input[str] cdma_nai: NAI for CDMA MODEMS.
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input['ExtenderControllerReportArgs'] controller_report: FortiExtender controller report configuration. The structure of `controller_report` block is documented below.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] device_id: device-id
        :param pulumi.Input[str] dial_mode: Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
        :param pulumi.Input[int] dial_status: Dial status.
        :param pulumi.Input[str] enforce_bandwidth: Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ext_name: FortiExtender name.
        :param pulumi.Input[str] extension_type: Extension type for this FortiExtender. Valid values: `wan-extension`, `lan-extension`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_shared_secret: HA shared secret.
        :param pulumi.Input[str] ifname: FortiExtender interface name.
        :param pulumi.Input[str] initiated_update: Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] login_password: FortiExtender login password.
        :param pulumi.Input[str] login_password_change: Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        :param pulumi.Input[str] mode: FortiExtender mode. Valid values: `standalone`, `redundant`.
        :param pulumi.Input['ExtenderModem1Args'] modem1: Configuration options for modem 1. The structure of `modem1` block is documented below.
        :param pulumi.Input['ExtenderModem2Args'] modem2: Configuration options for modem 2. The structure of `modem2` block is documented below.
        :param pulumi.Input[str] modem_passwd: MODEM password.
        :param pulumi.Input[str] modem_type: MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
        :param pulumi.Input[str] multi_mode: MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
        :param pulumi.Input[str] name: FortiExtender entry name.
        :param pulumi.Input[str] override_allowaccess: Enable to override the extender profile management access configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_enforce_bandwidth: Enable to override the extender profile enforce-bandwidth setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_login_password_change: Enable to override the extender profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_auth_protocol: PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
        :param pulumi.Input[str] ppp_echo_request: Enable/disable PPP echo request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_password: PPP password.
        :param pulumi.Input[str] ppp_username: PPP username.
        :param pulumi.Input[str] primary_ha: Primary HA.
        :param pulumi.Input[str] profile: FortiExtender profile configuration.
        :param pulumi.Input[int] quota_limit_mb: Monthly quota limit (MB).
        :param pulumi.Input[str] redial: Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        :param pulumi.Input[str] roaming: Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] secondary_ha: Secondary HA.
        :param pulumi.Input[str] sim_pin: SIM PIN.
        :param pulumi.Input[int] vdom: VDOM
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input['ExtenderWanExtensionArgs'] wan_extension: FortiExtender wan extension configuration. The structure of `wan_extension` block is documented below.
        :param pulumi.Input[str] wimax_auth_protocol: WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
        :param pulumi.Input[str] wimax_carrier: WiMax carrier.
        :param pulumi.Input[str] wimax_realm: WiMax realm.
        """
        pulumi.set(__self__, "admin", admin)
        pulumi.set(__self__, "fosid", fosid)
        pulumi.set(__self__, "role", role)
        if aaa_shared_secret is not None:
            pulumi.set(__self__, "aaa_shared_secret", aaa_shared_secret)
        if access_point_name is not None:
            pulumi.set(__self__, "access_point_name", access_point_name)
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if at_dial_script is not None:
            pulumi.set(__self__, "at_dial_script", at_dial_script)
        if authorized is not None:
            pulumi.set(__self__, "authorized", authorized)
        if bandwidth_limit is not None:
            pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        if billing_start_day is not None:
            pulumi.set(__self__, "billing_start_day", billing_start_day)
        if cdma_aaa_spi is not None:
            pulumi.set(__self__, "cdma_aaa_spi", cdma_aaa_spi)
        if cdma_ha_spi is not None:
            pulumi.set(__self__, "cdma_ha_spi", cdma_ha_spi)
        if cdma_nai is not None:
            pulumi.set(__self__, "cdma_nai", cdma_nai)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if controller_report is not None:
            pulumi.set(__self__, "controller_report", controller_report)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if dial_mode is not None:
            pulumi.set(__self__, "dial_mode", dial_mode)
        if dial_status is not None:
            pulumi.set(__self__, "dial_status", dial_status)
        if enforce_bandwidth is not None:
            pulumi.set(__self__, "enforce_bandwidth", enforce_bandwidth)
        if ext_name is not None:
            pulumi.set(__self__, "ext_name", ext_name)
        if extension_type is not None:
            pulumi.set(__self__, "extension_type", extension_type)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_shared_secret is not None:
            pulumi.set(__self__, "ha_shared_secret", ha_shared_secret)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if initiated_update is not None:
            pulumi.set(__self__, "initiated_update", initiated_update)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if login_password_change is not None:
            pulumi.set(__self__, "login_password_change", login_password_change)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if modem1 is not None:
            pulumi.set(__self__, "modem1", modem1)
        if modem2 is not None:
            pulumi.set(__self__, "modem2", modem2)
        if modem_passwd is not None:
            pulumi.set(__self__, "modem_passwd", modem_passwd)
        if modem_type is not None:
            pulumi.set(__self__, "modem_type", modem_type)
        if multi_mode is not None:
            pulumi.set(__self__, "multi_mode", multi_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_allowaccess is not None:
            pulumi.set(__self__, "override_allowaccess", override_allowaccess)
        if override_enforce_bandwidth is not None:
            pulumi.set(__self__, "override_enforce_bandwidth", override_enforce_bandwidth)
        if override_login_password_change is not None:
            pulumi.set(__self__, "override_login_password_change", override_login_password_change)
        if ppp_auth_protocol is not None:
            pulumi.set(__self__, "ppp_auth_protocol", ppp_auth_protocol)
        if ppp_echo_request is not None:
            pulumi.set(__self__, "ppp_echo_request", ppp_echo_request)
        if ppp_password is not None:
            pulumi.set(__self__, "ppp_password", ppp_password)
        if ppp_username is not None:
            pulumi.set(__self__, "ppp_username", ppp_username)
        if primary_ha is not None:
            pulumi.set(__self__, "primary_ha", primary_ha)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if quota_limit_mb is not None:
            pulumi.set(__self__, "quota_limit_mb", quota_limit_mb)
        if redial is not None:
            pulumi.set(__self__, "redial", redial)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if roaming is not None:
            pulumi.set(__self__, "roaming", roaming)
        if secondary_ha is not None:
            pulumi.set(__self__, "secondary_ha", secondary_ha)
        if sim_pin is not None:
            pulumi.set(__self__, "sim_pin", sim_pin)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wan_extension is not None:
            pulumi.set(__self__, "wan_extension", wan_extension)
        if wimax_auth_protocol is not None:
            pulumi.set(__self__, "wimax_auth_protocol", wimax_auth_protocol)
        if wimax_carrier is not None:
            pulumi.set(__self__, "wimax_carrier", wimax_carrier)
        if wimax_realm is not None:
            pulumi.set(__self__, "wimax_realm", wimax_realm)

    @property
    @pulumi.getter
    def admin(self) -> pulumi.Input[str]:
        """
        FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
        """
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: pulumi.Input[str]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Input[str]:
        """
        FortiExtender serial number.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: pulumi.Input[str]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="aaaSharedSecret")
    def aaa_shared_secret(self) -> Optional[pulumi.Input[str]]:
        """
        AAA shared secret.
        """
        return pulumi.get(self, "aaa_shared_secret")

    @aaa_shared_secret.setter
    def aaa_shared_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aaa_shared_secret", value)

    @property
    @pulumi.getter(name="accessPointName")
    def access_point_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access point name(APN).
        """
        return pulumi.get(self, "access_point_name")

    @access_point_name.setter
    def access_point_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_point_name", value)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="atDialScript")
    def at_dial_script(self) -> Optional[pulumi.Input[str]]:
        """
        Initialization AT commands specific to the MODEM.
        """
        return pulumi.get(self, "at_dial_script")

    @at_dial_script.setter
    def at_dial_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "at_dial_script", value)

    @property
    @pulumi.getter
    def authorized(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender Administration (enable or disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "authorized")

    @authorized.setter
    def authorized(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorized", value)

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> Optional[pulumi.Input[int]]:
        """
        FortiExtender LAN extension bandwidth limit (Mbps).
        """
        return pulumi.get(self, "bandwidth_limit")

    @bandwidth_limit.setter
    def bandwidth_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_limit", value)

    @property
    @pulumi.getter(name="billingStartDay")
    def billing_start_day(self) -> Optional[pulumi.Input[int]]:
        """
        Billing start day.
        """
        return pulumi.get(self, "billing_start_day")

    @billing_start_day.setter
    def billing_start_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "billing_start_day", value)

    @property
    @pulumi.getter(name="cdmaAaaSpi")
    def cdma_aaa_spi(self) -> Optional[pulumi.Input[str]]:
        """
        CDMA AAA SPI.
        """
        return pulumi.get(self, "cdma_aaa_spi")

    @cdma_aaa_spi.setter
    def cdma_aaa_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdma_aaa_spi", value)

    @property
    @pulumi.getter(name="cdmaHaSpi")
    def cdma_ha_spi(self) -> Optional[pulumi.Input[str]]:
        """
        CDMA HA SPI.
        """
        return pulumi.get(self, "cdma_ha_spi")

    @cdma_ha_spi.setter
    def cdma_ha_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdma_ha_spi", value)

    @property
    @pulumi.getter(name="cdmaNai")
    def cdma_nai(self) -> Optional[pulumi.Input[str]]:
        """
        NAI for CDMA MODEMS.
        """
        return pulumi.get(self, "cdma_nai")

    @cdma_nai.setter
    def cdma_nai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdma_nai", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        Connection status.
        """
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> Optional[pulumi.Input['ExtenderControllerReportArgs']]:
        """
        FortiExtender controller report configuration. The structure of `controller_report` block is documented below.
        """
        return pulumi.get(self, "controller_report")

    @controller_report.setter
    def controller_report(self, value: Optional[pulumi.Input['ExtenderControllerReportArgs']]):
        pulumi.set(self, "controller_report", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[int]]:
        """
        device-id
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="dialMode")
    def dial_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
        """
        return pulumi.get(self, "dial_mode")

    @dial_mode.setter
    def dial_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_mode", value)

    @property
    @pulumi.getter(name="dialStatus")
    def dial_status(self) -> Optional[pulumi.Input[int]]:
        """
        Dial status.
        """
        return pulumi.get(self, "dial_status")

    @dial_status.setter
    def dial_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dial_status", value)

    @property
    @pulumi.getter(name="enforceBandwidth")
    def enforce_bandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enforce_bandwidth")

    @enforce_bandwidth.setter
    def enforce_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_bandwidth", value)

    @property
    @pulumi.getter(name="extName")
    def ext_name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender name.
        """
        return pulumi.get(self, "ext_name")

    @ext_name.setter
    def ext_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_name", value)

    @property
    @pulumi.getter(name="extensionType")
    def extension_type(self) -> Optional[pulumi.Input[str]]:
        """
        Extension type for this FortiExtender. Valid values: `wan-extension`, `lan-extension`.
        """
        return pulumi.get(self, "extension_type")

    @extension_type.setter
    def extension_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension_type", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haSharedSecret")
    def ha_shared_secret(self) -> Optional[pulumi.Input[str]]:
        """
        HA shared secret.
        """
        return pulumi.get(self, "ha_shared_secret")

    @ha_shared_secret.setter
    def ha_shared_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_shared_secret", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="initiatedUpdate")
    def initiated_update(self) -> Optional[pulumi.Input[str]]:
        """
        Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "initiated_update")

    @initiated_update.setter
    def initiated_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initiated_update", value)

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender login password.
        """
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password", value)

    @property
    @pulumi.getter(name="loginPasswordChange")
    def login_password_change(self) -> Optional[pulumi.Input[str]]:
        """
        Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        """
        return pulumi.get(self, "login_password_change")

    @login_password_change.setter
    def login_password_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password_change", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender mode. Valid values: `standalone`, `redundant`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def modem1(self) -> Optional[pulumi.Input['ExtenderModem1Args']]:
        """
        Configuration options for modem 1. The structure of `modem1` block is documented below.
        """
        return pulumi.get(self, "modem1")

    @modem1.setter
    def modem1(self, value: Optional[pulumi.Input['ExtenderModem1Args']]):
        pulumi.set(self, "modem1", value)

    @property
    @pulumi.getter
    def modem2(self) -> Optional[pulumi.Input['ExtenderModem2Args']]:
        """
        Configuration options for modem 2. The structure of `modem2` block is documented below.
        """
        return pulumi.get(self, "modem2")

    @modem2.setter
    def modem2(self, value: Optional[pulumi.Input['ExtenderModem2Args']]):
        pulumi.set(self, "modem2", value)

    @property
    @pulumi.getter(name="modemPasswd")
    def modem_passwd(self) -> Optional[pulumi.Input[str]]:
        """
        MODEM password.
        """
        return pulumi.get(self, "modem_passwd")

    @modem_passwd.setter
    def modem_passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem_passwd", value)

    @property
    @pulumi.getter(name="modemType")
    def modem_type(self) -> Optional[pulumi.Input[str]]:
        """
        MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
        """
        return pulumi.get(self, "modem_type")

    @modem_type.setter
    def modem_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem_type", value)

    @property
    @pulumi.getter(name="multiMode")
    def multi_mode(self) -> Optional[pulumi.Input[str]]:
        """
        MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
        """
        return pulumi.get(self, "multi_mode")

    @multi_mode.setter
    def multi_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideAllowaccess")
    def override_allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the extender profile management access configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_allowaccess")

    @override_allowaccess.setter
    def override_allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_allowaccess", value)

    @property
    @pulumi.getter(name="overrideEnforceBandwidth")
    def override_enforce_bandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the extender profile enforce-bandwidth setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_enforce_bandwidth")

    @override_enforce_bandwidth.setter
    def override_enforce_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_enforce_bandwidth", value)

    @property
    @pulumi.getter(name="overrideLoginPasswordChange")
    def override_login_password_change(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the extender profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_login_password_change")

    @override_login_password_change.setter
    def override_login_password_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_login_password_change", value)

    @property
    @pulumi.getter(name="pppAuthProtocol")
    def ppp_auth_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
        """
        return pulumi.get(self, "ppp_auth_protocol")

    @ppp_auth_protocol.setter
    def ppp_auth_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_auth_protocol", value)

    @property
    @pulumi.getter(name="pppEchoRequest")
    def ppp_echo_request(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPP echo request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request")

    @ppp_echo_request.setter
    def ppp_echo_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_echo_request", value)

    @property
    @pulumi.getter(name="pppPassword")
    def ppp_password(self) -> Optional[pulumi.Input[str]]:
        """
        PPP password.
        """
        return pulumi.get(self, "ppp_password")

    @ppp_password.setter
    def ppp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_password", value)

    @property
    @pulumi.getter(name="pppUsername")
    def ppp_username(self) -> Optional[pulumi.Input[str]]:
        """
        PPP username.
        """
        return pulumi.get(self, "ppp_username")

    @ppp_username.setter
    def ppp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_username", value)

    @property
    @pulumi.getter(name="primaryHa")
    def primary_ha(self) -> Optional[pulumi.Input[str]]:
        """
        Primary HA.
        """
        return pulumi.get(self, "primary_ha")

    @primary_ha.setter
    def primary_ha(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ha", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender profile configuration.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="quotaLimitMb")
    def quota_limit_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Monthly quota limit (MB).
        """
        return pulumi.get(self, "quota_limit_mb")

    @quota_limit_mb.setter
    def quota_limit_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quota_limit_mb", value)

    @property
    @pulumi.getter
    def redial(self) -> Optional[pulumi.Input[str]]:
        """
        Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        """
        return pulumi.get(self, "redial")

    @redial.setter
    def redial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redial", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter
    def roaming(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "roaming")

    @roaming.setter
    def roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roaming", value)

    @property
    @pulumi.getter(name="secondaryHa")
    def secondary_ha(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary HA.
        """
        return pulumi.get(self, "secondary_ha")

    @secondary_ha.setter
    def secondary_ha(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ha", value)

    @property
    @pulumi.getter(name="simPin")
    def sim_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM PIN.
        """
        return pulumi.get(self, "sim_pin")

    @sim_pin.setter
    def sim_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim_pin", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[int]]:
        """
        VDOM
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wanExtension")
    def wan_extension(self) -> Optional[pulumi.Input['ExtenderWanExtensionArgs']]:
        """
        FortiExtender wan extension configuration. The structure of `wan_extension` block is documented below.
        """
        return pulumi.get(self, "wan_extension")

    @wan_extension.setter
    def wan_extension(self, value: Optional[pulumi.Input['ExtenderWanExtensionArgs']]):
        pulumi.set(self, "wan_extension", value)

    @property
    @pulumi.getter(name="wimaxAuthProtocol")
    def wimax_auth_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
        """
        return pulumi.get(self, "wimax_auth_protocol")

    @wimax_auth_protocol.setter
    def wimax_auth_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wimax_auth_protocol", value)

    @property
    @pulumi.getter(name="wimaxCarrier")
    def wimax_carrier(self) -> Optional[pulumi.Input[str]]:
        """
        WiMax carrier.
        """
        return pulumi.get(self, "wimax_carrier")

    @wimax_carrier.setter
    def wimax_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wimax_carrier", value)

    @property
    @pulumi.getter(name="wimaxRealm")
    def wimax_realm(self) -> Optional[pulumi.Input[str]]:
        """
        WiMax realm.
        """
        return pulumi.get(self, "wimax_realm")

    @wimax_realm.setter
    def wimax_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wimax_realm", value)


@pulumi.input_type
class _ExtenderState:
    def __init__(__self__, *,
                 aaa_shared_secret: Optional[pulumi.Input[str]] = None,
                 access_point_name: Optional[pulumi.Input[str]] = None,
                 admin: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 at_dial_script: Optional[pulumi.Input[str]] = None,
                 authorized: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 billing_start_day: Optional[pulumi.Input[int]] = None,
                 cdma_aaa_spi: Optional[pulumi.Input[str]] = None,
                 cdma_ha_spi: Optional[pulumi.Input[str]] = None,
                 cdma_nai: Optional[pulumi.Input[str]] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 controller_report: Optional[pulumi.Input['ExtenderControllerReportArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 dial_mode: Optional[pulumi.Input[str]] = None,
                 dial_status: Optional[pulumi.Input[int]] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 ext_name: Optional[pulumi.Input[str]] = None,
                 extension_type: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_shared_secret: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 initiated_update: Optional[pulumi.Input[str]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 modem1: Optional[pulumi.Input['ExtenderModem1Args']] = None,
                 modem2: Optional[pulumi.Input['ExtenderModem2Args']] = None,
                 modem_passwd: Optional[pulumi.Input[str]] = None,
                 modem_type: Optional[pulumi.Input[str]] = None,
                 multi_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_allowaccess: Optional[pulumi.Input[str]] = None,
                 override_enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 override_login_password_change: Optional[pulumi.Input[str]] = None,
                 ppp_auth_protocol: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request: Optional[pulumi.Input[str]] = None,
                 ppp_password: Optional[pulumi.Input[str]] = None,
                 ppp_username: Optional[pulumi.Input[str]] = None,
                 primary_ha: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 quota_limit_mb: Optional[pulumi.Input[int]] = None,
                 redial: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 roaming: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 secondary_ha: Optional[pulumi.Input[str]] = None,
                 sim_pin: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_extension: Optional[pulumi.Input['ExtenderWanExtensionArgs']] = None,
                 wimax_auth_protocol: Optional[pulumi.Input[str]] = None,
                 wimax_carrier: Optional[pulumi.Input[str]] = None,
                 wimax_realm: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Extender resources.
        :param pulumi.Input[str] aaa_shared_secret: AAA shared secret.
        :param pulumi.Input[str] access_point_name: Access point name(APN).
        :param pulumi.Input[str] admin: FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[str] at_dial_script: Initialization AT commands specific to the MODEM.
        :param pulumi.Input[str] authorized: FortiExtender Administration (enable or disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] bandwidth_limit: FortiExtender LAN extension bandwidth limit (Mbps).
        :param pulumi.Input[int] billing_start_day: Billing start day.
        :param pulumi.Input[str] cdma_aaa_spi: CDMA AAA SPI.
        :param pulumi.Input[str] cdma_ha_spi: CDMA HA SPI.
        :param pulumi.Input[str] cdma_nai: NAI for CDMA MODEMS.
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input['ExtenderControllerReportArgs'] controller_report: FortiExtender controller report configuration. The structure of `controller_report` block is documented below.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] device_id: device-id
        :param pulumi.Input[str] dial_mode: Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
        :param pulumi.Input[int] dial_status: Dial status.
        :param pulumi.Input[str] enforce_bandwidth: Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ext_name: FortiExtender name.
        :param pulumi.Input[str] extension_type: Extension type for this FortiExtender. Valid values: `wan-extension`, `lan-extension`.
        :param pulumi.Input[str] fosid: FortiExtender serial number.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_shared_secret: HA shared secret.
        :param pulumi.Input[str] ifname: FortiExtender interface name.
        :param pulumi.Input[str] initiated_update: Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] login_password: FortiExtender login password.
        :param pulumi.Input[str] login_password_change: Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        :param pulumi.Input[str] mode: FortiExtender mode. Valid values: `standalone`, `redundant`.
        :param pulumi.Input['ExtenderModem1Args'] modem1: Configuration options for modem 1. The structure of `modem1` block is documented below.
        :param pulumi.Input['ExtenderModem2Args'] modem2: Configuration options for modem 2. The structure of `modem2` block is documented below.
        :param pulumi.Input[str] modem_passwd: MODEM password.
        :param pulumi.Input[str] modem_type: MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
        :param pulumi.Input[str] multi_mode: MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
        :param pulumi.Input[str] name: FortiExtender entry name.
        :param pulumi.Input[str] override_allowaccess: Enable to override the extender profile management access configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_enforce_bandwidth: Enable to override the extender profile enforce-bandwidth setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_login_password_change: Enable to override the extender profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_auth_protocol: PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
        :param pulumi.Input[str] ppp_echo_request: Enable/disable PPP echo request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_password: PPP password.
        :param pulumi.Input[str] ppp_username: PPP username.
        :param pulumi.Input[str] primary_ha: Primary HA.
        :param pulumi.Input[str] profile: FortiExtender profile configuration.
        :param pulumi.Input[int] quota_limit_mb: Monthly quota limit (MB).
        :param pulumi.Input[str] redial: Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        :param pulumi.Input[str] roaming: Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] role: FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
        :param pulumi.Input[str] secondary_ha: Secondary HA.
        :param pulumi.Input[str] sim_pin: SIM PIN.
        :param pulumi.Input[int] vdom: VDOM
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input['ExtenderWanExtensionArgs'] wan_extension: FortiExtender wan extension configuration. The structure of `wan_extension` block is documented below.
        :param pulumi.Input[str] wimax_auth_protocol: WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
        :param pulumi.Input[str] wimax_carrier: WiMax carrier.
        :param pulumi.Input[str] wimax_realm: WiMax realm.
        """
        if aaa_shared_secret is not None:
            pulumi.set(__self__, "aaa_shared_secret", aaa_shared_secret)
        if access_point_name is not None:
            pulumi.set(__self__, "access_point_name", access_point_name)
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if at_dial_script is not None:
            pulumi.set(__self__, "at_dial_script", at_dial_script)
        if authorized is not None:
            pulumi.set(__self__, "authorized", authorized)
        if bandwidth_limit is not None:
            pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        if billing_start_day is not None:
            pulumi.set(__self__, "billing_start_day", billing_start_day)
        if cdma_aaa_spi is not None:
            pulumi.set(__self__, "cdma_aaa_spi", cdma_aaa_spi)
        if cdma_ha_spi is not None:
            pulumi.set(__self__, "cdma_ha_spi", cdma_ha_spi)
        if cdma_nai is not None:
            pulumi.set(__self__, "cdma_nai", cdma_nai)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if controller_report is not None:
            pulumi.set(__self__, "controller_report", controller_report)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if dial_mode is not None:
            pulumi.set(__self__, "dial_mode", dial_mode)
        if dial_status is not None:
            pulumi.set(__self__, "dial_status", dial_status)
        if enforce_bandwidth is not None:
            pulumi.set(__self__, "enforce_bandwidth", enforce_bandwidth)
        if ext_name is not None:
            pulumi.set(__self__, "ext_name", ext_name)
        if extension_type is not None:
            pulumi.set(__self__, "extension_type", extension_type)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_shared_secret is not None:
            pulumi.set(__self__, "ha_shared_secret", ha_shared_secret)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if initiated_update is not None:
            pulumi.set(__self__, "initiated_update", initiated_update)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if login_password_change is not None:
            pulumi.set(__self__, "login_password_change", login_password_change)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if modem1 is not None:
            pulumi.set(__self__, "modem1", modem1)
        if modem2 is not None:
            pulumi.set(__self__, "modem2", modem2)
        if modem_passwd is not None:
            pulumi.set(__self__, "modem_passwd", modem_passwd)
        if modem_type is not None:
            pulumi.set(__self__, "modem_type", modem_type)
        if multi_mode is not None:
            pulumi.set(__self__, "multi_mode", multi_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_allowaccess is not None:
            pulumi.set(__self__, "override_allowaccess", override_allowaccess)
        if override_enforce_bandwidth is not None:
            pulumi.set(__self__, "override_enforce_bandwidth", override_enforce_bandwidth)
        if override_login_password_change is not None:
            pulumi.set(__self__, "override_login_password_change", override_login_password_change)
        if ppp_auth_protocol is not None:
            pulumi.set(__self__, "ppp_auth_protocol", ppp_auth_protocol)
        if ppp_echo_request is not None:
            pulumi.set(__self__, "ppp_echo_request", ppp_echo_request)
        if ppp_password is not None:
            pulumi.set(__self__, "ppp_password", ppp_password)
        if ppp_username is not None:
            pulumi.set(__self__, "ppp_username", ppp_username)
        if primary_ha is not None:
            pulumi.set(__self__, "primary_ha", primary_ha)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if quota_limit_mb is not None:
            pulumi.set(__self__, "quota_limit_mb", quota_limit_mb)
        if redial is not None:
            pulumi.set(__self__, "redial", redial)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if roaming is not None:
            pulumi.set(__self__, "roaming", roaming)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secondary_ha is not None:
            pulumi.set(__self__, "secondary_ha", secondary_ha)
        if sim_pin is not None:
            pulumi.set(__self__, "sim_pin", sim_pin)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wan_extension is not None:
            pulumi.set(__self__, "wan_extension", wan_extension)
        if wimax_auth_protocol is not None:
            pulumi.set(__self__, "wimax_auth_protocol", wimax_auth_protocol)
        if wimax_carrier is not None:
            pulumi.set(__self__, "wimax_carrier", wimax_carrier)
        if wimax_realm is not None:
            pulumi.set(__self__, "wimax_realm", wimax_realm)

    @property
    @pulumi.getter(name="aaaSharedSecret")
    def aaa_shared_secret(self) -> Optional[pulumi.Input[str]]:
        """
        AAA shared secret.
        """
        return pulumi.get(self, "aaa_shared_secret")

    @aaa_shared_secret.setter
    def aaa_shared_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aaa_shared_secret", value)

    @property
    @pulumi.getter(name="accessPointName")
    def access_point_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access point name(APN).
        """
        return pulumi.get(self, "access_point_name")

    @access_point_name.setter
    def access_point_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_point_name", value)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
        """
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="atDialScript")
    def at_dial_script(self) -> Optional[pulumi.Input[str]]:
        """
        Initialization AT commands specific to the MODEM.
        """
        return pulumi.get(self, "at_dial_script")

    @at_dial_script.setter
    def at_dial_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "at_dial_script", value)

    @property
    @pulumi.getter
    def authorized(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender Administration (enable or disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "authorized")

    @authorized.setter
    def authorized(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorized", value)

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> Optional[pulumi.Input[int]]:
        """
        FortiExtender LAN extension bandwidth limit (Mbps).
        """
        return pulumi.get(self, "bandwidth_limit")

    @bandwidth_limit.setter
    def bandwidth_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_limit", value)

    @property
    @pulumi.getter(name="billingStartDay")
    def billing_start_day(self) -> Optional[pulumi.Input[int]]:
        """
        Billing start day.
        """
        return pulumi.get(self, "billing_start_day")

    @billing_start_day.setter
    def billing_start_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "billing_start_day", value)

    @property
    @pulumi.getter(name="cdmaAaaSpi")
    def cdma_aaa_spi(self) -> Optional[pulumi.Input[str]]:
        """
        CDMA AAA SPI.
        """
        return pulumi.get(self, "cdma_aaa_spi")

    @cdma_aaa_spi.setter
    def cdma_aaa_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdma_aaa_spi", value)

    @property
    @pulumi.getter(name="cdmaHaSpi")
    def cdma_ha_spi(self) -> Optional[pulumi.Input[str]]:
        """
        CDMA HA SPI.
        """
        return pulumi.get(self, "cdma_ha_spi")

    @cdma_ha_spi.setter
    def cdma_ha_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdma_ha_spi", value)

    @property
    @pulumi.getter(name="cdmaNai")
    def cdma_nai(self) -> Optional[pulumi.Input[str]]:
        """
        NAI for CDMA MODEMS.
        """
        return pulumi.get(self, "cdma_nai")

    @cdma_nai.setter
    def cdma_nai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdma_nai", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        Connection status.
        """
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> Optional[pulumi.Input['ExtenderControllerReportArgs']]:
        """
        FortiExtender controller report configuration. The structure of `controller_report` block is documented below.
        """
        return pulumi.get(self, "controller_report")

    @controller_report.setter
    def controller_report(self, value: Optional[pulumi.Input['ExtenderControllerReportArgs']]):
        pulumi.set(self, "controller_report", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[int]]:
        """
        device-id
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="dialMode")
    def dial_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
        """
        return pulumi.get(self, "dial_mode")

    @dial_mode.setter
    def dial_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_mode", value)

    @property
    @pulumi.getter(name="dialStatus")
    def dial_status(self) -> Optional[pulumi.Input[int]]:
        """
        Dial status.
        """
        return pulumi.get(self, "dial_status")

    @dial_status.setter
    def dial_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dial_status", value)

    @property
    @pulumi.getter(name="enforceBandwidth")
    def enforce_bandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enforce_bandwidth")

    @enforce_bandwidth.setter
    def enforce_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_bandwidth", value)

    @property
    @pulumi.getter(name="extName")
    def ext_name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender name.
        """
        return pulumi.get(self, "ext_name")

    @ext_name.setter
    def ext_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_name", value)

    @property
    @pulumi.getter(name="extensionType")
    def extension_type(self) -> Optional[pulumi.Input[str]]:
        """
        Extension type for this FortiExtender. Valid values: `wan-extension`, `lan-extension`.
        """
        return pulumi.get(self, "extension_type")

    @extension_type.setter
    def extension_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension_type", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender serial number.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haSharedSecret")
    def ha_shared_secret(self) -> Optional[pulumi.Input[str]]:
        """
        HA shared secret.
        """
        return pulumi.get(self, "ha_shared_secret")

    @ha_shared_secret.setter
    def ha_shared_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_shared_secret", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="initiatedUpdate")
    def initiated_update(self) -> Optional[pulumi.Input[str]]:
        """
        Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "initiated_update")

    @initiated_update.setter
    def initiated_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initiated_update", value)

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender login password.
        """
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password", value)

    @property
    @pulumi.getter(name="loginPasswordChange")
    def login_password_change(self) -> Optional[pulumi.Input[str]]:
        """
        Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        """
        return pulumi.get(self, "login_password_change")

    @login_password_change.setter
    def login_password_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password_change", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender mode. Valid values: `standalone`, `redundant`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def modem1(self) -> Optional[pulumi.Input['ExtenderModem1Args']]:
        """
        Configuration options for modem 1. The structure of `modem1` block is documented below.
        """
        return pulumi.get(self, "modem1")

    @modem1.setter
    def modem1(self, value: Optional[pulumi.Input['ExtenderModem1Args']]):
        pulumi.set(self, "modem1", value)

    @property
    @pulumi.getter
    def modem2(self) -> Optional[pulumi.Input['ExtenderModem2Args']]:
        """
        Configuration options for modem 2. The structure of `modem2` block is documented below.
        """
        return pulumi.get(self, "modem2")

    @modem2.setter
    def modem2(self, value: Optional[pulumi.Input['ExtenderModem2Args']]):
        pulumi.set(self, "modem2", value)

    @property
    @pulumi.getter(name="modemPasswd")
    def modem_passwd(self) -> Optional[pulumi.Input[str]]:
        """
        MODEM password.
        """
        return pulumi.get(self, "modem_passwd")

    @modem_passwd.setter
    def modem_passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem_passwd", value)

    @property
    @pulumi.getter(name="modemType")
    def modem_type(self) -> Optional[pulumi.Input[str]]:
        """
        MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
        """
        return pulumi.get(self, "modem_type")

    @modem_type.setter
    def modem_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem_type", value)

    @property
    @pulumi.getter(name="multiMode")
    def multi_mode(self) -> Optional[pulumi.Input[str]]:
        """
        MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
        """
        return pulumi.get(self, "multi_mode")

    @multi_mode.setter
    def multi_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideAllowaccess")
    def override_allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the extender profile management access configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_allowaccess")

    @override_allowaccess.setter
    def override_allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_allowaccess", value)

    @property
    @pulumi.getter(name="overrideEnforceBandwidth")
    def override_enforce_bandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the extender profile enforce-bandwidth setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_enforce_bandwidth")

    @override_enforce_bandwidth.setter
    def override_enforce_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_enforce_bandwidth", value)

    @property
    @pulumi.getter(name="overrideLoginPasswordChange")
    def override_login_password_change(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the extender profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_login_password_change")

    @override_login_password_change.setter
    def override_login_password_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_login_password_change", value)

    @property
    @pulumi.getter(name="pppAuthProtocol")
    def ppp_auth_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
        """
        return pulumi.get(self, "ppp_auth_protocol")

    @ppp_auth_protocol.setter
    def ppp_auth_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_auth_protocol", value)

    @property
    @pulumi.getter(name="pppEchoRequest")
    def ppp_echo_request(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPP echo request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request")

    @ppp_echo_request.setter
    def ppp_echo_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_echo_request", value)

    @property
    @pulumi.getter(name="pppPassword")
    def ppp_password(self) -> Optional[pulumi.Input[str]]:
        """
        PPP password.
        """
        return pulumi.get(self, "ppp_password")

    @ppp_password.setter
    def ppp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_password", value)

    @property
    @pulumi.getter(name="pppUsername")
    def ppp_username(self) -> Optional[pulumi.Input[str]]:
        """
        PPP username.
        """
        return pulumi.get(self, "ppp_username")

    @ppp_username.setter
    def ppp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_username", value)

    @property
    @pulumi.getter(name="primaryHa")
    def primary_ha(self) -> Optional[pulumi.Input[str]]:
        """
        Primary HA.
        """
        return pulumi.get(self, "primary_ha")

    @primary_ha.setter
    def primary_ha(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ha", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender profile configuration.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="quotaLimitMb")
    def quota_limit_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Monthly quota limit (MB).
        """
        return pulumi.get(self, "quota_limit_mb")

    @quota_limit_mb.setter
    def quota_limit_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quota_limit_mb", value)

    @property
    @pulumi.getter
    def redial(self) -> Optional[pulumi.Input[str]]:
        """
        Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        """
        return pulumi.get(self, "redial")

    @redial.setter
    def redial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redial", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter
    def roaming(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "roaming")

    @roaming.setter
    def roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roaming", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secondaryHa")
    def secondary_ha(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary HA.
        """
        return pulumi.get(self, "secondary_ha")

    @secondary_ha.setter
    def secondary_ha(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ha", value)

    @property
    @pulumi.getter(name="simPin")
    def sim_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM PIN.
        """
        return pulumi.get(self, "sim_pin")

    @sim_pin.setter
    def sim_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim_pin", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[int]]:
        """
        VDOM
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wanExtension")
    def wan_extension(self) -> Optional[pulumi.Input['ExtenderWanExtensionArgs']]:
        """
        FortiExtender wan extension configuration. The structure of `wan_extension` block is documented below.
        """
        return pulumi.get(self, "wan_extension")

    @wan_extension.setter
    def wan_extension(self, value: Optional[pulumi.Input['ExtenderWanExtensionArgs']]):
        pulumi.set(self, "wan_extension", value)

    @property
    @pulumi.getter(name="wimaxAuthProtocol")
    def wimax_auth_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
        """
        return pulumi.get(self, "wimax_auth_protocol")

    @wimax_auth_protocol.setter
    def wimax_auth_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wimax_auth_protocol", value)

    @property
    @pulumi.getter(name="wimaxCarrier")
    def wimax_carrier(self) -> Optional[pulumi.Input[str]]:
        """
        WiMax carrier.
        """
        return pulumi.get(self, "wimax_carrier")

    @wimax_carrier.setter
    def wimax_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wimax_carrier", value)

    @property
    @pulumi.getter(name="wimaxRealm")
    def wimax_realm(self) -> Optional[pulumi.Input[str]]:
        """
        WiMax realm.
        """
        return pulumi.get(self, "wimax_realm")

    @wimax_realm.setter
    def wimax_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wimax_realm", value)


class Extender(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aaa_shared_secret: Optional[pulumi.Input[str]] = None,
                 access_point_name: Optional[pulumi.Input[str]] = None,
                 admin: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 at_dial_script: Optional[pulumi.Input[str]] = None,
                 authorized: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 billing_start_day: Optional[pulumi.Input[int]] = None,
                 cdma_aaa_spi: Optional[pulumi.Input[str]] = None,
                 cdma_ha_spi: Optional[pulumi.Input[str]] = None,
                 cdma_nai: Optional[pulumi.Input[str]] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 controller_report: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerReportArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 dial_mode: Optional[pulumi.Input[str]] = None,
                 dial_status: Optional[pulumi.Input[int]] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 ext_name: Optional[pulumi.Input[str]] = None,
                 extension_type: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_shared_secret: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 initiated_update: Optional[pulumi.Input[str]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 modem1: Optional[pulumi.Input[pulumi.InputType['ExtenderModem1Args']]] = None,
                 modem2: Optional[pulumi.Input[pulumi.InputType['ExtenderModem2Args']]] = None,
                 modem_passwd: Optional[pulumi.Input[str]] = None,
                 modem_type: Optional[pulumi.Input[str]] = None,
                 multi_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_allowaccess: Optional[pulumi.Input[str]] = None,
                 override_enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 override_login_password_change: Optional[pulumi.Input[str]] = None,
                 ppp_auth_protocol: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request: Optional[pulumi.Input[str]] = None,
                 ppp_password: Optional[pulumi.Input[str]] = None,
                 ppp_username: Optional[pulumi.Input[str]] = None,
                 primary_ha: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 quota_limit_mb: Optional[pulumi.Input[int]] = None,
                 redial: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 roaming: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 secondary_ha: Optional[pulumi.Input[str]] = None,
                 sim_pin: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_extension: Optional[pulumi.Input[pulumi.InputType['ExtenderWanExtensionArgs']]] = None,
                 wimax_auth_protocol: Optional[pulumi.Input[str]] = None,
                 wimax_carrier: Optional[pulumi.Input[str]] = None,
                 wimax_realm: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Extender controller configuration.
        The resource applies to FortiOS Version < 7.2.1. For FortiOS version >= 7.2.1, see `extensioncontroller.Extender`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.extendercontroller.Extender("trname",
            admin="disable",
            billing_start_day=1,
            conn_status=0,
            dial_mode="always-connect",
            dial_status=0,
            ext_name="332",
            fosid="1",
            initiated_update="disable",
            mode="standalone",
            modem_type="gsm/lte",
            multi_mode="auto",
            ppp_auth_protocol="auto",
            ppp_echo_request="disable",
            quota_limit_mb=0,
            redial="none",
            roaming="disable",
            role="primary",
            vdom=0,
            wimax_auth_protocol="tls")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ExtenderController Extender can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:extendercontroller/extender:Extender labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:extendercontroller/extender:Extender labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aaa_shared_secret: AAA shared secret.
        :param pulumi.Input[str] access_point_name: Access point name(APN).
        :param pulumi.Input[str] admin: FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[str] at_dial_script: Initialization AT commands specific to the MODEM.
        :param pulumi.Input[str] authorized: FortiExtender Administration (enable or disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] bandwidth_limit: FortiExtender LAN extension bandwidth limit (Mbps).
        :param pulumi.Input[int] billing_start_day: Billing start day.
        :param pulumi.Input[str] cdma_aaa_spi: CDMA AAA SPI.
        :param pulumi.Input[str] cdma_ha_spi: CDMA HA SPI.
        :param pulumi.Input[str] cdma_nai: NAI for CDMA MODEMS.
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input[pulumi.InputType['ExtenderControllerReportArgs']] controller_report: FortiExtender controller report configuration. The structure of `controller_report` block is documented below.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] device_id: device-id
        :param pulumi.Input[str] dial_mode: Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
        :param pulumi.Input[int] dial_status: Dial status.
        :param pulumi.Input[str] enforce_bandwidth: Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ext_name: FortiExtender name.
        :param pulumi.Input[str] extension_type: Extension type for this FortiExtender. Valid values: `wan-extension`, `lan-extension`.
        :param pulumi.Input[str] fosid: FortiExtender serial number.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_shared_secret: HA shared secret.
        :param pulumi.Input[str] ifname: FortiExtender interface name.
        :param pulumi.Input[str] initiated_update: Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] login_password: FortiExtender login password.
        :param pulumi.Input[str] login_password_change: Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        :param pulumi.Input[str] mode: FortiExtender mode. Valid values: `standalone`, `redundant`.
        :param pulumi.Input[pulumi.InputType['ExtenderModem1Args']] modem1: Configuration options for modem 1. The structure of `modem1` block is documented below.
        :param pulumi.Input[pulumi.InputType['ExtenderModem2Args']] modem2: Configuration options for modem 2. The structure of `modem2` block is documented below.
        :param pulumi.Input[str] modem_passwd: MODEM password.
        :param pulumi.Input[str] modem_type: MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
        :param pulumi.Input[str] multi_mode: MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
        :param pulumi.Input[str] name: FortiExtender entry name.
        :param pulumi.Input[str] override_allowaccess: Enable to override the extender profile management access configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_enforce_bandwidth: Enable to override the extender profile enforce-bandwidth setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_login_password_change: Enable to override the extender profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_auth_protocol: PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
        :param pulumi.Input[str] ppp_echo_request: Enable/disable PPP echo request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_password: PPP password.
        :param pulumi.Input[str] ppp_username: PPP username.
        :param pulumi.Input[str] primary_ha: Primary HA.
        :param pulumi.Input[str] profile: FortiExtender profile configuration.
        :param pulumi.Input[int] quota_limit_mb: Monthly quota limit (MB).
        :param pulumi.Input[str] redial: Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        :param pulumi.Input[str] roaming: Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] role: FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
        :param pulumi.Input[str] secondary_ha: Secondary HA.
        :param pulumi.Input[str] sim_pin: SIM PIN.
        :param pulumi.Input[int] vdom: VDOM
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[pulumi.InputType['ExtenderWanExtensionArgs']] wan_extension: FortiExtender wan extension configuration. The structure of `wan_extension` block is documented below.
        :param pulumi.Input[str] wimax_auth_protocol: WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
        :param pulumi.Input[str] wimax_carrier: WiMax carrier.
        :param pulumi.Input[str] wimax_realm: WiMax realm.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExtenderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Extender controller configuration.
        The resource applies to FortiOS Version < 7.2.1. For FortiOS version >= 7.2.1, see `extensioncontroller.Extender`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.extendercontroller.Extender("trname",
            admin="disable",
            billing_start_day=1,
            conn_status=0,
            dial_mode="always-connect",
            dial_status=0,
            ext_name="332",
            fosid="1",
            initiated_update="disable",
            mode="standalone",
            modem_type="gsm/lte",
            multi_mode="auto",
            ppp_auth_protocol="auto",
            ppp_echo_request="disable",
            quota_limit_mb=0,
            redial="none",
            roaming="disable",
            role="primary",
            vdom=0,
            wimax_auth_protocol="tls")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ExtenderController Extender can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:extendercontroller/extender:Extender labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:extendercontroller/extender:Extender labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ExtenderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExtenderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aaa_shared_secret: Optional[pulumi.Input[str]] = None,
                 access_point_name: Optional[pulumi.Input[str]] = None,
                 admin: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 at_dial_script: Optional[pulumi.Input[str]] = None,
                 authorized: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 billing_start_day: Optional[pulumi.Input[int]] = None,
                 cdma_aaa_spi: Optional[pulumi.Input[str]] = None,
                 cdma_ha_spi: Optional[pulumi.Input[str]] = None,
                 cdma_nai: Optional[pulumi.Input[str]] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 controller_report: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerReportArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 dial_mode: Optional[pulumi.Input[str]] = None,
                 dial_status: Optional[pulumi.Input[int]] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 ext_name: Optional[pulumi.Input[str]] = None,
                 extension_type: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_shared_secret: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 initiated_update: Optional[pulumi.Input[str]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 modem1: Optional[pulumi.Input[pulumi.InputType['ExtenderModem1Args']]] = None,
                 modem2: Optional[pulumi.Input[pulumi.InputType['ExtenderModem2Args']]] = None,
                 modem_passwd: Optional[pulumi.Input[str]] = None,
                 modem_type: Optional[pulumi.Input[str]] = None,
                 multi_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_allowaccess: Optional[pulumi.Input[str]] = None,
                 override_enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 override_login_password_change: Optional[pulumi.Input[str]] = None,
                 ppp_auth_protocol: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request: Optional[pulumi.Input[str]] = None,
                 ppp_password: Optional[pulumi.Input[str]] = None,
                 ppp_username: Optional[pulumi.Input[str]] = None,
                 primary_ha: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 quota_limit_mb: Optional[pulumi.Input[int]] = None,
                 redial: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 roaming: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 secondary_ha: Optional[pulumi.Input[str]] = None,
                 sim_pin: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_extension: Optional[pulumi.Input[pulumi.InputType['ExtenderWanExtensionArgs']]] = None,
                 wimax_auth_protocol: Optional[pulumi.Input[str]] = None,
                 wimax_carrier: Optional[pulumi.Input[str]] = None,
                 wimax_realm: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExtenderArgs.__new__(ExtenderArgs)

            __props__.__dict__["aaa_shared_secret"] = None if aaa_shared_secret is None else pulumi.Output.secret(aaa_shared_secret)
            __props__.__dict__["access_point_name"] = access_point_name
            if admin is None and not opts.urn:
                raise TypeError("Missing required property 'admin'")
            __props__.__dict__["admin"] = admin
            __props__.__dict__["allowaccess"] = allowaccess
            __props__.__dict__["at_dial_script"] = at_dial_script
            __props__.__dict__["authorized"] = authorized
            __props__.__dict__["bandwidth_limit"] = bandwidth_limit
            __props__.__dict__["billing_start_day"] = billing_start_day
            __props__.__dict__["cdma_aaa_spi"] = cdma_aaa_spi
            __props__.__dict__["cdma_ha_spi"] = cdma_ha_spi
            __props__.__dict__["cdma_nai"] = cdma_nai
            __props__.__dict__["conn_status"] = conn_status
            __props__.__dict__["controller_report"] = controller_report
            __props__.__dict__["description"] = description
            __props__.__dict__["device_id"] = device_id
            __props__.__dict__["dial_mode"] = dial_mode
            __props__.__dict__["dial_status"] = dial_status
            __props__.__dict__["enforce_bandwidth"] = enforce_bandwidth
            __props__.__dict__["ext_name"] = ext_name
            __props__.__dict__["extension_type"] = extension_type
            if fosid is None and not opts.urn:
                raise TypeError("Missing required property 'fosid'")
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ha_shared_secret"] = None if ha_shared_secret is None else pulumi.Output.secret(ha_shared_secret)
            __props__.__dict__["ifname"] = ifname
            __props__.__dict__["initiated_update"] = initiated_update
            __props__.__dict__["login_password"] = login_password
            __props__.__dict__["login_password_change"] = login_password_change
            __props__.__dict__["mode"] = mode
            __props__.__dict__["modem1"] = modem1
            __props__.__dict__["modem2"] = modem2
            __props__.__dict__["modem_passwd"] = None if modem_passwd is None else pulumi.Output.secret(modem_passwd)
            __props__.__dict__["modem_type"] = modem_type
            __props__.__dict__["multi_mode"] = multi_mode
            __props__.__dict__["name"] = name
            __props__.__dict__["override_allowaccess"] = override_allowaccess
            __props__.__dict__["override_enforce_bandwidth"] = override_enforce_bandwidth
            __props__.__dict__["override_login_password_change"] = override_login_password_change
            __props__.__dict__["ppp_auth_protocol"] = ppp_auth_protocol
            __props__.__dict__["ppp_echo_request"] = ppp_echo_request
            __props__.__dict__["ppp_password"] = None if ppp_password is None else pulumi.Output.secret(ppp_password)
            __props__.__dict__["ppp_username"] = ppp_username
            __props__.__dict__["primary_ha"] = primary_ha
            __props__.__dict__["profile"] = profile
            __props__.__dict__["quota_limit_mb"] = quota_limit_mb
            __props__.__dict__["redial"] = redial
            __props__.__dict__["redundant_intf"] = redundant_intf
            __props__.__dict__["roaming"] = roaming
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
            __props__.__dict__["secondary_ha"] = secondary_ha
            __props__.__dict__["sim_pin"] = None if sim_pin is None else pulumi.Output.secret(sim_pin)
            __props__.__dict__["vdom"] = vdom
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wan_extension"] = wan_extension
            __props__.__dict__["wimax_auth_protocol"] = wimax_auth_protocol
            __props__.__dict__["wimax_carrier"] = wimax_carrier
            __props__.__dict__["wimax_realm"] = wimax_realm
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["aaaSharedSecret", "haSharedSecret", "modemPasswd", "pppPassword", "simPin"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Extender, __self__).__init__(
            'fortios:extendercontroller/extender:Extender',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aaa_shared_secret: Optional[pulumi.Input[str]] = None,
            access_point_name: Optional[pulumi.Input[str]] = None,
            admin: Optional[pulumi.Input[str]] = None,
            allowaccess: Optional[pulumi.Input[str]] = None,
            at_dial_script: Optional[pulumi.Input[str]] = None,
            authorized: Optional[pulumi.Input[str]] = None,
            bandwidth_limit: Optional[pulumi.Input[int]] = None,
            billing_start_day: Optional[pulumi.Input[int]] = None,
            cdma_aaa_spi: Optional[pulumi.Input[str]] = None,
            cdma_ha_spi: Optional[pulumi.Input[str]] = None,
            cdma_nai: Optional[pulumi.Input[str]] = None,
            conn_status: Optional[pulumi.Input[int]] = None,
            controller_report: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerReportArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device_id: Optional[pulumi.Input[int]] = None,
            dial_mode: Optional[pulumi.Input[str]] = None,
            dial_status: Optional[pulumi.Input[int]] = None,
            enforce_bandwidth: Optional[pulumi.Input[str]] = None,
            ext_name: Optional[pulumi.Input[str]] = None,
            extension_type: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ha_shared_secret: Optional[pulumi.Input[str]] = None,
            ifname: Optional[pulumi.Input[str]] = None,
            initiated_update: Optional[pulumi.Input[str]] = None,
            login_password: Optional[pulumi.Input[str]] = None,
            login_password_change: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            modem1: Optional[pulumi.Input[pulumi.InputType['ExtenderModem1Args']]] = None,
            modem2: Optional[pulumi.Input[pulumi.InputType['ExtenderModem2Args']]] = None,
            modem_passwd: Optional[pulumi.Input[str]] = None,
            modem_type: Optional[pulumi.Input[str]] = None,
            multi_mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            override_allowaccess: Optional[pulumi.Input[str]] = None,
            override_enforce_bandwidth: Optional[pulumi.Input[str]] = None,
            override_login_password_change: Optional[pulumi.Input[str]] = None,
            ppp_auth_protocol: Optional[pulumi.Input[str]] = None,
            ppp_echo_request: Optional[pulumi.Input[str]] = None,
            ppp_password: Optional[pulumi.Input[str]] = None,
            ppp_username: Optional[pulumi.Input[str]] = None,
            primary_ha: Optional[pulumi.Input[str]] = None,
            profile: Optional[pulumi.Input[str]] = None,
            quota_limit_mb: Optional[pulumi.Input[int]] = None,
            redial: Optional[pulumi.Input[str]] = None,
            redundant_intf: Optional[pulumi.Input[str]] = None,
            roaming: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            secondary_ha: Optional[pulumi.Input[str]] = None,
            sim_pin: Optional[pulumi.Input[str]] = None,
            vdom: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wan_extension: Optional[pulumi.Input[pulumi.InputType['ExtenderWanExtensionArgs']]] = None,
            wimax_auth_protocol: Optional[pulumi.Input[str]] = None,
            wimax_carrier: Optional[pulumi.Input[str]] = None,
            wimax_realm: Optional[pulumi.Input[str]] = None) -> 'Extender':
        """
        Get an existing Extender resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aaa_shared_secret: AAA shared secret.
        :param pulumi.Input[str] access_point_name: Access point name(APN).
        :param pulumi.Input[str] admin: FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[str] at_dial_script: Initialization AT commands specific to the MODEM.
        :param pulumi.Input[str] authorized: FortiExtender Administration (enable or disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] bandwidth_limit: FortiExtender LAN extension bandwidth limit (Mbps).
        :param pulumi.Input[int] billing_start_day: Billing start day.
        :param pulumi.Input[str] cdma_aaa_spi: CDMA AAA SPI.
        :param pulumi.Input[str] cdma_ha_spi: CDMA HA SPI.
        :param pulumi.Input[str] cdma_nai: NAI for CDMA MODEMS.
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input[pulumi.InputType['ExtenderControllerReportArgs']] controller_report: FortiExtender controller report configuration. The structure of `controller_report` block is documented below.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] device_id: device-id
        :param pulumi.Input[str] dial_mode: Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
        :param pulumi.Input[int] dial_status: Dial status.
        :param pulumi.Input[str] enforce_bandwidth: Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ext_name: FortiExtender name.
        :param pulumi.Input[str] extension_type: Extension type for this FortiExtender. Valid values: `wan-extension`, `lan-extension`.
        :param pulumi.Input[str] fosid: FortiExtender serial number.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_shared_secret: HA shared secret.
        :param pulumi.Input[str] ifname: FortiExtender interface name.
        :param pulumi.Input[str] initiated_update: Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] login_password: FortiExtender login password.
        :param pulumi.Input[str] login_password_change: Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        :param pulumi.Input[str] mode: FortiExtender mode. Valid values: `standalone`, `redundant`.
        :param pulumi.Input[pulumi.InputType['ExtenderModem1Args']] modem1: Configuration options for modem 1. The structure of `modem1` block is documented below.
        :param pulumi.Input[pulumi.InputType['ExtenderModem2Args']] modem2: Configuration options for modem 2. The structure of `modem2` block is documented below.
        :param pulumi.Input[str] modem_passwd: MODEM password.
        :param pulumi.Input[str] modem_type: MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
        :param pulumi.Input[str] multi_mode: MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
        :param pulumi.Input[str] name: FortiExtender entry name.
        :param pulumi.Input[str] override_allowaccess: Enable to override the extender profile management access configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_enforce_bandwidth: Enable to override the extender profile enforce-bandwidth setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_login_password_change: Enable to override the extender profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_auth_protocol: PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
        :param pulumi.Input[str] ppp_echo_request: Enable/disable PPP echo request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_password: PPP password.
        :param pulumi.Input[str] ppp_username: PPP username.
        :param pulumi.Input[str] primary_ha: Primary HA.
        :param pulumi.Input[str] profile: FortiExtender profile configuration.
        :param pulumi.Input[int] quota_limit_mb: Monthly quota limit (MB).
        :param pulumi.Input[str] redial: Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        :param pulumi.Input[str] roaming: Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] role: FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
        :param pulumi.Input[str] secondary_ha: Secondary HA.
        :param pulumi.Input[str] sim_pin: SIM PIN.
        :param pulumi.Input[int] vdom: VDOM
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[pulumi.InputType['ExtenderWanExtensionArgs']] wan_extension: FortiExtender wan extension configuration. The structure of `wan_extension` block is documented below.
        :param pulumi.Input[str] wimax_auth_protocol: WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
        :param pulumi.Input[str] wimax_carrier: WiMax carrier.
        :param pulumi.Input[str] wimax_realm: WiMax realm.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExtenderState.__new__(_ExtenderState)

        __props__.__dict__["aaa_shared_secret"] = aaa_shared_secret
        __props__.__dict__["access_point_name"] = access_point_name
        __props__.__dict__["admin"] = admin
        __props__.__dict__["allowaccess"] = allowaccess
        __props__.__dict__["at_dial_script"] = at_dial_script
        __props__.__dict__["authorized"] = authorized
        __props__.__dict__["bandwidth_limit"] = bandwidth_limit
        __props__.__dict__["billing_start_day"] = billing_start_day
        __props__.__dict__["cdma_aaa_spi"] = cdma_aaa_spi
        __props__.__dict__["cdma_ha_spi"] = cdma_ha_spi
        __props__.__dict__["cdma_nai"] = cdma_nai
        __props__.__dict__["conn_status"] = conn_status
        __props__.__dict__["controller_report"] = controller_report
        __props__.__dict__["description"] = description
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["dial_mode"] = dial_mode
        __props__.__dict__["dial_status"] = dial_status
        __props__.__dict__["enforce_bandwidth"] = enforce_bandwidth
        __props__.__dict__["ext_name"] = ext_name
        __props__.__dict__["extension_type"] = extension_type
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ha_shared_secret"] = ha_shared_secret
        __props__.__dict__["ifname"] = ifname
        __props__.__dict__["initiated_update"] = initiated_update
        __props__.__dict__["login_password"] = login_password
        __props__.__dict__["login_password_change"] = login_password_change
        __props__.__dict__["mode"] = mode
        __props__.__dict__["modem1"] = modem1
        __props__.__dict__["modem2"] = modem2
        __props__.__dict__["modem_passwd"] = modem_passwd
        __props__.__dict__["modem_type"] = modem_type
        __props__.__dict__["multi_mode"] = multi_mode
        __props__.__dict__["name"] = name
        __props__.__dict__["override_allowaccess"] = override_allowaccess
        __props__.__dict__["override_enforce_bandwidth"] = override_enforce_bandwidth
        __props__.__dict__["override_login_password_change"] = override_login_password_change
        __props__.__dict__["ppp_auth_protocol"] = ppp_auth_protocol
        __props__.__dict__["ppp_echo_request"] = ppp_echo_request
        __props__.__dict__["ppp_password"] = ppp_password
        __props__.__dict__["ppp_username"] = ppp_username
        __props__.__dict__["primary_ha"] = primary_ha
        __props__.__dict__["profile"] = profile
        __props__.__dict__["quota_limit_mb"] = quota_limit_mb
        __props__.__dict__["redial"] = redial
        __props__.__dict__["redundant_intf"] = redundant_intf
        __props__.__dict__["roaming"] = roaming
        __props__.__dict__["role"] = role
        __props__.__dict__["secondary_ha"] = secondary_ha
        __props__.__dict__["sim_pin"] = sim_pin
        __props__.__dict__["vdom"] = vdom
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wan_extension"] = wan_extension
        __props__.__dict__["wimax_auth_protocol"] = wimax_auth_protocol
        __props__.__dict__["wimax_carrier"] = wimax_carrier
        __props__.__dict__["wimax_realm"] = wimax_realm
        return Extender(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aaaSharedSecret")
    def aaa_shared_secret(self) -> pulumi.Output[Optional[str]]:
        """
        AAA shared secret.
        """
        return pulumi.get(self, "aaa_shared_secret")

    @property
    @pulumi.getter(name="accessPointName")
    def access_point_name(self) -> pulumi.Output[str]:
        """
        Access point name(APN).
        """
        return pulumi.get(self, "access_point_name")

    @property
    @pulumi.getter
    def admin(self) -> pulumi.Output[str]:
        """
        FortiExtender Administration (enable or disable). Valid values: `disable`, `discovered`, `enable`.
        """
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter
    def allowaccess(self) -> pulumi.Output[str]:
        """
        Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        """
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter(name="atDialScript")
    def at_dial_script(self) -> pulumi.Output[str]:
        """
        Initialization AT commands specific to the MODEM.
        """
        return pulumi.get(self, "at_dial_script")

    @property
    @pulumi.getter
    def authorized(self) -> pulumi.Output[str]:
        """
        FortiExtender Administration (enable or disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "authorized")

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> pulumi.Output[int]:
        """
        FortiExtender LAN extension bandwidth limit (Mbps).
        """
        return pulumi.get(self, "bandwidth_limit")

    @property
    @pulumi.getter(name="billingStartDay")
    def billing_start_day(self) -> pulumi.Output[int]:
        """
        Billing start day.
        """
        return pulumi.get(self, "billing_start_day")

    @property
    @pulumi.getter(name="cdmaAaaSpi")
    def cdma_aaa_spi(self) -> pulumi.Output[str]:
        """
        CDMA AAA SPI.
        """
        return pulumi.get(self, "cdma_aaa_spi")

    @property
    @pulumi.getter(name="cdmaHaSpi")
    def cdma_ha_spi(self) -> pulumi.Output[str]:
        """
        CDMA HA SPI.
        """
        return pulumi.get(self, "cdma_ha_spi")

    @property
    @pulumi.getter(name="cdmaNai")
    def cdma_nai(self) -> pulumi.Output[str]:
        """
        NAI for CDMA MODEMS.
        """
        return pulumi.get(self, "cdma_nai")

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> pulumi.Output[int]:
        """
        Connection status.
        """
        return pulumi.get(self, "conn_status")

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> pulumi.Output['outputs.ExtenderControllerReport']:
        """
        FortiExtender controller report configuration. The structure of `controller_report` block is documented below.
        """
        return pulumi.get(self, "controller_report")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[int]:
        """
        device-id
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="dialMode")
    def dial_mode(self) -> pulumi.Output[str]:
        """
        Dial mode (dial-on-demand or always-connect). Valid values: `dial-on-demand`, `always-connect`.
        """
        return pulumi.get(self, "dial_mode")

    @property
    @pulumi.getter(name="dialStatus")
    def dial_status(self) -> pulumi.Output[int]:
        """
        Dial status.
        """
        return pulumi.get(self, "dial_status")

    @property
    @pulumi.getter(name="enforceBandwidth")
    def enforce_bandwidth(self) -> pulumi.Output[str]:
        """
        Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enforce_bandwidth")

    @property
    @pulumi.getter(name="extName")
    def ext_name(self) -> pulumi.Output[str]:
        """
        FortiExtender name.
        """
        return pulumi.get(self, "ext_name")

    @property
    @pulumi.getter(name="extensionType")
    def extension_type(self) -> pulumi.Output[str]:
        """
        Extension type for this FortiExtender. Valid values: `wan-extension`, `lan-extension`.
        """
        return pulumi.get(self, "extension_type")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[str]:
        """
        FortiExtender serial number.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="haSharedSecret")
    def ha_shared_secret(self) -> pulumi.Output[Optional[str]]:
        """
        HA shared secret.
        """
        return pulumi.get(self, "ha_shared_secret")

    @property
    @pulumi.getter
    def ifname(self) -> pulumi.Output[str]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "ifname")

    @property
    @pulumi.getter(name="initiatedUpdate")
    def initiated_update(self) -> pulumi.Output[str]:
        """
        Allow/disallow network initiated updates to the MODEM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "initiated_update")

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> pulumi.Output[Optional[str]]:
        """
        FortiExtender login password.
        """
        return pulumi.get(self, "login_password")

    @property
    @pulumi.getter(name="loginPasswordChange")
    def login_password_change(self) -> pulumi.Output[str]:
        """
        Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        """
        return pulumi.get(self, "login_password_change")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        FortiExtender mode. Valid values: `standalone`, `redundant`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def modem1(self) -> pulumi.Output['outputs.ExtenderModem1']:
        """
        Configuration options for modem 1. The structure of `modem1` block is documented below.
        """
        return pulumi.get(self, "modem1")

    @property
    @pulumi.getter
    def modem2(self) -> pulumi.Output['outputs.ExtenderModem2']:
        """
        Configuration options for modem 2. The structure of `modem2` block is documented below.
        """
        return pulumi.get(self, "modem2")

    @property
    @pulumi.getter(name="modemPasswd")
    def modem_passwd(self) -> pulumi.Output[Optional[str]]:
        """
        MODEM password.
        """
        return pulumi.get(self, "modem_passwd")

    @property
    @pulumi.getter(name="modemType")
    def modem_type(self) -> pulumi.Output[str]:
        """
        MODEM type (CDMA, GSM/LTE or WIMAX). Valid values: `cdma`, `gsm/lte`, `wimax`.
        """
        return pulumi.get(self, "modem_type")

    @property
    @pulumi.getter(name="multiMode")
    def multi_mode(self) -> pulumi.Output[str]:
        """
        MODEM mode of operation(3G,LTE,etc). Valid values: `auto`, `auto-3g`, `force-lte`, `force-3g`, `force-2g`.
        """
        return pulumi.get(self, "multi_mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        FortiExtender entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideAllowaccess")
    def override_allowaccess(self) -> pulumi.Output[str]:
        """
        Enable to override the extender profile management access configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_allowaccess")

    @property
    @pulumi.getter(name="overrideEnforceBandwidth")
    def override_enforce_bandwidth(self) -> pulumi.Output[str]:
        """
        Enable to override the extender profile enforce-bandwidth setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_enforce_bandwidth")

    @property
    @pulumi.getter(name="overrideLoginPasswordChange")
    def override_login_password_change(self) -> pulumi.Output[str]:
        """
        Enable to override the extender profile login-password (administrator password) setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_login_password_change")

    @property
    @pulumi.getter(name="pppAuthProtocol")
    def ppp_auth_protocol(self) -> pulumi.Output[str]:
        """
        PPP authentication protocol (PAP,CHAP or auto). Valid values: `auto`, `pap`, `chap`.
        """
        return pulumi.get(self, "ppp_auth_protocol")

    @property
    @pulumi.getter(name="pppEchoRequest")
    def ppp_echo_request(self) -> pulumi.Output[str]:
        """
        Enable/disable PPP echo request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request")

    @property
    @pulumi.getter(name="pppPassword")
    def ppp_password(self) -> pulumi.Output[Optional[str]]:
        """
        PPP password.
        """
        return pulumi.get(self, "ppp_password")

    @property
    @pulumi.getter(name="pppUsername")
    def ppp_username(self) -> pulumi.Output[str]:
        """
        PPP username.
        """
        return pulumi.get(self, "ppp_username")

    @property
    @pulumi.getter(name="primaryHa")
    def primary_ha(self) -> pulumi.Output[str]:
        """
        Primary HA.
        """
        return pulumi.get(self, "primary_ha")

    @property
    @pulumi.getter
    def profile(self) -> pulumi.Output[str]:
        """
        FortiExtender profile configuration.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="quotaLimitMb")
    def quota_limit_mb(self) -> pulumi.Output[int]:
        """
        Monthly quota limit (MB).
        """
        return pulumi.get(self, "quota_limit_mb")

    @property
    @pulumi.getter
    def redial(self) -> pulumi.Output[str]:
        """
        Number of redials allowed based on failed attempts. Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        """
        return pulumi.get(self, "redial")

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> pulumi.Output[str]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_intf")

    @property
    @pulumi.getter
    def roaming(self) -> pulumi.Output[str]:
        """
        Enable/disable MODEM roaming. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "roaming")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        FortiExtender work role(Primary, Secondary, None). Valid values: `none`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secondaryHa")
    def secondary_ha(self) -> pulumi.Output[str]:
        """
        Secondary HA.
        """
        return pulumi.get(self, "secondary_ha")

    @property
    @pulumi.getter(name="simPin")
    def sim_pin(self) -> pulumi.Output[Optional[str]]:
        """
        SIM PIN.
        """
        return pulumi.get(self, "sim_pin")

    @property
    @pulumi.getter
    def vdom(self) -> pulumi.Output[int]:
        """
        VDOM
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="wanExtension")
    def wan_extension(self) -> pulumi.Output['outputs.ExtenderWanExtension']:
        """
        FortiExtender wan extension configuration. The structure of `wan_extension` block is documented below.
        """
        return pulumi.get(self, "wan_extension")

    @property
    @pulumi.getter(name="wimaxAuthProtocol")
    def wimax_auth_protocol(self) -> pulumi.Output[str]:
        """
        WiMax authentication protocol(TLS or TTLS). Valid values: `tls`, `ttls`.
        """
        return pulumi.get(self, "wimax_auth_protocol")

    @property
    @pulumi.getter(name="wimaxCarrier")
    def wimax_carrier(self) -> pulumi.Output[str]:
        """
        WiMax carrier.
        """
        return pulumi.get(self, "wimax_carrier")

    @property
    @pulumi.getter(name="wimaxRealm")
    def wimax_realm(self) -> pulumi.Output[str]:
        """
        WiMax realm.
        """
        return pulumi.get(self, "wimax_realm")

