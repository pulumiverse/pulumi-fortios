# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DataplanArgs', 'Dataplan']

@pulumi.input_type
class DataplanArgs:
    def __init__(__self__, *,
                 apn: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 billing_date: Optional[pulumi.Input[int]] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 carrier: Optional[pulumi.Input[str]] = None,
                 iccid: Optional[pulumi.Input[str]] = None,
                 modem_id: Optional[pulumi.Input[str]] = None,
                 monthly_fee: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overage: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pdn: Optional[pulumi.Input[str]] = None,
                 preferred_subnet: Optional[pulumi.Input[int]] = None,
                 private_network: Optional[pulumi.Input[str]] = None,
                 signal_period: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Dataplan resource.
        :param pulumi.Input[str] apn: APN configuration.
        :param pulumi.Input[str] auth_type: Authentication type. Valid values: `none`, `pap`, `chap`.
        :param pulumi.Input[int] billing_date: Billing day of the month (1 - 31).
        :param pulumi.Input[int] capacity: Capacity in MB (0 - 102400000).
        :param pulumi.Input[str] carrier: Carrier configuration.
        :param pulumi.Input[str] iccid: ICCID configuration.
        :param pulumi.Input[str] modem_id: Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
        :param pulumi.Input[int] monthly_fee: Monthly fee of dataplan (0 - 100000, in local currency).
        :param pulumi.Input[str] name: FortiExtender dataplan name
        :param pulumi.Input[str] overage: Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] pdn: PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
        :param pulumi.Input[int] preferred_subnet: Preferred subnet mask. On FortiOS versions 6.4.2-7.0.1: 8 - 32. On FortiOS versions 7.0.2-7.2.0: 0 - 32.
        :param pulumi.Input[str] private_network: Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] signal_period: Signal period (600 to 18000 seconds).
        :param pulumi.Input[int] signal_threshold: Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
        :param pulumi.Input[str] slot: SIM slot configuration. Valid values: `sim1`, `sim2`.
        :param pulumi.Input[str] type: Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if apn is not None:
            pulumi.set(__self__, "apn", apn)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if billing_date is not None:
            pulumi.set(__self__, "billing_date", billing_date)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if carrier is not None:
            pulumi.set(__self__, "carrier", carrier)
        if iccid is not None:
            pulumi.set(__self__, "iccid", iccid)
        if modem_id is not None:
            pulumi.set(__self__, "modem_id", modem_id)
        if monthly_fee is not None:
            pulumi.set(__self__, "monthly_fee", monthly_fee)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overage is not None:
            pulumi.set(__self__, "overage", overage)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pdn is not None:
            pulumi.set(__self__, "pdn", pdn)
        if preferred_subnet is not None:
            pulumi.set(__self__, "preferred_subnet", preferred_subnet)
        if private_network is not None:
            pulumi.set(__self__, "private_network", private_network)
        if signal_period is not None:
            pulumi.set(__self__, "signal_period", signal_period)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def apn(self) -> Optional[pulumi.Input[str]]:
        """
        APN configuration.
        """
        return pulumi.get(self, "apn")

    @apn.setter
    def apn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apn", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type. Valid values: `none`, `pap`, `chap`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="billingDate")
    def billing_date(self) -> Optional[pulumi.Input[int]]:
        """
        Billing day of the month (1 - 31).
        """
        return pulumi.get(self, "billing_date")

    @billing_date.setter
    def billing_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "billing_date", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity in MB (0 - 102400000).
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def carrier(self) -> Optional[pulumi.Input[str]]:
        """
        Carrier configuration.
        """
        return pulumi.get(self, "carrier")

    @carrier.setter
    def carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "carrier", value)

    @property
    @pulumi.getter
    def iccid(self) -> Optional[pulumi.Input[str]]:
        """
        ICCID configuration.
        """
        return pulumi.get(self, "iccid")

    @iccid.setter
    def iccid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iccid", value)

    @property
    @pulumi.getter(name="modemId")
    def modem_id(self) -> Optional[pulumi.Input[str]]:
        """
        Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
        """
        return pulumi.get(self, "modem_id")

    @modem_id.setter
    def modem_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem_id", value)

    @property
    @pulumi.getter(name="monthlyFee")
    def monthly_fee(self) -> Optional[pulumi.Input[int]]:
        """
        Monthly fee of dataplan (0 - 100000, in local currency).
        """
        return pulumi.get(self, "monthly_fee")

    @monthly_fee.setter
    def monthly_fee(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly_fee", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender dataplan name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def overage(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "overage")

    @overage.setter
    def overage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overage", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def pdn(self) -> Optional[pulumi.Input[str]]:
        """
        PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
        """
        return pulumi.get(self, "pdn")

    @pdn.setter
    def pdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdn", value)

    @property
    @pulumi.getter(name="preferredSubnet")
    def preferred_subnet(self) -> Optional[pulumi.Input[int]]:
        """
        Preferred subnet mask. On FortiOS versions 6.4.2-7.0.1: 8 - 32. On FortiOS versions 7.0.2-7.2.0: 0 - 32.
        """
        return pulumi.get(self, "preferred_subnet")

    @preferred_subnet.setter
    def preferred_subnet(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preferred_subnet", value)

    @property
    @pulumi.getter(name="privateNetwork")
    def private_network(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "private_network")

    @private_network.setter
    def private_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_network", value)

    @property
    @pulumi.getter(name="signalPeriod")
    def signal_period(self) -> Optional[pulumi.Input[int]]:
        """
        Signal period (600 to 18000 seconds).
        """
        return pulumi.get(self, "signal_period")

    @signal_period.setter
    def signal_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_period", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
        """
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        """
        SIM slot configuration. Valid values: `sim1`, `sim2`.
        """
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _DataplanState:
    def __init__(__self__, *,
                 apn: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 billing_date: Optional[pulumi.Input[int]] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 carrier: Optional[pulumi.Input[str]] = None,
                 iccid: Optional[pulumi.Input[str]] = None,
                 modem_id: Optional[pulumi.Input[str]] = None,
                 monthly_fee: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overage: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pdn: Optional[pulumi.Input[str]] = None,
                 preferred_subnet: Optional[pulumi.Input[int]] = None,
                 private_network: Optional[pulumi.Input[str]] = None,
                 signal_period: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Dataplan resources.
        :param pulumi.Input[str] apn: APN configuration.
        :param pulumi.Input[str] auth_type: Authentication type. Valid values: `none`, `pap`, `chap`.
        :param pulumi.Input[int] billing_date: Billing day of the month (1 - 31).
        :param pulumi.Input[int] capacity: Capacity in MB (0 - 102400000).
        :param pulumi.Input[str] carrier: Carrier configuration.
        :param pulumi.Input[str] iccid: ICCID configuration.
        :param pulumi.Input[str] modem_id: Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
        :param pulumi.Input[int] monthly_fee: Monthly fee of dataplan (0 - 100000, in local currency).
        :param pulumi.Input[str] name: FortiExtender dataplan name
        :param pulumi.Input[str] overage: Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] pdn: PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
        :param pulumi.Input[int] preferred_subnet: Preferred subnet mask. On FortiOS versions 6.4.2-7.0.1: 8 - 32. On FortiOS versions 7.0.2-7.2.0: 0 - 32.
        :param pulumi.Input[str] private_network: Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] signal_period: Signal period (600 to 18000 seconds).
        :param pulumi.Input[int] signal_threshold: Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
        :param pulumi.Input[str] slot: SIM slot configuration. Valid values: `sim1`, `sim2`.
        :param pulumi.Input[str] type: Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if apn is not None:
            pulumi.set(__self__, "apn", apn)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if billing_date is not None:
            pulumi.set(__self__, "billing_date", billing_date)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if carrier is not None:
            pulumi.set(__self__, "carrier", carrier)
        if iccid is not None:
            pulumi.set(__self__, "iccid", iccid)
        if modem_id is not None:
            pulumi.set(__self__, "modem_id", modem_id)
        if monthly_fee is not None:
            pulumi.set(__self__, "monthly_fee", monthly_fee)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overage is not None:
            pulumi.set(__self__, "overage", overage)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pdn is not None:
            pulumi.set(__self__, "pdn", pdn)
        if preferred_subnet is not None:
            pulumi.set(__self__, "preferred_subnet", preferred_subnet)
        if private_network is not None:
            pulumi.set(__self__, "private_network", private_network)
        if signal_period is not None:
            pulumi.set(__self__, "signal_period", signal_period)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def apn(self) -> Optional[pulumi.Input[str]]:
        """
        APN configuration.
        """
        return pulumi.get(self, "apn")

    @apn.setter
    def apn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apn", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type. Valid values: `none`, `pap`, `chap`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="billingDate")
    def billing_date(self) -> Optional[pulumi.Input[int]]:
        """
        Billing day of the month (1 - 31).
        """
        return pulumi.get(self, "billing_date")

    @billing_date.setter
    def billing_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "billing_date", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity in MB (0 - 102400000).
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def carrier(self) -> Optional[pulumi.Input[str]]:
        """
        Carrier configuration.
        """
        return pulumi.get(self, "carrier")

    @carrier.setter
    def carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "carrier", value)

    @property
    @pulumi.getter
    def iccid(self) -> Optional[pulumi.Input[str]]:
        """
        ICCID configuration.
        """
        return pulumi.get(self, "iccid")

    @iccid.setter
    def iccid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iccid", value)

    @property
    @pulumi.getter(name="modemId")
    def modem_id(self) -> Optional[pulumi.Input[str]]:
        """
        Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
        """
        return pulumi.get(self, "modem_id")

    @modem_id.setter
    def modem_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem_id", value)

    @property
    @pulumi.getter(name="monthlyFee")
    def monthly_fee(self) -> Optional[pulumi.Input[int]]:
        """
        Monthly fee of dataplan (0 - 100000, in local currency).
        """
        return pulumi.get(self, "monthly_fee")

    @monthly_fee.setter
    def monthly_fee(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly_fee", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender dataplan name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def overage(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "overage")

    @overage.setter
    def overage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overage", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def pdn(self) -> Optional[pulumi.Input[str]]:
        """
        PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
        """
        return pulumi.get(self, "pdn")

    @pdn.setter
    def pdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdn", value)

    @property
    @pulumi.getter(name="preferredSubnet")
    def preferred_subnet(self) -> Optional[pulumi.Input[int]]:
        """
        Preferred subnet mask. On FortiOS versions 6.4.2-7.0.1: 8 - 32. On FortiOS versions 7.0.2-7.2.0: 0 - 32.
        """
        return pulumi.get(self, "preferred_subnet")

    @preferred_subnet.setter
    def preferred_subnet(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preferred_subnet", value)

    @property
    @pulumi.getter(name="privateNetwork")
    def private_network(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "private_network")

    @private_network.setter
    def private_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_network", value)

    @property
    @pulumi.getter(name="signalPeriod")
    def signal_period(self) -> Optional[pulumi.Input[int]]:
        """
        Signal period (600 to 18000 seconds).
        """
        return pulumi.get(self, "signal_period")

    @signal_period.setter
    def signal_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_period", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
        """
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        """
        SIM slot configuration. Valid values: `sim1`, `sim2`.
        """
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Dataplan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apn: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 billing_date: Optional[pulumi.Input[int]] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 carrier: Optional[pulumi.Input[str]] = None,
                 iccid: Optional[pulumi.Input[str]] = None,
                 modem_id: Optional[pulumi.Input[str]] = None,
                 monthly_fee: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overage: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pdn: Optional[pulumi.Input[str]] = None,
                 preferred_subnet: Optional[pulumi.Input[int]] = None,
                 private_network: Optional[pulumi.Input[str]] = None,
                 signal_period: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        FortiExtender dataplan configuration. Applies to FortiOS Version `6.4.2,6.4.10,6.4.11,6.4.12,6.4.13,6.4.14,7.0.0,7.0.1,7.0.2,7.0.3,7.0.4,7.0.5,7.0.6,7.0.7,7.0.8,7.0.9,7.0.10,7.0.11,7.0.12,7.0.13,7.2.0`.

        ## Import

        ExtenderController Dataplan can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:extendercontroller/dataplan:Dataplan labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:extendercontroller/dataplan:Dataplan labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] apn: APN configuration.
        :param pulumi.Input[str] auth_type: Authentication type. Valid values: `none`, `pap`, `chap`.
        :param pulumi.Input[int] billing_date: Billing day of the month (1 - 31).
        :param pulumi.Input[int] capacity: Capacity in MB (0 - 102400000).
        :param pulumi.Input[str] carrier: Carrier configuration.
        :param pulumi.Input[str] iccid: ICCID configuration.
        :param pulumi.Input[str] modem_id: Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
        :param pulumi.Input[int] monthly_fee: Monthly fee of dataplan (0 - 100000, in local currency).
        :param pulumi.Input[str] name: FortiExtender dataplan name
        :param pulumi.Input[str] overage: Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] pdn: PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
        :param pulumi.Input[int] preferred_subnet: Preferred subnet mask. On FortiOS versions 6.4.2-7.0.1: 8 - 32. On FortiOS versions 7.0.2-7.2.0: 0 - 32.
        :param pulumi.Input[str] private_network: Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] signal_period: Signal period (600 to 18000 seconds).
        :param pulumi.Input[int] signal_threshold: Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
        :param pulumi.Input[str] slot: SIM slot configuration. Valid values: `sim1`, `sim2`.
        :param pulumi.Input[str] type: Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DataplanArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        FortiExtender dataplan configuration. Applies to FortiOS Version `6.4.2,6.4.10,6.4.11,6.4.12,6.4.13,6.4.14,7.0.0,7.0.1,7.0.2,7.0.3,7.0.4,7.0.5,7.0.6,7.0.7,7.0.8,7.0.9,7.0.10,7.0.11,7.0.12,7.0.13,7.2.0`.

        ## Import

        ExtenderController Dataplan can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:extendercontroller/dataplan:Dataplan labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:extendercontroller/dataplan:Dataplan labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param DataplanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataplanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apn: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 billing_date: Optional[pulumi.Input[int]] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 carrier: Optional[pulumi.Input[str]] = None,
                 iccid: Optional[pulumi.Input[str]] = None,
                 modem_id: Optional[pulumi.Input[str]] = None,
                 monthly_fee: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overage: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pdn: Optional[pulumi.Input[str]] = None,
                 preferred_subnet: Optional[pulumi.Input[int]] = None,
                 private_network: Optional[pulumi.Input[str]] = None,
                 signal_period: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataplanArgs.__new__(DataplanArgs)

            __props__.__dict__["apn"] = apn
            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["billing_date"] = billing_date
            __props__.__dict__["capacity"] = capacity
            __props__.__dict__["carrier"] = carrier
            __props__.__dict__["iccid"] = iccid
            __props__.__dict__["modem_id"] = modem_id
            __props__.__dict__["monthly_fee"] = monthly_fee
            __props__.__dict__["name"] = name
            __props__.__dict__["overage"] = overage
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["pdn"] = pdn
            __props__.__dict__["preferred_subnet"] = preferred_subnet
            __props__.__dict__["private_network"] = private_network
            __props__.__dict__["signal_period"] = signal_period
            __props__.__dict__["signal_threshold"] = signal_threshold
            __props__.__dict__["slot"] = slot
            __props__.__dict__["type"] = type
            __props__.__dict__["username"] = username
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Dataplan, __self__).__init__(
            'fortios:extendercontroller/dataplan:Dataplan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            apn: Optional[pulumi.Input[str]] = None,
            auth_type: Optional[pulumi.Input[str]] = None,
            billing_date: Optional[pulumi.Input[int]] = None,
            capacity: Optional[pulumi.Input[int]] = None,
            carrier: Optional[pulumi.Input[str]] = None,
            iccid: Optional[pulumi.Input[str]] = None,
            modem_id: Optional[pulumi.Input[str]] = None,
            monthly_fee: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            overage: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            pdn: Optional[pulumi.Input[str]] = None,
            preferred_subnet: Optional[pulumi.Input[int]] = None,
            private_network: Optional[pulumi.Input[str]] = None,
            signal_period: Optional[pulumi.Input[int]] = None,
            signal_threshold: Optional[pulumi.Input[int]] = None,
            slot: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Dataplan':
        """
        Get an existing Dataplan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] apn: APN configuration.
        :param pulumi.Input[str] auth_type: Authentication type. Valid values: `none`, `pap`, `chap`.
        :param pulumi.Input[int] billing_date: Billing day of the month (1 - 31).
        :param pulumi.Input[int] capacity: Capacity in MB (0 - 102400000).
        :param pulumi.Input[str] carrier: Carrier configuration.
        :param pulumi.Input[str] iccid: ICCID configuration.
        :param pulumi.Input[str] modem_id: Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
        :param pulumi.Input[int] monthly_fee: Monthly fee of dataplan (0 - 100000, in local currency).
        :param pulumi.Input[str] name: FortiExtender dataplan name
        :param pulumi.Input[str] overage: Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] pdn: PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
        :param pulumi.Input[int] preferred_subnet: Preferred subnet mask. On FortiOS versions 6.4.2-7.0.1: 8 - 32. On FortiOS versions 7.0.2-7.2.0: 0 - 32.
        :param pulumi.Input[str] private_network: Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] signal_period: Signal period (600 to 18000 seconds).
        :param pulumi.Input[int] signal_threshold: Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
        :param pulumi.Input[str] slot: SIM slot configuration. Valid values: `sim1`, `sim2`.
        :param pulumi.Input[str] type: Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataplanState.__new__(_DataplanState)

        __props__.__dict__["apn"] = apn
        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["billing_date"] = billing_date
        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["carrier"] = carrier
        __props__.__dict__["iccid"] = iccid
        __props__.__dict__["modem_id"] = modem_id
        __props__.__dict__["monthly_fee"] = monthly_fee
        __props__.__dict__["name"] = name
        __props__.__dict__["overage"] = overage
        __props__.__dict__["password"] = password
        __props__.__dict__["pdn"] = pdn
        __props__.__dict__["preferred_subnet"] = preferred_subnet
        __props__.__dict__["private_network"] = private_network
        __props__.__dict__["signal_period"] = signal_period
        __props__.__dict__["signal_threshold"] = signal_threshold
        __props__.__dict__["slot"] = slot
        __props__.__dict__["type"] = type
        __props__.__dict__["username"] = username
        __props__.__dict__["vdomparam"] = vdomparam
        return Dataplan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def apn(self) -> pulumi.Output[str]:
        """
        APN configuration.
        """
        return pulumi.get(self, "apn")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[str]:
        """
        Authentication type. Valid values: `none`, `pap`, `chap`.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="billingDate")
    def billing_date(self) -> pulumi.Output[int]:
        """
        Billing day of the month (1 - 31).
        """
        return pulumi.get(self, "billing_date")

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[int]:
        """
        Capacity in MB (0 - 102400000).
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def carrier(self) -> pulumi.Output[str]:
        """
        Carrier configuration.
        """
        return pulumi.get(self, "carrier")

    @property
    @pulumi.getter
    def iccid(self) -> pulumi.Output[str]:
        """
        ICCID configuration.
        """
        return pulumi.get(self, "iccid")

    @property
    @pulumi.getter(name="modemId")
    def modem_id(self) -> pulumi.Output[str]:
        """
        Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
        """
        return pulumi.get(self, "modem_id")

    @property
    @pulumi.getter(name="monthlyFee")
    def monthly_fee(self) -> pulumi.Output[int]:
        """
        Monthly fee of dataplan (0 - 100000, in local currency).
        """
        return pulumi.get(self, "monthly_fee")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        FortiExtender dataplan name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def overage(self) -> pulumi.Output[str]:
        """
        Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "overage")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def pdn(self) -> pulumi.Output[str]:
        """
        PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
        """
        return pulumi.get(self, "pdn")

    @property
    @pulumi.getter(name="preferredSubnet")
    def preferred_subnet(self) -> pulumi.Output[int]:
        """
        Preferred subnet mask. On FortiOS versions 6.4.2-7.0.1: 8 - 32. On FortiOS versions 7.0.2-7.2.0: 0 - 32.
        """
        return pulumi.get(self, "preferred_subnet")

    @property
    @pulumi.getter(name="privateNetwork")
    def private_network(self) -> pulumi.Output[str]:
        """
        Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "private_network")

    @property
    @pulumi.getter(name="signalPeriod")
    def signal_period(self) -> pulumi.Output[int]:
        """
        Signal period (600 to 18000 seconds).
        """
        return pulumi.get(self, "signal_period")

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> pulumi.Output[int]:
        """
        Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
        """
        return pulumi.get(self, "signal_threshold")

    @property
    @pulumi.getter
    def slot(self) -> pulumi.Output[str]:
        """
        SIM slot configuration. Valid values: `sim1`, `sim2`.
        """
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

