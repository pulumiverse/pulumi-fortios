# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'Extender1ControllerReportArgs',
    'Extender1Modem1Args',
    'Extender1Modem1AutoSwitchArgs',
    'Extender1Modem2Args',
    'Extender1Modem2AutoSwitchArgs',
    'ExtenderControllerReportArgs',
    'ExtenderModem1Args',
    'ExtenderModem1AutoSwitchArgs',
    'ExtenderModem2Args',
    'ExtenderModem2AutoSwitchArgs',
    'ExtenderWanExtensionArgs',
    'ExtenderprofileCellularArgs',
    'ExtenderprofileCellularControllerReportArgs',
    'ExtenderprofileCellularDataplanArgs',
    'ExtenderprofileCellularModem1Args',
    'ExtenderprofileCellularModem1AutoSwitchArgs',
    'ExtenderprofileCellularModem2Args',
    'ExtenderprofileCellularModem2AutoSwitchArgs',
    'ExtenderprofileCellularSmsNotificationArgs',
    'ExtenderprofileCellularSmsNotificationAlertArgs',
    'ExtenderprofileCellularSmsNotificationReceiverArgs',
    'ExtenderprofileLanExtensionArgs',
    'ExtenderprofileLanExtensionBackhaulArgs',
]

@pulumi.input_type
class Extender1ControllerReportArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] interval: Controller report interval.
        :param pulumi.Input[int] signal_threshold: Controller report signal threshold.
               
               The `modem1` block supports:
        :param pulumi.Input[str] status: FortiExtender controller report status. Valid values: `disable`, `enable`.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report signal threshold.

        The `modem1` block supports:
        """
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender controller report status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class Extender1Modem1Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['Extender1Modem1AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['Extender1Modem1AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['Extender1Modem1AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class Extender1Modem1AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class Extender1Modem2Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['Extender1Modem2AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['Extender1Modem2AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['Extender1Modem2AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class Extender1Modem2AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerReportArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] interval: Controller report interval.
        :param pulumi.Input[int] signal_threshold: Controller report signal threshold.
               
               The `modem1` block supports:
        :param pulumi.Input[str] status: FortiExtender controller report status. Valid values: `disable`, `enable`.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report signal threshold.

        The `modem1` block supports:
        """
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender controller report status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderModem1Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderModem1AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input[str] ifname: FortiExtender interface name.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        """
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderModem1AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderModem1AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        Connection status.
        """
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderModem1AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderModem2Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderModem2AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input[str] ifname: FortiExtender interface name.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        """
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderModem2AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderModem2AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        Connection status.
        """
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderModem2AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderWanExtensionArgs:
    def __init__(__self__, *,
                 modem1_extension: Optional[pulumi.Input[str]] = None,
                 modem2_extension: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] modem1_extension: FortiExtender interface name.
        :param pulumi.Input[str] modem2_extension: FortiExtender interface name.
        """
        if modem1_extension is not None:
            pulumi.set(__self__, "modem1_extension", modem1_extension)
        if modem2_extension is not None:
            pulumi.set(__self__, "modem2_extension", modem2_extension)

    @property
    @pulumi.getter(name="modem1Extension")
    def modem1_extension(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "modem1_extension")

    @modem1_extension.setter
    def modem1_extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem1_extension", value)

    @property
    @pulumi.getter(name="modem2Extension")
    def modem2_extension(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "modem2_extension")

    @modem2_extension.setter
    def modem2_extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem2_extension", value)


@pulumi.input_type
class ExtenderprofileCellularArgs:
    def __init__(__self__, *,
                 controller_report: Optional[pulumi.Input['ExtenderprofileCellularControllerReportArgs']] = None,
                 dataplans: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderprofileCellularDataplanArgs']]]] = None,
                 modem1: Optional[pulumi.Input['ExtenderprofileCellularModem1Args']] = None,
                 modem2: Optional[pulumi.Input['ExtenderprofileCellularModem2Args']] = None,
                 sms_notification: Optional[pulumi.Input['ExtenderprofileCellularSmsNotificationArgs']] = None):
        """
        :param pulumi.Input['ExtenderprofileCellularControllerReportArgs'] controller_report: FortiExtender controller report configuration. The structure of `controller_report` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ExtenderprofileCellularDataplanArgs']]] dataplans: Dataplan names. The structure of `dataplan` block is documented below.
        :param pulumi.Input['ExtenderprofileCellularModem1Args'] modem1: Configuration options for modem 1. The structure of `modem1` block is documented below.
        :param pulumi.Input['ExtenderprofileCellularModem2Args'] modem2: Configuration options for modem 2. The structure of `modem2` block is documented below.
        :param pulumi.Input['ExtenderprofileCellularSmsNotificationArgs'] sms_notification: FortiExtender cellular SMS notification configuration. The structure of `sms_notification` block is documented below.
        """
        if controller_report is not None:
            pulumi.set(__self__, "controller_report", controller_report)
        if dataplans is not None:
            pulumi.set(__self__, "dataplans", dataplans)
        if modem1 is not None:
            pulumi.set(__self__, "modem1", modem1)
        if modem2 is not None:
            pulumi.set(__self__, "modem2", modem2)
        if sms_notification is not None:
            pulumi.set(__self__, "sms_notification", sms_notification)

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> Optional[pulumi.Input['ExtenderprofileCellularControllerReportArgs']]:
        """
        FortiExtender controller report configuration. The structure of `controller_report` block is documented below.
        """
        return pulumi.get(self, "controller_report")

    @controller_report.setter
    def controller_report(self, value: Optional[pulumi.Input['ExtenderprofileCellularControllerReportArgs']]):
        pulumi.set(self, "controller_report", value)

    @property
    @pulumi.getter
    def dataplans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderprofileCellularDataplanArgs']]]]:
        """
        Dataplan names. The structure of `dataplan` block is documented below.
        """
        return pulumi.get(self, "dataplans")

    @dataplans.setter
    def dataplans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderprofileCellularDataplanArgs']]]]):
        pulumi.set(self, "dataplans", value)

    @property
    @pulumi.getter
    def modem1(self) -> Optional[pulumi.Input['ExtenderprofileCellularModem1Args']]:
        """
        Configuration options for modem 1. The structure of `modem1` block is documented below.
        """
        return pulumi.get(self, "modem1")

    @modem1.setter
    def modem1(self, value: Optional[pulumi.Input['ExtenderprofileCellularModem1Args']]):
        pulumi.set(self, "modem1", value)

    @property
    @pulumi.getter
    def modem2(self) -> Optional[pulumi.Input['ExtenderprofileCellularModem2Args']]:
        """
        Configuration options for modem 2. The structure of `modem2` block is documented below.
        """
        return pulumi.get(self, "modem2")

    @modem2.setter
    def modem2(self, value: Optional[pulumi.Input['ExtenderprofileCellularModem2Args']]):
        pulumi.set(self, "modem2", value)

    @property
    @pulumi.getter(name="smsNotification")
    def sms_notification(self) -> Optional[pulumi.Input['ExtenderprofileCellularSmsNotificationArgs']]:
        """
        FortiExtender cellular SMS notification configuration. The structure of `sms_notification` block is documented below.
        """
        return pulumi.get(self, "sms_notification")

    @sms_notification.setter
    def sms_notification(self, value: Optional[pulumi.Input['ExtenderprofileCellularSmsNotificationArgs']]):
        pulumi.set(self, "sms_notification", value)


@pulumi.input_type
class ExtenderprofileCellularControllerReportArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] interval: Controller report interval.
        :param pulumi.Input[int] signal_threshold: Controller report signal threshold.
        :param pulumi.Input[str] status: FortiExtender controller report status. Valid values: `disable`, `enable`.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report signal threshold.
        """
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender controller report status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderprofileCellularDataplanArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Dataplan name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Dataplan name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ExtenderprofileCellularModem1Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderprofileCellularModem1AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderprofileCellularModem1AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderprofileCellularModem1AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderprofileCellularModem1AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderprofileCellularModem2Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderprofileCellularModem2AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderprofileCellularModem2AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderprofileCellularModem2AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderprofileCellularModem2AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderprofileCellularSmsNotificationArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input['ExtenderprofileCellularSmsNotificationAlertArgs']] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderprofileCellularSmsNotificationReceiverArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ExtenderprofileCellularSmsNotificationAlertArgs'] alert: SMS alert list. The structure of `alert` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ExtenderprofileCellularSmsNotificationReceiverArgs']]] receivers: SMS notification receiver list. The structure of `receiver` block is documented below.
        :param pulumi.Input[str] status: FortiExtender SMS notification status. Valid values: `disable`, `enable`.
        """
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input['ExtenderprofileCellularSmsNotificationAlertArgs']]:
        """
        SMS alert list. The structure of `alert` block is documented below.
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input['ExtenderprofileCellularSmsNotificationAlertArgs']]):
        pulumi.set(self, "alert", value)

    @property
    @pulumi.getter
    def receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderprofileCellularSmsNotificationReceiverArgs']]]]:
        """
        SMS notification receiver list. The structure of `receiver` block is documented below.
        """
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderprofileCellularSmsNotificationReceiverArgs']]]]):
        pulumi.set(self, "receivers", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender SMS notification status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderprofileCellularSmsNotificationAlertArgs:
    def __init__(__self__, *,
                 data_exhausted: Optional[pulumi.Input[str]] = None,
                 fgt_backup_mode_switch: Optional[pulumi.Input[str]] = None,
                 low_signal_strength: Optional[pulumi.Input[str]] = None,
                 mode_switch: Optional[pulumi.Input[str]] = None,
                 os_image_fallback: Optional[pulumi.Input[str]] = None,
                 session_disconnect: Optional[pulumi.Input[str]] = None,
                 system_reboot: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_exhausted: Display string when data exhausted.
        :param pulumi.Input[str] fgt_backup_mode_switch: Display string when FortiGate backup mode switched.
        :param pulumi.Input[str] low_signal_strength: Display string when signal strength is low.
        :param pulumi.Input[str] mode_switch: Display string when mode is switched.
        :param pulumi.Input[str] os_image_fallback: Display string when falling back to a previous OS image.
        :param pulumi.Input[str] session_disconnect: Display string when session disconnected.
        :param pulumi.Input[str] system_reboot: Display string when system rebooted.
        """
        if data_exhausted is not None:
            pulumi.set(__self__, "data_exhausted", data_exhausted)
        if fgt_backup_mode_switch is not None:
            pulumi.set(__self__, "fgt_backup_mode_switch", fgt_backup_mode_switch)
        if low_signal_strength is not None:
            pulumi.set(__self__, "low_signal_strength", low_signal_strength)
        if mode_switch is not None:
            pulumi.set(__self__, "mode_switch", mode_switch)
        if os_image_fallback is not None:
            pulumi.set(__self__, "os_image_fallback", os_image_fallback)
        if session_disconnect is not None:
            pulumi.set(__self__, "session_disconnect", session_disconnect)
        if system_reboot is not None:
            pulumi.set(__self__, "system_reboot", system_reboot)

    @property
    @pulumi.getter(name="dataExhausted")
    def data_exhausted(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when data exhausted.
        """
        return pulumi.get(self, "data_exhausted")

    @data_exhausted.setter
    def data_exhausted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_exhausted", value)

    @property
    @pulumi.getter(name="fgtBackupModeSwitch")
    def fgt_backup_mode_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when FortiGate backup mode switched.
        """
        return pulumi.get(self, "fgt_backup_mode_switch")

    @fgt_backup_mode_switch.setter
    def fgt_backup_mode_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgt_backup_mode_switch", value)

    @property
    @pulumi.getter(name="lowSignalStrength")
    def low_signal_strength(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when signal strength is low.
        """
        return pulumi.get(self, "low_signal_strength")

    @low_signal_strength.setter
    def low_signal_strength(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "low_signal_strength", value)

    @property
    @pulumi.getter(name="modeSwitch")
    def mode_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when mode is switched.
        """
        return pulumi.get(self, "mode_switch")

    @mode_switch.setter
    def mode_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_switch", value)

    @property
    @pulumi.getter(name="osImageFallback")
    def os_image_fallback(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when falling back to a previous OS image.
        """
        return pulumi.get(self, "os_image_fallback")

    @os_image_fallback.setter
    def os_image_fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_image_fallback", value)

    @property
    @pulumi.getter(name="sessionDisconnect")
    def session_disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when session disconnected.
        """
        return pulumi.get(self, "session_disconnect")

    @session_disconnect.setter
    def session_disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_disconnect", value)

    @property
    @pulumi.getter(name="systemReboot")
    def system_reboot(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when system rebooted.
        """
        return pulumi.get(self, "system_reboot")

    @system_reboot.setter
    def system_reboot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_reboot", value)


@pulumi.input_type
class ExtenderprofileCellularSmsNotificationReceiverArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alert: Alert multi-options. Valid values: `system-reboot`, `data-exhausted`, `session-disconnect`, `low-signal-strength`, `mode-switch`, `os-image-fallback`, `fgt-backup-mode-switch`.
               
               The `modem1` block supports:
        :param pulumi.Input[str] name: FortiExtender SMS notification receiver name.
        :param pulumi.Input[str] phone_number: Receiver phone number.  Format: [+][country code][area code][local phone number].  For example: +16501234567.
        :param pulumi.Input[str] status: SMS notification receiver status. Valid values: `disable`, `enable`.
        """
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[str]]:
        """
        Alert multi-options. Valid values: `system-reboot`, `data-exhausted`, `session-disconnect`, `low-signal-strength`, `mode-switch`, `os-image-fallback`, `fgt-backup-mode-switch`.

        The `modem1` block supports:
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender SMS notification receiver name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input[str]]:
        """
        Receiver phone number.  Format: [+][country code][area code][local phone number].  For example: +16501234567.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        SMS notification receiver status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderprofileLanExtensionArgs:
    def __init__(__self__, *,
                 backhaul_interface: Optional[pulumi.Input[str]] = None,
                 backhaul_ip: Optional[pulumi.Input[str]] = None,
                 backhauls: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderprofileLanExtensionBackhaulArgs']]]] = None,
                 ipsec_tunnel: Optional[pulumi.Input[str]] = None,
                 link_loadbalance: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] backhaul_interface: IPsec phase1 interface.
        :param pulumi.Input[str] backhaul_ip: IPsec phase1 IPv4/FQDN. Used to specify the external IP/FQDN when the FortiGate unit is behind a NAT device.
        :param pulumi.Input[Sequence[pulumi.Input['ExtenderprofileLanExtensionBackhaulArgs']]] backhauls: LAN extension backhaul tunnel configuration. The structure of `backhaul` block is documented below.
        :param pulumi.Input[str] ipsec_tunnel: IPsec tunnel name.
        :param pulumi.Input[str] link_loadbalance: LAN extension link load balance strategy. Valid values: `activebackup`, `loadbalance`.
        """
        if backhaul_interface is not None:
            pulumi.set(__self__, "backhaul_interface", backhaul_interface)
        if backhaul_ip is not None:
            pulumi.set(__self__, "backhaul_ip", backhaul_ip)
        if backhauls is not None:
            pulumi.set(__self__, "backhauls", backhauls)
        if ipsec_tunnel is not None:
            pulumi.set(__self__, "ipsec_tunnel", ipsec_tunnel)
        if link_loadbalance is not None:
            pulumi.set(__self__, "link_loadbalance", link_loadbalance)

    @property
    @pulumi.getter(name="backhaulInterface")
    def backhaul_interface(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec phase1 interface.
        """
        return pulumi.get(self, "backhaul_interface")

    @backhaul_interface.setter
    def backhaul_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backhaul_interface", value)

    @property
    @pulumi.getter(name="backhaulIp")
    def backhaul_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec phase1 IPv4/FQDN. Used to specify the external IP/FQDN when the FortiGate unit is behind a NAT device.
        """
        return pulumi.get(self, "backhaul_ip")

    @backhaul_ip.setter
    def backhaul_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backhaul_ip", value)

    @property
    @pulumi.getter
    def backhauls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderprofileLanExtensionBackhaulArgs']]]]:
        """
        LAN extension backhaul tunnel configuration. The structure of `backhaul` block is documented below.
        """
        return pulumi.get(self, "backhauls")

    @backhauls.setter
    def backhauls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderprofileLanExtensionBackhaulArgs']]]]):
        pulumi.set(self, "backhauls", value)

    @property
    @pulumi.getter(name="ipsecTunnel")
    def ipsec_tunnel(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec tunnel name.
        """
        return pulumi.get(self, "ipsec_tunnel")

    @ipsec_tunnel.setter
    def ipsec_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_tunnel", value)

    @property
    @pulumi.getter(name="linkLoadbalance")
    def link_loadbalance(self) -> Optional[pulumi.Input[str]]:
        """
        LAN extension link load balance strategy. Valid values: `activebackup`, `loadbalance`.
        """
        return pulumi.get(self, "link_loadbalance")

    @link_loadbalance.setter
    def link_loadbalance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_loadbalance", value)


@pulumi.input_type
class ExtenderprofileLanExtensionBackhaulArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: FortiExtender LAN extension backhaul name
        :param pulumi.Input[str] port: FortiExtender uplink port. Valid values: `wan`, `lte1`, `lte2`, `port1`, `port2`, `port3`, `port4`, `port5`, `sfp`.
        :param pulumi.Input[str] role: FortiExtender uplink port. Valid values: `primary`, `secondary`.
        :param pulumi.Input[int] weight: WRR weight parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender LAN extension backhaul name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender uplink port. Valid values: `wan`, `lte1`, `lte2`, `port1`, `port2`, `port3`, `port4`, `port5`, `sfp`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender uplink port. Valid values: `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        WRR weight parameter
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


