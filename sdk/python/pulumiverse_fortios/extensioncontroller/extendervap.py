# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ExtendervapArgs', 'Extendervap']

@pulumi.input_type
class ExtendervapArgs:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 auth_server_address: Optional[pulumi.Input[str]] = None,
                 auth_server_port: Optional[pulumi.Input[int]] = None,
                 auth_server_secret: Optional[pulumi.Input[str]] = None,
                 broadcast_ssid: Optional[pulumi.Input[str]] = None,
                 bss_color_partial: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 mu_mimo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 pmf: Optional[pulumi.Input[str]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sae_password: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 target_wake_time: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Extendervap resource.
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[str] auth_server_address: Wi-Fi Authentication Server Address (IPv4 format).
        :param pulumi.Input[int] auth_server_port: Wi-Fi Authentication Server Port.
        :param pulumi.Input[str] auth_server_secret: Wi-Fi Authentication Server Secret.
        :param pulumi.Input[str] broadcast_ssid: Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] bss_color_partial: Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] dtim: Wi-Fi DTIM (1 - 255) default = 1.
        :param pulumi.Input[str] end_ip: End ip address.
        :param pulumi.Input[str] ip_address: Extender ip address.
        :param pulumi.Input[int] max_clients: Wi-Fi max clients (0 - 512), default = 0 (no limit)
        :param pulumi.Input[str] mu_mimo: Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Wi-Fi VAP name.
        :param pulumi.Input[str] passphrase: Wi-Fi passphrase.
        :param pulumi.Input[str] pmf: Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
        :param pulumi.Input[int] rts_threshold: Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
        :param pulumi.Input[str] sae_password: Wi-Fi SAE Password.
        :param pulumi.Input[str] security: Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
        :param pulumi.Input[str] ssid: Wi-Fi SSID.
        :param pulumi.Input[str] start_ip: Start ip address.
        :param pulumi.Input[str] target_wake_time: Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] type: Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if auth_server_address is not None:
            pulumi.set(__self__, "auth_server_address", auth_server_address)
        if auth_server_port is not None:
            pulumi.set(__self__, "auth_server_port", auth_server_port)
        if auth_server_secret is not None:
            pulumi.set(__self__, "auth_server_secret", auth_server_secret)
        if broadcast_ssid is not None:
            pulumi.set(__self__, "broadcast_ssid", broadcast_ssid)
        if bss_color_partial is not None:
            pulumi.set(__self__, "bss_color_partial", bss_color_partial)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if mu_mimo is not None:
            pulumi.set(__self__, "mu_mimo", mu_mimo)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pmf is not None:
            pulumi.set(__self__, "pmf", pmf)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sae_password is not None:
            pulumi.set(__self__, "sae_password", sae_password)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if ssid is not None:
            pulumi.set(__self__, "ssid", ssid)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if target_wake_time is not None:
            pulumi.set(__self__, "target_wake_time", target_wake_time)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="authServerAddress")
    def auth_server_address(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi Authentication Server Address (IPv4 format).
        """
        return pulumi.get(self, "auth_server_address")

    @auth_server_address.setter
    def auth_server_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_server_address", value)

    @property
    @pulumi.getter(name="authServerPort")
    def auth_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Wi-Fi Authentication Server Port.
        """
        return pulumi.get(self, "auth_server_port")

    @auth_server_port.setter
    def auth_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_server_port", value)

    @property
    @pulumi.getter(name="authServerSecret")
    def auth_server_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi Authentication Server Secret.
        """
        return pulumi.get(self, "auth_server_secret")

    @auth_server_secret.setter
    def auth_server_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_server_secret", value)

    @property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "broadcast_ssid")

    @broadcast_ssid.setter
    def broadcast_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast_ssid", value)

    @property
    @pulumi.getter(name="bssColorPartial")
    def bss_color_partial(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "bss_color_partial")

    @bss_color_partial.setter
    def bss_color_partial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_partial", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        """
        Wi-Fi DTIM (1 - 255) default = 1.
        """
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End ip address.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Extender ip address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Wi-Fi max clients (0 - 512), default = 0 (no limit)
        """
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="muMimo")
    def mu_mimo(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mu_mimo")

    @mu_mimo.setter
    def mu_mimo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mu_mimo", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi VAP name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi passphrase.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter
    def pmf(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
        """
        return pulumi.get(self, "pmf")

    @pmf.setter
    def pmf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pmf", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
        """
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="saePassword")
    def sae_password(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi SAE Password.
        """
        return pulumi.get(self, "sae_password")

    @sae_password.setter
    def sae_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_password", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter
    def ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi SSID.
        """
        return pulumi.get(self, "ssid")

    @ssid.setter
    def ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start ip address.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter(name="targetWakeTime")
    def target_wake_time(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "target_wake_time")

    @target_wake_time.setter
    def target_wake_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_wake_time", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ExtendervapState:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 auth_server_address: Optional[pulumi.Input[str]] = None,
                 auth_server_port: Optional[pulumi.Input[int]] = None,
                 auth_server_secret: Optional[pulumi.Input[str]] = None,
                 broadcast_ssid: Optional[pulumi.Input[str]] = None,
                 bss_color_partial: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 mu_mimo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 pmf: Optional[pulumi.Input[str]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sae_password: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 target_wake_time: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Extendervap resources.
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[str] auth_server_address: Wi-Fi Authentication Server Address (IPv4 format).
        :param pulumi.Input[int] auth_server_port: Wi-Fi Authentication Server Port.
        :param pulumi.Input[str] auth_server_secret: Wi-Fi Authentication Server Secret.
        :param pulumi.Input[str] broadcast_ssid: Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] bss_color_partial: Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] dtim: Wi-Fi DTIM (1 - 255) default = 1.
        :param pulumi.Input[str] end_ip: End ip address.
        :param pulumi.Input[str] ip_address: Extender ip address.
        :param pulumi.Input[int] max_clients: Wi-Fi max clients (0 - 512), default = 0 (no limit)
        :param pulumi.Input[str] mu_mimo: Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Wi-Fi VAP name.
        :param pulumi.Input[str] passphrase: Wi-Fi passphrase.
        :param pulumi.Input[str] pmf: Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
        :param pulumi.Input[int] rts_threshold: Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
        :param pulumi.Input[str] sae_password: Wi-Fi SAE Password.
        :param pulumi.Input[str] security: Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
        :param pulumi.Input[str] ssid: Wi-Fi SSID.
        :param pulumi.Input[str] start_ip: Start ip address.
        :param pulumi.Input[str] target_wake_time: Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] type: Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if auth_server_address is not None:
            pulumi.set(__self__, "auth_server_address", auth_server_address)
        if auth_server_port is not None:
            pulumi.set(__self__, "auth_server_port", auth_server_port)
        if auth_server_secret is not None:
            pulumi.set(__self__, "auth_server_secret", auth_server_secret)
        if broadcast_ssid is not None:
            pulumi.set(__self__, "broadcast_ssid", broadcast_ssid)
        if bss_color_partial is not None:
            pulumi.set(__self__, "bss_color_partial", bss_color_partial)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if mu_mimo is not None:
            pulumi.set(__self__, "mu_mimo", mu_mimo)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pmf is not None:
            pulumi.set(__self__, "pmf", pmf)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sae_password is not None:
            pulumi.set(__self__, "sae_password", sae_password)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if ssid is not None:
            pulumi.set(__self__, "ssid", ssid)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if target_wake_time is not None:
            pulumi.set(__self__, "target_wake_time", target_wake_time)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="authServerAddress")
    def auth_server_address(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi Authentication Server Address (IPv4 format).
        """
        return pulumi.get(self, "auth_server_address")

    @auth_server_address.setter
    def auth_server_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_server_address", value)

    @property
    @pulumi.getter(name="authServerPort")
    def auth_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Wi-Fi Authentication Server Port.
        """
        return pulumi.get(self, "auth_server_port")

    @auth_server_port.setter
    def auth_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_server_port", value)

    @property
    @pulumi.getter(name="authServerSecret")
    def auth_server_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi Authentication Server Secret.
        """
        return pulumi.get(self, "auth_server_secret")

    @auth_server_secret.setter
    def auth_server_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_server_secret", value)

    @property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "broadcast_ssid")

    @broadcast_ssid.setter
    def broadcast_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast_ssid", value)

    @property
    @pulumi.getter(name="bssColorPartial")
    def bss_color_partial(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "bss_color_partial")

    @bss_color_partial.setter
    def bss_color_partial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_partial", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        """
        Wi-Fi DTIM (1 - 255) default = 1.
        """
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End ip address.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Extender ip address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Wi-Fi max clients (0 - 512), default = 0 (no limit)
        """
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="muMimo")
    def mu_mimo(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mu_mimo")

    @mu_mimo.setter
    def mu_mimo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mu_mimo", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi VAP name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi passphrase.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter
    def pmf(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
        """
        return pulumi.get(self, "pmf")

    @pmf.setter
    def pmf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pmf", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
        """
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="saePassword")
    def sae_password(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi SAE Password.
        """
        return pulumi.get(self, "sae_password")

    @sae_password.setter
    def sae_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_password", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter
    def ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi SSID.
        """
        return pulumi.get(self, "ssid")

    @ssid.setter
    def ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start ip address.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter(name="targetWakeTime")
    def target_wake_time(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "target_wake_time")

    @target_wake_time.setter
    def target_wake_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_wake_time", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Extendervap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 auth_server_address: Optional[pulumi.Input[str]] = None,
                 auth_server_port: Optional[pulumi.Input[int]] = None,
                 auth_server_secret: Optional[pulumi.Input[str]] = None,
                 broadcast_ssid: Optional[pulumi.Input[str]] = None,
                 bss_color_partial: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 mu_mimo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 pmf: Optional[pulumi.Input[str]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sae_password: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 target_wake_time: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        FortiExtender wifi vap configuration. Applies to FortiOS Version `>= 7.4.4`.

        ## Import

        ExtensionController ExtenderVap can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:extensioncontroller/extendervap:Extendervap labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:extensioncontroller/extendervap:Extendervap labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[str] auth_server_address: Wi-Fi Authentication Server Address (IPv4 format).
        :param pulumi.Input[int] auth_server_port: Wi-Fi Authentication Server Port.
        :param pulumi.Input[str] auth_server_secret: Wi-Fi Authentication Server Secret.
        :param pulumi.Input[str] broadcast_ssid: Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] bss_color_partial: Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] dtim: Wi-Fi DTIM (1 - 255) default = 1.
        :param pulumi.Input[str] end_ip: End ip address.
        :param pulumi.Input[str] ip_address: Extender ip address.
        :param pulumi.Input[int] max_clients: Wi-Fi max clients (0 - 512), default = 0 (no limit)
        :param pulumi.Input[str] mu_mimo: Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Wi-Fi VAP name.
        :param pulumi.Input[str] passphrase: Wi-Fi passphrase.
        :param pulumi.Input[str] pmf: Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
        :param pulumi.Input[int] rts_threshold: Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
        :param pulumi.Input[str] sae_password: Wi-Fi SAE Password.
        :param pulumi.Input[str] security: Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
        :param pulumi.Input[str] ssid: Wi-Fi SSID.
        :param pulumi.Input[str] start_ip: Start ip address.
        :param pulumi.Input[str] target_wake_time: Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] type: Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ExtendervapArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        FortiExtender wifi vap configuration. Applies to FortiOS Version `>= 7.4.4`.

        ## Import

        ExtensionController ExtenderVap can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:extensioncontroller/extendervap:Extendervap labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:extensioncontroller/extendervap:Extendervap labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ExtendervapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExtendervapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 auth_server_address: Optional[pulumi.Input[str]] = None,
                 auth_server_port: Optional[pulumi.Input[int]] = None,
                 auth_server_secret: Optional[pulumi.Input[str]] = None,
                 broadcast_ssid: Optional[pulumi.Input[str]] = None,
                 bss_color_partial: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 mu_mimo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 pmf: Optional[pulumi.Input[str]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sae_password: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 target_wake_time: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExtendervapArgs.__new__(ExtendervapArgs)

            __props__.__dict__["allowaccess"] = allowaccess
            __props__.__dict__["auth_server_address"] = auth_server_address
            __props__.__dict__["auth_server_port"] = auth_server_port
            __props__.__dict__["auth_server_secret"] = auth_server_secret
            __props__.__dict__["broadcast_ssid"] = broadcast_ssid
            __props__.__dict__["bss_color_partial"] = bss_color_partial
            __props__.__dict__["dtim"] = dtim
            __props__.__dict__["end_ip"] = end_ip
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["max_clients"] = max_clients
            __props__.__dict__["mu_mimo"] = mu_mimo
            __props__.__dict__["name"] = name
            __props__.__dict__["passphrase"] = passphrase
            __props__.__dict__["pmf"] = pmf
            __props__.__dict__["rts_threshold"] = rts_threshold
            __props__.__dict__["sae_password"] = sae_password
            __props__.__dict__["security"] = security
            __props__.__dict__["ssid"] = ssid
            __props__.__dict__["start_ip"] = start_ip
            __props__.__dict__["target_wake_time"] = target_wake_time
            __props__.__dict__["type"] = type
            __props__.__dict__["vdomparam"] = vdomparam
        super(Extendervap, __self__).__init__(
            'fortios:extensioncontroller/extendervap:Extendervap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowaccess: Optional[pulumi.Input[str]] = None,
            auth_server_address: Optional[pulumi.Input[str]] = None,
            auth_server_port: Optional[pulumi.Input[int]] = None,
            auth_server_secret: Optional[pulumi.Input[str]] = None,
            broadcast_ssid: Optional[pulumi.Input[str]] = None,
            bss_color_partial: Optional[pulumi.Input[str]] = None,
            dtim: Optional[pulumi.Input[int]] = None,
            end_ip: Optional[pulumi.Input[str]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            max_clients: Optional[pulumi.Input[int]] = None,
            mu_mimo: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            passphrase: Optional[pulumi.Input[str]] = None,
            pmf: Optional[pulumi.Input[str]] = None,
            rts_threshold: Optional[pulumi.Input[int]] = None,
            sae_password: Optional[pulumi.Input[str]] = None,
            security: Optional[pulumi.Input[str]] = None,
            ssid: Optional[pulumi.Input[str]] = None,
            start_ip: Optional[pulumi.Input[str]] = None,
            target_wake_time: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Extendervap':
        """
        Get an existing Extendervap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[str] auth_server_address: Wi-Fi Authentication Server Address (IPv4 format).
        :param pulumi.Input[int] auth_server_port: Wi-Fi Authentication Server Port.
        :param pulumi.Input[str] auth_server_secret: Wi-Fi Authentication Server Secret.
        :param pulumi.Input[str] broadcast_ssid: Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] bss_color_partial: Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] dtim: Wi-Fi DTIM (1 - 255) default = 1.
        :param pulumi.Input[str] end_ip: End ip address.
        :param pulumi.Input[str] ip_address: Extender ip address.
        :param pulumi.Input[int] max_clients: Wi-Fi max clients (0 - 512), default = 0 (no limit)
        :param pulumi.Input[str] mu_mimo: Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Wi-Fi VAP name.
        :param pulumi.Input[str] passphrase: Wi-Fi passphrase.
        :param pulumi.Input[str] pmf: Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
        :param pulumi.Input[int] rts_threshold: Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
        :param pulumi.Input[str] sae_password: Wi-Fi SAE Password.
        :param pulumi.Input[str] security: Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
        :param pulumi.Input[str] ssid: Wi-Fi SSID.
        :param pulumi.Input[str] start_ip: Start ip address.
        :param pulumi.Input[str] target_wake_time: Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] type: Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExtendervapState.__new__(_ExtendervapState)

        __props__.__dict__["allowaccess"] = allowaccess
        __props__.__dict__["auth_server_address"] = auth_server_address
        __props__.__dict__["auth_server_port"] = auth_server_port
        __props__.__dict__["auth_server_secret"] = auth_server_secret
        __props__.__dict__["broadcast_ssid"] = broadcast_ssid
        __props__.__dict__["bss_color_partial"] = bss_color_partial
        __props__.__dict__["dtim"] = dtim
        __props__.__dict__["end_ip"] = end_ip
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["max_clients"] = max_clients
        __props__.__dict__["mu_mimo"] = mu_mimo
        __props__.__dict__["name"] = name
        __props__.__dict__["passphrase"] = passphrase
        __props__.__dict__["pmf"] = pmf
        __props__.__dict__["rts_threshold"] = rts_threshold
        __props__.__dict__["sae_password"] = sae_password
        __props__.__dict__["security"] = security
        __props__.__dict__["ssid"] = ssid
        __props__.__dict__["start_ip"] = start_ip
        __props__.__dict__["target_wake_time"] = target_wake_time
        __props__.__dict__["type"] = type
        __props__.__dict__["vdomparam"] = vdomparam
        return Extendervap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def allowaccess(self) -> pulumi.Output[str]:
        """
        Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        """
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter(name="authServerAddress")
    def auth_server_address(self) -> pulumi.Output[str]:
        """
        Wi-Fi Authentication Server Address (IPv4 format).
        """
        return pulumi.get(self, "auth_server_address")

    @property
    @pulumi.getter(name="authServerPort")
    def auth_server_port(self) -> pulumi.Output[int]:
        """
        Wi-Fi Authentication Server Port.
        """
        return pulumi.get(self, "auth_server_port")

    @property
    @pulumi.getter(name="authServerSecret")
    def auth_server_secret(self) -> pulumi.Output[str]:
        """
        Wi-Fi Authentication Server Secret.
        """
        return pulumi.get(self, "auth_server_secret")

    @property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> pulumi.Output[str]:
        """
        Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "broadcast_ssid")

    @property
    @pulumi.getter(name="bssColorPartial")
    def bss_color_partial(self) -> pulumi.Output[str]:
        """
        Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "bss_color_partial")

    @property
    @pulumi.getter
    def dtim(self) -> pulumi.Output[int]:
        """
        Wi-Fi DTIM (1 - 255) default = 1.
        """
        return pulumi.get(self, "dtim")

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> pulumi.Output[str]:
        """
        End ip address.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        """
        Extender ip address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> pulumi.Output[int]:
        """
        Wi-Fi max clients (0 - 512), default = 0 (no limit)
        """
        return pulumi.get(self, "max_clients")

    @property
    @pulumi.getter(name="muMimo")
    def mu_mimo(self) -> pulumi.Output[str]:
        """
        Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mu_mimo")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Wi-Fi VAP name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def passphrase(self) -> pulumi.Output[Optional[str]]:
        """
        Wi-Fi passphrase.
        """
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter
    def pmf(self) -> pulumi.Output[str]:
        """
        Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
        """
        return pulumi.get(self, "pmf")

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> pulumi.Output[int]:
        """
        Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
        """
        return pulumi.get(self, "rts_threshold")

    @property
    @pulumi.getter(name="saePassword")
    def sae_password(self) -> pulumi.Output[Optional[str]]:
        """
        Wi-Fi SAE Password.
        """
        return pulumi.get(self, "sae_password")

    @property
    @pulumi.getter
    def security(self) -> pulumi.Output[str]:
        """
        Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter
    def ssid(self) -> pulumi.Output[str]:
        """
        Wi-Fi SSID.
        """
        return pulumi.get(self, "ssid")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> pulumi.Output[str]:
        """
        Start ip address.
        """
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter(name="targetWakeTime")
    def target_wake_time(self) -> pulumi.Output[str]:
        """
        Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "target_wake_time")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

