# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DictionaryEntry',
    'ExactdatamatchColumn',
    'FilepatternEntry',
    'ProfileRule',
    'ProfileRuleSensitivity',
    'ProfileRuleSensor',
    'SensorEntry',
    'SensorFilter',
    'SensorFilterFpSensitivity',
    'SensorFilterSensitivity',
]

@pulumi.output_type
class DictionaryEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreCase":
            suggest = "ignore_case"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DictionaryEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DictionaryEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DictionaryEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 id: Optional[int] = None,
                 ignore_case: Optional[str] = None,
                 pattern: Optional[str] = None,
                 repeat: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str comment: Optional comments.
        :param int id: ID.
        :param str ignore_case: Enable/disable ignore case. Valid values: `enable`, `disable`.
        :param str pattern: Pattern to match.
        :param str repeat: Enable/disable repeat match. Valid values: `enable`, `disable`.
        :param str status: Enable/disable this pattern. Valid values: `enable`, `disable`.
        :param str type: Pattern type to match.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if repeat is not None:
            pulumi.set(__self__, "repeat", repeat)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[str]:
        """
        Enable/disable ignore case. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        Pattern to match.
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def repeat(self) -> Optional[str]:
        """
        Enable/disable repeat match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "repeat")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable this pattern. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Pattern type to match.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ExactdatamatchColumn(dict):
    def __init__(__self__, *,
                 index: Optional[int] = None,
                 optional: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param int index: Column index.
        :param str optional: Enable/disable optional match. Valid values: `enable`, `disable`.
        :param str type: Data-type for this column.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        Column index.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def optional(self) -> Optional[str]:
        """
        Enable/disable optional match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Data-type for this column.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FilepatternEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileType":
            suggest = "file_type"
        elif key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilepatternEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilepatternEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilepatternEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_type: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 pattern: Optional[str] = None):
        """
        :param str file_type: Select a file type.
        :param str filter_type: Filter by file name pattern or by file type. Valid values: `pattern`, `type`.
        :param str pattern: Add a file name pattern.
        """
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[str]:
        """
        Select a file type.
        """
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        """
        Filter by file name pattern or by file type. Valid values: `pattern`, `type`.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        Add a file name pattern.
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class ProfileRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileSize":
            suggest = "file_size"
        elif key == "fileType":
            suggest = "file_type"
        elif key == "filterBy":
            suggest = "filter_by"
        elif key == "matchPercentage":
            suggest = "match_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 archive: Optional[str] = None,
                 expiry: Optional[str] = None,
                 file_size: Optional[int] = None,
                 file_type: Optional[int] = None,
                 filter_by: Optional[str] = None,
                 id: Optional[int] = None,
                 label: Optional[str] = None,
                 match_percentage: Optional[int] = None,
                 name: Optional[str] = None,
                 proto: Optional[str] = None,
                 sensitivities: Optional[Sequence['outputs.ProfileRuleSensitivity']] = None,
                 sensors: Optional[Sequence['outputs.ProfileRuleSensor']] = None,
                 severity: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str action: Action to take with content that this DLP profile matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
        :param str archive: Enable/disable DLP archiving. Valid values: `disable`, `enable`.
        :param str expiry: Quarantine duration in days, hours, minutes (format = dddhhmm).
        :param int file_size: Match files greater than or equal to this size (KB).
        :param int file_type: Select the number of a DLP file pattern table to match.
        :param str filter_by: Select the type of content to match. Valid values: `sensor`, `mip`, `fingerprint`, `encrypted`, `none`.
        :param int id: ID.
        :param str label: MIP label dictionary.
        :param int match_percentage: Percentage of fingerprints in the fingerprint databases designated with the selected sensitivity to match.
        :param str name: Filter name.
        :param str proto: Check messages or files over one or more of these protocols. Valid values: `smtp`, `pop3`, `imap`, `http-get`, `http-post`, `ftp`, `nntp`, `mapi`, `ssh`, `cifs`.
        :param Sequence['ProfileRuleSensitivityArgs'] sensitivities: Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
        :param Sequence['ProfileRuleSensorArgs'] sensors: Select DLP sensors. The structure of `sensor` block is documented below.
        :param str severity: Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
        :param str type: Select whether to check the content of messages (an email message) or files (downloaded files or email attachments). Valid values: `file`, `message`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if file_size is not None:
            pulumi.set(__self__, "file_size", file_size)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if filter_by is not None:
            pulumi.set(__self__, "filter_by", filter_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if match_percentage is not None:
            pulumi.set(__self__, "match_percentage", match_percentage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if sensitivities is not None:
            pulumi.set(__self__, "sensitivities", sensitivities)
        if sensors is not None:
            pulumi.set(__self__, "sensors", sensors)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action to take with content that this DLP profile matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def archive(self) -> Optional[str]:
        """
        Enable/disable DLP archiving. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "archive")

    @property
    @pulumi.getter
    def expiry(self) -> Optional[str]:
        """
        Quarantine duration in days, hours, minutes (format = dddhhmm).
        """
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> Optional[int]:
        """
        Match files greater than or equal to this size (KB).
        """
        return pulumi.get(self, "file_size")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[int]:
        """
        Select the number of a DLP file pattern table to match.
        """
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="filterBy")
    def filter_by(self) -> Optional[str]:
        """
        Select the type of content to match. Valid values: `sensor`, `mip`, `fingerprint`, `encrypted`, `none`.
        """
        return pulumi.get(self, "filter_by")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        MIP label dictionary.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="matchPercentage")
    def match_percentage(self) -> Optional[int]:
        """
        Percentage of fingerprints in the fingerprint databases designated with the selected sensitivity to match.
        """
        return pulumi.get(self, "match_percentage")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def proto(self) -> Optional[str]:
        """
        Check messages or files over one or more of these protocols. Valid values: `smtp`, `pop3`, `imap`, `http-get`, `http-post`, `ftp`, `nntp`, `mapi`, `ssh`, `cifs`.
        """
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter
    def sensitivities(self) -> Optional[Sequence['outputs.ProfileRuleSensitivity']]:
        """
        Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
        """
        return pulumi.get(self, "sensitivities")

    @property
    @pulumi.getter
    def sensors(self) -> Optional[Sequence['outputs.ProfileRuleSensor']]:
        """
        Select DLP sensors. The structure of `sensor` block is documented below.
        """
        return pulumi.get(self, "sensors")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Select whether to check the content of messages (an email message) or files (downloaded files or email attachments). Valid values: `file`, `message`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ProfileRuleSensitivity(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Select a DLP sensitivity.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Select a DLP sensitivity.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileRuleSensor(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SensorEntry(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 dictionary: Optional[str] = None,
                 id: Optional[int] = None,
                 status: Optional[str] = None):
        """
        :param int count: Count of dictionary matches to trigger sensor entry match (Dictionary might not be able to trigger more than once based on its 'repeat' option, 1 - 255, default = 1).
        :param str dictionary: Select a DLP dictionary.
        :param int id: ID.
        :param str status: Enable/disable this entry. Valid values: `enable`, `disable`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dictionary is not None:
            pulumi.set(__self__, "dictionary", dictionary)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Count of dictionary matches to trigger sensor entry match (Dictionary might not be able to trigger more than once based on its 'repeat' option, 1 - 255, default = 1).
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dictionary(self) -> Optional[str]:
        """
        Select a DLP dictionary.
        """
        return pulumi.get(self, "dictionary")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable this entry. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SensorFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "companyIdentifier":
            suggest = "company_identifier"
        elif key == "fileSize":
            suggest = "file_size"
        elif key == "fileType":
            suggest = "file_type"
        elif key == "filterBy":
            suggest = "filter_by"
        elif key == "fpSensitivities":
            suggest = "fp_sensitivities"
        elif key == "matchPercentage":
            suggest = "match_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 archive: Optional[str] = None,
                 company_identifier: Optional[str] = None,
                 expiry: Optional[str] = None,
                 file_size: Optional[int] = None,
                 file_type: Optional[int] = None,
                 filter_by: Optional[str] = None,
                 fp_sensitivities: Optional[Sequence['outputs.SensorFilterFpSensitivity']] = None,
                 id: Optional[int] = None,
                 match_percentage: Optional[int] = None,
                 name: Optional[str] = None,
                 proto: Optional[str] = None,
                 regexp: Optional[str] = None,
                 sensitivities: Optional[Sequence['outputs.SensorFilterSensitivity']] = None,
                 severity: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str action: Action to take with content that this DLP sensor matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
        :param str archive: Enable/disable DLP archiving. Valid values: `disable`, `enable`.
        :param str company_identifier: Enter a company identifier watermark to match. Only watermarks that your company has placed on the files are matched.
        :param str expiry: Quarantine duration in days, hours, minutes (format = dddhhmm).
        :param int file_size: Match files this size or larger (0 - 4294967295 kbytes).
        :param int file_type: Select the number of a DLP file pattern table to match.
        :param str filter_by: Select the type of content to match.
        :param Sequence['SensorFilterFpSensitivityArgs'] fp_sensitivities: Select a DLP file pattern sensitivity to match. The structure of `fp_sensitivity` block is documented below.
        :param int id: ID.
        :param int match_percentage: Percentage of fingerprints in the fingerprint databases designated with the selected fp-sensitivity to match.
        :param str name: Filter name.
        :param str proto: Check messages or files over one or more of these protocols.
        :param str regexp: Enter a regular expression to match (max. 255 characters).
        :param Sequence['SensorFilterSensitivityArgs'] sensitivities: Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
        :param str severity: Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
        :param str type: Select whether to check the content of messages (an email message) or files (downloaded files or email attachments).  Valid values: `file`, `message`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if company_identifier is not None:
            pulumi.set(__self__, "company_identifier", company_identifier)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if file_size is not None:
            pulumi.set(__self__, "file_size", file_size)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if filter_by is not None:
            pulumi.set(__self__, "filter_by", filter_by)
        if fp_sensitivities is not None:
            pulumi.set(__self__, "fp_sensitivities", fp_sensitivities)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_percentage is not None:
            pulumi.set(__self__, "match_percentage", match_percentage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if sensitivities is not None:
            pulumi.set(__self__, "sensitivities", sensitivities)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action to take with content that this DLP sensor matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def archive(self) -> Optional[str]:
        """
        Enable/disable DLP archiving. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "archive")

    @property
    @pulumi.getter(name="companyIdentifier")
    def company_identifier(self) -> Optional[str]:
        """
        Enter a company identifier watermark to match. Only watermarks that your company has placed on the files are matched.
        """
        return pulumi.get(self, "company_identifier")

    @property
    @pulumi.getter
    def expiry(self) -> Optional[str]:
        """
        Quarantine duration in days, hours, minutes (format = dddhhmm).
        """
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> Optional[int]:
        """
        Match files this size or larger (0 - 4294967295 kbytes).
        """
        return pulumi.get(self, "file_size")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[int]:
        """
        Select the number of a DLP file pattern table to match.
        """
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="filterBy")
    def filter_by(self) -> Optional[str]:
        """
        Select the type of content to match.
        """
        return pulumi.get(self, "filter_by")

    @property
    @pulumi.getter(name="fpSensitivities")
    def fp_sensitivities(self) -> Optional[Sequence['outputs.SensorFilterFpSensitivity']]:
        """
        Select a DLP file pattern sensitivity to match. The structure of `fp_sensitivity` block is documented below.
        """
        return pulumi.get(self, "fp_sensitivities")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchPercentage")
    def match_percentage(self) -> Optional[int]:
        """
        Percentage of fingerprints in the fingerprint databases designated with the selected fp-sensitivity to match.
        """
        return pulumi.get(self, "match_percentage")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def proto(self) -> Optional[str]:
        """
        Check messages or files over one or more of these protocols.
        """
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        """
        Enter a regular expression to match (max. 255 characters).
        """
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def sensitivities(self) -> Optional[Sequence['outputs.SensorFilterSensitivity']]:
        """
        Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
        """
        return pulumi.get(self, "sensitivities")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Select whether to check the content of messages (an email message) or files (downloaded files or email attachments).  Valid values: `file`, `message`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SensorFilterFpSensitivity(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Select a DLP sensitivity.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Select a DLP sensitivity.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SensorFilterSensitivity(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Select a DLP sensitivity.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Select a DLP sensitivity.
        """
        return pulumi.get(self, "name")


