# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SettingsArgs', 'Settings']

@pulumi.input_type
class SettingsArgs:
    def __init__(__self__, *,
                 cache_mem_percent: Optional[pulumi.Input[int]] = None,
                 chunk_size: Optional[pulumi.Input[int]] = None,
                 db_mode: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 storage_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Settings resource.
        :param pulumi.Input[int] cache_mem_percent: Maximum percentage of available memory allocated to caching (1 - 15).
        :param pulumi.Input[int] chunk_size: Maximum fingerprint chunk size.  **Changing will flush the entire database**.
        :param pulumi.Input[str] db_mode: Behaviour when the maximum size is reached. Valid values: `stop-adding`, `remove-modified-then-oldest`, `remove-oldest`.
        :param pulumi.Input[int] size: Maximum total size of files within the storage (MB).
        :param pulumi.Input[str] storage_device: Storage device name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if cache_mem_percent is not None:
            pulumi.set(__self__, "cache_mem_percent", cache_mem_percent)
        if chunk_size is not None:
            pulumi.set(__self__, "chunk_size", chunk_size)
        if db_mode is not None:
            pulumi.set(__self__, "db_mode", db_mode)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage_device is not None:
            pulumi.set(__self__, "storage_device", storage_device)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="cacheMemPercent")
    def cache_mem_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum percentage of available memory allocated to caching (1 - 15).
        """
        return pulumi.get(self, "cache_mem_percent")

    @cache_mem_percent.setter
    def cache_mem_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_mem_percent", value)

    @property
    @pulumi.getter(name="chunkSize")
    def chunk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum fingerprint chunk size.  **Changing will flush the entire database**.
        """
        return pulumi.get(self, "chunk_size")

    @chunk_size.setter
    def chunk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "chunk_size", value)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Behaviour when the maximum size is reached. Valid values: `stop-adding`, `remove-modified-then-oldest`, `remove-oldest`.
        """
        return pulumi.get(self, "db_mode")

    @db_mode.setter
    def db_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_mode", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum total size of files within the storage (MB).
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="storageDevice")
    def storage_device(self) -> Optional[pulumi.Input[str]]:
        """
        Storage device name.
        """
        return pulumi.get(self, "storage_device")

    @storage_device.setter
    def storage_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_device", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SettingsState:
    def __init__(__self__, *,
                 cache_mem_percent: Optional[pulumi.Input[int]] = None,
                 chunk_size: Optional[pulumi.Input[int]] = None,
                 db_mode: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 storage_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Settings resources.
        :param pulumi.Input[int] cache_mem_percent: Maximum percentage of available memory allocated to caching (1 - 15).
        :param pulumi.Input[int] chunk_size: Maximum fingerprint chunk size.  **Changing will flush the entire database**.
        :param pulumi.Input[str] db_mode: Behaviour when the maximum size is reached. Valid values: `stop-adding`, `remove-modified-then-oldest`, `remove-oldest`.
        :param pulumi.Input[int] size: Maximum total size of files within the storage (MB).
        :param pulumi.Input[str] storage_device: Storage device name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if cache_mem_percent is not None:
            pulumi.set(__self__, "cache_mem_percent", cache_mem_percent)
        if chunk_size is not None:
            pulumi.set(__self__, "chunk_size", chunk_size)
        if db_mode is not None:
            pulumi.set(__self__, "db_mode", db_mode)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage_device is not None:
            pulumi.set(__self__, "storage_device", storage_device)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="cacheMemPercent")
    def cache_mem_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum percentage of available memory allocated to caching (1 - 15).
        """
        return pulumi.get(self, "cache_mem_percent")

    @cache_mem_percent.setter
    def cache_mem_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_mem_percent", value)

    @property
    @pulumi.getter(name="chunkSize")
    def chunk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum fingerprint chunk size.  **Changing will flush the entire database**.
        """
        return pulumi.get(self, "chunk_size")

    @chunk_size.setter
    def chunk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "chunk_size", value)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Behaviour when the maximum size is reached. Valid values: `stop-adding`, `remove-modified-then-oldest`, `remove-oldest`.
        """
        return pulumi.get(self, "db_mode")

    @db_mode.setter
    def db_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_mode", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum total size of files within the storage (MB).
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="storageDevice")
    def storage_device(self) -> Optional[pulumi.Input[str]]:
        """
        Storage device name.
        """
        return pulumi.get(self, "storage_device")

    @storage_device.setter
    def storage_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_device", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Settings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_mem_percent: Optional[pulumi.Input[int]] = None,
                 chunk_size: Optional[pulumi.Input[int]] = None,
                 db_mode: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 storage_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Designate logical storage for DLP fingerprint database.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.dlp.Settings("trname",
            cache_mem_percent=2,
            chunk_size=2800,
            db_mode="stop-adding",
            size=16)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Dlp Settings can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:dlp/settings:Settings labelname DlpSettings
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:dlp/settings:Settings labelname DlpSettings
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cache_mem_percent: Maximum percentage of available memory allocated to caching (1 - 15).
        :param pulumi.Input[int] chunk_size: Maximum fingerprint chunk size.  **Changing will flush the entire database**.
        :param pulumi.Input[str] db_mode: Behaviour when the maximum size is reached. Valid values: `stop-adding`, `remove-modified-then-oldest`, `remove-oldest`.
        :param pulumi.Input[int] size: Maximum total size of files within the storage (MB).
        :param pulumi.Input[str] storage_device: Storage device name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Designate logical storage for DLP fingerprint database.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.dlp.Settings("trname",
            cache_mem_percent=2,
            chunk_size=2800,
            db_mode="stop-adding",
            size=16)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Dlp Settings can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:dlp/settings:Settings labelname DlpSettings
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:dlp/settings:Settings labelname DlpSettings
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_mem_percent: Optional[pulumi.Input[int]] = None,
                 chunk_size: Optional[pulumi.Input[int]] = None,
                 db_mode: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 storage_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingsArgs.__new__(SettingsArgs)

            __props__.__dict__["cache_mem_percent"] = cache_mem_percent
            __props__.__dict__["chunk_size"] = chunk_size
            __props__.__dict__["db_mode"] = db_mode
            __props__.__dict__["size"] = size
            __props__.__dict__["storage_device"] = storage_device
            __props__.__dict__["vdomparam"] = vdomparam
        super(Settings, __self__).__init__(
            'fortios:dlp/settings:Settings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cache_mem_percent: Optional[pulumi.Input[int]] = None,
            chunk_size: Optional[pulumi.Input[int]] = None,
            db_mode: Optional[pulumi.Input[str]] = None,
            size: Optional[pulumi.Input[int]] = None,
            storage_device: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Settings':
        """
        Get an existing Settings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cache_mem_percent: Maximum percentage of available memory allocated to caching (1 - 15).
        :param pulumi.Input[int] chunk_size: Maximum fingerprint chunk size.  **Changing will flush the entire database**.
        :param pulumi.Input[str] db_mode: Behaviour when the maximum size is reached. Valid values: `stop-adding`, `remove-modified-then-oldest`, `remove-oldest`.
        :param pulumi.Input[int] size: Maximum total size of files within the storage (MB).
        :param pulumi.Input[str] storage_device: Storage device name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingsState.__new__(_SettingsState)

        __props__.__dict__["cache_mem_percent"] = cache_mem_percent
        __props__.__dict__["chunk_size"] = chunk_size
        __props__.__dict__["db_mode"] = db_mode
        __props__.__dict__["size"] = size
        __props__.__dict__["storage_device"] = storage_device
        __props__.__dict__["vdomparam"] = vdomparam
        return Settings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cacheMemPercent")
    def cache_mem_percent(self) -> pulumi.Output[int]:
        """
        Maximum percentage of available memory allocated to caching (1 - 15).
        """
        return pulumi.get(self, "cache_mem_percent")

    @property
    @pulumi.getter(name="chunkSize")
    def chunk_size(self) -> pulumi.Output[int]:
        """
        Maximum fingerprint chunk size.  **Changing will flush the entire database**.
        """
        return pulumi.get(self, "chunk_size")

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> pulumi.Output[str]:
        """
        Behaviour when the maximum size is reached. Valid values: `stop-adding`, `remove-modified-then-oldest`, `remove-oldest`.
        """
        return pulumi.get(self, "db_mode")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[int]:
        """
        Maximum total size of files within the storage (MB).
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="storageDevice")
    def storage_device(self) -> pulumi.Output[str]:
        """
        Storage device name.
        """
        return pulumi.get(self, "storage_device")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

