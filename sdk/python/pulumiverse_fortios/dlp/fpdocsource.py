# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['FpdocsourceArgs', 'Fpdocsource']

@pulumi.input_type
class FpdocsourceArgs:
    def __init__(__self__, *,
                 server: pulumi.Input[str],
                 server_type: pulumi.Input[str],
                 username: pulumi.Input[str],
                 date: Optional[pulumi.Input[int]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 file_pattern: Optional[pulumi.Input[str]] = None,
                 keep_modified: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 remove_deleted: Optional[pulumi.Input[str]] = None,
                 scan_on_creation: Optional[pulumi.Input[str]] = None,
                 scan_subdirectories: Optional[pulumi.Input[str]] = None,
                 sensitivity: Optional[pulumi.Input[str]] = None,
                 tod_hour: Optional[pulumi.Input[int]] = None,
                 tod_min: Optional[pulumi.Input[int]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weekday: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Fpdocsource resource.
        :param pulumi.Input[str] server: IPv4 or IPv6 address of the server.
        :param pulumi.Input[str] server_type: Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
        :param pulumi.Input[str] username: User name required to log into the file server.
        :param pulumi.Input[int] date: Day of the month on which to scan the server (1 - 31).
        :param pulumi.Input[str] file_path: Path on the server to the fingerprint files (max 119 characters).
        :param pulumi.Input[str] file_pattern: Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
        :param pulumi.Input[str] keep_modified: Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name of the DLP fingerprint database.
        :param pulumi.Input[str] password: Password required to log into the file server.
        :param pulumi.Input[str] period: Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
        :param pulumi.Input[str] remove_deleted: Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_on_creation: Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_subdirectories: Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sensitivity: Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
        :param pulumi.Input[int] tod_hour: Hour of the day on which to scan the server (0 - 23, default = 1).
        :param pulumi.Input[int] tod_min: Minute of the hour on which to scan the server (0 - 59).
        :param pulumi.Input[str] vdom: Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weekday: Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "server_type", server_type)
        pulumi.set(__self__, "username", username)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if file_pattern is not None:
            pulumi.set(__self__, "file_pattern", file_pattern)
        if keep_modified is not None:
            pulumi.set(__self__, "keep_modified", keep_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if remove_deleted is not None:
            pulumi.set(__self__, "remove_deleted", remove_deleted)
        if scan_on_creation is not None:
            pulumi.set(__self__, "scan_on_creation", scan_on_creation)
        if scan_subdirectories is not None:
            pulumi.set(__self__, "scan_subdirectories", scan_subdirectories)
        if sensitivity is not None:
            pulumi.set(__self__, "sensitivity", sensitivity)
        if tod_hour is not None:
            pulumi.set(__self__, "tod_hour", tod_hour)
        if tod_min is not None:
            pulumi.set(__self__, "tod_min", tod_min)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weekday is not None:
            pulumi.set(__self__, "weekday", weekday)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        IPv4 or IPv6 address of the server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Input[str]:
        """
        Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        User name required to log into the file server.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[int]]:
        """
        Day of the month on which to scan the server (1 - 31).
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path on the server to the fingerprint files (max 119 characters).
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
        """
        return pulumi.get(self, "file_pattern")

    @file_pattern.setter
    def file_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_pattern", value)

    @property
    @pulumi.getter(name="keepModified")
    def keep_modified(self) -> Optional[pulumi.Input[str]]:
        """
        Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "keep_modified")

    @keep_modified.setter
    def keep_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the DLP fingerprint database.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password required to log into the file server.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[str]]:
        """
        Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="removeDeleted")
    def remove_deleted(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_deleted")

    @remove_deleted.setter
    def remove_deleted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_deleted", value)

    @property
    @pulumi.getter(name="scanOnCreation")
    def scan_on_creation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_on_creation")

    @scan_on_creation.setter
    def scan_on_creation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_on_creation", value)

    @property
    @pulumi.getter(name="scanSubdirectories")
    def scan_subdirectories(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_subdirectories")

    @scan_subdirectories.setter
    def scan_subdirectories(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_subdirectories", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
        """
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter(name="todHour")
    def tod_hour(self) -> Optional[pulumi.Input[int]]:
        """
        Hour of the day on which to scan the server (0 - 23, default = 1).
        """
        return pulumi.get(self, "tod_hour")

    @tod_hour.setter
    def tod_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tod_hour", value)

    @property
    @pulumi.getter(name="todMin")
    def tod_min(self) -> Optional[pulumi.Input[int]]:
        """
        Minute of the hour on which to scan the server (0 - 59).
        """
        return pulumi.get(self, "tod_min")

    @tod_min.setter
    def tod_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tod_min", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def weekday(self) -> Optional[pulumi.Input[str]]:
        """
        Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "weekday")

    @weekday.setter
    def weekday(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weekday", value)


@pulumi.input_type
class _FpdocsourceState:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[int]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 file_pattern: Optional[pulumi.Input[str]] = None,
                 keep_modified: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 remove_deleted: Optional[pulumi.Input[str]] = None,
                 scan_on_creation: Optional[pulumi.Input[str]] = None,
                 scan_subdirectories: Optional[pulumi.Input[str]] = None,
                 sensitivity: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 tod_hour: Optional[pulumi.Input[int]] = None,
                 tod_min: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weekday: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Fpdocsource resources.
        :param pulumi.Input[int] date: Day of the month on which to scan the server (1 - 31).
        :param pulumi.Input[str] file_path: Path on the server to the fingerprint files (max 119 characters).
        :param pulumi.Input[str] file_pattern: Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
        :param pulumi.Input[str] keep_modified: Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name of the DLP fingerprint database.
        :param pulumi.Input[str] password: Password required to log into the file server.
        :param pulumi.Input[str] period: Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
        :param pulumi.Input[str] remove_deleted: Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_on_creation: Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_subdirectories: Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sensitivity: Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
        :param pulumi.Input[str] server: IPv4 or IPv6 address of the server.
        :param pulumi.Input[str] server_type: Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
        :param pulumi.Input[int] tod_hour: Hour of the day on which to scan the server (0 - 23, default = 1).
        :param pulumi.Input[int] tod_min: Minute of the hour on which to scan the server (0 - 59).
        :param pulumi.Input[str] username: User name required to log into the file server.
        :param pulumi.Input[str] vdom: Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weekday: Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if file_pattern is not None:
            pulumi.set(__self__, "file_pattern", file_pattern)
        if keep_modified is not None:
            pulumi.set(__self__, "keep_modified", keep_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if remove_deleted is not None:
            pulumi.set(__self__, "remove_deleted", remove_deleted)
        if scan_on_creation is not None:
            pulumi.set(__self__, "scan_on_creation", scan_on_creation)
        if scan_subdirectories is not None:
            pulumi.set(__self__, "scan_subdirectories", scan_subdirectories)
        if sensitivity is not None:
            pulumi.set(__self__, "sensitivity", sensitivity)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if tod_hour is not None:
            pulumi.set(__self__, "tod_hour", tod_hour)
        if tod_min is not None:
            pulumi.set(__self__, "tod_min", tod_min)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weekday is not None:
            pulumi.set(__self__, "weekday", weekday)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[int]]:
        """
        Day of the month on which to scan the server (1 - 31).
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path on the server to the fingerprint files (max 119 characters).
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
        """
        return pulumi.get(self, "file_pattern")

    @file_pattern.setter
    def file_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_pattern", value)

    @property
    @pulumi.getter(name="keepModified")
    def keep_modified(self) -> Optional[pulumi.Input[str]]:
        """
        Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "keep_modified")

    @keep_modified.setter
    def keep_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the DLP fingerprint database.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password required to log into the file server.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[str]]:
        """
        Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="removeDeleted")
    def remove_deleted(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_deleted")

    @remove_deleted.setter
    def remove_deleted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_deleted", value)

    @property
    @pulumi.getter(name="scanOnCreation")
    def scan_on_creation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_on_creation")

    @scan_on_creation.setter
    def scan_on_creation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_on_creation", value)

    @property
    @pulumi.getter(name="scanSubdirectories")
    def scan_subdirectories(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_subdirectories")

    @scan_subdirectories.setter
    def scan_subdirectories(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_subdirectories", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
        """
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 or IPv6 address of the server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="todHour")
    def tod_hour(self) -> Optional[pulumi.Input[int]]:
        """
        Hour of the day on which to scan the server (0 - 23, default = 1).
        """
        return pulumi.get(self, "tod_hour")

    @tod_hour.setter
    def tod_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tod_hour", value)

    @property
    @pulumi.getter(name="todMin")
    def tod_min(self) -> Optional[pulumi.Input[int]]:
        """
        Minute of the hour on which to scan the server (0 - 59).
        """
        return pulumi.get(self, "tod_min")

    @tod_min.setter
    def tod_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tod_min", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        User name required to log into the file server.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def weekday(self) -> Optional[pulumi.Input[str]]:
        """
        Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "weekday")

    @weekday.setter
    def weekday(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weekday", value)


class Fpdocsource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 date: Optional[pulumi.Input[int]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 file_pattern: Optional[pulumi.Input[str]] = None,
                 keep_modified: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 remove_deleted: Optional[pulumi.Input[str]] = None,
                 scan_on_creation: Optional[pulumi.Input[str]] = None,
                 scan_subdirectories: Optional[pulumi.Input[str]] = None,
                 sensitivity: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 tod_hour: Optional[pulumi.Input[int]] = None,
                 tod_min: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weekday: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DLP fingerprint database by allowing the FortiGate to access a file server containing files from which to create fingerprints.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.dlp.Fpdocsource("trname",
            date=1,
            file_path="/",
            file_pattern="*",
            keep_modified="enable",
            period="none",
            remove_deleted="enable",
            scan_on_creation="enable",
            scan_subdirectories="enable",
            server="1.1.1.1",
            server_type="samba",
            tod_hour=1,
            tod_min=0,
            username="sgh",
            vdom="mgmt",
            weekday="sunday")
        ```

        ## Import

        Dlp FpDocSource can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:dlp/fpdocsource:Fpdocsource labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:dlp/fpdocsource:Fpdocsource labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] date: Day of the month on which to scan the server (1 - 31).
        :param pulumi.Input[str] file_path: Path on the server to the fingerprint files (max 119 characters).
        :param pulumi.Input[str] file_pattern: Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
        :param pulumi.Input[str] keep_modified: Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name of the DLP fingerprint database.
        :param pulumi.Input[str] password: Password required to log into the file server.
        :param pulumi.Input[str] period: Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
        :param pulumi.Input[str] remove_deleted: Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_on_creation: Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_subdirectories: Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sensitivity: Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
        :param pulumi.Input[str] server: IPv4 or IPv6 address of the server.
        :param pulumi.Input[str] server_type: Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
        :param pulumi.Input[int] tod_hour: Hour of the day on which to scan the server (0 - 23, default = 1).
        :param pulumi.Input[int] tod_min: Minute of the hour on which to scan the server (0 - 59).
        :param pulumi.Input[str] username: User name required to log into the file server.
        :param pulumi.Input[str] vdom: Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weekday: Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FpdocsourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DLP fingerprint database by allowing the FortiGate to access a file server containing files from which to create fingerprints.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.dlp.Fpdocsource("trname",
            date=1,
            file_path="/",
            file_pattern="*",
            keep_modified="enable",
            period="none",
            remove_deleted="enable",
            scan_on_creation="enable",
            scan_subdirectories="enable",
            server="1.1.1.1",
            server_type="samba",
            tod_hour=1,
            tod_min=0,
            username="sgh",
            vdom="mgmt",
            weekday="sunday")
        ```

        ## Import

        Dlp FpDocSource can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:dlp/fpdocsource:Fpdocsource labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:dlp/fpdocsource:Fpdocsource labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param FpdocsourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FpdocsourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 date: Optional[pulumi.Input[int]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 file_pattern: Optional[pulumi.Input[str]] = None,
                 keep_modified: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 remove_deleted: Optional[pulumi.Input[str]] = None,
                 scan_on_creation: Optional[pulumi.Input[str]] = None,
                 scan_subdirectories: Optional[pulumi.Input[str]] = None,
                 sensitivity: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 tod_hour: Optional[pulumi.Input[int]] = None,
                 tod_min: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weekday: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FpdocsourceArgs.__new__(FpdocsourceArgs)

            __props__.__dict__["date"] = date
            __props__.__dict__["file_path"] = file_path
            __props__.__dict__["file_pattern"] = file_pattern
            __props__.__dict__["keep_modified"] = keep_modified
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["period"] = period
            __props__.__dict__["remove_deleted"] = remove_deleted
            __props__.__dict__["scan_on_creation"] = scan_on_creation
            __props__.__dict__["scan_subdirectories"] = scan_subdirectories
            __props__.__dict__["sensitivity"] = sensitivity
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
            if server_type is None and not opts.urn:
                raise TypeError("Missing required property 'server_type'")
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["tod_hour"] = tod_hour
            __props__.__dict__["tod_min"] = tod_min
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["vdom"] = vdom
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["weekday"] = weekday
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Fpdocsource, __self__).__init__(
            'fortios:dlp/fpdocsource:Fpdocsource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            date: Optional[pulumi.Input[int]] = None,
            file_path: Optional[pulumi.Input[str]] = None,
            file_pattern: Optional[pulumi.Input[str]] = None,
            keep_modified: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[str]] = None,
            remove_deleted: Optional[pulumi.Input[str]] = None,
            scan_on_creation: Optional[pulumi.Input[str]] = None,
            scan_subdirectories: Optional[pulumi.Input[str]] = None,
            sensitivity: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            tod_hour: Optional[pulumi.Input[int]] = None,
            tod_min: Optional[pulumi.Input[int]] = None,
            username: Optional[pulumi.Input[str]] = None,
            vdom: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            weekday: Optional[pulumi.Input[str]] = None) -> 'Fpdocsource':
        """
        Get an existing Fpdocsource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] date: Day of the month on which to scan the server (1 - 31).
        :param pulumi.Input[str] file_path: Path on the server to the fingerprint files (max 119 characters).
        :param pulumi.Input[str] file_pattern: Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
        :param pulumi.Input[str] keep_modified: Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name of the DLP fingerprint database.
        :param pulumi.Input[str] password: Password required to log into the file server.
        :param pulumi.Input[str] period: Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
        :param pulumi.Input[str] remove_deleted: Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_on_creation: Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_subdirectories: Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sensitivity: Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
        :param pulumi.Input[str] server: IPv4 or IPv6 address of the server.
        :param pulumi.Input[str] server_type: Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
        :param pulumi.Input[int] tod_hour: Hour of the day on which to scan the server (0 - 23, default = 1).
        :param pulumi.Input[int] tod_min: Minute of the hour on which to scan the server (0 - 59).
        :param pulumi.Input[str] username: User name required to log into the file server.
        :param pulumi.Input[str] vdom: Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weekday: Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FpdocsourceState.__new__(_FpdocsourceState)

        __props__.__dict__["date"] = date
        __props__.__dict__["file_path"] = file_path
        __props__.__dict__["file_pattern"] = file_pattern
        __props__.__dict__["keep_modified"] = keep_modified
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["period"] = period
        __props__.__dict__["remove_deleted"] = remove_deleted
        __props__.__dict__["scan_on_creation"] = scan_on_creation
        __props__.__dict__["scan_subdirectories"] = scan_subdirectories
        __props__.__dict__["sensitivity"] = sensitivity
        __props__.__dict__["server"] = server
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["tod_hour"] = tod_hour
        __props__.__dict__["tod_min"] = tod_min
        __props__.__dict__["username"] = username
        __props__.__dict__["vdom"] = vdom
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["weekday"] = weekday
        return Fpdocsource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def date(self) -> pulumi.Output[int]:
        """
        Day of the month on which to scan the server (1 - 31).
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> pulumi.Output[str]:
        """
        Path on the server to the fingerprint files (max 119 characters).
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> pulumi.Output[str]:
        """
        Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
        """
        return pulumi.get(self, "file_pattern")

    @property
    @pulumi.getter(name="keepModified")
    def keep_modified(self) -> pulumi.Output[str]:
        """
        Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "keep_modified")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the DLP fingerprint database.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password required to log into the file server.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[str]:
        """
        Frequency for which the FortiGate checks the server for new or changed files. Valid values: `none`, `daily`, `weekly`, `monthly`.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="removeDeleted")
    def remove_deleted(self) -> pulumi.Output[str]:
        """
        Enable to keep the fingerprint database up to date when a file is deleted from the server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_deleted")

    @property
    @pulumi.getter(name="scanOnCreation")
    def scan_on_creation(self) -> pulumi.Output[str]:
        """
        Enable to keep the fingerprint database up to date when a file is added or changed on the server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_on_creation")

    @property
    @pulumi.getter(name="scanSubdirectories")
    def scan_subdirectories(self) -> pulumi.Output[str]:
        """
        Enable/disable scanning subdirectories to find files to create fingerprints from. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_subdirectories")

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Output[str]:
        """
        Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity.
        """
        return pulumi.get(self, "sensitivity")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        IPv4 or IPv6 address of the server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        """
        Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported. Valid values: `samba`.
        """
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter(name="todHour")
    def tod_hour(self) -> pulumi.Output[int]:
        """
        Hour of the day on which to scan the server (0 - 23, default = 1).
        """
        return pulumi.get(self, "tod_hour")

    @property
    @pulumi.getter(name="todMin")
    def tod_min(self) -> pulumi.Output[int]:
        """
        Minute of the hour on which to scan the server (0 - 59).
        """
        return pulumi.get(self, "tod_min")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        User name required to log into the file server.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def vdom(self) -> pulumi.Output[str]:
        """
        Select the VDOM that can communicate with the file server. Valid values: `mgmt`, `current`.
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def weekday(self) -> pulumi.Output[str]:
        """
        Day of the week on which to scan the server. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "weekday")

