# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccessproxysshclientcertArgs', 'Accessproxysshclientcert']

@pulumi.input_type
class AccessproxysshclientcertArgs:
    def __init__(__self__, *,
                 auth_ca: Optional[pulumi.Input[str]] = None,
                 cert_extensions: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxysshclientcertCertExtensionArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permit_agent_forwarding: Optional[pulumi.Input[str]] = None,
                 permit_port_forwarding: Optional[pulumi.Input[str]] = None,
                 permit_pty: Optional[pulumi.Input[str]] = None,
                 permit_user_rc: Optional[pulumi.Input[str]] = None,
                 permit_x11_forwarding: Optional[pulumi.Input[str]] = None,
                 source_address: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Accessproxysshclientcert resource.
        :param pulumi.Input[str] auth_ca: Name of the SSH server public key authentication CA.
        :param pulumi.Input[Sequence[pulumi.Input['AccessproxysshclientcertCertExtensionArgs']]] cert_extensions: Configure certificate extension for user certificate. The structure of `cert_extension` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: SSH client certificate name.
        :param pulumi.Input[str] permit_agent_forwarding: Enable/disable appending permit-agent-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_port_forwarding: Enable/disable appending permit-port-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_pty: Enable/disable appending permit-pty certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_user_rc: Enable/disable appending permit-user-rc certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_x11_forwarding: Enable/disable appending permit-x11-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_address: Enable/disable appending source-address certificate critical option. This option ensure certificate only accepted from FortiGate source address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auth_ca is not None:
            pulumi.set(__self__, "auth_ca", auth_ca)
        if cert_extensions is not None:
            pulumi.set(__self__, "cert_extensions", cert_extensions)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permit_agent_forwarding is not None:
            pulumi.set(__self__, "permit_agent_forwarding", permit_agent_forwarding)
        if permit_port_forwarding is not None:
            pulumi.set(__self__, "permit_port_forwarding", permit_port_forwarding)
        if permit_pty is not None:
            pulumi.set(__self__, "permit_pty", permit_pty)
        if permit_user_rc is not None:
            pulumi.set(__self__, "permit_user_rc", permit_user_rc)
        if permit_x11_forwarding is not None:
            pulumi.set(__self__, "permit_x11_forwarding", permit_x11_forwarding)
        if source_address is not None:
            pulumi.set(__self__, "source_address", source_address)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authCa")
    def auth_ca(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the SSH server public key authentication CA.
        """
        return pulumi.get(self, "auth_ca")

    @auth_ca.setter
    def auth_ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ca", value)

    @property
    @pulumi.getter(name="certExtensions")
    def cert_extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxysshclientcertCertExtensionArgs']]]]:
        """
        Configure certificate extension for user certificate. The structure of `cert_extension` block is documented below.
        """
        return pulumi.get(self, "cert_extensions")

    @cert_extensions.setter
    def cert_extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxysshclientcertCertExtensionArgs']]]]):
        pulumi.set(self, "cert_extensions", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SSH client certificate name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="permitAgentForwarding")
    def permit_agent_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending permit-agent-forwarding certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_agent_forwarding")

    @permit_agent_forwarding.setter
    def permit_agent_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_agent_forwarding", value)

    @property
    @pulumi.getter(name="permitPortForwarding")
    def permit_port_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending permit-port-forwarding certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_port_forwarding")

    @permit_port_forwarding.setter
    def permit_port_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_port_forwarding", value)

    @property
    @pulumi.getter(name="permitPty")
    def permit_pty(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending permit-pty certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_pty")

    @permit_pty.setter
    def permit_pty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_pty", value)

    @property
    @pulumi.getter(name="permitUserRc")
    def permit_user_rc(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending permit-user-rc certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_user_rc")

    @permit_user_rc.setter
    def permit_user_rc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_user_rc", value)

    @property
    @pulumi.getter(name="permitX11Forwarding")
    def permit_x11_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending permit-x11-forwarding certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_x11_forwarding")

    @permit_x11_forwarding.setter
    def permit_x11_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_x11_forwarding", value)

    @property
    @pulumi.getter(name="sourceAddress")
    def source_address(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending source-address certificate critical option. This option ensure certificate only accepted from FortiGate source address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address")

    @source_address.setter
    def source_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _AccessproxysshclientcertState:
    def __init__(__self__, *,
                 auth_ca: Optional[pulumi.Input[str]] = None,
                 cert_extensions: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxysshclientcertCertExtensionArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permit_agent_forwarding: Optional[pulumi.Input[str]] = None,
                 permit_port_forwarding: Optional[pulumi.Input[str]] = None,
                 permit_pty: Optional[pulumi.Input[str]] = None,
                 permit_user_rc: Optional[pulumi.Input[str]] = None,
                 permit_x11_forwarding: Optional[pulumi.Input[str]] = None,
                 source_address: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Accessproxysshclientcert resources.
        :param pulumi.Input[str] auth_ca: Name of the SSH server public key authentication CA.
        :param pulumi.Input[Sequence[pulumi.Input['AccessproxysshclientcertCertExtensionArgs']]] cert_extensions: Configure certificate extension for user certificate. The structure of `cert_extension` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: SSH client certificate name.
        :param pulumi.Input[str] permit_agent_forwarding: Enable/disable appending permit-agent-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_port_forwarding: Enable/disable appending permit-port-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_pty: Enable/disable appending permit-pty certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_user_rc: Enable/disable appending permit-user-rc certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_x11_forwarding: Enable/disable appending permit-x11-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_address: Enable/disable appending source-address certificate critical option. This option ensure certificate only accepted from FortiGate source address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auth_ca is not None:
            pulumi.set(__self__, "auth_ca", auth_ca)
        if cert_extensions is not None:
            pulumi.set(__self__, "cert_extensions", cert_extensions)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permit_agent_forwarding is not None:
            pulumi.set(__self__, "permit_agent_forwarding", permit_agent_forwarding)
        if permit_port_forwarding is not None:
            pulumi.set(__self__, "permit_port_forwarding", permit_port_forwarding)
        if permit_pty is not None:
            pulumi.set(__self__, "permit_pty", permit_pty)
        if permit_user_rc is not None:
            pulumi.set(__self__, "permit_user_rc", permit_user_rc)
        if permit_x11_forwarding is not None:
            pulumi.set(__self__, "permit_x11_forwarding", permit_x11_forwarding)
        if source_address is not None:
            pulumi.set(__self__, "source_address", source_address)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authCa")
    def auth_ca(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the SSH server public key authentication CA.
        """
        return pulumi.get(self, "auth_ca")

    @auth_ca.setter
    def auth_ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ca", value)

    @property
    @pulumi.getter(name="certExtensions")
    def cert_extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxysshclientcertCertExtensionArgs']]]]:
        """
        Configure certificate extension for user certificate. The structure of `cert_extension` block is documented below.
        """
        return pulumi.get(self, "cert_extensions")

    @cert_extensions.setter
    def cert_extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxysshclientcertCertExtensionArgs']]]]):
        pulumi.set(self, "cert_extensions", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SSH client certificate name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="permitAgentForwarding")
    def permit_agent_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending permit-agent-forwarding certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_agent_forwarding")

    @permit_agent_forwarding.setter
    def permit_agent_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_agent_forwarding", value)

    @property
    @pulumi.getter(name="permitPortForwarding")
    def permit_port_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending permit-port-forwarding certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_port_forwarding")

    @permit_port_forwarding.setter
    def permit_port_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_port_forwarding", value)

    @property
    @pulumi.getter(name="permitPty")
    def permit_pty(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending permit-pty certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_pty")

    @permit_pty.setter
    def permit_pty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_pty", value)

    @property
    @pulumi.getter(name="permitUserRc")
    def permit_user_rc(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending permit-user-rc certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_user_rc")

    @permit_user_rc.setter
    def permit_user_rc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_user_rc", value)

    @property
    @pulumi.getter(name="permitX11Forwarding")
    def permit_x11_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending permit-x11-forwarding certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_x11_forwarding")

    @permit_x11_forwarding.setter
    def permit_x11_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_x11_forwarding", value)

    @property
    @pulumi.getter(name="sourceAddress")
    def source_address(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable appending source-address certificate critical option. This option ensure certificate only accepted from FortiGate source address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address")

    @source_address.setter
    def source_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Accessproxysshclientcert(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_ca: Optional[pulumi.Input[str]] = None,
                 cert_extensions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccessproxysshclientcertCertExtensionArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permit_agent_forwarding: Optional[pulumi.Input[str]] = None,
                 permit_port_forwarding: Optional[pulumi.Input[str]] = None,
                 permit_pty: Optional[pulumi.Input[str]] = None,
                 permit_user_rc: Optional[pulumi.Input[str]] = None,
                 permit_x11_forwarding: Optional[pulumi.Input[str]] = None,
                 source_address: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure Access Proxy SSH client certificate. Applies to FortiOS Version `>= 7.0.1`.

        ## Import

        Firewall AccessProxySshClientCert can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/accessproxysshclientcert:Accessproxysshclientcert labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/accessproxysshclientcert:Accessproxysshclientcert labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_ca: Name of the SSH server public key authentication CA.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccessproxysshclientcertCertExtensionArgs']]]] cert_extensions: Configure certificate extension for user certificate. The structure of `cert_extension` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: SSH client certificate name.
        :param pulumi.Input[str] permit_agent_forwarding: Enable/disable appending permit-agent-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_port_forwarding: Enable/disable appending permit-port-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_pty: Enable/disable appending permit-pty certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_user_rc: Enable/disable appending permit-user-rc certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_x11_forwarding: Enable/disable appending permit-x11-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_address: Enable/disable appending source-address certificate critical option. This option ensure certificate only accepted from FortiGate source address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AccessproxysshclientcertArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure Access Proxy SSH client certificate. Applies to FortiOS Version `>= 7.0.1`.

        ## Import

        Firewall AccessProxySshClientCert can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/accessproxysshclientcert:Accessproxysshclientcert labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/accessproxysshclientcert:Accessproxysshclientcert labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param AccessproxysshclientcertArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccessproxysshclientcertArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_ca: Optional[pulumi.Input[str]] = None,
                 cert_extensions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccessproxysshclientcertCertExtensionArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permit_agent_forwarding: Optional[pulumi.Input[str]] = None,
                 permit_port_forwarding: Optional[pulumi.Input[str]] = None,
                 permit_pty: Optional[pulumi.Input[str]] = None,
                 permit_user_rc: Optional[pulumi.Input[str]] = None,
                 permit_x11_forwarding: Optional[pulumi.Input[str]] = None,
                 source_address: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccessproxysshclientcertArgs.__new__(AccessproxysshclientcertArgs)

            __props__.__dict__["auth_ca"] = auth_ca
            __props__.__dict__["cert_extensions"] = cert_extensions
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["name"] = name
            __props__.__dict__["permit_agent_forwarding"] = permit_agent_forwarding
            __props__.__dict__["permit_port_forwarding"] = permit_port_forwarding
            __props__.__dict__["permit_pty"] = permit_pty
            __props__.__dict__["permit_user_rc"] = permit_user_rc
            __props__.__dict__["permit_x11_forwarding"] = permit_x11_forwarding
            __props__.__dict__["source_address"] = source_address
            __props__.__dict__["vdomparam"] = vdomparam
        super(Accessproxysshclientcert, __self__).__init__(
            'fortios:firewall/accessproxysshclientcert:Accessproxysshclientcert',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_ca: Optional[pulumi.Input[str]] = None,
            cert_extensions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccessproxysshclientcertCertExtensionArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            permit_agent_forwarding: Optional[pulumi.Input[str]] = None,
            permit_port_forwarding: Optional[pulumi.Input[str]] = None,
            permit_pty: Optional[pulumi.Input[str]] = None,
            permit_user_rc: Optional[pulumi.Input[str]] = None,
            permit_x11_forwarding: Optional[pulumi.Input[str]] = None,
            source_address: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Accessproxysshclientcert':
        """
        Get an existing Accessproxysshclientcert resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_ca: Name of the SSH server public key authentication CA.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccessproxysshclientcertCertExtensionArgs']]]] cert_extensions: Configure certificate extension for user certificate. The structure of `cert_extension` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: SSH client certificate name.
        :param pulumi.Input[str] permit_agent_forwarding: Enable/disable appending permit-agent-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_port_forwarding: Enable/disable appending permit-port-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_pty: Enable/disable appending permit-pty certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_user_rc: Enable/disable appending permit-user-rc certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_x11_forwarding: Enable/disable appending permit-x11-forwarding certificate extension. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_address: Enable/disable appending source-address certificate critical option. This option ensure certificate only accepted from FortiGate source address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccessproxysshclientcertState.__new__(_AccessproxysshclientcertState)

        __props__.__dict__["auth_ca"] = auth_ca
        __props__.__dict__["cert_extensions"] = cert_extensions
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["name"] = name
        __props__.__dict__["permit_agent_forwarding"] = permit_agent_forwarding
        __props__.__dict__["permit_port_forwarding"] = permit_port_forwarding
        __props__.__dict__["permit_pty"] = permit_pty
        __props__.__dict__["permit_user_rc"] = permit_user_rc
        __props__.__dict__["permit_x11_forwarding"] = permit_x11_forwarding
        __props__.__dict__["source_address"] = source_address
        __props__.__dict__["vdomparam"] = vdomparam
        return Accessproxysshclientcert(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authCa")
    def auth_ca(self) -> pulumi.Output[str]:
        """
        Name of the SSH server public key authentication CA.
        """
        return pulumi.get(self, "auth_ca")

    @property
    @pulumi.getter(name="certExtensions")
    def cert_extensions(self) -> pulumi.Output[Optional[Sequence['outputs.AccessproxysshclientcertCertExtension']]]:
        """
        Configure certificate extension for user certificate. The structure of `cert_extension` block is documented below.
        """
        return pulumi.get(self, "cert_extensions")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        SSH client certificate name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="permitAgentForwarding")
    def permit_agent_forwarding(self) -> pulumi.Output[str]:
        """
        Enable/disable appending permit-agent-forwarding certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_agent_forwarding")

    @property
    @pulumi.getter(name="permitPortForwarding")
    def permit_port_forwarding(self) -> pulumi.Output[str]:
        """
        Enable/disable appending permit-port-forwarding certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_port_forwarding")

    @property
    @pulumi.getter(name="permitPty")
    def permit_pty(self) -> pulumi.Output[str]:
        """
        Enable/disable appending permit-pty certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_pty")

    @property
    @pulumi.getter(name="permitUserRc")
    def permit_user_rc(self) -> pulumi.Output[str]:
        """
        Enable/disable appending permit-user-rc certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_user_rc")

    @property
    @pulumi.getter(name="permitX11Forwarding")
    def permit_x11_forwarding(self) -> pulumi.Output[str]:
        """
        Enable/disable appending permit-x11-forwarding certificate extension. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_x11_forwarding")

    @property
    @pulumi.getter(name="sourceAddress")
    def source_address(self) -> pulumi.Output[str]:
        """
        Enable/disable appending source-address certificate critical option. This option ensure certificate only accepted from FortiGate source address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

