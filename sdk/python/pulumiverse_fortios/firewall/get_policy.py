# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyResult',
    'AwaitableGetPolicyResult',
    'get_policy',
    'get_policy_output',
]

@pulumi.output_type
class GetPolicyResult:
    """
    A collection of values returned by getPolicy.
    """
    def __init__(__self__, action=None, anti_replay=None, app_categories=None, app_groups=None, application_list=None, applications=None, auth_cert=None, auth_path=None, auth_redirect_addr=None, auto_asic_offload=None, av_profile=None, block_notification=None, captive_portal_exempt=None, capture_packet=None, casb_profile=None, cifs_profile=None, comments=None, custom_log_fields=None, decrypted_traffic_mirror=None, delay_tcp_npu_session=None, devices=None, diameter_filter_profile=None, diffserv_copy=None, diffserv_forward=None, diffserv_reverse=None, diffservcode_forward=None, diffservcode_rev=None, disclaimer=None, dlp_profile=None, dlp_sensor=None, dnsfilter_profile=None, dsri=None, dstaddr6_negate=None, dstaddr6s=None, dstaddr_negate=None, dstaddrs=None, dstintfs=None, dynamic_shaping=None, email_collect=None, emailfilter_profile=None, fec=None, file_filter_profile=None, firewall_session_dirty=None, fixedport=None, fsso=None, fsso_agent_for_ntlm=None, fsso_groups=None, geoip_anycast=None, geoip_match=None, global_label=None, groups=None, http_policy_redirect=None, icap_profile=None, id=None, identity_based_route=None, inbound=None, inspection_mode=None, internet_service=None, internet_service6=None, internet_service6_custom_groups=None, internet_service6_customs=None, internet_service6_groups=None, internet_service6_names=None, internet_service6_negate=None, internet_service6_src=None, internet_service6_src_custom_groups=None, internet_service6_src_customs=None, internet_service6_src_groups=None, internet_service6_src_names=None, internet_service6_src_negate=None, internet_service_custom_groups=None, internet_service_customs=None, internet_service_groups=None, internet_service_ids=None, internet_service_names=None, internet_service_negate=None, internet_service_src=None, internet_service_src_custom_groups=None, internet_service_src_customs=None, internet_service_src_groups=None, internet_service_src_ids=None, internet_service_src_names=None, internet_service_src_negate=None, ippool=None, ips_sensor=None, ips_voip_filter=None, label=None, learning_mode=None, logtraffic=None, logtraffic_start=None, match_vip=None, match_vip_only=None, name=None, nat=None, nat46=None, nat64=None, natinbound=None, natip=None, natoutbound=None, network_service_dynamics=None, network_service_src_dynamics=None, np_acceleration=None, ntlm=None, ntlm_enabled_browsers=None, ntlm_guest=None, outbound=None, passive_wan_health_measurement=None, pcp_inbound=None, pcp_outbound=None, pcp_poolnames=None, per_ip_shaper=None, permit_any_host=None, permit_stun_host=None, policy_expiry=None, policy_expiry_date=None, policy_expiry_date_utc=None, policyid=None, poolname6s=None, poolnames=None, profile_group=None, profile_protocol_options=None, profile_type=None, radius_mac_auth_bypass=None, redirect_url=None, replacemsg_override_group=None, reputation_direction=None, reputation_direction6=None, reputation_minimum=None, reputation_minimum6=None, rsso=None, rtp_addrs=None, rtp_nat=None, scan_botnet_connections=None, schedule=None, schedule_timeout=None, sctp_filter_profile=None, send_deny_packet=None, service_negate=None, services=None, session_ttl=None, sgt_check=None, sgts=None, spamfilter_profile=None, src_vendor_macs=None, srcaddr6_negate=None, srcaddr6s=None, srcaddr_negate=None, srcaddrs=None, srcintfs=None, ssh_filter_profile=None, ssh_policy_redirect=None, ssl_mirror=None, ssl_mirror_intfs=None, ssl_ssh_profile=None, status=None, tcp_mss_receiver=None, tcp_mss_sender=None, tcp_session_without_syn=None, timeout_send_rst=None, tos=None, tos_mask=None, tos_negate=None, traffic_shaper=None, traffic_shaper_reverse=None, url_categories=None, users=None, utm_status=None, uuid=None, vdomparam=None, videofilter_profile=None, virtual_patch_profile=None, vlan_cos_fwd=None, vlan_cos_rev=None, vlan_filter=None, voip_profile=None, vpntunnel=None, waf_profile=None, wanopt=None, wanopt_detection=None, wanopt_passive_opt=None, wanopt_peer=None, wanopt_profile=None, wccp=None, webcache=None, webcache_https=None, webfilter_profile=None, webproxy_forward_server=None, webproxy_profile=None, wsso=None, ztna_device_ownership=None, ztna_ems_tag_secondaries=None, ztna_ems_tags=None, ztna_geo_tags=None, ztna_policy_redirect=None, ztna_status=None, ztna_tags_match_logic=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if anti_replay and not isinstance(anti_replay, str):
            raise TypeError("Expected argument 'anti_replay' to be a str")
        pulumi.set(__self__, "anti_replay", anti_replay)
        if app_categories and not isinstance(app_categories, list):
            raise TypeError("Expected argument 'app_categories' to be a list")
        pulumi.set(__self__, "app_categories", app_categories)
        if app_groups and not isinstance(app_groups, list):
            raise TypeError("Expected argument 'app_groups' to be a list")
        pulumi.set(__self__, "app_groups", app_groups)
        if application_list and not isinstance(application_list, str):
            raise TypeError("Expected argument 'application_list' to be a str")
        pulumi.set(__self__, "application_list", application_list)
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if auth_cert and not isinstance(auth_cert, str):
            raise TypeError("Expected argument 'auth_cert' to be a str")
        pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_path and not isinstance(auth_path, str):
            raise TypeError("Expected argument 'auth_path' to be a str")
        pulumi.set(__self__, "auth_path", auth_path)
        if auth_redirect_addr and not isinstance(auth_redirect_addr, str):
            raise TypeError("Expected argument 'auth_redirect_addr' to be a str")
        pulumi.set(__self__, "auth_redirect_addr", auth_redirect_addr)
        if auto_asic_offload and not isinstance(auto_asic_offload, str):
            raise TypeError("Expected argument 'auto_asic_offload' to be a str")
        pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if av_profile and not isinstance(av_profile, str):
            raise TypeError("Expected argument 'av_profile' to be a str")
        pulumi.set(__self__, "av_profile", av_profile)
        if block_notification and not isinstance(block_notification, str):
            raise TypeError("Expected argument 'block_notification' to be a str")
        pulumi.set(__self__, "block_notification", block_notification)
        if captive_portal_exempt and not isinstance(captive_portal_exempt, str):
            raise TypeError("Expected argument 'captive_portal_exempt' to be a str")
        pulumi.set(__self__, "captive_portal_exempt", captive_portal_exempt)
        if capture_packet and not isinstance(capture_packet, str):
            raise TypeError("Expected argument 'capture_packet' to be a str")
        pulumi.set(__self__, "capture_packet", capture_packet)
        if casb_profile and not isinstance(casb_profile, str):
            raise TypeError("Expected argument 'casb_profile' to be a str")
        pulumi.set(__self__, "casb_profile", casb_profile)
        if cifs_profile and not isinstance(cifs_profile, str):
            raise TypeError("Expected argument 'cifs_profile' to be a str")
        pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if custom_log_fields and not isinstance(custom_log_fields, list):
            raise TypeError("Expected argument 'custom_log_fields' to be a list")
        pulumi.set(__self__, "custom_log_fields", custom_log_fields)
        if decrypted_traffic_mirror and not isinstance(decrypted_traffic_mirror, str):
            raise TypeError("Expected argument 'decrypted_traffic_mirror' to be a str")
        pulumi.set(__self__, "decrypted_traffic_mirror", decrypted_traffic_mirror)
        if delay_tcp_npu_session and not isinstance(delay_tcp_npu_session, str):
            raise TypeError("Expected argument 'delay_tcp_npu_session' to be a str")
        pulumi.set(__self__, "delay_tcp_npu_session", delay_tcp_npu_session)
        if devices and not isinstance(devices, list):
            raise TypeError("Expected argument 'devices' to be a list")
        pulumi.set(__self__, "devices", devices)
        if diameter_filter_profile and not isinstance(diameter_filter_profile, str):
            raise TypeError("Expected argument 'diameter_filter_profile' to be a str")
        pulumi.set(__self__, "diameter_filter_profile", diameter_filter_profile)
        if diffserv_copy and not isinstance(diffserv_copy, str):
            raise TypeError("Expected argument 'diffserv_copy' to be a str")
        pulumi.set(__self__, "diffserv_copy", diffserv_copy)
        if diffserv_forward and not isinstance(diffserv_forward, str):
            raise TypeError("Expected argument 'diffserv_forward' to be a str")
        pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse and not isinstance(diffserv_reverse, str):
            raise TypeError("Expected argument 'diffserv_reverse' to be a str")
        pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward and not isinstance(diffservcode_forward, str):
            raise TypeError("Expected argument 'diffservcode_forward' to be a str")
        pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev and not isinstance(diffservcode_rev, str):
            raise TypeError("Expected argument 'diffservcode_rev' to be a str")
        pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if disclaimer and not isinstance(disclaimer, str):
            raise TypeError("Expected argument 'disclaimer' to be a str")
        pulumi.set(__self__, "disclaimer", disclaimer)
        if dlp_profile and not isinstance(dlp_profile, str):
            raise TypeError("Expected argument 'dlp_profile' to be a str")
        pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_sensor and not isinstance(dlp_sensor, str):
            raise TypeError("Expected argument 'dlp_sensor' to be a str")
        pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dnsfilter_profile and not isinstance(dnsfilter_profile, str):
            raise TypeError("Expected argument 'dnsfilter_profile' to be a str")
        pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if dsri and not isinstance(dsri, str):
            raise TypeError("Expected argument 'dsri' to be a str")
        pulumi.set(__self__, "dsri", dsri)
        if dstaddr6_negate and not isinstance(dstaddr6_negate, str):
            raise TypeError("Expected argument 'dstaddr6_negate' to be a str")
        pulumi.set(__self__, "dstaddr6_negate", dstaddr6_negate)
        if dstaddr6s and not isinstance(dstaddr6s, list):
            raise TypeError("Expected argument 'dstaddr6s' to be a list")
        pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddr_negate and not isinstance(dstaddr_negate, str):
            raise TypeError("Expected argument 'dstaddr_negate' to be a str")
        pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstaddrs and not isinstance(dstaddrs, list):
            raise TypeError("Expected argument 'dstaddrs' to be a list")
        pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs and not isinstance(dstintfs, list):
            raise TypeError("Expected argument 'dstintfs' to be a list")
        pulumi.set(__self__, "dstintfs", dstintfs)
        if dynamic_shaping and not isinstance(dynamic_shaping, str):
            raise TypeError("Expected argument 'dynamic_shaping' to be a str")
        pulumi.set(__self__, "dynamic_shaping", dynamic_shaping)
        if email_collect and not isinstance(email_collect, str):
            raise TypeError("Expected argument 'email_collect' to be a str")
        pulumi.set(__self__, "email_collect", email_collect)
        if emailfilter_profile and not isinstance(emailfilter_profile, str):
            raise TypeError("Expected argument 'emailfilter_profile' to be a str")
        pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if fec and not isinstance(fec, str):
            raise TypeError("Expected argument 'fec' to be a str")
        pulumi.set(__self__, "fec", fec)
        if file_filter_profile and not isinstance(file_filter_profile, str):
            raise TypeError("Expected argument 'file_filter_profile' to be a str")
        pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if firewall_session_dirty and not isinstance(firewall_session_dirty, str):
            raise TypeError("Expected argument 'firewall_session_dirty' to be a str")
        pulumi.set(__self__, "firewall_session_dirty", firewall_session_dirty)
        if fixedport and not isinstance(fixedport, str):
            raise TypeError("Expected argument 'fixedport' to be a str")
        pulumi.set(__self__, "fixedport", fixedport)
        if fsso and not isinstance(fsso, str):
            raise TypeError("Expected argument 'fsso' to be a str")
        pulumi.set(__self__, "fsso", fsso)
        if fsso_agent_for_ntlm and not isinstance(fsso_agent_for_ntlm, str):
            raise TypeError("Expected argument 'fsso_agent_for_ntlm' to be a str")
        pulumi.set(__self__, "fsso_agent_for_ntlm", fsso_agent_for_ntlm)
        if fsso_groups and not isinstance(fsso_groups, list):
            raise TypeError("Expected argument 'fsso_groups' to be a list")
        pulumi.set(__self__, "fsso_groups", fsso_groups)
        if geoip_anycast and not isinstance(geoip_anycast, str):
            raise TypeError("Expected argument 'geoip_anycast' to be a str")
        pulumi.set(__self__, "geoip_anycast", geoip_anycast)
        if geoip_match and not isinstance(geoip_match, str):
            raise TypeError("Expected argument 'geoip_match' to be a str")
        pulumi.set(__self__, "geoip_match", geoip_match)
        if global_label and not isinstance(global_label, str):
            raise TypeError("Expected argument 'global_label' to be a str")
        pulumi.set(__self__, "global_label", global_label)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if http_policy_redirect and not isinstance(http_policy_redirect, str):
            raise TypeError("Expected argument 'http_policy_redirect' to be a str")
        pulumi.set(__self__, "http_policy_redirect", http_policy_redirect)
        if icap_profile and not isinstance(icap_profile, str):
            raise TypeError("Expected argument 'icap_profile' to be a str")
        pulumi.set(__self__, "icap_profile", icap_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_based_route and not isinstance(identity_based_route, str):
            raise TypeError("Expected argument 'identity_based_route' to be a str")
        pulumi.set(__self__, "identity_based_route", identity_based_route)
        if inbound and not isinstance(inbound, str):
            raise TypeError("Expected argument 'inbound' to be a str")
        pulumi.set(__self__, "inbound", inbound)
        if inspection_mode and not isinstance(inspection_mode, str):
            raise TypeError("Expected argument 'inspection_mode' to be a str")
        pulumi.set(__self__, "inspection_mode", inspection_mode)
        if internet_service and not isinstance(internet_service, str):
            raise TypeError("Expected argument 'internet_service' to be a str")
        pulumi.set(__self__, "internet_service", internet_service)
        if internet_service6 and not isinstance(internet_service6, str):
            raise TypeError("Expected argument 'internet_service6' to be a str")
        pulumi.set(__self__, "internet_service6", internet_service6)
        if internet_service6_custom_groups and not isinstance(internet_service6_custom_groups, list):
            raise TypeError("Expected argument 'internet_service6_custom_groups' to be a list")
        pulumi.set(__self__, "internet_service6_custom_groups", internet_service6_custom_groups)
        if internet_service6_customs and not isinstance(internet_service6_customs, list):
            raise TypeError("Expected argument 'internet_service6_customs' to be a list")
        pulumi.set(__self__, "internet_service6_customs", internet_service6_customs)
        if internet_service6_groups and not isinstance(internet_service6_groups, list):
            raise TypeError("Expected argument 'internet_service6_groups' to be a list")
        pulumi.set(__self__, "internet_service6_groups", internet_service6_groups)
        if internet_service6_names and not isinstance(internet_service6_names, list):
            raise TypeError("Expected argument 'internet_service6_names' to be a list")
        pulumi.set(__self__, "internet_service6_names", internet_service6_names)
        if internet_service6_negate and not isinstance(internet_service6_negate, str):
            raise TypeError("Expected argument 'internet_service6_negate' to be a str")
        pulumi.set(__self__, "internet_service6_negate", internet_service6_negate)
        if internet_service6_src and not isinstance(internet_service6_src, str):
            raise TypeError("Expected argument 'internet_service6_src' to be a str")
        pulumi.set(__self__, "internet_service6_src", internet_service6_src)
        if internet_service6_src_custom_groups and not isinstance(internet_service6_src_custom_groups, list):
            raise TypeError("Expected argument 'internet_service6_src_custom_groups' to be a list")
        pulumi.set(__self__, "internet_service6_src_custom_groups", internet_service6_src_custom_groups)
        if internet_service6_src_customs and not isinstance(internet_service6_src_customs, list):
            raise TypeError("Expected argument 'internet_service6_src_customs' to be a list")
        pulumi.set(__self__, "internet_service6_src_customs", internet_service6_src_customs)
        if internet_service6_src_groups and not isinstance(internet_service6_src_groups, list):
            raise TypeError("Expected argument 'internet_service6_src_groups' to be a list")
        pulumi.set(__self__, "internet_service6_src_groups", internet_service6_src_groups)
        if internet_service6_src_names and not isinstance(internet_service6_src_names, list):
            raise TypeError("Expected argument 'internet_service6_src_names' to be a list")
        pulumi.set(__self__, "internet_service6_src_names", internet_service6_src_names)
        if internet_service6_src_negate and not isinstance(internet_service6_src_negate, str):
            raise TypeError("Expected argument 'internet_service6_src_negate' to be a str")
        pulumi.set(__self__, "internet_service6_src_negate", internet_service6_src_negate)
        if internet_service_custom_groups and not isinstance(internet_service_custom_groups, list):
            raise TypeError("Expected argument 'internet_service_custom_groups' to be a list")
        pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs and not isinstance(internet_service_customs, list):
            raise TypeError("Expected argument 'internet_service_customs' to be a list")
        pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups and not isinstance(internet_service_groups, list):
            raise TypeError("Expected argument 'internet_service_groups' to be a list")
        pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids and not isinstance(internet_service_ids, list):
            raise TypeError("Expected argument 'internet_service_ids' to be a list")
        pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names and not isinstance(internet_service_names, list):
            raise TypeError("Expected argument 'internet_service_names' to be a list")
        pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_negate and not isinstance(internet_service_negate, str):
            raise TypeError("Expected argument 'internet_service_negate' to be a str")
        pulumi.set(__self__, "internet_service_negate", internet_service_negate)
        if internet_service_src and not isinstance(internet_service_src, str):
            raise TypeError("Expected argument 'internet_service_src' to be a str")
        pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_custom_groups and not isinstance(internet_service_src_custom_groups, list):
            raise TypeError("Expected argument 'internet_service_src_custom_groups' to be a list")
        pulumi.set(__self__, "internet_service_src_custom_groups", internet_service_src_custom_groups)
        if internet_service_src_customs and not isinstance(internet_service_src_customs, list):
            raise TypeError("Expected argument 'internet_service_src_customs' to be a list")
        pulumi.set(__self__, "internet_service_src_customs", internet_service_src_customs)
        if internet_service_src_groups and not isinstance(internet_service_src_groups, list):
            raise TypeError("Expected argument 'internet_service_src_groups' to be a list")
        pulumi.set(__self__, "internet_service_src_groups", internet_service_src_groups)
        if internet_service_src_ids and not isinstance(internet_service_src_ids, list):
            raise TypeError("Expected argument 'internet_service_src_ids' to be a list")
        pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names and not isinstance(internet_service_src_names, list):
            raise TypeError("Expected argument 'internet_service_src_names' to be a list")
        pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if internet_service_src_negate and not isinstance(internet_service_src_negate, str):
            raise TypeError("Expected argument 'internet_service_src_negate' to be a str")
        pulumi.set(__self__, "internet_service_src_negate", internet_service_src_negate)
        if ippool and not isinstance(ippool, str):
            raise TypeError("Expected argument 'ippool' to be a str")
        pulumi.set(__self__, "ippool", ippool)
        if ips_sensor and not isinstance(ips_sensor, str):
            raise TypeError("Expected argument 'ips_sensor' to be a str")
        pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_voip_filter and not isinstance(ips_voip_filter, str):
            raise TypeError("Expected argument 'ips_voip_filter' to be a str")
        pulumi.set(__self__, "ips_voip_filter", ips_voip_filter)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if learning_mode and not isinstance(learning_mode, str):
            raise TypeError("Expected argument 'learning_mode' to be a str")
        pulumi.set(__self__, "learning_mode", learning_mode)
        if logtraffic and not isinstance(logtraffic, str):
            raise TypeError("Expected argument 'logtraffic' to be a str")
        pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start and not isinstance(logtraffic_start, str):
            raise TypeError("Expected argument 'logtraffic_start' to be a str")
        pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if match_vip and not isinstance(match_vip, str):
            raise TypeError("Expected argument 'match_vip' to be a str")
        pulumi.set(__self__, "match_vip", match_vip)
        if match_vip_only and not isinstance(match_vip_only, str):
            raise TypeError("Expected argument 'match_vip_only' to be a str")
        pulumi.set(__self__, "match_vip_only", match_vip_only)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nat and not isinstance(nat, str):
            raise TypeError("Expected argument 'nat' to be a str")
        pulumi.set(__self__, "nat", nat)
        if nat46 and not isinstance(nat46, str):
            raise TypeError("Expected argument 'nat46' to be a str")
        pulumi.set(__self__, "nat46", nat46)
        if nat64 and not isinstance(nat64, str):
            raise TypeError("Expected argument 'nat64' to be a str")
        pulumi.set(__self__, "nat64", nat64)
        if natinbound and not isinstance(natinbound, str):
            raise TypeError("Expected argument 'natinbound' to be a str")
        pulumi.set(__self__, "natinbound", natinbound)
        if natip and not isinstance(natip, str):
            raise TypeError("Expected argument 'natip' to be a str")
        pulumi.set(__self__, "natip", natip)
        if natoutbound and not isinstance(natoutbound, str):
            raise TypeError("Expected argument 'natoutbound' to be a str")
        pulumi.set(__self__, "natoutbound", natoutbound)
        if network_service_dynamics and not isinstance(network_service_dynamics, list):
            raise TypeError("Expected argument 'network_service_dynamics' to be a list")
        pulumi.set(__self__, "network_service_dynamics", network_service_dynamics)
        if network_service_src_dynamics and not isinstance(network_service_src_dynamics, list):
            raise TypeError("Expected argument 'network_service_src_dynamics' to be a list")
        pulumi.set(__self__, "network_service_src_dynamics", network_service_src_dynamics)
        if np_acceleration and not isinstance(np_acceleration, str):
            raise TypeError("Expected argument 'np_acceleration' to be a str")
        pulumi.set(__self__, "np_acceleration", np_acceleration)
        if ntlm and not isinstance(ntlm, str):
            raise TypeError("Expected argument 'ntlm' to be a str")
        pulumi.set(__self__, "ntlm", ntlm)
        if ntlm_enabled_browsers and not isinstance(ntlm_enabled_browsers, list):
            raise TypeError("Expected argument 'ntlm_enabled_browsers' to be a list")
        pulumi.set(__self__, "ntlm_enabled_browsers", ntlm_enabled_browsers)
        if ntlm_guest and not isinstance(ntlm_guest, str):
            raise TypeError("Expected argument 'ntlm_guest' to be a str")
        pulumi.set(__self__, "ntlm_guest", ntlm_guest)
        if outbound and not isinstance(outbound, str):
            raise TypeError("Expected argument 'outbound' to be a str")
        pulumi.set(__self__, "outbound", outbound)
        if passive_wan_health_measurement and not isinstance(passive_wan_health_measurement, str):
            raise TypeError("Expected argument 'passive_wan_health_measurement' to be a str")
        pulumi.set(__self__, "passive_wan_health_measurement", passive_wan_health_measurement)
        if pcp_inbound and not isinstance(pcp_inbound, str):
            raise TypeError("Expected argument 'pcp_inbound' to be a str")
        pulumi.set(__self__, "pcp_inbound", pcp_inbound)
        if pcp_outbound and not isinstance(pcp_outbound, str):
            raise TypeError("Expected argument 'pcp_outbound' to be a str")
        pulumi.set(__self__, "pcp_outbound", pcp_outbound)
        if pcp_poolnames and not isinstance(pcp_poolnames, list):
            raise TypeError("Expected argument 'pcp_poolnames' to be a list")
        pulumi.set(__self__, "pcp_poolnames", pcp_poolnames)
        if per_ip_shaper and not isinstance(per_ip_shaper, str):
            raise TypeError("Expected argument 'per_ip_shaper' to be a str")
        pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if permit_any_host and not isinstance(permit_any_host, str):
            raise TypeError("Expected argument 'permit_any_host' to be a str")
        pulumi.set(__self__, "permit_any_host", permit_any_host)
        if permit_stun_host and not isinstance(permit_stun_host, str):
            raise TypeError("Expected argument 'permit_stun_host' to be a str")
        pulumi.set(__self__, "permit_stun_host", permit_stun_host)
        if policy_expiry and not isinstance(policy_expiry, str):
            raise TypeError("Expected argument 'policy_expiry' to be a str")
        pulumi.set(__self__, "policy_expiry", policy_expiry)
        if policy_expiry_date and not isinstance(policy_expiry_date, str):
            raise TypeError("Expected argument 'policy_expiry_date' to be a str")
        pulumi.set(__self__, "policy_expiry_date", policy_expiry_date)
        if policy_expiry_date_utc and not isinstance(policy_expiry_date_utc, str):
            raise TypeError("Expected argument 'policy_expiry_date_utc' to be a str")
        pulumi.set(__self__, "policy_expiry_date_utc", policy_expiry_date_utc)
        if policyid and not isinstance(policyid, int):
            raise TypeError("Expected argument 'policyid' to be a int")
        pulumi.set(__self__, "policyid", policyid)
        if poolname6s and not isinstance(poolname6s, list):
            raise TypeError("Expected argument 'poolname6s' to be a list")
        pulumi.set(__self__, "poolname6s", poolname6s)
        if poolnames and not isinstance(poolnames, list):
            raise TypeError("Expected argument 'poolnames' to be a list")
        pulumi.set(__self__, "poolnames", poolnames)
        if profile_group and not isinstance(profile_group, str):
            raise TypeError("Expected argument 'profile_group' to be a str")
        pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options and not isinstance(profile_protocol_options, str):
            raise TypeError("Expected argument 'profile_protocol_options' to be a str")
        pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type and not isinstance(profile_type, str):
            raise TypeError("Expected argument 'profile_type' to be a str")
        pulumi.set(__self__, "profile_type", profile_type)
        if radius_mac_auth_bypass and not isinstance(radius_mac_auth_bypass, str):
            raise TypeError("Expected argument 'radius_mac_auth_bypass' to be a str")
        pulumi.set(__self__, "radius_mac_auth_bypass", radius_mac_auth_bypass)
        if redirect_url and not isinstance(redirect_url, str):
            raise TypeError("Expected argument 'redirect_url' to be a str")
        pulumi.set(__self__, "redirect_url", redirect_url)
        if replacemsg_override_group and not isinstance(replacemsg_override_group, str):
            raise TypeError("Expected argument 'replacemsg_override_group' to be a str")
        pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if reputation_direction and not isinstance(reputation_direction, str):
            raise TypeError("Expected argument 'reputation_direction' to be a str")
        pulumi.set(__self__, "reputation_direction", reputation_direction)
        if reputation_direction6 and not isinstance(reputation_direction6, str):
            raise TypeError("Expected argument 'reputation_direction6' to be a str")
        pulumi.set(__self__, "reputation_direction6", reputation_direction6)
        if reputation_minimum and not isinstance(reputation_minimum, int):
            raise TypeError("Expected argument 'reputation_minimum' to be a int")
        pulumi.set(__self__, "reputation_minimum", reputation_minimum)
        if reputation_minimum6 and not isinstance(reputation_minimum6, int):
            raise TypeError("Expected argument 'reputation_minimum6' to be a int")
        pulumi.set(__self__, "reputation_minimum6", reputation_minimum6)
        if rsso and not isinstance(rsso, str):
            raise TypeError("Expected argument 'rsso' to be a str")
        pulumi.set(__self__, "rsso", rsso)
        if rtp_addrs and not isinstance(rtp_addrs, list):
            raise TypeError("Expected argument 'rtp_addrs' to be a list")
        pulumi.set(__self__, "rtp_addrs", rtp_addrs)
        if rtp_nat and not isinstance(rtp_nat, str):
            raise TypeError("Expected argument 'rtp_nat' to be a str")
        pulumi.set(__self__, "rtp_nat", rtp_nat)
        if scan_botnet_connections and not isinstance(scan_botnet_connections, str):
            raise TypeError("Expected argument 'scan_botnet_connections' to be a str")
        pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if schedule and not isinstance(schedule, str):
            raise TypeError("Expected argument 'schedule' to be a str")
        pulumi.set(__self__, "schedule", schedule)
        if schedule_timeout and not isinstance(schedule_timeout, str):
            raise TypeError("Expected argument 'schedule_timeout' to be a str")
        pulumi.set(__self__, "schedule_timeout", schedule_timeout)
        if sctp_filter_profile and not isinstance(sctp_filter_profile, str):
            raise TypeError("Expected argument 'sctp_filter_profile' to be a str")
        pulumi.set(__self__, "sctp_filter_profile", sctp_filter_profile)
        if send_deny_packet and not isinstance(send_deny_packet, str):
            raise TypeError("Expected argument 'send_deny_packet' to be a str")
        pulumi.set(__self__, "send_deny_packet", send_deny_packet)
        if service_negate and not isinstance(service_negate, str):
            raise TypeError("Expected argument 'service_negate' to be a str")
        pulumi.set(__self__, "service_negate", service_negate)
        if services and not isinstance(services, list):
            raise TypeError("Expected argument 'services' to be a list")
        pulumi.set(__self__, "services", services)
        if session_ttl and not isinstance(session_ttl, int):
            raise TypeError("Expected argument 'session_ttl' to be a int")
        pulumi.set(__self__, "session_ttl", session_ttl)
        if sgt_check and not isinstance(sgt_check, str):
            raise TypeError("Expected argument 'sgt_check' to be a str")
        pulumi.set(__self__, "sgt_check", sgt_check)
        if sgts and not isinstance(sgts, list):
            raise TypeError("Expected argument 'sgts' to be a list")
        pulumi.set(__self__, "sgts", sgts)
        if spamfilter_profile and not isinstance(spamfilter_profile, str):
            raise TypeError("Expected argument 'spamfilter_profile' to be a str")
        pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if src_vendor_macs and not isinstance(src_vendor_macs, list):
            raise TypeError("Expected argument 'src_vendor_macs' to be a list")
        pulumi.set(__self__, "src_vendor_macs", src_vendor_macs)
        if srcaddr6_negate and not isinstance(srcaddr6_negate, str):
            raise TypeError("Expected argument 'srcaddr6_negate' to be a str")
        pulumi.set(__self__, "srcaddr6_negate", srcaddr6_negate)
        if srcaddr6s and not isinstance(srcaddr6s, list):
            raise TypeError("Expected argument 'srcaddr6s' to be a list")
        pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddr_negate and not isinstance(srcaddr_negate, str):
            raise TypeError("Expected argument 'srcaddr_negate' to be a str")
        pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcaddrs and not isinstance(srcaddrs, list):
            raise TypeError("Expected argument 'srcaddrs' to be a list")
        pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs and not isinstance(srcintfs, list):
            raise TypeError("Expected argument 'srcintfs' to be a list")
        pulumi.set(__self__, "srcintfs", srcintfs)
        if ssh_filter_profile and not isinstance(ssh_filter_profile, str):
            raise TypeError("Expected argument 'ssh_filter_profile' to be a str")
        pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect and not isinstance(ssh_policy_redirect, str):
            raise TypeError("Expected argument 'ssh_policy_redirect' to be a str")
        pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_mirror and not isinstance(ssl_mirror, str):
            raise TypeError("Expected argument 'ssl_mirror' to be a str")
        pulumi.set(__self__, "ssl_mirror", ssl_mirror)
        if ssl_mirror_intfs and not isinstance(ssl_mirror_intfs, list):
            raise TypeError("Expected argument 'ssl_mirror_intfs' to be a list")
        pulumi.set(__self__, "ssl_mirror_intfs", ssl_mirror_intfs)
        if ssl_ssh_profile and not isinstance(ssl_ssh_profile, str):
            raise TypeError("Expected argument 'ssl_ssh_profile' to be a str")
        pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tcp_mss_receiver and not isinstance(tcp_mss_receiver, int):
            raise TypeError("Expected argument 'tcp_mss_receiver' to be a int")
        pulumi.set(__self__, "tcp_mss_receiver", tcp_mss_receiver)
        if tcp_mss_sender and not isinstance(tcp_mss_sender, int):
            raise TypeError("Expected argument 'tcp_mss_sender' to be a int")
        pulumi.set(__self__, "tcp_mss_sender", tcp_mss_sender)
        if tcp_session_without_syn and not isinstance(tcp_session_without_syn, str):
            raise TypeError("Expected argument 'tcp_session_without_syn' to be a str")
        pulumi.set(__self__, "tcp_session_without_syn", tcp_session_without_syn)
        if timeout_send_rst and not isinstance(timeout_send_rst, str):
            raise TypeError("Expected argument 'timeout_send_rst' to be a str")
        pulumi.set(__self__, "timeout_send_rst", timeout_send_rst)
        if tos and not isinstance(tos, str):
            raise TypeError("Expected argument 'tos' to be a str")
        pulumi.set(__self__, "tos", tos)
        if tos_mask and not isinstance(tos_mask, str):
            raise TypeError("Expected argument 'tos_mask' to be a str")
        pulumi.set(__self__, "tos_mask", tos_mask)
        if tos_negate and not isinstance(tos_negate, str):
            raise TypeError("Expected argument 'tos_negate' to be a str")
        pulumi.set(__self__, "tos_negate", tos_negate)
        if traffic_shaper and not isinstance(traffic_shaper, str):
            raise TypeError("Expected argument 'traffic_shaper' to be a str")
        pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse and not isinstance(traffic_shaper_reverse, str):
            raise TypeError("Expected argument 'traffic_shaper_reverse' to be a str")
        pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if url_categories and not isinstance(url_categories, list):
            raise TypeError("Expected argument 'url_categories' to be a list")
        pulumi.set(__self__, "url_categories", url_categories)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)
        if utm_status and not isinstance(utm_status, str):
            raise TypeError("Expected argument 'utm_status' to be a str")
        pulumi.set(__self__, "utm_status", utm_status)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_profile and not isinstance(videofilter_profile, str):
            raise TypeError("Expected argument 'videofilter_profile' to be a str")
        pulumi.set(__self__, "videofilter_profile", videofilter_profile)
        if virtual_patch_profile and not isinstance(virtual_patch_profile, str):
            raise TypeError("Expected argument 'virtual_patch_profile' to be a str")
        pulumi.set(__self__, "virtual_patch_profile", virtual_patch_profile)
        if vlan_cos_fwd and not isinstance(vlan_cos_fwd, int):
            raise TypeError("Expected argument 'vlan_cos_fwd' to be a int")
        pulumi.set(__self__, "vlan_cos_fwd", vlan_cos_fwd)
        if vlan_cos_rev and not isinstance(vlan_cos_rev, int):
            raise TypeError("Expected argument 'vlan_cos_rev' to be a int")
        pulumi.set(__self__, "vlan_cos_rev", vlan_cos_rev)
        if vlan_filter and not isinstance(vlan_filter, str):
            raise TypeError("Expected argument 'vlan_filter' to be a str")
        pulumi.set(__self__, "vlan_filter", vlan_filter)
        if voip_profile and not isinstance(voip_profile, str):
            raise TypeError("Expected argument 'voip_profile' to be a str")
        pulumi.set(__self__, "voip_profile", voip_profile)
        if vpntunnel and not isinstance(vpntunnel, str):
            raise TypeError("Expected argument 'vpntunnel' to be a str")
        pulumi.set(__self__, "vpntunnel", vpntunnel)
        if waf_profile and not isinstance(waf_profile, str):
            raise TypeError("Expected argument 'waf_profile' to be a str")
        pulumi.set(__self__, "waf_profile", waf_profile)
        if wanopt and not isinstance(wanopt, str):
            raise TypeError("Expected argument 'wanopt' to be a str")
        pulumi.set(__self__, "wanopt", wanopt)
        if wanopt_detection and not isinstance(wanopt_detection, str):
            raise TypeError("Expected argument 'wanopt_detection' to be a str")
        pulumi.set(__self__, "wanopt_detection", wanopt_detection)
        if wanopt_passive_opt and not isinstance(wanopt_passive_opt, str):
            raise TypeError("Expected argument 'wanopt_passive_opt' to be a str")
        pulumi.set(__self__, "wanopt_passive_opt", wanopt_passive_opt)
        if wanopt_peer and not isinstance(wanopt_peer, str):
            raise TypeError("Expected argument 'wanopt_peer' to be a str")
        pulumi.set(__self__, "wanopt_peer", wanopt_peer)
        if wanopt_profile and not isinstance(wanopt_profile, str):
            raise TypeError("Expected argument 'wanopt_profile' to be a str")
        pulumi.set(__self__, "wanopt_profile", wanopt_profile)
        if wccp and not isinstance(wccp, str):
            raise TypeError("Expected argument 'wccp' to be a str")
        pulumi.set(__self__, "wccp", wccp)
        if webcache and not isinstance(webcache, str):
            raise TypeError("Expected argument 'webcache' to be a str")
        pulumi.set(__self__, "webcache", webcache)
        if webcache_https and not isinstance(webcache_https, str):
            raise TypeError("Expected argument 'webcache_https' to be a str")
        pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile and not isinstance(webfilter_profile, str):
            raise TypeError("Expected argument 'webfilter_profile' to be a str")
        pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server and not isinstance(webproxy_forward_server, str):
            raise TypeError("Expected argument 'webproxy_forward_server' to be a str")
        pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile and not isinstance(webproxy_profile, str):
            raise TypeError("Expected argument 'webproxy_profile' to be a str")
        pulumi.set(__self__, "webproxy_profile", webproxy_profile)
        if wsso and not isinstance(wsso, str):
            raise TypeError("Expected argument 'wsso' to be a str")
        pulumi.set(__self__, "wsso", wsso)
        if ztna_device_ownership and not isinstance(ztna_device_ownership, str):
            raise TypeError("Expected argument 'ztna_device_ownership' to be a str")
        pulumi.set(__self__, "ztna_device_ownership", ztna_device_ownership)
        if ztna_ems_tag_secondaries and not isinstance(ztna_ems_tag_secondaries, list):
            raise TypeError("Expected argument 'ztna_ems_tag_secondaries' to be a list")
        pulumi.set(__self__, "ztna_ems_tag_secondaries", ztna_ems_tag_secondaries)
        if ztna_ems_tags and not isinstance(ztna_ems_tags, list):
            raise TypeError("Expected argument 'ztna_ems_tags' to be a list")
        pulumi.set(__self__, "ztna_ems_tags", ztna_ems_tags)
        if ztna_geo_tags and not isinstance(ztna_geo_tags, list):
            raise TypeError("Expected argument 'ztna_geo_tags' to be a list")
        pulumi.set(__self__, "ztna_geo_tags", ztna_geo_tags)
        if ztna_policy_redirect and not isinstance(ztna_policy_redirect, str):
            raise TypeError("Expected argument 'ztna_policy_redirect' to be a str")
        pulumi.set(__self__, "ztna_policy_redirect", ztna_policy_redirect)
        if ztna_status and not isinstance(ztna_status, str):
            raise TypeError("Expected argument 'ztna_status' to be a str")
        pulumi.set(__self__, "ztna_status", ztna_status)
        if ztna_tags_match_logic and not isinstance(ztna_tags_match_logic, str):
            raise TypeError("Expected argument 'ztna_tags_match_logic' to be a str")
        pulumi.set(__self__, "ztna_tags_match_logic", ztna_tags_match_logic)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy action (allow/deny/ipsec).
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> str:
        """
        Enable/disable anti-replay check.
        """
        return pulumi.get(self, "anti_replay")

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Sequence['outputs.GetPolicyAppCategoryResult']:
        """
        Application category ID list. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> Sequence['outputs.GetPolicyAppGroupResult']:
        """
        Application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> str:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetPolicyApplicationResult']:
        """
        Application ID list. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> str:
        """
        HTTPS server certificate for policy authentication.
        """
        return pulumi.get(self, "auth_cert")

    @property
    @pulumi.getter(name="authPath")
    def auth_path(self) -> str:
        """
        Enable/disable authentication-based routing.
        """
        return pulumi.get(self, "auth_path")

    @property
    @pulumi.getter(name="authRedirectAddr")
    def auth_redirect_addr(self) -> str:
        """
        HTTP-to-HTTPS redirect address for firewall authentication.
        """
        return pulumi.get(self, "auth_redirect_addr")

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> str:
        """
        Enable/disable policy traffic ASIC offloading.
        """
        return pulumi.get(self, "auto_asic_offload")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> str:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="blockNotification")
    def block_notification(self) -> str:
        """
        Enable/disable block notification.
        """
        return pulumi.get(self, "block_notification")

    @property
    @pulumi.getter(name="captivePortalExempt")
    def captive_portal_exempt(self) -> str:
        """
        Enable to exempt some users from the captive portal.
        """
        return pulumi.get(self, "captive_portal_exempt")

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> str:
        """
        Enable/disable capture packets.
        """
        return pulumi.get(self, "capture_packet")

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> str:
        """
        Name of an existing CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> str:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> Sequence['outputs.GetPolicyCustomLogFieldResult']:
        """
        Custom fields to append to log messages for this policy. The structure of `custom_log_fields` block is documented below.
        """
        return pulumi.get(self, "custom_log_fields")

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> str:
        """
        Decrypted traffic mirror.
        """
        return pulumi.get(self, "decrypted_traffic_mirror")

    @property
    @pulumi.getter(name="delayTcpNpuSession")
    def delay_tcp_npu_session(self) -> str:
        """
        Enable TCP NPU session delay to guarantee packet order of 3-way handshake.
        """
        return pulumi.get(self, "delay_tcp_npu_session")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetPolicyDeviceResult']:
        """
        Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="diameterFilterProfile")
    def diameter_filter_profile(self) -> str:
        """
        Name of an existing Diameter filter profile.
        """
        return pulumi.get(self, "diameter_filter_profile")

    @property
    @pulumi.getter(name="diffservCopy")
    def diffserv_copy(self) -> str:
        """
        Enable to copy packet's DiffServ values from session's original direction to its reply direction.
        """
        return pulumi.get(self, "diffserv_copy")

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> str:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value.
        """
        return pulumi.get(self, "diffserv_forward")

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> str:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
        """
        return pulumi.get(self, "diffserv_reverse")

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> str:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> str:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @property
    @pulumi.getter
    def disclaimer(self) -> str:
        """
        Enable/disable user authentication disclaimer.
        """
        return pulumi.get(self, "disclaimer")

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> str:
        """
        Name of an existing DLP profile.
        """
        return pulumi.get(self, "dlp_profile")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> str:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> str:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profile")

    @property
    @pulumi.getter
    def dsri(self) -> str:
        """
        Enable DSRI to ignore HTTP server responses.
        """
        return pulumi.get(self, "dsri")

    @property
    @pulumi.getter(name="dstaddr6Negate")
    def dstaddr6_negate(self) -> str:
        """
        When enabled dstaddr6 specifies what the destination address must NOT be.
        """
        return pulumi.get(self, "dstaddr6_negate")

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Sequence['outputs.GetPolicyDstaddr6Result']:
        """
        Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> str:
        """
        When enabled dstaddr specifies what the destination address must NOT be.
        """
        return pulumi.get(self, "dstaddr_negate")

    @property
    @pulumi.getter
    def dstaddrs(self) -> Sequence['outputs.GetPolicyDstaddrResult']:
        """
        Destination address and address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintfs(self) -> Sequence['outputs.GetPolicyDstintfResult']:
        """
        Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter(name="dynamicShaping")
    def dynamic_shaping(self) -> str:
        """
        Enable/disable dynamic RADIUS defined traffic shaping.
        """
        return pulumi.get(self, "dynamic_shaping")

    @property
    @pulumi.getter(name="emailCollect")
    def email_collect(self) -> str:
        """
        Enable/disable email collection.
        """
        return pulumi.get(self, "email_collect")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> str:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter
    def fec(self) -> str:
        """
        Enable/disable Forward Error Correction on traffic matching this policy on a FEC device.
        """
        return pulumi.get(self, "fec")

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> str:
        """
        Name of an existing file-filter profile.
        """
        return pulumi.get(self, "file_filter_profile")

    @property
    @pulumi.getter(name="firewallSessionDirty")
    def firewall_session_dirty(self) -> str:
        """
        How to handle sessions if the configuration of this firewall policy changes.
        """
        return pulumi.get(self, "firewall_session_dirty")

    @property
    @pulumi.getter
    def fixedport(self) -> str:
        """
        Enable to prevent source NAT from changing a session's source port.
        """
        return pulumi.get(self, "fixedport")

    @property
    @pulumi.getter
    def fsso(self) -> str:
        """
        Enable/disable Fortinet Single Sign-On.
        """
        return pulumi.get(self, "fsso")

    @property
    @pulumi.getter(name="fssoAgentForNtlm")
    def fsso_agent_for_ntlm(self) -> str:
        """
        FSSO agent to use for NTLM authentication.
        """
        return pulumi.get(self, "fsso_agent_for_ntlm")

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> Sequence['outputs.GetPolicyFssoGroupResult']:
        """
        Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @property
    @pulumi.getter(name="geoipAnycast")
    def geoip_anycast(self) -> str:
        """
        Enable/disable recognition of anycast IP addresses using the geography IP database.
        """
        return pulumi.get(self, "geoip_anycast")

    @property
    @pulumi.getter(name="geoipMatch")
    def geoip_match(self) -> str:
        """
        Match geography address based either on its physical location or registered location.
        """
        return pulumi.get(self, "geoip_match")

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> str:
        """
        Label for the policy that appears when the GUI is in Global View mode.
        """
        return pulumi.get(self, "global_label")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetPolicyGroupResult']:
        """
        Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> str:
        """
        Redirect HTTP(S) traffic to matching transparent web proxy policy.
        """
        return pulumi.get(self, "http_policy_redirect")

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> str:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityBasedRoute")
    def identity_based_route(self) -> str:
        """
        Name of identity-based routing rule.
        """
        return pulumi.get(self, "identity_based_route")

    @property
    @pulumi.getter
    def inbound(self) -> str:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN.
        """
        return pulumi.get(self, "inbound")

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> str:
        """
        Policy inspection mode (Flow/proxy). Default is Flow mode.
        """
        return pulumi.get(self, "inspection_mode")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> str:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetService6")
    def internet_service6(self) -> str:
        """
        Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used.
        """
        return pulumi.get(self, "internet_service6")

    @property
    @pulumi.getter(name="internetService6CustomGroups")
    def internet_service6_custom_groups(self) -> Sequence['outputs.GetPolicyInternetService6CustomGroupResult']:
        """
        Custom Internet Service6 group name. The structure of `internet_service6_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_custom_groups")

    @property
    @pulumi.getter(name="internetService6Customs")
    def internet_service6_customs(self) -> Sequence['outputs.GetPolicyInternetService6CustomResult']:
        """
        Custom IPv6 Internet Service name. The structure of `internet_service6_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_customs")

    @property
    @pulumi.getter(name="internetService6Groups")
    def internet_service6_groups(self) -> Sequence['outputs.GetPolicyInternetService6GroupResult']:
        """
        Internet Service group name. The structure of `internet_service6_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_groups")

    @property
    @pulumi.getter(name="internetService6Names")
    def internet_service6_names(self) -> Sequence['outputs.GetPolicyInternetService6NameResult']:
        """
        IPv6 Internet Service name. The structure of `internet_service6_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_names")

    @property
    @pulumi.getter(name="internetService6Negate")
    def internet_service6_negate(self) -> str:
        """
        When enabled internet-service6 specifies what the service must NOT be.
        """
        return pulumi.get(self, "internet_service6_negate")

    @property
    @pulumi.getter(name="internetService6Src")
    def internet_service6_src(self) -> str:
        """
        Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used.
        """
        return pulumi.get(self, "internet_service6_src")

    @property
    @pulumi.getter(name="internetService6SrcCustomGroups")
    def internet_service6_src_custom_groups(self) -> Sequence['outputs.GetPolicyInternetService6SrcCustomGroupResult']:
        """
        Custom Internet Service6 source group name. The structure of `internet_service6_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_custom_groups")

    @property
    @pulumi.getter(name="internetService6SrcCustoms")
    def internet_service6_src_customs(self) -> Sequence['outputs.GetPolicyInternetService6SrcCustomResult']:
        """
        Custom IPv6 Internet Service source name. The structure of `internet_service6_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_customs")

    @property
    @pulumi.getter(name="internetService6SrcGroups")
    def internet_service6_src_groups(self) -> Sequence['outputs.GetPolicyInternetService6SrcGroupResult']:
        """
        Internet Service6 source group name. The structure of `internet_service6_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_groups")

    @property
    @pulumi.getter(name="internetService6SrcNames")
    def internet_service6_src_names(self) -> Sequence['outputs.GetPolicyInternetService6SrcNameResult']:
        """
        IPv6 Internet Service source name. The structure of `internet_service6_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_names")

    @property
    @pulumi.getter(name="internetService6SrcNegate")
    def internet_service6_src_negate(self) -> str:
        """
        When enabled internet-service6-src specifies what the service must NOT be.
        """
        return pulumi.get(self, "internet_service6_src_negate")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Sequence['outputs.GetPolicyInternetServiceCustomGroupResult']:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Sequence['outputs.GetPolicyInternetServiceCustomResult']:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Sequence['outputs.GetPolicyInternetServiceGroupResult']:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Sequence['outputs.GetPolicyInternetServiceIdResult']:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Sequence['outputs.GetPolicyInternetServiceNameResult']:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> str:
        """
        When enabled internet-service specifies what the service must NOT be.
        """
        return pulumi.get(self, "internet_service_negate")

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> str:
        """
        Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
        """
        return pulumi.get(self, "internet_service_src")

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> Sequence['outputs.GetPolicyInternetServiceSrcCustomGroupResult']:
        """
        Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_custom_groups")

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> Sequence['outputs.GetPolicyInternetServiceSrcCustomResult']:
        """
        Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_customs")

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> Sequence['outputs.GetPolicyInternetServiceSrcGroupResult']:
        """
        Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_groups")

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Sequence['outputs.GetPolicyInternetServiceSrcIdResult']:
        """
        Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Sequence['outputs.GetPolicyInternetServiceSrcNameResult']:
        """
        Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_names")

    @property
    @pulumi.getter(name="internetServiceSrcNegate")
    def internet_service_src_negate(self) -> str:
        """
        When enabled internet-service-src specifies what the service must NOT be.
        """
        return pulumi.get(self, "internet_service_src_negate")

    @property
    @pulumi.getter
    def ippool(self) -> str:
        """
        Enable to use IP Pools for source NAT.
        """
        return pulumi.get(self, "ippool")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> str:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> str:
        """
        Name of an existing VoIP (ips) profile.
        """
        return pulumi.get(self, "ips_voip_filter")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label for the policy that appears when the GUI is in Section View mode.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="learningMode")
    def learning_mode(self) -> str:
        """
        Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated.
        """
        return pulumi.get(self, "learning_mode")

    @property
    @pulumi.getter
    def logtraffic(self) -> str:
        """
        Enable or disable logging. Log all sessions or security profile sessions.
        """
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> str:
        """
        Record logs when a session starts.
        """
        return pulumi.get(self, "logtraffic_start")

    @property
    @pulumi.getter(name="matchVip")
    def match_vip(self) -> str:
        """
        Enable to match packets that have had their destination addresses changed by a VIP.
        """
        return pulumi.get(self, "match_vip")

    @property
    @pulumi.getter(name="matchVipOnly")
    def match_vip_only(self) -> str:
        """
        Enable/disable matching of only those packets that have had their destination addresses changed by a VIP.
        """
        return pulumi.get(self, "match_vip_only")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat(self) -> str:
        """
        Enable/disable source NAT.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter
    def nat46(self) -> str:
        """
        Enable/disable NAT46.
        """
        return pulumi.get(self, "nat46")

    @property
    @pulumi.getter
    def nat64(self) -> str:
        """
        Enable/disable NAT64.
        """
        return pulumi.get(self, "nat64")

    @property
    @pulumi.getter
    def natinbound(self) -> str:
        """
        Policy-based IPsec VPN: apply destination NAT to inbound traffic.
        """
        return pulumi.get(self, "natinbound")

    @property
    @pulumi.getter
    def natip(self) -> str:
        """
        Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
        """
        return pulumi.get(self, "natip")

    @property
    @pulumi.getter
    def natoutbound(self) -> str:
        """
        Policy-based IPsec VPN: apply source NAT to outbound traffic.
        """
        return pulumi.get(self, "natoutbound")

    @property
    @pulumi.getter(name="networkServiceDynamics")
    def network_service_dynamics(self) -> Sequence['outputs.GetPolicyNetworkServiceDynamicResult']:
        """
        Dynamic Network Service name. The structure of `network_service_dynamic` block is documented below.
        """
        return pulumi.get(self, "network_service_dynamics")

    @property
    @pulumi.getter(name="networkServiceSrcDynamics")
    def network_service_src_dynamics(self) -> Sequence['outputs.GetPolicyNetworkServiceSrcDynamicResult']:
        """
        Dynamic Network Service source name. The structure of `network_service_src_dynamic` block is documented below.
        """
        return pulumi.get(self, "network_service_src_dynamics")

    @property
    @pulumi.getter(name="npAcceleration")
    def np_acceleration(self) -> str:
        """
        Enable/disable UTM Network Processor acceleration.
        """
        return pulumi.get(self, "np_acceleration")

    @property
    @pulumi.getter
    def ntlm(self) -> str:
        """
        Enable/disable NTLM authentication.
        """
        return pulumi.get(self, "ntlm")

    @property
    @pulumi.getter(name="ntlmEnabledBrowsers")
    def ntlm_enabled_browsers(self) -> Sequence['outputs.GetPolicyNtlmEnabledBrowserResult']:
        """
        HTTP-User-Agent value of supported browsers. The structure of `ntlm_enabled_browsers` block is documented below.
        """
        return pulumi.get(self, "ntlm_enabled_browsers")

    @property
    @pulumi.getter(name="ntlmGuest")
    def ntlm_guest(self) -> str:
        """
        Enable/disable NTLM guest user access.
        """
        return pulumi.get(self, "ntlm_guest")

    @property
    @pulumi.getter
    def outbound(self) -> str:
        """
        Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN.
        """
        return pulumi.get(self, "outbound")

    @property
    @pulumi.getter(name="passiveWanHealthMeasurement")
    def passive_wan_health_measurement(self) -> str:
        """
        Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled.
        """
        return pulumi.get(self, "passive_wan_health_measurement")

    @property
    @pulumi.getter(name="pcpInbound")
    def pcp_inbound(self) -> str:
        """
        Enable/disable PCP inbound DNAT.
        """
        return pulumi.get(self, "pcp_inbound")

    @property
    @pulumi.getter(name="pcpOutbound")
    def pcp_outbound(self) -> str:
        """
        Enable/disable PCP outbound SNAT.
        """
        return pulumi.get(self, "pcp_outbound")

    @property
    @pulumi.getter(name="pcpPoolnames")
    def pcp_poolnames(self) -> Sequence['outputs.GetPolicyPcpPoolnameResult']:
        """
        PCP pool names. The structure of `pcp_poolname` block is documented below.
        """
        return pulumi.get(self, "pcp_poolnames")

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> str:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @property
    @pulumi.getter(name="permitAnyHost")
    def permit_any_host(self) -> str:
        """
        Accept UDP packets from any host.
        """
        return pulumi.get(self, "permit_any_host")

    @property
    @pulumi.getter(name="permitStunHost")
    def permit_stun_host(self) -> str:
        """
        Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host.
        """
        return pulumi.get(self, "permit_stun_host")

    @property
    @pulumi.getter(name="policyExpiry")
    def policy_expiry(self) -> str:
        """
        Enable/disable policy expiry.
        """
        return pulumi.get(self, "policy_expiry")

    @property
    @pulumi.getter(name="policyExpiryDate")
    def policy_expiry_date(self) -> str:
        """
        Policy expiry date (YYYY-MM-DD HH:MM:SS).
        """
        return pulumi.get(self, "policy_expiry_date")

    @property
    @pulumi.getter(name="policyExpiryDateUtc")
    def policy_expiry_date_utc(self) -> str:
        """
        Policy expiry date and time, in epoch format.
        """
        return pulumi.get(self, "policy_expiry_date_utc")

    @property
    @pulumi.getter
    def policyid(self) -> int:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def poolname6s(self) -> Sequence['outputs.GetPolicyPoolname6Result']:
        """
        IPv6 pool names. The structure of `poolname6` block is documented below.
        """
        return pulumi.get(self, "poolname6s")

    @property
    @pulumi.getter
    def poolnames(self) -> Sequence['outputs.GetPolicyPoolnameResult']:
        """
        IP Pool names. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> str:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> str:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> str:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only.
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter(name="radiusMacAuthBypass")
    def radius_mac_auth_bypass(self) -> str:
        """
        Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server.
        """
        return pulumi.get(self, "radius_mac_auth_bypass")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        URL users are directed to after seeing and accepting the disclaimer or authenticating.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> str:
        """
        Override the default replacement message group for this policy.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @property
    @pulumi.getter(name="reputationDirection")
    def reputation_direction(self) -> str:
        """
        Direction of the initial traffic for reputation to take effect.
        """
        return pulumi.get(self, "reputation_direction")

    @property
    @pulumi.getter(name="reputationDirection6")
    def reputation_direction6(self) -> str:
        """
        Direction of the initial traffic for IPv6 reputation to take effect.
        """
        return pulumi.get(self, "reputation_direction6")

    @property
    @pulumi.getter(name="reputationMinimum")
    def reputation_minimum(self) -> int:
        """
        Minimum Reputation to take action.
        """
        return pulumi.get(self, "reputation_minimum")

    @property
    @pulumi.getter(name="reputationMinimum6")
    def reputation_minimum6(self) -> int:
        """
        IPv6 Minimum Reputation to take action.
        """
        return pulumi.get(self, "reputation_minimum6")

    @property
    @pulumi.getter
    def rsso(self) -> str:
        """
        Enable/disable RADIUS single sign-on (RSSO).
        """
        return pulumi.get(self, "rsso")

    @property
    @pulumi.getter(name="rtpAddrs")
    def rtp_addrs(self) -> Sequence['outputs.GetPolicyRtpAddrResult']:
        """
        Address names if this is an RTP NAT policy. The structure of `rtp_addr` block is documented below.
        """
        return pulumi.get(self, "rtp_addrs")

    @property
    @pulumi.getter(name="rtpNat")
    def rtp_nat(self) -> str:
        """
        Enable Real Time Protocol (RTP) NAT.
        """
        return pulumi.get(self, "rtp_nat")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> str:
        """
        Block or monitor connections to Botnet servers or disable Botnet scanning.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="scheduleTimeout")
    def schedule_timeout(self) -> str:
        """
        Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity.
        """
        return pulumi.get(self, "schedule_timeout")

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> str:
        """
        Name of an existing SCTP filter profile.
        """
        return pulumi.get(self, "sctp_filter_profile")

    @property
    @pulumi.getter(name="sendDenyPacket")
    def send_deny_packet(self) -> str:
        """
        Enable to send a reply when a session is denied or blocked by a firewall policy.
        """
        return pulumi.get(self, "send_deny_packet")

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> str:
        """
        When enabled service specifies what the service must NOT be.
        """
        return pulumi.get(self, "service_negate")

    @property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetPolicyServiceResult']:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> int:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="sgtCheck")
    def sgt_check(self) -> str:
        """
        Enable/disable security group tags (SGT) check.
        """
        return pulumi.get(self, "sgt_check")

    @property
    @pulumi.getter
    def sgts(self) -> Sequence['outputs.GetPolicySgtResult']:
        """
        Security group tags. The structure of `sgt` block is documented below.
        """
        return pulumi.get(self, "sgts")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> str:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter(name="srcVendorMacs")
    def src_vendor_macs(self) -> Sequence['outputs.GetPolicySrcVendorMacResult']:
        """
        Vendor MAC source ID. The structure of `src_vendor_mac` block is documented below.
        """
        return pulumi.get(self, "src_vendor_macs")

    @property
    @pulumi.getter(name="srcaddr6Negate")
    def srcaddr6_negate(self) -> str:
        """
        When enabled srcaddr6 specifies what the source address must NOT be.
        """
        return pulumi.get(self, "srcaddr6_negate")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Sequence['outputs.GetPolicySrcaddr6Result']:
        """
        Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> str:
        """
        When enabled srcaddr specifies what the source address must NOT be.
        """
        return pulumi.get(self, "srcaddr_negate")

    @property
    @pulumi.getter
    def srcaddrs(self) -> Sequence['outputs.GetPolicySrcaddrResult']:
        """
        Source address and address group names. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> Sequence['outputs.GetPolicySrcintfResult']:
        """
        Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> str:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> str:
        """
        Redirect SSH traffic to matching transparent proxy policy.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @property
    @pulumi.getter(name="sslMirror")
    def ssl_mirror(self) -> str:
        """
        Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring).
        """
        return pulumi.get(self, "ssl_mirror")

    @property
    @pulumi.getter(name="sslMirrorIntfs")
    def ssl_mirror_intfs(self) -> Sequence['outputs.GetPolicySslMirrorIntfResult']:
        """
        SSL mirror interface name. The structure of `ssl_mirror_intf` block is documented below.
        """
        return pulumi.get(self, "ssl_mirror_intfs")

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> str:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable or disable this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> int:
        """
        Receiver TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> int:
        """
        Sender TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_sender")

    @property
    @pulumi.getter(name="tcpSessionWithoutSyn")
    def tcp_session_without_syn(self) -> str:
        """
        Enable/disable creation of TCP session without SYN flag.
        """
        return pulumi.get(self, "tcp_session_without_syn")

    @property
    @pulumi.getter(name="timeoutSendRst")
    def timeout_send_rst(self) -> str:
        """
        Enable/disable sending RST packets when TCP sessions expire.
        """
        return pulumi.get(self, "timeout_send_rst")

    @property
    @pulumi.getter
    def tos(self) -> str:
        """
        ToS (Type of Service) value used for comparison.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> str:
        """
        Non-zero bit positions are used for comparison while zero bit positions are ignored.
        """
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter(name="tosNegate")
    def tos_negate(self) -> str:
        """
        Enable negated TOS match.
        """
        return pulumi.get(self, "tos_negate")

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> str:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> str:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Sequence['outputs.GetPolicyUrlCategoryResult']:
        """
        URL category ID list. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetPolicyUserResult']:
        """
        Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> str:
        """
        Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
        """
        return pulumi.get(self, "utm_status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> str:
        """
        Name of an existing VideoFilter profile.
        """
        return pulumi.get(self, "videofilter_profile")

    @property
    @pulumi.getter(name="virtualPatchProfile")
    def virtual_patch_profile(self) -> str:
        """
        Name of an existing virtual-patch profile.
        """
        return pulumi.get(self, "virtual_patch_profile")

    @property
    @pulumi.getter(name="vlanCosFwd")
    def vlan_cos_fwd(self) -> int:
        """
        VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
        """
        return pulumi.get(self, "vlan_cos_fwd")

    @property
    @pulumi.getter(name="vlanCosRev")
    def vlan_cos_rev(self) -> int:
        """
        VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
        """
        return pulumi.get(self, "vlan_cos_rev")

    @property
    @pulumi.getter(name="vlanFilter")
    def vlan_filter(self) -> str:
        """
        Set VLAN filters.
        """
        return pulumi.get(self, "vlan_filter")

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> str:
        """
        Name of an existing VoIP profile.
        """
        return pulumi.get(self, "voip_profile")

    @property
    @pulumi.getter
    def vpntunnel(self) -> str:
        """
        Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        """
        return pulumi.get(self, "vpntunnel")

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> str:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @property
    @pulumi.getter
    def wanopt(self) -> str:
        """
        Enable/disable WAN optimization.
        """
        return pulumi.get(self, "wanopt")

    @property
    @pulumi.getter(name="wanoptDetection")
    def wanopt_detection(self) -> str:
        """
        WAN optimization auto-detection mode.
        """
        return pulumi.get(self, "wanopt_detection")

    @property
    @pulumi.getter(name="wanoptPassiveOpt")
    def wanopt_passive_opt(self) -> str:
        """
        WAN optimization passive mode options. This option decides what IP address will be used to connect server.
        """
        return pulumi.get(self, "wanopt_passive_opt")

    @property
    @pulumi.getter(name="wanoptPeer")
    def wanopt_peer(self) -> str:
        """
        WAN optimization peer.
        """
        return pulumi.get(self, "wanopt_peer")

    @property
    @pulumi.getter(name="wanoptProfile")
    def wanopt_profile(self) -> str:
        """
        WAN optimization profile.
        """
        return pulumi.get(self, "wanopt_profile")

    @property
    @pulumi.getter
    def wccp(self) -> str:
        """
        Enable/disable forwarding traffic matching this policy to a configured WCCP server.
        """
        return pulumi.get(self, "wccp")

    @property
    @pulumi.getter
    def webcache(self) -> str:
        """
        Enable/disable web cache.
        """
        return pulumi.get(self, "webcache")

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> str:
        """
        Enable/disable web cache for HTTPS.
        """
        return pulumi.get(self, "webcache_https")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> str:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> str:
        """
        Web proxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> str:
        """
        Webproxy profile name.
        """
        return pulumi.get(self, "webproxy_profile")

    @property
    @pulumi.getter
    def wsso(self) -> str:
        """
        Enable/disable WiFi Single Sign On (WSSO).
        """
        return pulumi.get(self, "wsso")

    @property
    @pulumi.getter(name="ztnaDeviceOwnership")
    def ztna_device_ownership(self) -> str:
        """
        Enable/disable zero trust device ownership.
        """
        return pulumi.get(self, "ztna_device_ownership")

    @property
    @pulumi.getter(name="ztnaEmsTagSecondaries")
    def ztna_ems_tag_secondaries(self) -> Sequence['outputs.GetPolicyZtnaEmsTagSecondaryResult']:
        """
        Source ztna-ems-tag-secondary names. The structure of `ztna_ems_tag_secondary` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tag_secondaries")

    @property
    @pulumi.getter(name="ztnaEmsTags")
    def ztna_ems_tags(self) -> Sequence['outputs.GetPolicyZtnaEmsTagResult']:
        """
        Source ztna-ems-tag names. The structure of `ztna_ems_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tags")

    @property
    @pulumi.getter(name="ztnaGeoTags")
    def ztna_geo_tags(self) -> Sequence['outputs.GetPolicyZtnaGeoTagResult']:
        """
        Source ztna-geo-tag names. The structure of `ztna_geo_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_geo_tags")

    @property
    @pulumi.getter(name="ztnaPolicyRedirect")
    def ztna_policy_redirect(self) -> str:
        """
        Redirect ZTNA traffic to matching Access-Proxy proxy-policy.
        """
        return pulumi.get(self, "ztna_policy_redirect")

    @property
    @pulumi.getter(name="ztnaStatus")
    def ztna_status(self) -> str:
        """
        Enable/disable zero trust access.
        """
        return pulumi.get(self, "ztna_status")

    @property
    @pulumi.getter(name="ztnaTagsMatchLogic")
    def ztna_tags_match_logic(self) -> str:
        """
        ZTNA tag matching logic.
        """
        return pulumi.get(self, "ztna_tags_match_logic")


class AwaitableGetPolicyResult(GetPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyResult(
            action=self.action,
            anti_replay=self.anti_replay,
            app_categories=self.app_categories,
            app_groups=self.app_groups,
            application_list=self.application_list,
            applications=self.applications,
            auth_cert=self.auth_cert,
            auth_path=self.auth_path,
            auth_redirect_addr=self.auth_redirect_addr,
            auto_asic_offload=self.auto_asic_offload,
            av_profile=self.av_profile,
            block_notification=self.block_notification,
            captive_portal_exempt=self.captive_portal_exempt,
            capture_packet=self.capture_packet,
            casb_profile=self.casb_profile,
            cifs_profile=self.cifs_profile,
            comments=self.comments,
            custom_log_fields=self.custom_log_fields,
            decrypted_traffic_mirror=self.decrypted_traffic_mirror,
            delay_tcp_npu_session=self.delay_tcp_npu_session,
            devices=self.devices,
            diameter_filter_profile=self.diameter_filter_profile,
            diffserv_copy=self.diffserv_copy,
            diffserv_forward=self.diffserv_forward,
            diffserv_reverse=self.diffserv_reverse,
            diffservcode_forward=self.diffservcode_forward,
            diffservcode_rev=self.diffservcode_rev,
            disclaimer=self.disclaimer,
            dlp_profile=self.dlp_profile,
            dlp_sensor=self.dlp_sensor,
            dnsfilter_profile=self.dnsfilter_profile,
            dsri=self.dsri,
            dstaddr6_negate=self.dstaddr6_negate,
            dstaddr6s=self.dstaddr6s,
            dstaddr_negate=self.dstaddr_negate,
            dstaddrs=self.dstaddrs,
            dstintfs=self.dstintfs,
            dynamic_shaping=self.dynamic_shaping,
            email_collect=self.email_collect,
            emailfilter_profile=self.emailfilter_profile,
            fec=self.fec,
            file_filter_profile=self.file_filter_profile,
            firewall_session_dirty=self.firewall_session_dirty,
            fixedport=self.fixedport,
            fsso=self.fsso,
            fsso_agent_for_ntlm=self.fsso_agent_for_ntlm,
            fsso_groups=self.fsso_groups,
            geoip_anycast=self.geoip_anycast,
            geoip_match=self.geoip_match,
            global_label=self.global_label,
            groups=self.groups,
            http_policy_redirect=self.http_policy_redirect,
            icap_profile=self.icap_profile,
            id=self.id,
            identity_based_route=self.identity_based_route,
            inbound=self.inbound,
            inspection_mode=self.inspection_mode,
            internet_service=self.internet_service,
            internet_service6=self.internet_service6,
            internet_service6_custom_groups=self.internet_service6_custom_groups,
            internet_service6_customs=self.internet_service6_customs,
            internet_service6_groups=self.internet_service6_groups,
            internet_service6_names=self.internet_service6_names,
            internet_service6_negate=self.internet_service6_negate,
            internet_service6_src=self.internet_service6_src,
            internet_service6_src_custom_groups=self.internet_service6_src_custom_groups,
            internet_service6_src_customs=self.internet_service6_src_customs,
            internet_service6_src_groups=self.internet_service6_src_groups,
            internet_service6_src_names=self.internet_service6_src_names,
            internet_service6_src_negate=self.internet_service6_src_negate,
            internet_service_custom_groups=self.internet_service_custom_groups,
            internet_service_customs=self.internet_service_customs,
            internet_service_groups=self.internet_service_groups,
            internet_service_ids=self.internet_service_ids,
            internet_service_names=self.internet_service_names,
            internet_service_negate=self.internet_service_negate,
            internet_service_src=self.internet_service_src,
            internet_service_src_custom_groups=self.internet_service_src_custom_groups,
            internet_service_src_customs=self.internet_service_src_customs,
            internet_service_src_groups=self.internet_service_src_groups,
            internet_service_src_ids=self.internet_service_src_ids,
            internet_service_src_names=self.internet_service_src_names,
            internet_service_src_negate=self.internet_service_src_negate,
            ippool=self.ippool,
            ips_sensor=self.ips_sensor,
            ips_voip_filter=self.ips_voip_filter,
            label=self.label,
            learning_mode=self.learning_mode,
            logtraffic=self.logtraffic,
            logtraffic_start=self.logtraffic_start,
            match_vip=self.match_vip,
            match_vip_only=self.match_vip_only,
            name=self.name,
            nat=self.nat,
            nat46=self.nat46,
            nat64=self.nat64,
            natinbound=self.natinbound,
            natip=self.natip,
            natoutbound=self.natoutbound,
            network_service_dynamics=self.network_service_dynamics,
            network_service_src_dynamics=self.network_service_src_dynamics,
            np_acceleration=self.np_acceleration,
            ntlm=self.ntlm,
            ntlm_enabled_browsers=self.ntlm_enabled_browsers,
            ntlm_guest=self.ntlm_guest,
            outbound=self.outbound,
            passive_wan_health_measurement=self.passive_wan_health_measurement,
            pcp_inbound=self.pcp_inbound,
            pcp_outbound=self.pcp_outbound,
            pcp_poolnames=self.pcp_poolnames,
            per_ip_shaper=self.per_ip_shaper,
            permit_any_host=self.permit_any_host,
            permit_stun_host=self.permit_stun_host,
            policy_expiry=self.policy_expiry,
            policy_expiry_date=self.policy_expiry_date,
            policy_expiry_date_utc=self.policy_expiry_date_utc,
            policyid=self.policyid,
            poolname6s=self.poolname6s,
            poolnames=self.poolnames,
            profile_group=self.profile_group,
            profile_protocol_options=self.profile_protocol_options,
            profile_type=self.profile_type,
            radius_mac_auth_bypass=self.radius_mac_auth_bypass,
            redirect_url=self.redirect_url,
            replacemsg_override_group=self.replacemsg_override_group,
            reputation_direction=self.reputation_direction,
            reputation_direction6=self.reputation_direction6,
            reputation_minimum=self.reputation_minimum,
            reputation_minimum6=self.reputation_minimum6,
            rsso=self.rsso,
            rtp_addrs=self.rtp_addrs,
            rtp_nat=self.rtp_nat,
            scan_botnet_connections=self.scan_botnet_connections,
            schedule=self.schedule,
            schedule_timeout=self.schedule_timeout,
            sctp_filter_profile=self.sctp_filter_profile,
            send_deny_packet=self.send_deny_packet,
            service_negate=self.service_negate,
            services=self.services,
            session_ttl=self.session_ttl,
            sgt_check=self.sgt_check,
            sgts=self.sgts,
            spamfilter_profile=self.spamfilter_profile,
            src_vendor_macs=self.src_vendor_macs,
            srcaddr6_negate=self.srcaddr6_negate,
            srcaddr6s=self.srcaddr6s,
            srcaddr_negate=self.srcaddr_negate,
            srcaddrs=self.srcaddrs,
            srcintfs=self.srcintfs,
            ssh_filter_profile=self.ssh_filter_profile,
            ssh_policy_redirect=self.ssh_policy_redirect,
            ssl_mirror=self.ssl_mirror,
            ssl_mirror_intfs=self.ssl_mirror_intfs,
            ssl_ssh_profile=self.ssl_ssh_profile,
            status=self.status,
            tcp_mss_receiver=self.tcp_mss_receiver,
            tcp_mss_sender=self.tcp_mss_sender,
            tcp_session_without_syn=self.tcp_session_without_syn,
            timeout_send_rst=self.timeout_send_rst,
            tos=self.tos,
            tos_mask=self.tos_mask,
            tos_negate=self.tos_negate,
            traffic_shaper=self.traffic_shaper,
            traffic_shaper_reverse=self.traffic_shaper_reverse,
            url_categories=self.url_categories,
            users=self.users,
            utm_status=self.utm_status,
            uuid=self.uuid,
            vdomparam=self.vdomparam,
            videofilter_profile=self.videofilter_profile,
            virtual_patch_profile=self.virtual_patch_profile,
            vlan_cos_fwd=self.vlan_cos_fwd,
            vlan_cos_rev=self.vlan_cos_rev,
            vlan_filter=self.vlan_filter,
            voip_profile=self.voip_profile,
            vpntunnel=self.vpntunnel,
            waf_profile=self.waf_profile,
            wanopt=self.wanopt,
            wanopt_detection=self.wanopt_detection,
            wanopt_passive_opt=self.wanopt_passive_opt,
            wanopt_peer=self.wanopt_peer,
            wanopt_profile=self.wanopt_profile,
            wccp=self.wccp,
            webcache=self.webcache,
            webcache_https=self.webcache_https,
            webfilter_profile=self.webfilter_profile,
            webproxy_forward_server=self.webproxy_forward_server,
            webproxy_profile=self.webproxy_profile,
            wsso=self.wsso,
            ztna_device_ownership=self.ztna_device_ownership,
            ztna_ems_tag_secondaries=self.ztna_ems_tag_secondaries,
            ztna_ems_tags=self.ztna_ems_tags,
            ztna_geo_tags=self.ztna_geo_tags,
            ztna_policy_redirect=self.ztna_policy_redirect,
            ztna_status=self.ztna_status,
            ztna_tags_match_logic=self.ztna_tags_match_logic)


def get_policy(policyid: Optional[int] = None,
               vdomparam: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyResult:
    """
    Use this data source to get information on an fortios firewall policy


    :param int policyid: Specify the policyid of the desired firewall policy.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['policyid'] = policyid
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:firewall/getPolicy:getPolicy', __args__, opts=opts, typ=GetPolicyResult).value

    return AwaitableGetPolicyResult(
        action=pulumi.get(__ret__, 'action'),
        anti_replay=pulumi.get(__ret__, 'anti_replay'),
        app_categories=pulumi.get(__ret__, 'app_categories'),
        app_groups=pulumi.get(__ret__, 'app_groups'),
        application_list=pulumi.get(__ret__, 'application_list'),
        applications=pulumi.get(__ret__, 'applications'),
        auth_cert=pulumi.get(__ret__, 'auth_cert'),
        auth_path=pulumi.get(__ret__, 'auth_path'),
        auth_redirect_addr=pulumi.get(__ret__, 'auth_redirect_addr'),
        auto_asic_offload=pulumi.get(__ret__, 'auto_asic_offload'),
        av_profile=pulumi.get(__ret__, 'av_profile'),
        block_notification=pulumi.get(__ret__, 'block_notification'),
        captive_portal_exempt=pulumi.get(__ret__, 'captive_portal_exempt'),
        capture_packet=pulumi.get(__ret__, 'capture_packet'),
        casb_profile=pulumi.get(__ret__, 'casb_profile'),
        cifs_profile=pulumi.get(__ret__, 'cifs_profile'),
        comments=pulumi.get(__ret__, 'comments'),
        custom_log_fields=pulumi.get(__ret__, 'custom_log_fields'),
        decrypted_traffic_mirror=pulumi.get(__ret__, 'decrypted_traffic_mirror'),
        delay_tcp_npu_session=pulumi.get(__ret__, 'delay_tcp_npu_session'),
        devices=pulumi.get(__ret__, 'devices'),
        diameter_filter_profile=pulumi.get(__ret__, 'diameter_filter_profile'),
        diffserv_copy=pulumi.get(__ret__, 'diffserv_copy'),
        diffserv_forward=pulumi.get(__ret__, 'diffserv_forward'),
        diffserv_reverse=pulumi.get(__ret__, 'diffserv_reverse'),
        diffservcode_forward=pulumi.get(__ret__, 'diffservcode_forward'),
        diffservcode_rev=pulumi.get(__ret__, 'diffservcode_rev'),
        disclaimer=pulumi.get(__ret__, 'disclaimer'),
        dlp_profile=pulumi.get(__ret__, 'dlp_profile'),
        dlp_sensor=pulumi.get(__ret__, 'dlp_sensor'),
        dnsfilter_profile=pulumi.get(__ret__, 'dnsfilter_profile'),
        dsri=pulumi.get(__ret__, 'dsri'),
        dstaddr6_negate=pulumi.get(__ret__, 'dstaddr6_negate'),
        dstaddr6s=pulumi.get(__ret__, 'dstaddr6s'),
        dstaddr_negate=pulumi.get(__ret__, 'dstaddr_negate'),
        dstaddrs=pulumi.get(__ret__, 'dstaddrs'),
        dstintfs=pulumi.get(__ret__, 'dstintfs'),
        dynamic_shaping=pulumi.get(__ret__, 'dynamic_shaping'),
        email_collect=pulumi.get(__ret__, 'email_collect'),
        emailfilter_profile=pulumi.get(__ret__, 'emailfilter_profile'),
        fec=pulumi.get(__ret__, 'fec'),
        file_filter_profile=pulumi.get(__ret__, 'file_filter_profile'),
        firewall_session_dirty=pulumi.get(__ret__, 'firewall_session_dirty'),
        fixedport=pulumi.get(__ret__, 'fixedport'),
        fsso=pulumi.get(__ret__, 'fsso'),
        fsso_agent_for_ntlm=pulumi.get(__ret__, 'fsso_agent_for_ntlm'),
        fsso_groups=pulumi.get(__ret__, 'fsso_groups'),
        geoip_anycast=pulumi.get(__ret__, 'geoip_anycast'),
        geoip_match=pulumi.get(__ret__, 'geoip_match'),
        global_label=pulumi.get(__ret__, 'global_label'),
        groups=pulumi.get(__ret__, 'groups'),
        http_policy_redirect=pulumi.get(__ret__, 'http_policy_redirect'),
        icap_profile=pulumi.get(__ret__, 'icap_profile'),
        id=pulumi.get(__ret__, 'id'),
        identity_based_route=pulumi.get(__ret__, 'identity_based_route'),
        inbound=pulumi.get(__ret__, 'inbound'),
        inspection_mode=pulumi.get(__ret__, 'inspection_mode'),
        internet_service=pulumi.get(__ret__, 'internet_service'),
        internet_service6=pulumi.get(__ret__, 'internet_service6'),
        internet_service6_custom_groups=pulumi.get(__ret__, 'internet_service6_custom_groups'),
        internet_service6_customs=pulumi.get(__ret__, 'internet_service6_customs'),
        internet_service6_groups=pulumi.get(__ret__, 'internet_service6_groups'),
        internet_service6_names=pulumi.get(__ret__, 'internet_service6_names'),
        internet_service6_negate=pulumi.get(__ret__, 'internet_service6_negate'),
        internet_service6_src=pulumi.get(__ret__, 'internet_service6_src'),
        internet_service6_src_custom_groups=pulumi.get(__ret__, 'internet_service6_src_custom_groups'),
        internet_service6_src_customs=pulumi.get(__ret__, 'internet_service6_src_customs'),
        internet_service6_src_groups=pulumi.get(__ret__, 'internet_service6_src_groups'),
        internet_service6_src_names=pulumi.get(__ret__, 'internet_service6_src_names'),
        internet_service6_src_negate=pulumi.get(__ret__, 'internet_service6_src_negate'),
        internet_service_custom_groups=pulumi.get(__ret__, 'internet_service_custom_groups'),
        internet_service_customs=pulumi.get(__ret__, 'internet_service_customs'),
        internet_service_groups=pulumi.get(__ret__, 'internet_service_groups'),
        internet_service_ids=pulumi.get(__ret__, 'internet_service_ids'),
        internet_service_names=pulumi.get(__ret__, 'internet_service_names'),
        internet_service_negate=pulumi.get(__ret__, 'internet_service_negate'),
        internet_service_src=pulumi.get(__ret__, 'internet_service_src'),
        internet_service_src_custom_groups=pulumi.get(__ret__, 'internet_service_src_custom_groups'),
        internet_service_src_customs=pulumi.get(__ret__, 'internet_service_src_customs'),
        internet_service_src_groups=pulumi.get(__ret__, 'internet_service_src_groups'),
        internet_service_src_ids=pulumi.get(__ret__, 'internet_service_src_ids'),
        internet_service_src_names=pulumi.get(__ret__, 'internet_service_src_names'),
        internet_service_src_negate=pulumi.get(__ret__, 'internet_service_src_negate'),
        ippool=pulumi.get(__ret__, 'ippool'),
        ips_sensor=pulumi.get(__ret__, 'ips_sensor'),
        ips_voip_filter=pulumi.get(__ret__, 'ips_voip_filter'),
        label=pulumi.get(__ret__, 'label'),
        learning_mode=pulumi.get(__ret__, 'learning_mode'),
        logtraffic=pulumi.get(__ret__, 'logtraffic'),
        logtraffic_start=pulumi.get(__ret__, 'logtraffic_start'),
        match_vip=pulumi.get(__ret__, 'match_vip'),
        match_vip_only=pulumi.get(__ret__, 'match_vip_only'),
        name=pulumi.get(__ret__, 'name'),
        nat=pulumi.get(__ret__, 'nat'),
        nat46=pulumi.get(__ret__, 'nat46'),
        nat64=pulumi.get(__ret__, 'nat64'),
        natinbound=pulumi.get(__ret__, 'natinbound'),
        natip=pulumi.get(__ret__, 'natip'),
        natoutbound=pulumi.get(__ret__, 'natoutbound'),
        network_service_dynamics=pulumi.get(__ret__, 'network_service_dynamics'),
        network_service_src_dynamics=pulumi.get(__ret__, 'network_service_src_dynamics'),
        np_acceleration=pulumi.get(__ret__, 'np_acceleration'),
        ntlm=pulumi.get(__ret__, 'ntlm'),
        ntlm_enabled_browsers=pulumi.get(__ret__, 'ntlm_enabled_browsers'),
        ntlm_guest=pulumi.get(__ret__, 'ntlm_guest'),
        outbound=pulumi.get(__ret__, 'outbound'),
        passive_wan_health_measurement=pulumi.get(__ret__, 'passive_wan_health_measurement'),
        pcp_inbound=pulumi.get(__ret__, 'pcp_inbound'),
        pcp_outbound=pulumi.get(__ret__, 'pcp_outbound'),
        pcp_poolnames=pulumi.get(__ret__, 'pcp_poolnames'),
        per_ip_shaper=pulumi.get(__ret__, 'per_ip_shaper'),
        permit_any_host=pulumi.get(__ret__, 'permit_any_host'),
        permit_stun_host=pulumi.get(__ret__, 'permit_stun_host'),
        policy_expiry=pulumi.get(__ret__, 'policy_expiry'),
        policy_expiry_date=pulumi.get(__ret__, 'policy_expiry_date'),
        policy_expiry_date_utc=pulumi.get(__ret__, 'policy_expiry_date_utc'),
        policyid=pulumi.get(__ret__, 'policyid'),
        poolname6s=pulumi.get(__ret__, 'poolname6s'),
        poolnames=pulumi.get(__ret__, 'poolnames'),
        profile_group=pulumi.get(__ret__, 'profile_group'),
        profile_protocol_options=pulumi.get(__ret__, 'profile_protocol_options'),
        profile_type=pulumi.get(__ret__, 'profile_type'),
        radius_mac_auth_bypass=pulumi.get(__ret__, 'radius_mac_auth_bypass'),
        redirect_url=pulumi.get(__ret__, 'redirect_url'),
        replacemsg_override_group=pulumi.get(__ret__, 'replacemsg_override_group'),
        reputation_direction=pulumi.get(__ret__, 'reputation_direction'),
        reputation_direction6=pulumi.get(__ret__, 'reputation_direction6'),
        reputation_minimum=pulumi.get(__ret__, 'reputation_minimum'),
        reputation_minimum6=pulumi.get(__ret__, 'reputation_minimum6'),
        rsso=pulumi.get(__ret__, 'rsso'),
        rtp_addrs=pulumi.get(__ret__, 'rtp_addrs'),
        rtp_nat=pulumi.get(__ret__, 'rtp_nat'),
        scan_botnet_connections=pulumi.get(__ret__, 'scan_botnet_connections'),
        schedule=pulumi.get(__ret__, 'schedule'),
        schedule_timeout=pulumi.get(__ret__, 'schedule_timeout'),
        sctp_filter_profile=pulumi.get(__ret__, 'sctp_filter_profile'),
        send_deny_packet=pulumi.get(__ret__, 'send_deny_packet'),
        service_negate=pulumi.get(__ret__, 'service_negate'),
        services=pulumi.get(__ret__, 'services'),
        session_ttl=pulumi.get(__ret__, 'session_ttl'),
        sgt_check=pulumi.get(__ret__, 'sgt_check'),
        sgts=pulumi.get(__ret__, 'sgts'),
        spamfilter_profile=pulumi.get(__ret__, 'spamfilter_profile'),
        src_vendor_macs=pulumi.get(__ret__, 'src_vendor_macs'),
        srcaddr6_negate=pulumi.get(__ret__, 'srcaddr6_negate'),
        srcaddr6s=pulumi.get(__ret__, 'srcaddr6s'),
        srcaddr_negate=pulumi.get(__ret__, 'srcaddr_negate'),
        srcaddrs=pulumi.get(__ret__, 'srcaddrs'),
        srcintfs=pulumi.get(__ret__, 'srcintfs'),
        ssh_filter_profile=pulumi.get(__ret__, 'ssh_filter_profile'),
        ssh_policy_redirect=pulumi.get(__ret__, 'ssh_policy_redirect'),
        ssl_mirror=pulumi.get(__ret__, 'ssl_mirror'),
        ssl_mirror_intfs=pulumi.get(__ret__, 'ssl_mirror_intfs'),
        ssl_ssh_profile=pulumi.get(__ret__, 'ssl_ssh_profile'),
        status=pulumi.get(__ret__, 'status'),
        tcp_mss_receiver=pulumi.get(__ret__, 'tcp_mss_receiver'),
        tcp_mss_sender=pulumi.get(__ret__, 'tcp_mss_sender'),
        tcp_session_without_syn=pulumi.get(__ret__, 'tcp_session_without_syn'),
        timeout_send_rst=pulumi.get(__ret__, 'timeout_send_rst'),
        tos=pulumi.get(__ret__, 'tos'),
        tos_mask=pulumi.get(__ret__, 'tos_mask'),
        tos_negate=pulumi.get(__ret__, 'tos_negate'),
        traffic_shaper=pulumi.get(__ret__, 'traffic_shaper'),
        traffic_shaper_reverse=pulumi.get(__ret__, 'traffic_shaper_reverse'),
        url_categories=pulumi.get(__ret__, 'url_categories'),
        users=pulumi.get(__ret__, 'users'),
        utm_status=pulumi.get(__ret__, 'utm_status'),
        uuid=pulumi.get(__ret__, 'uuid'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        videofilter_profile=pulumi.get(__ret__, 'videofilter_profile'),
        virtual_patch_profile=pulumi.get(__ret__, 'virtual_patch_profile'),
        vlan_cos_fwd=pulumi.get(__ret__, 'vlan_cos_fwd'),
        vlan_cos_rev=pulumi.get(__ret__, 'vlan_cos_rev'),
        vlan_filter=pulumi.get(__ret__, 'vlan_filter'),
        voip_profile=pulumi.get(__ret__, 'voip_profile'),
        vpntunnel=pulumi.get(__ret__, 'vpntunnel'),
        waf_profile=pulumi.get(__ret__, 'waf_profile'),
        wanopt=pulumi.get(__ret__, 'wanopt'),
        wanopt_detection=pulumi.get(__ret__, 'wanopt_detection'),
        wanopt_passive_opt=pulumi.get(__ret__, 'wanopt_passive_opt'),
        wanopt_peer=pulumi.get(__ret__, 'wanopt_peer'),
        wanopt_profile=pulumi.get(__ret__, 'wanopt_profile'),
        wccp=pulumi.get(__ret__, 'wccp'),
        webcache=pulumi.get(__ret__, 'webcache'),
        webcache_https=pulumi.get(__ret__, 'webcache_https'),
        webfilter_profile=pulumi.get(__ret__, 'webfilter_profile'),
        webproxy_forward_server=pulumi.get(__ret__, 'webproxy_forward_server'),
        webproxy_profile=pulumi.get(__ret__, 'webproxy_profile'),
        wsso=pulumi.get(__ret__, 'wsso'),
        ztna_device_ownership=pulumi.get(__ret__, 'ztna_device_ownership'),
        ztna_ems_tag_secondaries=pulumi.get(__ret__, 'ztna_ems_tag_secondaries'),
        ztna_ems_tags=pulumi.get(__ret__, 'ztna_ems_tags'),
        ztna_geo_tags=pulumi.get(__ret__, 'ztna_geo_tags'),
        ztna_policy_redirect=pulumi.get(__ret__, 'ztna_policy_redirect'),
        ztna_status=pulumi.get(__ret__, 'ztna_status'),
        ztna_tags_match_logic=pulumi.get(__ret__, 'ztna_tags_match_logic'))


@_utilities.lift_output_func(get_policy)
def get_policy_output(policyid: Optional[pulumi.Input[int]] = None,
                      vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyResult]:
    """
    Use this data source to get information on an fortios firewall policy


    :param int policyid: Specify the policyid of the desired firewall policy.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
