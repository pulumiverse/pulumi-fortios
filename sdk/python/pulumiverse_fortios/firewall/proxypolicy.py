# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProxypolicyArgs', 'Proxypolicy']

@pulumi.input_type
class ProxypolicyArgs:
    def __init__(__self__, *,
                 dstintfs: pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstintfArgs']]],
                 proxy: pulumi.Input[str],
                 schedule: pulumi.Input[str],
                 access_proxies: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxyArgs']]]] = None,
                 access_proxy6s: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxy6Args']]]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 detect_https_in_http_request: Optional[pulumi.Input[str]] = None,
                 device_ownership: Optional[pulumi.Input[str]] = None,
                 diameter_filter_profile: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddr6Args']]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddrArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyGroupArgs']]]] = None,
                 http_tunnel_auth: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomGroupArgs']]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomArgs']]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6GroupArgs']]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6NameArgs']]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceNameArgs']]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyPoolnameArgs']]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyServiceArgs']]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddr6Args']]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddrArgs']]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcintfArgs']]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transparent: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyUserArgs']]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyZtnaEmsTagArgs']]]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Proxypolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstintfArgs']]] dstintfs: Destination interface names. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] proxy: Type of explicit proxy.
        :param pulumi.Input[str] schedule: Name of schedule object.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxyArgs']]] access_proxies: IPv4 access proxy. The structure of `access_proxy` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxy6Args']]] access_proxy6s: IPv6 access proxy. The structure of `access_proxy6` block is documented below.
        :param pulumi.Input[str] action: Accept or deny traffic matching the policy parameters. Valid values: `accept`, `deny`, `redirect`.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] block_notification: Enable/disable block notification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Optional comments.
        :param pulumi.Input[str] decrypted_traffic_mirror: Decrypted traffic mirror.
        :param pulumi.Input[str] detect_https_in_http_request: Enable/disable detection of HTTPS in HTTP request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_ownership: When enabled, the ownership enforcement will be done at policy level. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diameter_filter_profile: Name of an existing Diameter filter profile.
        :param pulumi.Input[str] disclaimer: Web proxy disclaimer setting: by domain, policy, or user. Valid values: `disable`, `domain`, `policy`, `user`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddr6Args']]] dstaddr6s: IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled, destination addresses match against any address EXCEPT the specified destination addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddrArgs']]] dstaddrs: Destination address objects. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] global_label: Global web-based manager visible label.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyGroupArgs']]] groups: Names of group objects. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_tunnel_auth: Enable/disable HTTP tunnel authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6: Enable/disable use of Internet Services IPv6 for this policy. If enabled, destination IPv6 address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomGroupArgs']]] internet_service6_custom_groups: Custom Internet Service IPv6 group name. The structure of `internet_service6_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomArgs']]] internet_service6_customs: Custom Internet Service IPv6 name. The structure of `internet_service6_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6GroupArgs']]] internet_service6_groups: Internet Service IPv6 group name. The structure of `internet_service6_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6NameArgs']]] internet_service6_names: Internet Service IPv6 name. The structure of `internet_service6_name` block is documented below.
        :param pulumi.Input[str] internet_service6_negate: When enabled, Internet Services match against any internet service IPv6 EXCEPT the selected Internet Service IPv6. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomArgs']]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceGroupArgs']]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceIdArgs']]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceNameArgs']]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_voip_filter: Name of an existing VoIP (ips) profile.
        :param pulumi.Input[str] label: VDOM-specific GUI visible label.
        :param pulumi.Input[str] logtraffic: Enable/disable logging traffic through the policy. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Enable/disable policy log traffic start. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyPoolnameArgs']]] poolnames: Name of IP pool object. The structure of `poolname` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] redirect_url: Redirect URL for further explicit web proxy processing.
        :param pulumi.Input[str] replacemsg_override_group: Authentication replacement message override group.
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] sctp_filter_profile: Name of an existing SCTP filter profile.
        :param pulumi.Input[str] service_negate: When enabled, services match against any service EXCEPT the specified destination services. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyServiceArgs']]] services: Name of service objects. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddr6Args']]] srcaddr6s: IPv6 source address objects. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled, source addresses match against any address EXCEPT the specified source addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddrArgs']]] srcaddrs: Source address objects. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcintfArgs']]] srcintfs: Source interface names. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable/disable the active status of the policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] transparent: Enable to use the IP address of the client to connect to the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyUserArgs']]] users: Names of user objects. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable the use of UTM profiles/sensors/lists. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] videofilter_profile: Name of an existing VideoFilter profile.
        :param pulumi.Input[str] virtual_patch_profile: Name of an existing virtual-patch profile.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP profile.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] webcache: Enable/disable web caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Web proxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Name of web proxy profile.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyZtnaEmsTagArgs']]] ztna_ems_tags: ZTNA EMS Tag names. The structure of `ztna_ems_tag` block is documented below.
        :param pulumi.Input[str] ztna_tags_match_logic: ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        pulumi.set(__self__, "dstintfs", dstintfs)
        pulumi.set(__self__, "proxy", proxy)
        pulumi.set(__self__, "schedule", schedule)
        if access_proxies is not None:
            pulumi.set(__self__, "access_proxies", access_proxies)
        if access_proxy6s is not None:
            pulumi.set(__self__, "access_proxy6s", access_proxy6s)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if block_notification is not None:
            pulumi.set(__self__, "block_notification", block_notification)
        if casb_profile is not None:
            pulumi.set(__self__, "casb_profile", casb_profile)
        if cifs_profile is not None:
            pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if decrypted_traffic_mirror is not None:
            pulumi.set(__self__, "decrypted_traffic_mirror", decrypted_traffic_mirror)
        if detect_https_in_http_request is not None:
            pulumi.set(__self__, "detect_https_in_http_request", detect_https_in_http_request)
        if device_ownership is not None:
            pulumi.set(__self__, "device_ownership", device_ownership)
        if diameter_filter_profile is not None:
            pulumi.set(__self__, "diameter_filter_profile", diameter_filter_profile)
        if disclaimer is not None:
            pulumi.set(__self__, "disclaimer", disclaimer)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddr_negate is not None:
            pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if file_filter_profile is not None:
            pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if global_label is not None:
            pulumi.set(__self__, "global_label", global_label)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if http_tunnel_auth is not None:
            pulumi.set(__self__, "http_tunnel_auth", http_tunnel_auth)
        if icap_profile is not None:
            pulumi.set(__self__, "icap_profile", icap_profile)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service6 is not None:
            pulumi.set(__self__, "internet_service6", internet_service6)
        if internet_service6_custom_groups is not None:
            pulumi.set(__self__, "internet_service6_custom_groups", internet_service6_custom_groups)
        if internet_service6_customs is not None:
            pulumi.set(__self__, "internet_service6_customs", internet_service6_customs)
        if internet_service6_groups is not None:
            pulumi.set(__self__, "internet_service6_groups", internet_service6_groups)
        if internet_service6_names is not None:
            pulumi.set(__self__, "internet_service6_names", internet_service6_names)
        if internet_service6_negate is not None:
            pulumi.set(__self__, "internet_service6_negate", internet_service6_negate)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_negate is not None:
            pulumi.set(__self__, "internet_service_negate", internet_service_negate)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_voip_filter is not None:
            pulumi.set(__self__, "ips_voip_filter", ips_voip_filter)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if profile_group is not None:
            pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if replacemsg_override_group is not None:
            pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if sctp_filter_profile is not None:
            pulumi.set(__self__, "sctp_filter_profile", sctp_filter_profile)
        if service_negate is not None:
            pulumi.set(__self__, "service_negate", service_negate)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddr_negate is not None:
            pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if ssh_filter_profile is not None:
            pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect is not None:
            pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transparent is not None:
            pulumi.set(__self__, "transparent", transparent)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_profile is not None:
            pulumi.set(__self__, "videofilter_profile", videofilter_profile)
        if virtual_patch_profile is not None:
            pulumi.set(__self__, "virtual_patch_profile", virtual_patch_profile)
        if voip_profile is not None:
            pulumi.set(__self__, "voip_profile", voip_profile)
        if waf_profile is not None:
            pulumi.set(__self__, "waf_profile", waf_profile)
        if webcache is not None:
            pulumi.set(__self__, "webcache", webcache)
        if webcache_https is not None:
            pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server is not None:
            pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile is not None:
            pulumi.set(__self__, "webproxy_profile", webproxy_profile)
        if ztna_ems_tags is not None:
            pulumi.set(__self__, "ztna_ems_tags", ztna_ems_tags)
        if ztna_tags_match_logic is not None:
            pulumi.set(__self__, "ztna_tags_match_logic", ztna_tags_match_logic)

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstintfArgs']]]:
        """
        Destination interface names. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstintfArgs']]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Input[str]:
        """
        Type of explicit proxy.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: pulumi.Input[str]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[str]:
        """
        Name of schedule object.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="accessProxies")
    def access_proxies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxyArgs']]]]:
        """
        IPv4 access proxy. The structure of `access_proxy` block is documented below.
        """
        return pulumi.get(self, "access_proxies")

    @access_proxies.setter
    def access_proxies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxyArgs']]]]):
        pulumi.set(self, "access_proxies", value)

    @property
    @pulumi.getter(name="accessProxy6s")
    def access_proxy6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxy6Args']]]]:
        """
        IPv6 access proxy. The structure of `access_proxy6` block is documented below.
        """
        return pulumi.get(self, "access_proxy6s")

    @access_proxy6s.setter
    def access_proxy6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxy6Args']]]]):
        pulumi.set(self, "access_proxy6s", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Accept or deny traffic matching the policy parameters. Valid values: `accept`, `deny`, `redirect`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="blockNotification")
    def block_notification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block notification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "block_notification")

    @block_notification.setter
    def block_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_notification", value)

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @casb_profile.setter
    def casb_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile", value)

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @cifs_profile.setter
    def cifs_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cifs_profile", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> Optional[pulumi.Input[str]]:
        """
        Decrypted traffic mirror.
        """
        return pulumi.get(self, "decrypted_traffic_mirror")

    @decrypted_traffic_mirror.setter
    def decrypted_traffic_mirror(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decrypted_traffic_mirror", value)

    @property
    @pulumi.getter(name="detectHttpsInHttpRequest")
    def detect_https_in_http_request(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable detection of HTTPS in HTTP request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "detect_https_in_http_request")

    @detect_https_in_http_request.setter
    def detect_https_in_http_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detect_https_in_http_request", value)

    @property
    @pulumi.getter(name="deviceOwnership")
    def device_ownership(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, the ownership enforcement will be done at policy level. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_ownership")

    @device_ownership.setter
    def device_ownership(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_ownership", value)

    @property
    @pulumi.getter(name="diameterFilterProfile")
    def diameter_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Diameter filter profile.
        """
        return pulumi.get(self, "diameter_filter_profile")

    @diameter_filter_profile.setter
    def diameter_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diameter_filter_profile", value)

    @property
    @pulumi.getter
    def disclaimer(self) -> Optional[pulumi.Input[str]]:
        """
        Web proxy disclaimer setting: by domain, policy, or user. Valid values: `disable`, `domain`, `policy`, `user`.
        """
        return pulumi.get(self, "disclaimer")

    @disclaimer.setter
    def disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disclaimer", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP profile.
        """
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddr6Args']]]]:
        """
        IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, destination addresses match against any address EXCEPT the specified destination addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @dstaddr_negate.setter
    def dstaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr_negate", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddrArgs']]]]:
        """
        Destination address objects. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing file-filter profile.
        """
        return pulumi.get(self, "file_filter_profile")

    @file_filter_profile.setter
    def file_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> Optional[pulumi.Input[str]]:
        """
        Global web-based manager visible label.
        """
        return pulumi.get(self, "global_label")

    @global_label.setter
    def global_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_label", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyGroupArgs']]]]:
        """
        Names of group objects. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="httpTunnelAuth")
    def http_tunnel_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP tunnel authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_tunnel_auth")

    @http_tunnel_auth.setter
    def http_tunnel_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_tunnel_auth", value)

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @icap_profile.setter
    def icap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_profile", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetService6")
    def internet_service6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services IPv6 for this policy. If enabled, destination IPv6 address and service are not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6")

    @internet_service6.setter
    def internet_service6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6", value)

    @property
    @pulumi.getter(name="internetService6CustomGroups")
    def internet_service6_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomGroupArgs']]]]:
        """
        Custom Internet Service IPv6 group name. The structure of `internet_service6_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_custom_groups")

    @internet_service6_custom_groups.setter
    def internet_service6_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomGroupArgs']]]]):
        pulumi.set(self, "internet_service6_custom_groups", value)

    @property
    @pulumi.getter(name="internetService6Customs")
    def internet_service6_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomArgs']]]]:
        """
        Custom Internet Service IPv6 name. The structure of `internet_service6_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_customs")

    @internet_service6_customs.setter
    def internet_service6_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomArgs']]]]):
        pulumi.set(self, "internet_service6_customs", value)

    @property
    @pulumi.getter(name="internetService6Groups")
    def internet_service6_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6GroupArgs']]]]:
        """
        Internet Service IPv6 group name. The structure of `internet_service6_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_groups")

    @internet_service6_groups.setter
    def internet_service6_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6GroupArgs']]]]):
        pulumi.set(self, "internet_service6_groups", value)

    @property
    @pulumi.getter(name="internetService6Names")
    def internet_service6_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6NameArgs']]]]:
        """
        Internet Service IPv6 name. The structure of `internet_service6_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_names")

    @internet_service6_names.setter
    def internet_service6_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6NameArgs']]]]):
        pulumi.set(self, "internet_service6_names", value)

    @property
    @pulumi.getter(name="internetService6Negate")
    def internet_service6_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, Internet Services match against any internet service IPv6 EXCEPT the selected Internet Service IPv6. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_negate")

    @internet_service6_negate.setter
    def internet_service6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_negate", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomArgs']]]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceGroupArgs']]]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceIdArgs']]]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceNameArgs']]]]:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_negate")

    @internet_service_negate.setter
    def internet_service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_negate", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VoIP (ips) profile.
        """
        return pulumi.get(self, "ips_voip_filter")

    @ips_voip_filter.setter
    def ips_voip_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_voip_filter", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM-specific GUI visible label.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging traffic through the policy. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy log traffic start. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyPoolnameArgs']]]]:
        """
        Name of IP pool object. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyPoolnameArgs']]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @profile_group.setter
    def profile_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_group", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect URL for further explicit web proxy processing.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication replacement message override group.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @replacemsg_override_group.setter
    def replacemsg_override_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_override_group", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SCTP filter profile.
        """
        return pulumi.get(self, "sctp_filter_profile")

    @sctp_filter_profile.setter
    def sctp_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_filter_profile", value)

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, services match against any service EXCEPT the specified destination services. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @service_negate.setter
    def service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_negate", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyServiceArgs']]]]:
        """
        Name of service objects. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddr6Args']]]]:
        """
        IPv6 source address objects. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, source addresses match against any address EXCEPT the specified source addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @srcaddr_negate.setter
    def srcaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr_negate", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddrArgs']]]]:
        """
        Source address objects. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcintfArgs']]]]:
        """
        Source interface names. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @ssh_filter_profile.setter
    def ssh_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_filter_profile", value)

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @ssh_policy_redirect.setter
    def ssh_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_policy_redirect", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of the policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def transparent(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use the IP address of the client to connect to the server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "transparent")

    @transparent.setter
    def transparent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transparent", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyUserArgs']]]]:
        """
        Names of user objects. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable the use of UTM profiles/sensors/lists. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VideoFilter profile.
        """
        return pulumi.get(self, "videofilter_profile")

    @videofilter_profile.setter
    def videofilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "videofilter_profile", value)

    @property
    @pulumi.getter(name="virtualPatchProfile")
    def virtual_patch_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing virtual-patch profile.
        """
        return pulumi.get(self, "virtual_patch_profile")

    @virtual_patch_profile.setter
    def virtual_patch_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_patch_profile", value)

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VoIP profile.
        """
        return pulumi.get(self, "voip_profile")

    @voip_profile.setter
    def voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_profile", value)

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @waf_profile.setter
    def waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_profile", value)

    @property
    @pulumi.getter
    def webcache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webcache")

    @webcache.setter
    def webcache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache", value)

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "webcache_https")

    @webcache_https.setter
    def webcache_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache_https", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> Optional[pulumi.Input[str]]:
        """
        Web proxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @webproxy_forward_server.setter
    def webproxy_forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_forward_server", value)

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of web proxy profile.
        """
        return pulumi.get(self, "webproxy_profile")

    @webproxy_profile.setter
    def webproxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_profile", value)

    @property
    @pulumi.getter(name="ztnaEmsTags")
    def ztna_ems_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyZtnaEmsTagArgs']]]]:
        """
        ZTNA EMS Tag names. The structure of `ztna_ems_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tags")

    @ztna_ems_tags.setter
    def ztna_ems_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyZtnaEmsTagArgs']]]]):
        pulumi.set(self, "ztna_ems_tags", value)

    @property
    @pulumi.getter(name="ztnaTagsMatchLogic")
    def ztna_tags_match_logic(self) -> Optional[pulumi.Input[str]]:
        """
        ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        return pulumi.get(self, "ztna_tags_match_logic")

    @ztna_tags_match_logic.setter
    def ztna_tags_match_logic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_tags_match_logic", value)


@pulumi.input_type
class _ProxypolicyState:
    def __init__(__self__, *,
                 access_proxies: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxyArgs']]]] = None,
                 access_proxy6s: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxy6Args']]]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 detect_https_in_http_request: Optional[pulumi.Input[str]] = None,
                 device_ownership: Optional[pulumi.Input[str]] = None,
                 diameter_filter_profile: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddr6Args']]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddrArgs']]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstintfArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyGroupArgs']]]] = None,
                 http_tunnel_auth: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomGroupArgs']]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomArgs']]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6GroupArgs']]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6NameArgs']]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceNameArgs']]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyPoolnameArgs']]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyServiceArgs']]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddr6Args']]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddrArgs']]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcintfArgs']]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transparent: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyUserArgs']]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyZtnaEmsTagArgs']]]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Proxypolicy resources.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxyArgs']]] access_proxies: IPv4 access proxy. The structure of `access_proxy` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxy6Args']]] access_proxy6s: IPv6 access proxy. The structure of `access_proxy6` block is documented below.
        :param pulumi.Input[str] action: Accept or deny traffic matching the policy parameters. Valid values: `accept`, `deny`, `redirect`.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] block_notification: Enable/disable block notification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Optional comments.
        :param pulumi.Input[str] decrypted_traffic_mirror: Decrypted traffic mirror.
        :param pulumi.Input[str] detect_https_in_http_request: Enable/disable detection of HTTPS in HTTP request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_ownership: When enabled, the ownership enforcement will be done at policy level. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diameter_filter_profile: Name of an existing Diameter filter profile.
        :param pulumi.Input[str] disclaimer: Web proxy disclaimer setting: by domain, policy, or user. Valid values: `disable`, `domain`, `policy`, `user`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddr6Args']]] dstaddr6s: IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled, destination addresses match against any address EXCEPT the specified destination addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddrArgs']]] dstaddrs: Destination address objects. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstintfArgs']]] dstintfs: Destination interface names. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] global_label: Global web-based manager visible label.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyGroupArgs']]] groups: Names of group objects. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_tunnel_auth: Enable/disable HTTP tunnel authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6: Enable/disable use of Internet Services IPv6 for this policy. If enabled, destination IPv6 address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomGroupArgs']]] internet_service6_custom_groups: Custom Internet Service IPv6 group name. The structure of `internet_service6_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomArgs']]] internet_service6_customs: Custom Internet Service IPv6 name. The structure of `internet_service6_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6GroupArgs']]] internet_service6_groups: Internet Service IPv6 group name. The structure of `internet_service6_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6NameArgs']]] internet_service6_names: Internet Service IPv6 name. The structure of `internet_service6_name` block is documented below.
        :param pulumi.Input[str] internet_service6_negate: When enabled, Internet Services match against any internet service IPv6 EXCEPT the selected Internet Service IPv6. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomArgs']]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceGroupArgs']]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceIdArgs']]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceNameArgs']]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_voip_filter: Name of an existing VoIP (ips) profile.
        :param pulumi.Input[str] label: VDOM-specific GUI visible label.
        :param pulumi.Input[str] logtraffic: Enable/disable logging traffic through the policy. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Enable/disable policy log traffic start. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyPoolnameArgs']]] poolnames: Name of IP pool object. The structure of `poolname` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] proxy: Type of explicit proxy.
        :param pulumi.Input[str] redirect_url: Redirect URL for further explicit web proxy processing.
        :param pulumi.Input[str] replacemsg_override_group: Authentication replacement message override group.
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] schedule: Name of schedule object.
        :param pulumi.Input[str] sctp_filter_profile: Name of an existing SCTP filter profile.
        :param pulumi.Input[str] service_negate: When enabled, services match against any service EXCEPT the specified destination services. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyServiceArgs']]] services: Name of service objects. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddr6Args']]] srcaddr6s: IPv6 source address objects. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled, source addresses match against any address EXCEPT the specified source addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddrArgs']]] srcaddrs: Source address objects. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcintfArgs']]] srcintfs: Source interface names. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable/disable the active status of the policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] transparent: Enable to use the IP address of the client to connect to the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyUserArgs']]] users: Names of user objects. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable the use of UTM profiles/sensors/lists. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] videofilter_profile: Name of an existing VideoFilter profile.
        :param pulumi.Input[str] virtual_patch_profile: Name of an existing virtual-patch profile.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP profile.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] webcache: Enable/disable web caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Web proxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Name of web proxy profile.
        :param pulumi.Input[Sequence[pulumi.Input['ProxypolicyZtnaEmsTagArgs']]] ztna_ems_tags: ZTNA EMS Tag names. The structure of `ztna_ems_tag` block is documented below.
        :param pulumi.Input[str] ztna_tags_match_logic: ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        if access_proxies is not None:
            pulumi.set(__self__, "access_proxies", access_proxies)
        if access_proxy6s is not None:
            pulumi.set(__self__, "access_proxy6s", access_proxy6s)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if block_notification is not None:
            pulumi.set(__self__, "block_notification", block_notification)
        if casb_profile is not None:
            pulumi.set(__self__, "casb_profile", casb_profile)
        if cifs_profile is not None:
            pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if decrypted_traffic_mirror is not None:
            pulumi.set(__self__, "decrypted_traffic_mirror", decrypted_traffic_mirror)
        if detect_https_in_http_request is not None:
            pulumi.set(__self__, "detect_https_in_http_request", detect_https_in_http_request)
        if device_ownership is not None:
            pulumi.set(__self__, "device_ownership", device_ownership)
        if diameter_filter_profile is not None:
            pulumi.set(__self__, "diameter_filter_profile", diameter_filter_profile)
        if disclaimer is not None:
            pulumi.set(__self__, "disclaimer", disclaimer)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddr_negate is not None:
            pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if file_filter_profile is not None:
            pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if global_label is not None:
            pulumi.set(__self__, "global_label", global_label)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if http_tunnel_auth is not None:
            pulumi.set(__self__, "http_tunnel_auth", http_tunnel_auth)
        if icap_profile is not None:
            pulumi.set(__self__, "icap_profile", icap_profile)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service6 is not None:
            pulumi.set(__self__, "internet_service6", internet_service6)
        if internet_service6_custom_groups is not None:
            pulumi.set(__self__, "internet_service6_custom_groups", internet_service6_custom_groups)
        if internet_service6_customs is not None:
            pulumi.set(__self__, "internet_service6_customs", internet_service6_customs)
        if internet_service6_groups is not None:
            pulumi.set(__self__, "internet_service6_groups", internet_service6_groups)
        if internet_service6_names is not None:
            pulumi.set(__self__, "internet_service6_names", internet_service6_names)
        if internet_service6_negate is not None:
            pulumi.set(__self__, "internet_service6_negate", internet_service6_negate)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_negate is not None:
            pulumi.set(__self__, "internet_service_negate", internet_service_negate)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_voip_filter is not None:
            pulumi.set(__self__, "ips_voip_filter", ips_voip_filter)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if profile_group is not None:
            pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if replacemsg_override_group is not None:
            pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if sctp_filter_profile is not None:
            pulumi.set(__self__, "sctp_filter_profile", sctp_filter_profile)
        if service_negate is not None:
            pulumi.set(__self__, "service_negate", service_negate)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddr_negate is not None:
            pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if ssh_filter_profile is not None:
            pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect is not None:
            pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transparent is not None:
            pulumi.set(__self__, "transparent", transparent)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_profile is not None:
            pulumi.set(__self__, "videofilter_profile", videofilter_profile)
        if virtual_patch_profile is not None:
            pulumi.set(__self__, "virtual_patch_profile", virtual_patch_profile)
        if voip_profile is not None:
            pulumi.set(__self__, "voip_profile", voip_profile)
        if waf_profile is not None:
            pulumi.set(__self__, "waf_profile", waf_profile)
        if webcache is not None:
            pulumi.set(__self__, "webcache", webcache)
        if webcache_https is not None:
            pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server is not None:
            pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile is not None:
            pulumi.set(__self__, "webproxy_profile", webproxy_profile)
        if ztna_ems_tags is not None:
            pulumi.set(__self__, "ztna_ems_tags", ztna_ems_tags)
        if ztna_tags_match_logic is not None:
            pulumi.set(__self__, "ztna_tags_match_logic", ztna_tags_match_logic)

    @property
    @pulumi.getter(name="accessProxies")
    def access_proxies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxyArgs']]]]:
        """
        IPv4 access proxy. The structure of `access_proxy` block is documented below.
        """
        return pulumi.get(self, "access_proxies")

    @access_proxies.setter
    def access_proxies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxyArgs']]]]):
        pulumi.set(self, "access_proxies", value)

    @property
    @pulumi.getter(name="accessProxy6s")
    def access_proxy6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxy6Args']]]]:
        """
        IPv6 access proxy. The structure of `access_proxy6` block is documented below.
        """
        return pulumi.get(self, "access_proxy6s")

    @access_proxy6s.setter
    def access_proxy6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyAccessProxy6Args']]]]):
        pulumi.set(self, "access_proxy6s", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Accept or deny traffic matching the policy parameters. Valid values: `accept`, `deny`, `redirect`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="blockNotification")
    def block_notification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block notification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "block_notification")

    @block_notification.setter
    def block_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_notification", value)

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @casb_profile.setter
    def casb_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile", value)

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @cifs_profile.setter
    def cifs_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cifs_profile", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> Optional[pulumi.Input[str]]:
        """
        Decrypted traffic mirror.
        """
        return pulumi.get(self, "decrypted_traffic_mirror")

    @decrypted_traffic_mirror.setter
    def decrypted_traffic_mirror(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decrypted_traffic_mirror", value)

    @property
    @pulumi.getter(name="detectHttpsInHttpRequest")
    def detect_https_in_http_request(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable detection of HTTPS in HTTP request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "detect_https_in_http_request")

    @detect_https_in_http_request.setter
    def detect_https_in_http_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detect_https_in_http_request", value)

    @property
    @pulumi.getter(name="deviceOwnership")
    def device_ownership(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, the ownership enforcement will be done at policy level. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_ownership")

    @device_ownership.setter
    def device_ownership(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_ownership", value)

    @property
    @pulumi.getter(name="diameterFilterProfile")
    def diameter_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Diameter filter profile.
        """
        return pulumi.get(self, "diameter_filter_profile")

    @diameter_filter_profile.setter
    def diameter_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diameter_filter_profile", value)

    @property
    @pulumi.getter
    def disclaimer(self) -> Optional[pulumi.Input[str]]:
        """
        Web proxy disclaimer setting: by domain, policy, or user. Valid values: `disable`, `domain`, `policy`, `user`.
        """
        return pulumi.get(self, "disclaimer")

    @disclaimer.setter
    def disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disclaimer", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP profile.
        """
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddr6Args']]]]:
        """
        IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, destination addresses match against any address EXCEPT the specified destination addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @dstaddr_negate.setter
    def dstaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr_negate", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddrArgs']]]]:
        """
        Destination address objects. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstintfArgs']]]]:
        """
        Destination interface names. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyDstintfArgs']]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing file-filter profile.
        """
        return pulumi.get(self, "file_filter_profile")

    @file_filter_profile.setter
    def file_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> Optional[pulumi.Input[str]]:
        """
        Global web-based manager visible label.
        """
        return pulumi.get(self, "global_label")

    @global_label.setter
    def global_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_label", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyGroupArgs']]]]:
        """
        Names of group objects. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="httpTunnelAuth")
    def http_tunnel_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP tunnel authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_tunnel_auth")

    @http_tunnel_auth.setter
    def http_tunnel_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_tunnel_auth", value)

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @icap_profile.setter
    def icap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_profile", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetService6")
    def internet_service6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services IPv6 for this policy. If enabled, destination IPv6 address and service are not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6")

    @internet_service6.setter
    def internet_service6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6", value)

    @property
    @pulumi.getter(name="internetService6CustomGroups")
    def internet_service6_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomGroupArgs']]]]:
        """
        Custom Internet Service IPv6 group name. The structure of `internet_service6_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_custom_groups")

    @internet_service6_custom_groups.setter
    def internet_service6_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomGroupArgs']]]]):
        pulumi.set(self, "internet_service6_custom_groups", value)

    @property
    @pulumi.getter(name="internetService6Customs")
    def internet_service6_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomArgs']]]]:
        """
        Custom Internet Service IPv6 name. The structure of `internet_service6_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_customs")

    @internet_service6_customs.setter
    def internet_service6_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6CustomArgs']]]]):
        pulumi.set(self, "internet_service6_customs", value)

    @property
    @pulumi.getter(name="internetService6Groups")
    def internet_service6_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6GroupArgs']]]]:
        """
        Internet Service IPv6 group name. The structure of `internet_service6_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_groups")

    @internet_service6_groups.setter
    def internet_service6_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6GroupArgs']]]]):
        pulumi.set(self, "internet_service6_groups", value)

    @property
    @pulumi.getter(name="internetService6Names")
    def internet_service6_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6NameArgs']]]]:
        """
        Internet Service IPv6 name. The structure of `internet_service6_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_names")

    @internet_service6_names.setter
    def internet_service6_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetService6NameArgs']]]]):
        pulumi.set(self, "internet_service6_names", value)

    @property
    @pulumi.getter(name="internetService6Negate")
    def internet_service6_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, Internet Services match against any internet service IPv6 EXCEPT the selected Internet Service IPv6. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_negate")

    @internet_service6_negate.setter
    def internet_service6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_negate", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomArgs']]]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceGroupArgs']]]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceIdArgs']]]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceNameArgs']]]]:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_negate")

    @internet_service_negate.setter
    def internet_service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_negate", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VoIP (ips) profile.
        """
        return pulumi.get(self, "ips_voip_filter")

    @ips_voip_filter.setter
    def ips_voip_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_voip_filter", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM-specific GUI visible label.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging traffic through the policy. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy log traffic start. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyPoolnameArgs']]]]:
        """
        Name of IP pool object. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyPoolnameArgs']]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @profile_group.setter
    def profile_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_group", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Type of explicit proxy.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect URL for further explicit web proxy processing.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication replacement message override group.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @replacemsg_override_group.setter
    def replacemsg_override_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_override_group", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Name of schedule object.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SCTP filter profile.
        """
        return pulumi.get(self, "sctp_filter_profile")

    @sctp_filter_profile.setter
    def sctp_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_filter_profile", value)

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, services match against any service EXCEPT the specified destination services. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @service_negate.setter
    def service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_negate", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyServiceArgs']]]]:
        """
        Name of service objects. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddr6Args']]]]:
        """
        IPv6 source address objects. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, source addresses match against any address EXCEPT the specified source addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @srcaddr_negate.setter
    def srcaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr_negate", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddrArgs']]]]:
        """
        Source address objects. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcintfArgs']]]]:
        """
        Source interface names. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicySrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @ssh_filter_profile.setter
    def ssh_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_filter_profile", value)

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @ssh_policy_redirect.setter
    def ssh_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_policy_redirect", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of the policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def transparent(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use the IP address of the client to connect to the server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "transparent")

    @transparent.setter
    def transparent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transparent", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyUserArgs']]]]:
        """
        Names of user objects. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable the use of UTM profiles/sensors/lists. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VideoFilter profile.
        """
        return pulumi.get(self, "videofilter_profile")

    @videofilter_profile.setter
    def videofilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "videofilter_profile", value)

    @property
    @pulumi.getter(name="virtualPatchProfile")
    def virtual_patch_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing virtual-patch profile.
        """
        return pulumi.get(self, "virtual_patch_profile")

    @virtual_patch_profile.setter
    def virtual_patch_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_patch_profile", value)

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VoIP profile.
        """
        return pulumi.get(self, "voip_profile")

    @voip_profile.setter
    def voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_profile", value)

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @waf_profile.setter
    def waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_profile", value)

    @property
    @pulumi.getter
    def webcache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webcache")

    @webcache.setter
    def webcache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache", value)

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "webcache_https")

    @webcache_https.setter
    def webcache_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache_https", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> Optional[pulumi.Input[str]]:
        """
        Web proxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @webproxy_forward_server.setter
    def webproxy_forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_forward_server", value)

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of web proxy profile.
        """
        return pulumi.get(self, "webproxy_profile")

    @webproxy_profile.setter
    def webproxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_profile", value)

    @property
    @pulumi.getter(name="ztnaEmsTags")
    def ztna_ems_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyZtnaEmsTagArgs']]]]:
        """
        ZTNA EMS Tag names. The structure of `ztna_ems_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tags")

    @ztna_ems_tags.setter
    def ztna_ems_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxypolicyZtnaEmsTagArgs']]]]):
        pulumi.set(self, "ztna_ems_tags", value)

    @property
    @pulumi.getter(name="ztnaTagsMatchLogic")
    def ztna_tags_match_logic(self) -> Optional[pulumi.Input[str]]:
        """
        ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        return pulumi.get(self, "ztna_tags_match_logic")

    @ztna_tags_match_logic.setter
    def ztna_tags_match_logic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_tags_match_logic", value)


class Proxypolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_proxies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyAccessProxyArgs']]]]] = None,
                 access_proxy6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyAccessProxy6Args']]]]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 detect_https_in_http_request: Optional[pulumi.Input[str]] = None,
                 device_ownership: Optional[pulumi.Input[str]] = None,
                 diameter_filter_profile: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstaddr6Args']]]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstaddrArgs']]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstintfArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyGroupArgs']]]]] = None,
                 http_tunnel_auth: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6CustomGroupArgs']]]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6CustomArgs']]]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6GroupArgs']]]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6NameArgs']]]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceCustomGroupArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceGroupArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceIdArgs']]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceNameArgs']]]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyPoolnameArgs']]]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyServiceArgs']]]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcaddr6Args']]]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcaddrArgs']]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcintfArgs']]]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transparent: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyUserArgs']]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyZtnaEmsTagArgs']]]]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure proxy policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Proxypolicy("trname",
            action="deny",
            disclaimer="disable",
            dstaddrs=[fortios.firewall.ProxypolicyDstaddrArgs(
                name="all",
            )],
            dstaddr_negate="disable",
            dstintfs=[fortios.firewall.ProxypolicyDstintfArgs(
                name="port4",
            )],
            http_tunnel_auth="disable",
            internet_service="disable",
            internet_service_negate="disable",
            logtraffic="disable",
            logtraffic_start="disable",
            policyid=1,
            profile_protocol_options="default",
            profile_type="single",
            proxy="transparent-web",
            scan_botnet_connections="disable",
            schedule="always",
            services=[fortios.firewall.ProxypolicyServiceArgs(
                name="webproxy",
            )],
            service_negate="disable",
            srcaddrs=[fortios.firewall.ProxypolicySrcaddrArgs(
                name="all",
            )],
            srcaddr_negate="disable",
            srcintfs=[fortios.firewall.ProxypolicySrcintfArgs(
                name="port3",
            )],
            status="enable",
            transparent="disable",
            utm_status="disable",
            webcache="disable",
            webcache_https="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall ProxyPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/proxypolicy:Proxypolicy labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/proxypolicy:Proxypolicy labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyAccessProxyArgs']]]] access_proxies: IPv4 access proxy. The structure of `access_proxy` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyAccessProxy6Args']]]] access_proxy6s: IPv6 access proxy. The structure of `access_proxy6` block is documented below.
        :param pulumi.Input[str] action: Accept or deny traffic matching the policy parameters. Valid values: `accept`, `deny`, `redirect`.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] block_notification: Enable/disable block notification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Optional comments.
        :param pulumi.Input[str] decrypted_traffic_mirror: Decrypted traffic mirror.
        :param pulumi.Input[str] detect_https_in_http_request: Enable/disable detection of HTTPS in HTTP request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_ownership: When enabled, the ownership enforcement will be done at policy level. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diameter_filter_profile: Name of an existing Diameter filter profile.
        :param pulumi.Input[str] disclaimer: Web proxy disclaimer setting: by domain, policy, or user. Valid values: `disable`, `domain`, `policy`, `user`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstaddr6Args']]]] dstaddr6s: IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled, destination addresses match against any address EXCEPT the specified destination addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstaddrArgs']]]] dstaddrs: Destination address objects. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstintfArgs']]]] dstintfs: Destination interface names. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] global_label: Global web-based manager visible label.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyGroupArgs']]]] groups: Names of group objects. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_tunnel_auth: Enable/disable HTTP tunnel authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6: Enable/disable use of Internet Services IPv6 for this policy. If enabled, destination IPv6 address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6CustomGroupArgs']]]] internet_service6_custom_groups: Custom Internet Service IPv6 group name. The structure of `internet_service6_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6CustomArgs']]]] internet_service6_customs: Custom Internet Service IPv6 name. The structure of `internet_service6_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6GroupArgs']]]] internet_service6_groups: Internet Service IPv6 group name. The structure of `internet_service6_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6NameArgs']]]] internet_service6_names: Internet Service IPv6 name. The structure of `internet_service6_name` block is documented below.
        :param pulumi.Input[str] internet_service6_negate: When enabled, Internet Services match against any internet service IPv6 EXCEPT the selected Internet Service IPv6. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceCustomGroupArgs']]]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceCustomArgs']]]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceGroupArgs']]]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceIdArgs']]]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceNameArgs']]]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_voip_filter: Name of an existing VoIP (ips) profile.
        :param pulumi.Input[str] label: VDOM-specific GUI visible label.
        :param pulumi.Input[str] logtraffic: Enable/disable logging traffic through the policy. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Enable/disable policy log traffic start. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyPoolnameArgs']]]] poolnames: Name of IP pool object. The structure of `poolname` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] proxy: Type of explicit proxy.
        :param pulumi.Input[str] redirect_url: Redirect URL for further explicit web proxy processing.
        :param pulumi.Input[str] replacemsg_override_group: Authentication replacement message override group.
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] schedule: Name of schedule object.
        :param pulumi.Input[str] sctp_filter_profile: Name of an existing SCTP filter profile.
        :param pulumi.Input[str] service_negate: When enabled, services match against any service EXCEPT the specified destination services. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyServiceArgs']]]] services: Name of service objects. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcaddr6Args']]]] srcaddr6s: IPv6 source address objects. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled, source addresses match against any address EXCEPT the specified source addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcaddrArgs']]]] srcaddrs: Source address objects. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcintfArgs']]]] srcintfs: Source interface names. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable/disable the active status of the policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] transparent: Enable to use the IP address of the client to connect to the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyUserArgs']]]] users: Names of user objects. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable the use of UTM profiles/sensors/lists. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] videofilter_profile: Name of an existing VideoFilter profile.
        :param pulumi.Input[str] virtual_patch_profile: Name of an existing virtual-patch profile.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP profile.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] webcache: Enable/disable web caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Web proxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Name of web proxy profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyZtnaEmsTagArgs']]]] ztna_ems_tags: ZTNA EMS Tag names. The structure of `ztna_ems_tag` block is documented below.
        :param pulumi.Input[str] ztna_tags_match_logic: ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProxypolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure proxy policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Proxypolicy("trname",
            action="deny",
            disclaimer="disable",
            dstaddrs=[fortios.firewall.ProxypolicyDstaddrArgs(
                name="all",
            )],
            dstaddr_negate="disable",
            dstintfs=[fortios.firewall.ProxypolicyDstintfArgs(
                name="port4",
            )],
            http_tunnel_auth="disable",
            internet_service="disable",
            internet_service_negate="disable",
            logtraffic="disable",
            logtraffic_start="disable",
            policyid=1,
            profile_protocol_options="default",
            profile_type="single",
            proxy="transparent-web",
            scan_botnet_connections="disable",
            schedule="always",
            services=[fortios.firewall.ProxypolicyServiceArgs(
                name="webproxy",
            )],
            service_negate="disable",
            srcaddrs=[fortios.firewall.ProxypolicySrcaddrArgs(
                name="all",
            )],
            srcaddr_negate="disable",
            srcintfs=[fortios.firewall.ProxypolicySrcintfArgs(
                name="port3",
            )],
            status="enable",
            transparent="disable",
            utm_status="disable",
            webcache="disable",
            webcache_https="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall ProxyPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/proxypolicy:Proxypolicy labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/proxypolicy:Proxypolicy labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ProxypolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProxypolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_proxies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyAccessProxyArgs']]]]] = None,
                 access_proxy6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyAccessProxy6Args']]]]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 detect_https_in_http_request: Optional[pulumi.Input[str]] = None,
                 device_ownership: Optional[pulumi.Input[str]] = None,
                 diameter_filter_profile: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstaddr6Args']]]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstaddrArgs']]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstintfArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyGroupArgs']]]]] = None,
                 http_tunnel_auth: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6CustomGroupArgs']]]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6CustomArgs']]]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6GroupArgs']]]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6NameArgs']]]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceCustomGroupArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceGroupArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceIdArgs']]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceNameArgs']]]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyPoolnameArgs']]]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyServiceArgs']]]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcaddr6Args']]]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcaddrArgs']]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcintfArgs']]]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transparent: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyUserArgs']]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyZtnaEmsTagArgs']]]]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProxypolicyArgs.__new__(ProxypolicyArgs)

            __props__.__dict__["access_proxies"] = access_proxies
            __props__.__dict__["access_proxy6s"] = access_proxy6s
            __props__.__dict__["action"] = action
            __props__.__dict__["application_list"] = application_list
            __props__.__dict__["av_profile"] = av_profile
            __props__.__dict__["block_notification"] = block_notification
            __props__.__dict__["casb_profile"] = casb_profile
            __props__.__dict__["cifs_profile"] = cifs_profile
            __props__.__dict__["comments"] = comments
            __props__.__dict__["decrypted_traffic_mirror"] = decrypted_traffic_mirror
            __props__.__dict__["detect_https_in_http_request"] = detect_https_in_http_request
            __props__.__dict__["device_ownership"] = device_ownership
            __props__.__dict__["diameter_filter_profile"] = diameter_filter_profile
            __props__.__dict__["disclaimer"] = disclaimer
            __props__.__dict__["dlp_profile"] = dlp_profile
            __props__.__dict__["dlp_sensor"] = dlp_sensor
            __props__.__dict__["dstaddr6s"] = dstaddr6s
            __props__.__dict__["dstaddr_negate"] = dstaddr_negate
            __props__.__dict__["dstaddrs"] = dstaddrs
            if dstintfs is None and not opts.urn:
                raise TypeError("Missing required property 'dstintfs'")
            __props__.__dict__["dstintfs"] = dstintfs
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["emailfilter_profile"] = emailfilter_profile
            __props__.__dict__["file_filter_profile"] = file_filter_profile
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["global_label"] = global_label
            __props__.__dict__["groups"] = groups
            __props__.__dict__["http_tunnel_auth"] = http_tunnel_auth
            __props__.__dict__["icap_profile"] = icap_profile
            __props__.__dict__["internet_service"] = internet_service
            __props__.__dict__["internet_service6"] = internet_service6
            __props__.__dict__["internet_service6_custom_groups"] = internet_service6_custom_groups
            __props__.__dict__["internet_service6_customs"] = internet_service6_customs
            __props__.__dict__["internet_service6_groups"] = internet_service6_groups
            __props__.__dict__["internet_service6_names"] = internet_service6_names
            __props__.__dict__["internet_service6_negate"] = internet_service6_negate
            __props__.__dict__["internet_service_custom_groups"] = internet_service_custom_groups
            __props__.__dict__["internet_service_customs"] = internet_service_customs
            __props__.__dict__["internet_service_groups"] = internet_service_groups
            __props__.__dict__["internet_service_ids"] = internet_service_ids
            __props__.__dict__["internet_service_names"] = internet_service_names
            __props__.__dict__["internet_service_negate"] = internet_service_negate
            __props__.__dict__["ips_sensor"] = ips_sensor
            __props__.__dict__["ips_voip_filter"] = ips_voip_filter
            __props__.__dict__["label"] = label
            __props__.__dict__["logtraffic"] = logtraffic
            __props__.__dict__["logtraffic_start"] = logtraffic_start
            __props__.__dict__["name"] = name
            __props__.__dict__["policyid"] = policyid
            __props__.__dict__["poolnames"] = poolnames
            __props__.__dict__["profile_group"] = profile_group
            __props__.__dict__["profile_protocol_options"] = profile_protocol_options
            __props__.__dict__["profile_type"] = profile_type
            if proxy is None and not opts.urn:
                raise TypeError("Missing required property 'proxy'")
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["redirect_url"] = redirect_url
            __props__.__dict__["replacemsg_override_group"] = replacemsg_override_group
            __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["sctp_filter_profile"] = sctp_filter_profile
            __props__.__dict__["service_negate"] = service_negate
            __props__.__dict__["services"] = services
            __props__.__dict__["session_ttl"] = session_ttl
            __props__.__dict__["spamfilter_profile"] = spamfilter_profile
            __props__.__dict__["srcaddr6s"] = srcaddr6s
            __props__.__dict__["srcaddr_negate"] = srcaddr_negate
            __props__.__dict__["srcaddrs"] = srcaddrs
            __props__.__dict__["srcintfs"] = srcintfs
            __props__.__dict__["ssh_filter_profile"] = ssh_filter_profile
            __props__.__dict__["ssh_policy_redirect"] = ssh_policy_redirect
            __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
            __props__.__dict__["status"] = status
            __props__.__dict__["transparent"] = transparent
            __props__.__dict__["users"] = users
            __props__.__dict__["utm_status"] = utm_status
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["videofilter_profile"] = videofilter_profile
            __props__.__dict__["virtual_patch_profile"] = virtual_patch_profile
            __props__.__dict__["voip_profile"] = voip_profile
            __props__.__dict__["waf_profile"] = waf_profile
            __props__.__dict__["webcache"] = webcache
            __props__.__dict__["webcache_https"] = webcache_https
            __props__.__dict__["webfilter_profile"] = webfilter_profile
            __props__.__dict__["webproxy_forward_server"] = webproxy_forward_server
            __props__.__dict__["webproxy_profile"] = webproxy_profile
            __props__.__dict__["ztna_ems_tags"] = ztna_ems_tags
            __props__.__dict__["ztna_tags_match_logic"] = ztna_tags_match_logic
        super(Proxypolicy, __self__).__init__(
            'fortios:firewall/proxypolicy:Proxypolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_proxies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyAccessProxyArgs']]]]] = None,
            access_proxy6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyAccessProxy6Args']]]]] = None,
            action: Optional[pulumi.Input[str]] = None,
            application_list: Optional[pulumi.Input[str]] = None,
            av_profile: Optional[pulumi.Input[str]] = None,
            block_notification: Optional[pulumi.Input[str]] = None,
            casb_profile: Optional[pulumi.Input[str]] = None,
            cifs_profile: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
            detect_https_in_http_request: Optional[pulumi.Input[str]] = None,
            device_ownership: Optional[pulumi.Input[str]] = None,
            diameter_filter_profile: Optional[pulumi.Input[str]] = None,
            disclaimer: Optional[pulumi.Input[str]] = None,
            dlp_profile: Optional[pulumi.Input[str]] = None,
            dlp_sensor: Optional[pulumi.Input[str]] = None,
            dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstaddr6Args']]]]] = None,
            dstaddr_negate: Optional[pulumi.Input[str]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstaddrArgs']]]]] = None,
            dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstintfArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            emailfilter_profile: Optional[pulumi.Input[str]] = None,
            file_filter_profile: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            global_label: Optional[pulumi.Input[str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyGroupArgs']]]]] = None,
            http_tunnel_auth: Optional[pulumi.Input[str]] = None,
            icap_profile: Optional[pulumi.Input[str]] = None,
            internet_service: Optional[pulumi.Input[str]] = None,
            internet_service6: Optional[pulumi.Input[str]] = None,
            internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6CustomGroupArgs']]]]] = None,
            internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6CustomArgs']]]]] = None,
            internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6GroupArgs']]]]] = None,
            internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6NameArgs']]]]] = None,
            internet_service6_negate: Optional[pulumi.Input[str]] = None,
            internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceCustomGroupArgs']]]]] = None,
            internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceCustomArgs']]]]] = None,
            internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceGroupArgs']]]]] = None,
            internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceIdArgs']]]]] = None,
            internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceNameArgs']]]]] = None,
            internet_service_negate: Optional[pulumi.Input[str]] = None,
            ips_sensor: Optional[pulumi.Input[str]] = None,
            ips_voip_filter: Optional[pulumi.Input[str]] = None,
            label: Optional[pulumi.Input[str]] = None,
            logtraffic: Optional[pulumi.Input[str]] = None,
            logtraffic_start: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            policyid: Optional[pulumi.Input[int]] = None,
            poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyPoolnameArgs']]]]] = None,
            profile_group: Optional[pulumi.Input[str]] = None,
            profile_protocol_options: Optional[pulumi.Input[str]] = None,
            profile_type: Optional[pulumi.Input[str]] = None,
            proxy: Optional[pulumi.Input[str]] = None,
            redirect_url: Optional[pulumi.Input[str]] = None,
            replacemsg_override_group: Optional[pulumi.Input[str]] = None,
            scan_botnet_connections: Optional[pulumi.Input[str]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            sctp_filter_profile: Optional[pulumi.Input[str]] = None,
            service_negate: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyServiceArgs']]]]] = None,
            session_ttl: Optional[pulumi.Input[int]] = None,
            spamfilter_profile: Optional[pulumi.Input[str]] = None,
            srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcaddr6Args']]]]] = None,
            srcaddr_negate: Optional[pulumi.Input[str]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcaddrArgs']]]]] = None,
            srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcintfArgs']]]]] = None,
            ssh_filter_profile: Optional[pulumi.Input[str]] = None,
            ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
            ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            transparent: Optional[pulumi.Input[str]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyUserArgs']]]]] = None,
            utm_status: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            videofilter_profile: Optional[pulumi.Input[str]] = None,
            virtual_patch_profile: Optional[pulumi.Input[str]] = None,
            voip_profile: Optional[pulumi.Input[str]] = None,
            waf_profile: Optional[pulumi.Input[str]] = None,
            webcache: Optional[pulumi.Input[str]] = None,
            webcache_https: Optional[pulumi.Input[str]] = None,
            webfilter_profile: Optional[pulumi.Input[str]] = None,
            webproxy_forward_server: Optional[pulumi.Input[str]] = None,
            webproxy_profile: Optional[pulumi.Input[str]] = None,
            ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyZtnaEmsTagArgs']]]]] = None,
            ztna_tags_match_logic: Optional[pulumi.Input[str]] = None) -> 'Proxypolicy':
        """
        Get an existing Proxypolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyAccessProxyArgs']]]] access_proxies: IPv4 access proxy. The structure of `access_proxy` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyAccessProxy6Args']]]] access_proxy6s: IPv6 access proxy. The structure of `access_proxy6` block is documented below.
        :param pulumi.Input[str] action: Accept or deny traffic matching the policy parameters. Valid values: `accept`, `deny`, `redirect`.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] block_notification: Enable/disable block notification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Optional comments.
        :param pulumi.Input[str] decrypted_traffic_mirror: Decrypted traffic mirror.
        :param pulumi.Input[str] detect_https_in_http_request: Enable/disable detection of HTTPS in HTTP request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_ownership: When enabled, the ownership enforcement will be done at policy level. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diameter_filter_profile: Name of an existing Diameter filter profile.
        :param pulumi.Input[str] disclaimer: Web proxy disclaimer setting: by domain, policy, or user. Valid values: `disable`, `domain`, `policy`, `user`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstaddr6Args']]]] dstaddr6s: IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled, destination addresses match against any address EXCEPT the specified destination addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstaddrArgs']]]] dstaddrs: Destination address objects. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyDstintfArgs']]]] dstintfs: Destination interface names. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] global_label: Global web-based manager visible label.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyGroupArgs']]]] groups: Names of group objects. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_tunnel_auth: Enable/disable HTTP tunnel authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6: Enable/disable use of Internet Services IPv6 for this policy. If enabled, destination IPv6 address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6CustomGroupArgs']]]] internet_service6_custom_groups: Custom Internet Service IPv6 group name. The structure of `internet_service6_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6CustomArgs']]]] internet_service6_customs: Custom Internet Service IPv6 name. The structure of `internet_service6_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6GroupArgs']]]] internet_service6_groups: Internet Service IPv6 group name. The structure of `internet_service6_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetService6NameArgs']]]] internet_service6_names: Internet Service IPv6 name. The structure of `internet_service6_name` block is documented below.
        :param pulumi.Input[str] internet_service6_negate: When enabled, Internet Services match against any internet service IPv6 EXCEPT the selected Internet Service IPv6. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceCustomGroupArgs']]]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceCustomArgs']]]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceGroupArgs']]]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceIdArgs']]]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyInternetServiceNameArgs']]]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_voip_filter: Name of an existing VoIP (ips) profile.
        :param pulumi.Input[str] label: VDOM-specific GUI visible label.
        :param pulumi.Input[str] logtraffic: Enable/disable logging traffic through the policy. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Enable/disable policy log traffic start. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyPoolnameArgs']]]] poolnames: Name of IP pool object. The structure of `poolname` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] proxy: Type of explicit proxy.
        :param pulumi.Input[str] redirect_url: Redirect URL for further explicit web proxy processing.
        :param pulumi.Input[str] replacemsg_override_group: Authentication replacement message override group.
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] schedule: Name of schedule object.
        :param pulumi.Input[str] sctp_filter_profile: Name of an existing SCTP filter profile.
        :param pulumi.Input[str] service_negate: When enabled, services match against any service EXCEPT the specified destination services. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyServiceArgs']]]] services: Name of service objects. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcaddr6Args']]]] srcaddr6s: IPv6 source address objects. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled, source addresses match against any address EXCEPT the specified source addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcaddrArgs']]]] srcaddrs: Source address objects. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicySrcintfArgs']]]] srcintfs: Source interface names. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable/disable the active status of the policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] transparent: Enable to use the IP address of the client to connect to the server. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyUserArgs']]]] users: Names of user objects. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable the use of UTM profiles/sensors/lists. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] videofilter_profile: Name of an existing VideoFilter profile.
        :param pulumi.Input[str] virtual_patch_profile: Name of an existing virtual-patch profile.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP profile.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] webcache: Enable/disable web caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Web proxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Name of web proxy profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxypolicyZtnaEmsTagArgs']]]] ztna_ems_tags: ZTNA EMS Tag names. The structure of `ztna_ems_tag` block is documented below.
        :param pulumi.Input[str] ztna_tags_match_logic: ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProxypolicyState.__new__(_ProxypolicyState)

        __props__.__dict__["access_proxies"] = access_proxies
        __props__.__dict__["access_proxy6s"] = access_proxy6s
        __props__.__dict__["action"] = action
        __props__.__dict__["application_list"] = application_list
        __props__.__dict__["av_profile"] = av_profile
        __props__.__dict__["block_notification"] = block_notification
        __props__.__dict__["casb_profile"] = casb_profile
        __props__.__dict__["cifs_profile"] = cifs_profile
        __props__.__dict__["comments"] = comments
        __props__.__dict__["decrypted_traffic_mirror"] = decrypted_traffic_mirror
        __props__.__dict__["detect_https_in_http_request"] = detect_https_in_http_request
        __props__.__dict__["device_ownership"] = device_ownership
        __props__.__dict__["diameter_filter_profile"] = diameter_filter_profile
        __props__.__dict__["disclaimer"] = disclaimer
        __props__.__dict__["dlp_profile"] = dlp_profile
        __props__.__dict__["dlp_sensor"] = dlp_sensor
        __props__.__dict__["dstaddr6s"] = dstaddr6s
        __props__.__dict__["dstaddr_negate"] = dstaddr_negate
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dstintfs"] = dstintfs
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["emailfilter_profile"] = emailfilter_profile
        __props__.__dict__["file_filter_profile"] = file_filter_profile
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["global_label"] = global_label
        __props__.__dict__["groups"] = groups
        __props__.__dict__["http_tunnel_auth"] = http_tunnel_auth
        __props__.__dict__["icap_profile"] = icap_profile
        __props__.__dict__["internet_service"] = internet_service
        __props__.__dict__["internet_service6"] = internet_service6
        __props__.__dict__["internet_service6_custom_groups"] = internet_service6_custom_groups
        __props__.__dict__["internet_service6_customs"] = internet_service6_customs
        __props__.__dict__["internet_service6_groups"] = internet_service6_groups
        __props__.__dict__["internet_service6_names"] = internet_service6_names
        __props__.__dict__["internet_service6_negate"] = internet_service6_negate
        __props__.__dict__["internet_service_custom_groups"] = internet_service_custom_groups
        __props__.__dict__["internet_service_customs"] = internet_service_customs
        __props__.__dict__["internet_service_groups"] = internet_service_groups
        __props__.__dict__["internet_service_ids"] = internet_service_ids
        __props__.__dict__["internet_service_names"] = internet_service_names
        __props__.__dict__["internet_service_negate"] = internet_service_negate
        __props__.__dict__["ips_sensor"] = ips_sensor
        __props__.__dict__["ips_voip_filter"] = ips_voip_filter
        __props__.__dict__["label"] = label
        __props__.__dict__["logtraffic"] = logtraffic
        __props__.__dict__["logtraffic_start"] = logtraffic_start
        __props__.__dict__["name"] = name
        __props__.__dict__["policyid"] = policyid
        __props__.__dict__["poolnames"] = poolnames
        __props__.__dict__["profile_group"] = profile_group
        __props__.__dict__["profile_protocol_options"] = profile_protocol_options
        __props__.__dict__["profile_type"] = profile_type
        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["redirect_url"] = redirect_url
        __props__.__dict__["replacemsg_override_group"] = replacemsg_override_group
        __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["sctp_filter_profile"] = sctp_filter_profile
        __props__.__dict__["service_negate"] = service_negate
        __props__.__dict__["services"] = services
        __props__.__dict__["session_ttl"] = session_ttl
        __props__.__dict__["spamfilter_profile"] = spamfilter_profile
        __props__.__dict__["srcaddr6s"] = srcaddr6s
        __props__.__dict__["srcaddr_negate"] = srcaddr_negate
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["srcintfs"] = srcintfs
        __props__.__dict__["ssh_filter_profile"] = ssh_filter_profile
        __props__.__dict__["ssh_policy_redirect"] = ssh_policy_redirect
        __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
        __props__.__dict__["status"] = status
        __props__.__dict__["transparent"] = transparent
        __props__.__dict__["users"] = users
        __props__.__dict__["utm_status"] = utm_status
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["videofilter_profile"] = videofilter_profile
        __props__.__dict__["virtual_patch_profile"] = virtual_patch_profile
        __props__.__dict__["voip_profile"] = voip_profile
        __props__.__dict__["waf_profile"] = waf_profile
        __props__.__dict__["webcache"] = webcache
        __props__.__dict__["webcache_https"] = webcache_https
        __props__.__dict__["webfilter_profile"] = webfilter_profile
        __props__.__dict__["webproxy_forward_server"] = webproxy_forward_server
        __props__.__dict__["webproxy_profile"] = webproxy_profile
        __props__.__dict__["ztna_ems_tags"] = ztna_ems_tags
        __props__.__dict__["ztna_tags_match_logic"] = ztna_tags_match_logic
        return Proxypolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessProxies")
    def access_proxies(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyAccessProxy']]]:
        """
        IPv4 access proxy. The structure of `access_proxy` block is documented below.
        """
        return pulumi.get(self, "access_proxies")

    @property
    @pulumi.getter(name="accessProxy6s")
    def access_proxy6s(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyAccessProxy6']]]:
        """
        IPv6 access proxy. The structure of `access_proxy6` block is documented below.
        """
        return pulumi.get(self, "access_proxy6s")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Accept or deny traffic matching the policy parameters. Valid values: `accept`, `deny`, `redirect`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> pulumi.Output[str]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="blockNotification")
    def block_notification(self) -> pulumi.Output[str]:
        """
        Enable/disable block notification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "block_notification")

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> pulumi.Output[str]:
        """
        Decrypted traffic mirror.
        """
        return pulumi.get(self, "decrypted_traffic_mirror")

    @property
    @pulumi.getter(name="detectHttpsInHttpRequest")
    def detect_https_in_http_request(self) -> pulumi.Output[str]:
        """
        Enable/disable detection of HTTPS in HTTP request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "detect_https_in_http_request")

    @property
    @pulumi.getter(name="deviceOwnership")
    def device_ownership(self) -> pulumi.Output[str]:
        """
        When enabled, the ownership enforcement will be done at policy level. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_ownership")

    @property
    @pulumi.getter(name="diameterFilterProfile")
    def diameter_filter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing Diameter filter profile.
        """
        return pulumi.get(self, "diameter_filter_profile")

    @property
    @pulumi.getter
    def disclaimer(self) -> pulumi.Output[str]:
        """
        Web proxy disclaimer setting: by domain, policy, or user. Valid values: `disable`, `domain`, `policy`, `user`.
        """
        return pulumi.get(self, "disclaimer")

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing DLP profile.
        """
        return pulumi.get(self, "dlp_profile")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> pulumi.Output[str]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter
    def dstaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyDstaddr6']]]:
        """
        IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> pulumi.Output[str]:
        """
        When enabled, destination addresses match against any address EXCEPT the specified destination addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyDstaddr']]]:
        """
        Destination address objects. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Output[Sequence['outputs.ProxypolicyDstintf']]:
        """
        Destination interface names. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing file-filter profile.
        """
        return pulumi.get(self, "file_filter_profile")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> pulumi.Output[str]:
        """
        Global web-based manager visible label.
        """
        return pulumi.get(self, "global_label")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyGroup']]]:
        """
        Names of group objects. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="httpTunnelAuth")
    def http_tunnel_auth(self) -> pulumi.Output[str]:
        """
        Enable/disable HTTP tunnel authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_tunnel_auth")

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> pulumi.Output[str]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetService6")
    def internet_service6(self) -> pulumi.Output[str]:
        """
        Enable/disable use of Internet Services IPv6 for this policy. If enabled, destination IPv6 address and service are not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6")

    @property
    @pulumi.getter(name="internetService6CustomGroups")
    def internet_service6_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyInternetService6CustomGroup']]]:
        """
        Custom Internet Service IPv6 group name. The structure of `internet_service6_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_custom_groups")

    @property
    @pulumi.getter(name="internetService6Customs")
    def internet_service6_customs(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyInternetService6Custom']]]:
        """
        Custom Internet Service IPv6 name. The structure of `internet_service6_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_customs")

    @property
    @pulumi.getter(name="internetService6Groups")
    def internet_service6_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyInternetService6Group']]]:
        """
        Internet Service IPv6 group name. The structure of `internet_service6_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_groups")

    @property
    @pulumi.getter(name="internetService6Names")
    def internet_service6_names(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyInternetService6Name']]]:
        """
        Internet Service IPv6 name. The structure of `internet_service6_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_names")

    @property
    @pulumi.getter(name="internetService6Negate")
    def internet_service6_negate(self) -> pulumi.Output[str]:
        """
        When enabled, Internet Services match against any internet service IPv6 EXCEPT the selected Internet Service IPv6. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_negate")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyInternetServiceCustomGroup']]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyInternetServiceCustom']]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyInternetServiceGroup']]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyInternetServiceId']]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyInternetServiceName']]]:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> pulumi.Output[str]:
        """
        When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_negate")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> pulumi.Output[str]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> pulumi.Output[str]:
        """
        Name of an existing VoIP (ips) profile.
        """
        return pulumi.get(self, "ips_voip_filter")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[str]:
        """
        VDOM-specific GUI visible label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def logtraffic(self) -> pulumi.Output[str]:
        """
        Enable/disable logging traffic through the policy. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> pulumi.Output[str]:
        """
        Enable/disable policy log traffic start. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policyid(self) -> pulumi.Output[int]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def poolnames(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyPoolname']]]:
        """
        Name of IP pool object. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> pulumi.Output[str]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> pulumi.Output[str]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> pulumi.Output[str]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output[str]:
        """
        Type of explicit proxy.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Output[Optional[str]]:
        """
        Redirect URL for further explicit web proxy processing.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> pulumi.Output[str]:
        """
        Authentication replacement message override group.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> pulumi.Output[str]:
        """
        Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[str]:
        """
        Name of schedule object.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing SCTP filter profile.
        """
        return pulumi.get(self, "sctp_filter_profile")

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> pulumi.Output[str]:
        """
        When enabled, services match against any service EXCEPT the specified destination services. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyService']]]:
        """
        Name of service objects. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> pulumi.Output[int]:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicySrcaddr6']]]:
        """
        IPv6 source address objects. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> pulumi.Output[str]:
        """
        When enabled, source addresses match against any address EXCEPT the specified source addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicySrcaddr']]]:
        """
        Source address objects. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicySrcintf']]]:
        """
        Source interface names. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> pulumi.Output[str]:
        """
        Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable the active status of the policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def transparent(self) -> pulumi.Output[str]:
        """
        Enable to use the IP address of the client to connect to the server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "transparent")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyUser']]]:
        """
        Names of user objects. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> pulumi.Output[str]:
        """
        Enable the use of UTM profiles/sensors/lists. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_status")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing VideoFilter profile.
        """
        return pulumi.get(self, "videofilter_profile")

    @property
    @pulumi.getter(name="virtualPatchProfile")
    def virtual_patch_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing virtual-patch profile.
        """
        return pulumi.get(self, "virtual_patch_profile")

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing VoIP profile.
        """
        return pulumi.get(self, "voip_profile")

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @property
    @pulumi.getter
    def webcache(self) -> pulumi.Output[str]:
        """
        Enable/disable web caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webcache")

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> pulumi.Output[str]:
        """
        Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "webcache_https")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> pulumi.Output[str]:
        """
        Web proxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> pulumi.Output[str]:
        """
        Name of web proxy profile.
        """
        return pulumi.get(self, "webproxy_profile")

    @property
    @pulumi.getter(name="ztnaEmsTags")
    def ztna_ems_tags(self) -> pulumi.Output[Optional[Sequence['outputs.ProxypolicyZtnaEmsTag']]]:
        """
        ZTNA EMS Tag names. The structure of `ztna_ems_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tags")

    @property
    @pulumi.getter(name="ztnaTagsMatchLogic")
    def ztna_tags_match_logic(self) -> pulumi.Output[str]:
        """
        ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        return pulumi.get(self, "ztna_tags_match_logic")

