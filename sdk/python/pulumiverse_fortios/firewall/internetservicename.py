# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InternetservicenameArgs', 'Internetservicename']

@pulumi.input_type
class InternetservicenameArgs:
    def __init__(__self__, *,
                 city_id: Optional[pulumi.Input[int]] = None,
                 country_id: Optional[pulumi.Input[int]] = None,
                 internet_service_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Internetservicename resource.
        :param pulumi.Input[int] city_id: City ID.
        :param pulumi.Input[int] country_id: Country or Area ID.
        :param pulumi.Input[int] internet_service_id: Internet Service ID.
        :param pulumi.Input[str] name: Internet Service name.
        :param pulumi.Input[int] region_id: Region ID.
        :param pulumi.Input[str] type: Internet Service name type. Valid values: `default`, `location`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if city_id is not None:
            pulumi.set(__self__, "city_id", city_id)
        if country_id is not None:
            pulumi.set(__self__, "country_id", country_id)
        if internet_service_id is not None:
            pulumi.set(__self__, "internet_service_id", internet_service_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="cityId")
    def city_id(self) -> Optional[pulumi.Input[int]]:
        """
        City ID.
        """
        return pulumi.get(self, "city_id")

    @city_id.setter
    def city_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "city_id", value)

    @property
    @pulumi.getter(name="countryId")
    def country_id(self) -> Optional[pulumi.Input[int]]:
        """
        Country or Area ID.
        """
        return pulumi.get(self, "country_id")

    @country_id.setter
    def country_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "country_id", value)

    @property
    @pulumi.getter(name="internetServiceId")
    def internet_service_id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "internet_service_id")

    @internet_service_id.setter
    def internet_service_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_service_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[int]]:
        """
        Region ID.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name type. Valid values: `default`, `location`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _InternetservicenameState:
    def __init__(__self__, *,
                 city_id: Optional[pulumi.Input[int]] = None,
                 country_id: Optional[pulumi.Input[int]] = None,
                 internet_service_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Internetservicename resources.
        :param pulumi.Input[int] city_id: City ID.
        :param pulumi.Input[int] country_id: Country or Area ID.
        :param pulumi.Input[int] internet_service_id: Internet Service ID.
        :param pulumi.Input[str] name: Internet Service name.
        :param pulumi.Input[int] region_id: Region ID.
        :param pulumi.Input[str] type: Internet Service name type. Valid values: `default`, `location`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if city_id is not None:
            pulumi.set(__self__, "city_id", city_id)
        if country_id is not None:
            pulumi.set(__self__, "country_id", country_id)
        if internet_service_id is not None:
            pulumi.set(__self__, "internet_service_id", internet_service_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="cityId")
    def city_id(self) -> Optional[pulumi.Input[int]]:
        """
        City ID.
        """
        return pulumi.get(self, "city_id")

    @city_id.setter
    def city_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "city_id", value)

    @property
    @pulumi.getter(name="countryId")
    def country_id(self) -> Optional[pulumi.Input[int]]:
        """
        Country or Area ID.
        """
        return pulumi.get(self, "country_id")

    @country_id.setter
    def country_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "country_id", value)

    @property
    @pulumi.getter(name="internetServiceId")
    def internet_service_id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "internet_service_id")

    @internet_service_id.setter
    def internet_service_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_service_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[int]]:
        """
        Region ID.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name type. Valid values: `default`, `location`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Internetservicename(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 city_id: Optional[pulumi.Input[int]] = None,
                 country_id: Optional[pulumi.Input[int]] = None,
                 internet_service_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Define internet service names. Applies to FortiOS Version `>= 6.4.0`.

        ## Import

        Firewall InternetServiceName can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/internetservicename:Internetservicename labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/internetservicename:Internetservicename labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] city_id: City ID.
        :param pulumi.Input[int] country_id: Country or Area ID.
        :param pulumi.Input[int] internet_service_id: Internet Service ID.
        :param pulumi.Input[str] name: Internet Service name.
        :param pulumi.Input[int] region_id: Region ID.
        :param pulumi.Input[str] type: Internet Service name type. Valid values: `default`, `location`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InternetservicenameArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Define internet service names. Applies to FortiOS Version `>= 6.4.0`.

        ## Import

        Firewall InternetServiceName can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/internetservicename:Internetservicename labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/internetservicename:Internetservicename labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param InternetservicenameArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InternetservicenameArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 city_id: Optional[pulumi.Input[int]] = None,
                 country_id: Optional[pulumi.Input[int]] = None,
                 internet_service_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InternetservicenameArgs.__new__(InternetservicenameArgs)

            __props__.__dict__["city_id"] = city_id
            __props__.__dict__["country_id"] = country_id
            __props__.__dict__["internet_service_id"] = internet_service_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region_id"] = region_id
            __props__.__dict__["type"] = type
            __props__.__dict__["vdomparam"] = vdomparam
        super(Internetservicename, __self__).__init__(
            'fortios:firewall/internetservicename:Internetservicename',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            city_id: Optional[pulumi.Input[int]] = None,
            country_id: Optional[pulumi.Input[int]] = None,
            internet_service_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            region_id: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Internetservicename':
        """
        Get an existing Internetservicename resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] city_id: City ID.
        :param pulumi.Input[int] country_id: Country or Area ID.
        :param pulumi.Input[int] internet_service_id: Internet Service ID.
        :param pulumi.Input[str] name: Internet Service name.
        :param pulumi.Input[int] region_id: Region ID.
        :param pulumi.Input[str] type: Internet Service name type. Valid values: `default`, `location`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InternetservicenameState.__new__(_InternetservicenameState)

        __props__.__dict__["city_id"] = city_id
        __props__.__dict__["country_id"] = country_id
        __props__.__dict__["internet_service_id"] = internet_service_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["type"] = type
        __props__.__dict__["vdomparam"] = vdomparam
        return Internetservicename(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cityId")
    def city_id(self) -> pulumi.Output[int]:
        """
        City ID.
        """
        return pulumi.get(self, "city_id")

    @property
    @pulumi.getter(name="countryId")
    def country_id(self) -> pulumi.Output[int]:
        """
        Country or Area ID.
        """
        return pulumi.get(self, "country_id")

    @property
    @pulumi.getter(name="internetServiceId")
    def internet_service_id(self) -> pulumi.Output[int]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "internet_service_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[int]:
        """
        Region ID.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Internet Service name type. Valid values: `default`, `location`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

