# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Vip6Args', 'Vip6']

@pulumi.input_type
class Vip6Args:
    def __init__(__self__, *,
                 extip: pulumi.Input[str],
                 mappedip: pulumi.Input[str],
                 add_nat64_route: Optional[pulumi.Input[str]] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 embedded_ipv4_address: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 h2_support: Optional[pulumi.Input[str]] = None,
                 h3_support: Optional[pulumi.Input[str]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 http_ip_header: Optional[pulumi.Input[str]] = None,
                 http_ip_header_name: Optional[pulumi.Input[str]] = None,
                 http_multiplex: Optional[pulumi.Input[str]] = None,
                 http_redirect: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 ipv4_mappedip: Optional[pulumi.Input[str]] = None,
                 ipv4_mappedport: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 max_embryonic_connections: Optional[pulumi.Input[int]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6MonitorArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat66: Optional[pulumi.Input[str]] = None,
                 nat_source_vip: Optional[pulumi.Input[str]] = None,
                 ndp_reply: Optional[pulumi.Input[str]] = None,
                 outlook_web_access: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input['Vip6QuicArgs']] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6RealserverArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SrcFilterArgs']]]] = None,
                 ssl_accept_ffdhe_groups: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslCipherSuiteArgs']]]] = None,
                 ssl_client_fallback: Optional[pulumi.Input[str]] = None,
                 ssl_client_rekey_count: Optional[pulumi.Input[int]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_client_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_type: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_age: Optional[pulumi.Input[int]] = None,
                 ssl_hpkp_backup: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_primary: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_report_uri: Optional[pulumi.Input[str]] = None,
                 ssl_hsts: Optional[pulumi.Input[str]] = None,
                 ssl_hsts_age: Optional[pulumi.Input[int]] = None,
                 ssl_hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_http_location_conversion: Optional[pulumi.Input[str]] = None,
                 ssl_http_match_host: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 ssl_pfs: Optional[pulumi.Input[str]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 ssl_server_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_server_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslServerCipherSuiteArgs']]]] = None,
                 ssl_server_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_server_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weblogic_server: Optional[pulumi.Input[str]] = None,
                 websphere_server: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vip6 resource.
        :param pulumi.Input[str] extip: IP address or address range on the external interface that you want to map to an address or address range on the destination network.
        :param pulumi.Input[str] mappedip: Mapped IP address range in the format startIP-endIP.
        :param pulumi.Input[str] add_nat64_route: Enable/disable adding NAT64 route. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] arp_reply: Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] embedded_ipv4_address: Enable/disable embedded IPv4 address. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] extport: Incoming port number range that you want to map to a port number range on the destination network.
        :param pulumi.Input[int] fosid: Custom defined ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] h2_support: Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h3_support: Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] http_ip_header: For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_ip_header_name: For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
        :param pulumi.Input[str] http_multiplex: Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_redirect: Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ipv4_mappedip: Start-mapped-IPv4-address [-end mapped-IPv4-address].
        :param pulumi.Input[str] ipv4_mappedport: IPv4 port number range on the destination network to which the external port number range is mapped.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
        :param pulumi.Input[str] mappedport: Port number range on the destination network to which the external port number range is mapped.
        :param pulumi.Input[int] max_embryonic_connections: Maximum number of incomplete connections.
        :param pulumi.Input[Sequence[pulumi.Input['Vip6MonitorArgs']]] monitors: Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
        :param pulumi.Input[str] name: Virtual ip6 name.
        :param pulumi.Input[str] nat64: Enable/disable DNAT64. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nat66: Enable/disable DNAT66. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nat_source_vip: Enable to perform SNAT on traffic from mappedip to the extip for all egress interfaces. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ndp_reply: Enable/disable this FortiGate unit's ability to respond to NDP requests for this virtual IP address (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] outlook_web_access: Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
        :param pulumi.Input[str] portforward: Enable port forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] protocol: Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`.
        :param pulumi.Input['Vip6QuicArgs'] quic: QUIC setting. The structure of `quic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Vip6RealserverArgs']]] realservers: Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] server_type: Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
        :param pulumi.Input[Sequence[pulumi.Input['Vip6SrcFilterArgs']]] src_filters: Source IP6 filter (x:x:x:x:x:x:x:x/x). Separate addresses with spaces. The structure of `src_filter` block is documented below.
        :param pulumi.Input[str] ssl_accept_ffdhe_groups: Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
        :param pulumi.Input[str] ssl_certificate: The name of the SSL certificate to use for SSL acceleration.
        :param pulumi.Input[Sequence[pulumi.Input['Vip6SslCipherSuiteArgs']]] ssl_cipher_suites: SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_client_fallback: Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ssl_client_rekey_count: Maximum length of data in MB before triggering a client rekey (0 = disable).
        :param pulumi.Input[str] ssl_client_renegotiation: Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
        :param pulumi.Input[int] ssl_client_session_state_max: Maximum number of client to FortiGate SSL session states to keep.
        :param pulumi.Input[int] ssl_client_session_state_timeout: Number of minutes to keep client to FortiGate SSL session state.
        :param pulumi.Input[str] ssl_client_session_state_type: How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_hpkp: Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
        :param pulumi.Input[int] ssl_hpkp_age: Number of minutes the web browser should keep HPKP.
        :param pulumi.Input[str] ssl_hpkp_backup: Certificate to generate backup HPKP pin from.
        :param pulumi.Input[str] ssl_hpkp_include_subdomains: Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_hpkp_primary: Certificate to generate primary HPKP pin from.
        :param pulumi.Input[str] ssl_hpkp_report_uri: URL to report HPKP violations to.
        :param pulumi.Input[str] ssl_hsts: Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ssl_hsts_age: Number of seconds the client should honour the HSTS setting.
        :param pulumi.Input[str] ssl_hsts_include_subdomains: Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_http_location_conversion: Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_http_match_host: Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a client.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a client.
        :param pulumi.Input[str] ssl_mode: Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
        :param pulumi.Input[str] ssl_pfs: Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
        :param pulumi.Input[str] ssl_send_empty_frags: Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_server_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
        :param pulumi.Input[Sequence[pulumi.Input['Vip6SslServerCipherSuiteArgs']]] ssl_server_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_server_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_server_max_version: Highest SSL/TLS version acceptable from a server. Use the client setting by default.
        :param pulumi.Input[str] ssl_server_min_version: Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
        :param pulumi.Input[str] ssl_server_renegotiation: Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ssl_server_session_state_max: Maximum number of FortiGate to Server SSL session states to keep.
        :param pulumi.Input[int] ssl_server_session_state_timeout: Number of minutes to keep FortiGate to Server SSL session state.
        :param pulumi.Input[str] ssl_server_session_state_type: How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        :param pulumi.Input[str] type: Configure a static NAT or server load balance VIP.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weblogic_server: Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] websphere_server: Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
        """
        pulumi.set(__self__, "extip", extip)
        pulumi.set(__self__, "mappedip", mappedip)
        if add_nat64_route is not None:
            pulumi.set(__self__, "add_nat64_route", add_nat64_route)
        if arp_reply is not None:
            pulumi.set(__self__, "arp_reply", arp_reply)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if embedded_ipv4_address is not None:
            pulumi.set(__self__, "embedded_ipv4_address", embedded_ipv4_address)
        if extport is not None:
            pulumi.set(__self__, "extport", extport)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if h2_support is not None:
            pulumi.set(__self__, "h2_support", h2_support)
        if h3_support is not None:
            pulumi.set(__self__, "h3_support", h3_support)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if http_ip_header is not None:
            pulumi.set(__self__, "http_ip_header", http_ip_header)
        if http_ip_header_name is not None:
            pulumi.set(__self__, "http_ip_header_name", http_ip_header_name)
        if http_multiplex is not None:
            pulumi.set(__self__, "http_multiplex", http_multiplex)
        if http_redirect is not None:
            pulumi.set(__self__, "http_redirect", http_redirect)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if ipv4_mappedip is not None:
            pulumi.set(__self__, "ipv4_mappedip", ipv4_mappedip)
        if ipv4_mappedport is not None:
            pulumi.set(__self__, "ipv4_mappedport", ipv4_mappedport)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if max_embryonic_connections is not None:
            pulumi.set(__self__, "max_embryonic_connections", max_embryonic_connections)
        if monitors is not None:
            pulumi.set(__self__, "monitors", monitors)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if nat66 is not None:
            pulumi.set(__self__, "nat66", nat66)
        if nat_source_vip is not None:
            pulumi.set(__self__, "nat_source_vip", nat_source_vip)
        if ndp_reply is not None:
            pulumi.set(__self__, "ndp_reply", ndp_reply)
        if outlook_web_access is not None:
            pulumi.set(__self__, "outlook_web_access", outlook_web_access)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if portforward is not None:
            pulumi.set(__self__, "portforward", portforward)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if src_filters is not None:
            pulumi.set(__self__, "src_filters", src_filters)
        if ssl_accept_ffdhe_groups is not None:
            pulumi.set(__self__, "ssl_accept_ffdhe_groups", ssl_accept_ffdhe_groups)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_client_fallback is not None:
            pulumi.set(__self__, "ssl_client_fallback", ssl_client_fallback)
        if ssl_client_rekey_count is not None:
            pulumi.set(__self__, "ssl_client_rekey_count", ssl_client_rekey_count)
        if ssl_client_renegotiation is not None:
            pulumi.set(__self__, "ssl_client_renegotiation", ssl_client_renegotiation)
        if ssl_client_session_state_max is not None:
            pulumi.set(__self__, "ssl_client_session_state_max", ssl_client_session_state_max)
        if ssl_client_session_state_timeout is not None:
            pulumi.set(__self__, "ssl_client_session_state_timeout", ssl_client_session_state_timeout)
        if ssl_client_session_state_type is not None:
            pulumi.set(__self__, "ssl_client_session_state_type", ssl_client_session_state_type)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_hpkp is not None:
            pulumi.set(__self__, "ssl_hpkp", ssl_hpkp)
        if ssl_hpkp_age is not None:
            pulumi.set(__self__, "ssl_hpkp_age", ssl_hpkp_age)
        if ssl_hpkp_backup is not None:
            pulumi.set(__self__, "ssl_hpkp_backup", ssl_hpkp_backup)
        if ssl_hpkp_include_subdomains is not None:
            pulumi.set(__self__, "ssl_hpkp_include_subdomains", ssl_hpkp_include_subdomains)
        if ssl_hpkp_primary is not None:
            pulumi.set(__self__, "ssl_hpkp_primary", ssl_hpkp_primary)
        if ssl_hpkp_report_uri is not None:
            pulumi.set(__self__, "ssl_hpkp_report_uri", ssl_hpkp_report_uri)
        if ssl_hsts is not None:
            pulumi.set(__self__, "ssl_hsts", ssl_hsts)
        if ssl_hsts_age is not None:
            pulumi.set(__self__, "ssl_hsts_age", ssl_hsts_age)
        if ssl_hsts_include_subdomains is not None:
            pulumi.set(__self__, "ssl_hsts_include_subdomains", ssl_hsts_include_subdomains)
        if ssl_http_location_conversion is not None:
            pulumi.set(__self__, "ssl_http_location_conversion", ssl_http_location_conversion)
        if ssl_http_match_host is not None:
            pulumi.set(__self__, "ssl_http_match_host", ssl_http_match_host)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if ssl_pfs is not None:
            pulumi.set(__self__, "ssl_pfs", ssl_pfs)
        if ssl_send_empty_frags is not None:
            pulumi.set(__self__, "ssl_send_empty_frags", ssl_send_empty_frags)
        if ssl_server_algorithm is not None:
            pulumi.set(__self__, "ssl_server_algorithm", ssl_server_algorithm)
        if ssl_server_cipher_suites is not None:
            pulumi.set(__self__, "ssl_server_cipher_suites", ssl_server_cipher_suites)
        if ssl_server_max_version is not None:
            pulumi.set(__self__, "ssl_server_max_version", ssl_server_max_version)
        if ssl_server_min_version is not None:
            pulumi.set(__self__, "ssl_server_min_version", ssl_server_min_version)
        if ssl_server_renegotiation is not None:
            pulumi.set(__self__, "ssl_server_renegotiation", ssl_server_renegotiation)
        if ssl_server_session_state_max is not None:
            pulumi.set(__self__, "ssl_server_session_state_max", ssl_server_session_state_max)
        if ssl_server_session_state_timeout is not None:
            pulumi.set(__self__, "ssl_server_session_state_timeout", ssl_server_session_state_timeout)
        if ssl_server_session_state_type is not None:
            pulumi.set(__self__, "ssl_server_session_state_type", ssl_server_session_state_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weblogic_server is not None:
            pulumi.set(__self__, "weblogic_server", weblogic_server)
        if websphere_server is not None:
            pulumi.set(__self__, "websphere_server", websphere_server)

    @property
    @pulumi.getter
    def extip(self) -> pulumi.Input[str]:
        """
        IP address or address range on the external interface that you want to map to an address or address range on the destination network.
        """
        return pulumi.get(self, "extip")

    @extip.setter
    def extip(self, value: pulumi.Input[str]):
        pulumi.set(self, "extip", value)

    @property
    @pulumi.getter
    def mappedip(self) -> pulumi.Input[str]:
        """
        Mapped IP address range in the format startIP-endIP.
        """
        return pulumi.get(self, "mappedip")

    @mappedip.setter
    def mappedip(self, value: pulumi.Input[str]):
        pulumi.set(self, "mappedip", value)

    @property
    @pulumi.getter(name="addNat64Route")
    def add_nat64_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding NAT64 route. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "add_nat64_route")

    @add_nat64_route.setter
    def add_nat64_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_nat64_route", value)

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "arp_reply")

    @arp_reply.setter
    def arp_reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_reply", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="embeddedIpv4Address")
    def embedded_ipv4_address(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable embedded IPv4 address. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "embedded_ipv4_address")

    @embedded_ipv4_address.setter
    def embedded_ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "embedded_ipv4_address", value)

    @property
    @pulumi.getter
    def extport(self) -> Optional[pulumi.Input[str]]:
        """
        Incoming port number range that you want to map to a port number range on the destination network.
        """
        return pulumi.get(self, "extport")

    @extport.setter
    def extport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extport", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Custom defined ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="h2Support")
    def h2_support(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h2_support")

    @h2_support.setter
    def h2_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h2_support", value)

    @property
    @pulumi.getter(name="h3Support")
    def h3_support(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h3_support")

    @h3_support.setter
    def h3_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h3_support", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
        """
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain that HTTP cookie persistence should apply to.
        """
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        """
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        Limit HTTP cookie persistence to the specified path.
        """
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        """
        Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        """
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpIpHeader")
    def http_ip_header(self) -> Optional[pulumi.Input[str]]:
        """
        For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_ip_header")

    @http_ip_header.setter
    def http_ip_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_ip_header", value)

    @property
    @pulumi.getter(name="httpIpHeaderName")
    def http_ip_header_name(self) -> Optional[pulumi.Input[str]]:
        """
        For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
        """
        return pulumi.get(self, "http_ip_header_name")

    @http_ip_header_name.setter
    def http_ip_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_ip_header_name", value)

    @property
    @pulumi.getter(name="httpMultiplex")
    def http_multiplex(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_multiplex")

    @http_multiplex.setter
    def http_multiplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_multiplex", value)

    @property
    @pulumi.getter(name="httpRedirect")
    def http_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_redirect")

    @http_redirect.setter
    def http_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_redirect", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter(name="ipv4Mappedip")
    def ipv4_mappedip(self) -> Optional[pulumi.Input[str]]:
        """
        Start-mapped-IPv4-address [-end mapped-IPv4-address].
        """
        return pulumi.get(self, "ipv4_mappedip")

    @ipv4_mappedip.setter
    def ipv4_mappedip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_mappedip", value)

    @property
    @pulumi.getter(name="ipv4Mappedport")
    def ipv4_mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 port number range on the destination network to which the external port number range is mapped.
        """
        return pulumi.get(self, "ipv4_mappedport")

    @ipv4_mappedport.setter
    def ipv4_mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_mappedport", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Port number range on the destination network to which the external port number range is mapped.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter(name="maxEmbryonicConnections")
    def max_embryonic_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of incomplete connections.
        """
        return pulumi.get(self, "max_embryonic_connections")

    @max_embryonic_connections.setter
    def max_embryonic_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_embryonic_connections", value)

    @property
    @pulumi.getter
    def monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip6MonitorArgs']]]]:
        """
        Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6MonitorArgs']]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual ip6 name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNAT64. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64", value)

    @property
    @pulumi.getter
    def nat66(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNAT66. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat66")

    @nat66.setter
    def nat66(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat66", value)

    @property
    @pulumi.getter(name="natSourceVip")
    def nat_source_vip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to perform SNAT on traffic from mappedip to the extip for all egress interfaces. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat_source_vip")

    @nat_source_vip.setter
    def nat_source_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_source_vip", value)

    @property
    @pulumi.getter(name="ndpReply")
    def ndp_reply(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this FortiGate unit's ability to respond to NDP requests for this virtual IP address (default = enable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ndp_reply")

    @ndp_reply.setter
    def ndp_reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ndp_reply", value)

    @property
    @pulumi.getter(name="outlookWebAccess")
    def outlook_web_access(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "outlook_web_access")

    @outlook_web_access.setter
    def outlook_web_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outlook_web_access", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def portforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable port forwarding. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "portforward")

    @portforward.setter
    def portforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portforward", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input['Vip6QuicArgs']]:
        """
        QUIC setting. The structure of `quic` block is documented below.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input['Vip6QuicArgs']]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip6RealserverArgs']]]]:
        """
        Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6RealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="srcFilters")
    def src_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SrcFilterArgs']]]]:
        """
        Source IP6 filter (x:x:x:x:x:x:x:x/x). Separate addresses with spaces. The structure of `src_filter` block is documented below.
        """
        return pulumi.get(self, "src_filters")

    @src_filters.setter
    def src_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SrcFilterArgs']]]]):
        pulumi.set(self, "src_filters", value)

    @property
    @pulumi.getter(name="sslAcceptFfdheGroups")
    def ssl_accept_ffdhe_groups(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_accept_ffdhe_groups")

    @ssl_accept_ffdhe_groups.setter
    def ssl_accept_ffdhe_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_accept_ffdhe_groups", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SSL certificate to use for SSL acceleration.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslClientFallback")
    def ssl_client_fallback(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_client_fallback")

    @ssl_client_fallback.setter
    def ssl_client_fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_fallback", value)

    @property
    @pulumi.getter(name="sslClientRekeyCount")
    def ssl_client_rekey_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of data in MB before triggering a client rekey (0 = disable).
        """
        return pulumi.get(self, "ssl_client_rekey_count")

    @ssl_client_rekey_count.setter
    def ssl_client_rekey_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_rekey_count", value)

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
        """
        return pulumi.get(self, "ssl_client_renegotiation")

    @ssl_client_renegotiation.setter
    def ssl_client_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_renegotiation", value)

    @property
    @pulumi.getter(name="sslClientSessionStateMax")
    def ssl_client_session_state_max(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of client to FortiGate SSL session states to keep.
        """
        return pulumi.get(self, "ssl_client_session_state_max")

    @ssl_client_session_state_max.setter
    def ssl_client_session_state_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_session_state_max", value)

    @property
    @pulumi.getter(name="sslClientSessionStateTimeout")
    def ssl_client_session_state_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Number of minutes to keep client to FortiGate SSL session state.
        """
        return pulumi.get(self, "ssl_client_session_state_timeout")

    @ssl_client_session_state_timeout.setter
    def ssl_client_session_state_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_session_state_timeout", value)

    @property
    @pulumi.getter(name="sslClientSessionStateType")
    def ssl_client_session_state_type(self) -> Optional[pulumi.Input[str]]:
        """
        How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        """
        return pulumi.get(self, "ssl_client_session_state_type")

    @ssl_client_session_state_type.setter
    def ssl_client_session_state_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_session_state_type", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslHpkp")
    def ssl_hpkp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
        """
        return pulumi.get(self, "ssl_hpkp")

    @ssl_hpkp.setter
    def ssl_hpkp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp", value)

    @property
    @pulumi.getter(name="sslHpkpAge")
    def ssl_hpkp_age(self) -> Optional[pulumi.Input[int]]:
        """
        Number of minutes the web browser should keep HPKP.
        """
        return pulumi.get(self, "ssl_hpkp_age")

    @ssl_hpkp_age.setter
    def ssl_hpkp_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_hpkp_age", value)

    @property
    @pulumi.getter(name="sslHpkpBackup")
    def ssl_hpkp_backup(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate to generate backup HPKP pin from.
        """
        return pulumi.get(self, "ssl_hpkp_backup")

    @ssl_hpkp_backup.setter
    def ssl_hpkp_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_backup", value)

    @property
    @pulumi.getter(name="sslHpkpIncludeSubdomains")
    def ssl_hpkp_include_subdomains(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_hpkp_include_subdomains")

    @ssl_hpkp_include_subdomains.setter
    def ssl_hpkp_include_subdomains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_include_subdomains", value)

    @property
    @pulumi.getter(name="sslHpkpPrimary")
    def ssl_hpkp_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate to generate primary HPKP pin from.
        """
        return pulumi.get(self, "ssl_hpkp_primary")

    @ssl_hpkp_primary.setter
    def ssl_hpkp_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_primary", value)

    @property
    @pulumi.getter(name="sslHpkpReportUri")
    def ssl_hpkp_report_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URL to report HPKP violations to.
        """
        return pulumi.get(self, "ssl_hpkp_report_uri")

    @ssl_hpkp_report_uri.setter
    def ssl_hpkp_report_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_report_uri", value)

    @property
    @pulumi.getter(name="sslHsts")
    def ssl_hsts(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_hsts")

    @ssl_hsts.setter
    def ssl_hsts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hsts", value)

    @property
    @pulumi.getter(name="sslHstsAge")
    def ssl_hsts_age(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds the client should honour the HSTS setting.
        """
        return pulumi.get(self, "ssl_hsts_age")

    @ssl_hsts_age.setter
    def ssl_hsts_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_hsts_age", value)

    @property
    @pulumi.getter(name="sslHstsIncludeSubdomains")
    def ssl_hsts_include_subdomains(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_hsts_include_subdomains")

    @ssl_hsts_include_subdomains.setter
    def ssl_hsts_include_subdomains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hsts_include_subdomains", value)

    @property
    @pulumi.getter(name="sslHttpLocationConversion")
    def ssl_http_location_conversion(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_http_location_conversion")

    @ssl_http_location_conversion.setter
    def ssl_http_location_conversion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_http_location_conversion", value)

    @property
    @pulumi.getter(name="sslHttpMatchHost")
    def ssl_http_match_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_http_match_host")

    @ssl_http_match_host.setter
    def ssl_http_match_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_http_match_host", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a client.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a client.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
        """
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="sslPfs")
    def ssl_pfs(self) -> Optional[pulumi.Input[str]]:
        """
        Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
        """
        return pulumi.get(self, "ssl_pfs")

    @ssl_pfs.setter
    def ssl_pfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_pfs", value)

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_send_empty_frags")

    @ssl_send_empty_frags.setter
    def ssl_send_empty_frags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_send_empty_frags", value)

    @property
    @pulumi.getter(name="sslServerAlgorithm")
    def ssl_server_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
        """
        return pulumi.get(self, "ssl_server_algorithm")

    @ssl_server_algorithm.setter
    def ssl_server_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_algorithm", value)

    @property
    @pulumi.getter(name="sslServerCipherSuites")
    def ssl_server_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslServerCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_server_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_server_cipher_suites")

    @ssl_server_cipher_suites.setter
    def ssl_server_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslServerCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_server_cipher_suites", value)

    @property
    @pulumi.getter(name="sslServerMaxVersion")
    def ssl_server_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a server. Use the client setting by default.
        """
        return pulumi.get(self, "ssl_server_max_version")

    @ssl_server_max_version.setter
    def ssl_server_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_max_version", value)

    @property
    @pulumi.getter(name="sslServerMinVersion")
    def ssl_server_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
        """
        return pulumi.get(self, "ssl_server_min_version")

    @ssl_server_min_version.setter
    def ssl_server_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_min_version", value)

    @property
    @pulumi.getter(name="sslServerRenegotiation")
    def ssl_server_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_server_renegotiation")

    @ssl_server_renegotiation.setter
    def ssl_server_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_renegotiation", value)

    @property
    @pulumi.getter(name="sslServerSessionStateMax")
    def ssl_server_session_state_max(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of FortiGate to Server SSL session states to keep.
        """
        return pulumi.get(self, "ssl_server_session_state_max")

    @ssl_server_session_state_max.setter
    def ssl_server_session_state_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_server_session_state_max", value)

    @property
    @pulumi.getter(name="sslServerSessionStateTimeout")
    def ssl_server_session_state_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Number of minutes to keep FortiGate to Server SSL session state.
        """
        return pulumi.get(self, "ssl_server_session_state_timeout")

    @ssl_server_session_state_timeout.setter
    def ssl_server_session_state_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_server_session_state_timeout", value)

    @property
    @pulumi.getter(name="sslServerSessionStateType")
    def ssl_server_session_state_type(self) -> Optional[pulumi.Input[str]]:
        """
        How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        """
        return pulumi.get(self, "ssl_server_session_state_type")

    @ssl_server_session_state_type.setter
    def ssl_server_session_state_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_session_state_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Configure a static NAT or server load balance VIP.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="weblogicServer")
    def weblogic_server(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "weblogic_server")

    @weblogic_server.setter
    def weblogic_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weblogic_server", value)

    @property
    @pulumi.getter(name="websphereServer")
    def websphere_server(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "websphere_server")

    @websphere_server.setter
    def websphere_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "websphere_server", value)


@pulumi.input_type
class _Vip6State:
    def __init__(__self__, *,
                 add_nat64_route: Optional[pulumi.Input[str]] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 embedded_ipv4_address: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 h2_support: Optional[pulumi.Input[str]] = None,
                 h3_support: Optional[pulumi.Input[str]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 http_ip_header: Optional[pulumi.Input[str]] = None,
                 http_ip_header_name: Optional[pulumi.Input[str]] = None,
                 http_multiplex: Optional[pulumi.Input[str]] = None,
                 http_redirect: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 ipv4_mappedip: Optional[pulumi.Input[str]] = None,
                 ipv4_mappedport: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mappedip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 max_embryonic_connections: Optional[pulumi.Input[int]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6MonitorArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat66: Optional[pulumi.Input[str]] = None,
                 nat_source_vip: Optional[pulumi.Input[str]] = None,
                 ndp_reply: Optional[pulumi.Input[str]] = None,
                 outlook_web_access: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input['Vip6QuicArgs']] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6RealserverArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SrcFilterArgs']]]] = None,
                 ssl_accept_ffdhe_groups: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslCipherSuiteArgs']]]] = None,
                 ssl_client_fallback: Optional[pulumi.Input[str]] = None,
                 ssl_client_rekey_count: Optional[pulumi.Input[int]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_client_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_type: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_age: Optional[pulumi.Input[int]] = None,
                 ssl_hpkp_backup: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_primary: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_report_uri: Optional[pulumi.Input[str]] = None,
                 ssl_hsts: Optional[pulumi.Input[str]] = None,
                 ssl_hsts_age: Optional[pulumi.Input[int]] = None,
                 ssl_hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_http_location_conversion: Optional[pulumi.Input[str]] = None,
                 ssl_http_match_host: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 ssl_pfs: Optional[pulumi.Input[str]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 ssl_server_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_server_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslServerCipherSuiteArgs']]]] = None,
                 ssl_server_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_server_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weblogic_server: Optional[pulumi.Input[str]] = None,
                 websphere_server: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Vip6 resources.
        :param pulumi.Input[str] add_nat64_route: Enable/disable adding NAT64 route. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] arp_reply: Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] embedded_ipv4_address: Enable/disable embedded IPv4 address. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] extip: IP address or address range on the external interface that you want to map to an address or address range on the destination network.
        :param pulumi.Input[str] extport: Incoming port number range that you want to map to a port number range on the destination network.
        :param pulumi.Input[int] fosid: Custom defined ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] h2_support: Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h3_support: Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] http_ip_header: For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_ip_header_name: For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
        :param pulumi.Input[str] http_multiplex: Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_redirect: Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ipv4_mappedip: Start-mapped-IPv4-address [-end mapped-IPv4-address].
        :param pulumi.Input[str] ipv4_mappedport: IPv4 port number range on the destination network to which the external port number range is mapped.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
        :param pulumi.Input[str] mappedip: Mapped IP address range in the format startIP-endIP.
        :param pulumi.Input[str] mappedport: Port number range on the destination network to which the external port number range is mapped.
        :param pulumi.Input[int] max_embryonic_connections: Maximum number of incomplete connections.
        :param pulumi.Input[Sequence[pulumi.Input['Vip6MonitorArgs']]] monitors: Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
        :param pulumi.Input[str] name: Virtual ip6 name.
        :param pulumi.Input[str] nat64: Enable/disable DNAT64. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nat66: Enable/disable DNAT66. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nat_source_vip: Enable to perform SNAT on traffic from mappedip to the extip for all egress interfaces. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ndp_reply: Enable/disable this FortiGate unit's ability to respond to NDP requests for this virtual IP address (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] outlook_web_access: Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
        :param pulumi.Input[str] portforward: Enable port forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] protocol: Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`.
        :param pulumi.Input['Vip6QuicArgs'] quic: QUIC setting. The structure of `quic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Vip6RealserverArgs']]] realservers: Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] server_type: Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
        :param pulumi.Input[Sequence[pulumi.Input['Vip6SrcFilterArgs']]] src_filters: Source IP6 filter (x:x:x:x:x:x:x:x/x). Separate addresses with spaces. The structure of `src_filter` block is documented below.
        :param pulumi.Input[str] ssl_accept_ffdhe_groups: Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
        :param pulumi.Input[str] ssl_certificate: The name of the SSL certificate to use for SSL acceleration.
        :param pulumi.Input[Sequence[pulumi.Input['Vip6SslCipherSuiteArgs']]] ssl_cipher_suites: SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_client_fallback: Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ssl_client_rekey_count: Maximum length of data in MB before triggering a client rekey (0 = disable).
        :param pulumi.Input[str] ssl_client_renegotiation: Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
        :param pulumi.Input[int] ssl_client_session_state_max: Maximum number of client to FortiGate SSL session states to keep.
        :param pulumi.Input[int] ssl_client_session_state_timeout: Number of minutes to keep client to FortiGate SSL session state.
        :param pulumi.Input[str] ssl_client_session_state_type: How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_hpkp: Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
        :param pulumi.Input[int] ssl_hpkp_age: Number of minutes the web browser should keep HPKP.
        :param pulumi.Input[str] ssl_hpkp_backup: Certificate to generate backup HPKP pin from.
        :param pulumi.Input[str] ssl_hpkp_include_subdomains: Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_hpkp_primary: Certificate to generate primary HPKP pin from.
        :param pulumi.Input[str] ssl_hpkp_report_uri: URL to report HPKP violations to.
        :param pulumi.Input[str] ssl_hsts: Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ssl_hsts_age: Number of seconds the client should honour the HSTS setting.
        :param pulumi.Input[str] ssl_hsts_include_subdomains: Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_http_location_conversion: Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_http_match_host: Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a client.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a client.
        :param pulumi.Input[str] ssl_mode: Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
        :param pulumi.Input[str] ssl_pfs: Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
        :param pulumi.Input[str] ssl_send_empty_frags: Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_server_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
        :param pulumi.Input[Sequence[pulumi.Input['Vip6SslServerCipherSuiteArgs']]] ssl_server_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_server_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_server_max_version: Highest SSL/TLS version acceptable from a server. Use the client setting by default.
        :param pulumi.Input[str] ssl_server_min_version: Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
        :param pulumi.Input[str] ssl_server_renegotiation: Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ssl_server_session_state_max: Maximum number of FortiGate to Server SSL session states to keep.
        :param pulumi.Input[int] ssl_server_session_state_timeout: Number of minutes to keep FortiGate to Server SSL session state.
        :param pulumi.Input[str] ssl_server_session_state_type: How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        :param pulumi.Input[str] type: Configure a static NAT or server load balance VIP.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weblogic_server: Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] websphere_server: Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
        """
        if add_nat64_route is not None:
            pulumi.set(__self__, "add_nat64_route", add_nat64_route)
        if arp_reply is not None:
            pulumi.set(__self__, "arp_reply", arp_reply)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if embedded_ipv4_address is not None:
            pulumi.set(__self__, "embedded_ipv4_address", embedded_ipv4_address)
        if extip is not None:
            pulumi.set(__self__, "extip", extip)
        if extport is not None:
            pulumi.set(__self__, "extport", extport)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if h2_support is not None:
            pulumi.set(__self__, "h2_support", h2_support)
        if h3_support is not None:
            pulumi.set(__self__, "h3_support", h3_support)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if http_ip_header is not None:
            pulumi.set(__self__, "http_ip_header", http_ip_header)
        if http_ip_header_name is not None:
            pulumi.set(__self__, "http_ip_header_name", http_ip_header_name)
        if http_multiplex is not None:
            pulumi.set(__self__, "http_multiplex", http_multiplex)
        if http_redirect is not None:
            pulumi.set(__self__, "http_redirect", http_redirect)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if ipv4_mappedip is not None:
            pulumi.set(__self__, "ipv4_mappedip", ipv4_mappedip)
        if ipv4_mappedport is not None:
            pulumi.set(__self__, "ipv4_mappedport", ipv4_mappedport)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if mappedip is not None:
            pulumi.set(__self__, "mappedip", mappedip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if max_embryonic_connections is not None:
            pulumi.set(__self__, "max_embryonic_connections", max_embryonic_connections)
        if monitors is not None:
            pulumi.set(__self__, "monitors", monitors)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if nat66 is not None:
            pulumi.set(__self__, "nat66", nat66)
        if nat_source_vip is not None:
            pulumi.set(__self__, "nat_source_vip", nat_source_vip)
        if ndp_reply is not None:
            pulumi.set(__self__, "ndp_reply", ndp_reply)
        if outlook_web_access is not None:
            pulumi.set(__self__, "outlook_web_access", outlook_web_access)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if portforward is not None:
            pulumi.set(__self__, "portforward", portforward)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if src_filters is not None:
            pulumi.set(__self__, "src_filters", src_filters)
        if ssl_accept_ffdhe_groups is not None:
            pulumi.set(__self__, "ssl_accept_ffdhe_groups", ssl_accept_ffdhe_groups)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_client_fallback is not None:
            pulumi.set(__self__, "ssl_client_fallback", ssl_client_fallback)
        if ssl_client_rekey_count is not None:
            pulumi.set(__self__, "ssl_client_rekey_count", ssl_client_rekey_count)
        if ssl_client_renegotiation is not None:
            pulumi.set(__self__, "ssl_client_renegotiation", ssl_client_renegotiation)
        if ssl_client_session_state_max is not None:
            pulumi.set(__self__, "ssl_client_session_state_max", ssl_client_session_state_max)
        if ssl_client_session_state_timeout is not None:
            pulumi.set(__self__, "ssl_client_session_state_timeout", ssl_client_session_state_timeout)
        if ssl_client_session_state_type is not None:
            pulumi.set(__self__, "ssl_client_session_state_type", ssl_client_session_state_type)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_hpkp is not None:
            pulumi.set(__self__, "ssl_hpkp", ssl_hpkp)
        if ssl_hpkp_age is not None:
            pulumi.set(__self__, "ssl_hpkp_age", ssl_hpkp_age)
        if ssl_hpkp_backup is not None:
            pulumi.set(__self__, "ssl_hpkp_backup", ssl_hpkp_backup)
        if ssl_hpkp_include_subdomains is not None:
            pulumi.set(__self__, "ssl_hpkp_include_subdomains", ssl_hpkp_include_subdomains)
        if ssl_hpkp_primary is not None:
            pulumi.set(__self__, "ssl_hpkp_primary", ssl_hpkp_primary)
        if ssl_hpkp_report_uri is not None:
            pulumi.set(__self__, "ssl_hpkp_report_uri", ssl_hpkp_report_uri)
        if ssl_hsts is not None:
            pulumi.set(__self__, "ssl_hsts", ssl_hsts)
        if ssl_hsts_age is not None:
            pulumi.set(__self__, "ssl_hsts_age", ssl_hsts_age)
        if ssl_hsts_include_subdomains is not None:
            pulumi.set(__self__, "ssl_hsts_include_subdomains", ssl_hsts_include_subdomains)
        if ssl_http_location_conversion is not None:
            pulumi.set(__self__, "ssl_http_location_conversion", ssl_http_location_conversion)
        if ssl_http_match_host is not None:
            pulumi.set(__self__, "ssl_http_match_host", ssl_http_match_host)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if ssl_pfs is not None:
            pulumi.set(__self__, "ssl_pfs", ssl_pfs)
        if ssl_send_empty_frags is not None:
            pulumi.set(__self__, "ssl_send_empty_frags", ssl_send_empty_frags)
        if ssl_server_algorithm is not None:
            pulumi.set(__self__, "ssl_server_algorithm", ssl_server_algorithm)
        if ssl_server_cipher_suites is not None:
            pulumi.set(__self__, "ssl_server_cipher_suites", ssl_server_cipher_suites)
        if ssl_server_max_version is not None:
            pulumi.set(__self__, "ssl_server_max_version", ssl_server_max_version)
        if ssl_server_min_version is not None:
            pulumi.set(__self__, "ssl_server_min_version", ssl_server_min_version)
        if ssl_server_renegotiation is not None:
            pulumi.set(__self__, "ssl_server_renegotiation", ssl_server_renegotiation)
        if ssl_server_session_state_max is not None:
            pulumi.set(__self__, "ssl_server_session_state_max", ssl_server_session_state_max)
        if ssl_server_session_state_timeout is not None:
            pulumi.set(__self__, "ssl_server_session_state_timeout", ssl_server_session_state_timeout)
        if ssl_server_session_state_type is not None:
            pulumi.set(__self__, "ssl_server_session_state_type", ssl_server_session_state_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weblogic_server is not None:
            pulumi.set(__self__, "weblogic_server", weblogic_server)
        if websphere_server is not None:
            pulumi.set(__self__, "websphere_server", websphere_server)

    @property
    @pulumi.getter(name="addNat64Route")
    def add_nat64_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding NAT64 route. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "add_nat64_route")

    @add_nat64_route.setter
    def add_nat64_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_nat64_route", value)

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "arp_reply")

    @arp_reply.setter
    def arp_reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_reply", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="embeddedIpv4Address")
    def embedded_ipv4_address(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable embedded IPv4 address. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "embedded_ipv4_address")

    @embedded_ipv4_address.setter
    def embedded_ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "embedded_ipv4_address", value)

    @property
    @pulumi.getter
    def extip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or address range on the external interface that you want to map to an address or address range on the destination network.
        """
        return pulumi.get(self, "extip")

    @extip.setter
    def extip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extip", value)

    @property
    @pulumi.getter
    def extport(self) -> Optional[pulumi.Input[str]]:
        """
        Incoming port number range that you want to map to a port number range on the destination network.
        """
        return pulumi.get(self, "extport")

    @extport.setter
    def extport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extport", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Custom defined ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="h2Support")
    def h2_support(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h2_support")

    @h2_support.setter
    def h2_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h2_support", value)

    @property
    @pulumi.getter(name="h3Support")
    def h3_support(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h3_support")

    @h3_support.setter
    def h3_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h3_support", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
        """
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain that HTTP cookie persistence should apply to.
        """
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        """
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        Limit HTTP cookie persistence to the specified path.
        """
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        """
        Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        """
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpIpHeader")
    def http_ip_header(self) -> Optional[pulumi.Input[str]]:
        """
        For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_ip_header")

    @http_ip_header.setter
    def http_ip_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_ip_header", value)

    @property
    @pulumi.getter(name="httpIpHeaderName")
    def http_ip_header_name(self) -> Optional[pulumi.Input[str]]:
        """
        For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
        """
        return pulumi.get(self, "http_ip_header_name")

    @http_ip_header_name.setter
    def http_ip_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_ip_header_name", value)

    @property
    @pulumi.getter(name="httpMultiplex")
    def http_multiplex(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_multiplex")

    @http_multiplex.setter
    def http_multiplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_multiplex", value)

    @property
    @pulumi.getter(name="httpRedirect")
    def http_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_redirect")

    @http_redirect.setter
    def http_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_redirect", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter(name="ipv4Mappedip")
    def ipv4_mappedip(self) -> Optional[pulumi.Input[str]]:
        """
        Start-mapped-IPv4-address [-end mapped-IPv4-address].
        """
        return pulumi.get(self, "ipv4_mappedip")

    @ipv4_mappedip.setter
    def ipv4_mappedip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_mappedip", value)

    @property
    @pulumi.getter(name="ipv4Mappedport")
    def ipv4_mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 port number range on the destination network to which the external port number range is mapped.
        """
        return pulumi.get(self, "ipv4_mappedport")

    @ipv4_mappedport.setter
    def ipv4_mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_mappedport", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def mappedip(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped IP address range in the format startIP-endIP.
        """
        return pulumi.get(self, "mappedip")

    @mappedip.setter
    def mappedip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Port number range on the destination network to which the external port number range is mapped.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter(name="maxEmbryonicConnections")
    def max_embryonic_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of incomplete connections.
        """
        return pulumi.get(self, "max_embryonic_connections")

    @max_embryonic_connections.setter
    def max_embryonic_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_embryonic_connections", value)

    @property
    @pulumi.getter
    def monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip6MonitorArgs']]]]:
        """
        Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6MonitorArgs']]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual ip6 name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNAT64. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64", value)

    @property
    @pulumi.getter
    def nat66(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNAT66. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat66")

    @nat66.setter
    def nat66(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat66", value)

    @property
    @pulumi.getter(name="natSourceVip")
    def nat_source_vip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to perform SNAT on traffic from mappedip to the extip for all egress interfaces. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat_source_vip")

    @nat_source_vip.setter
    def nat_source_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_source_vip", value)

    @property
    @pulumi.getter(name="ndpReply")
    def ndp_reply(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this FortiGate unit's ability to respond to NDP requests for this virtual IP address (default = enable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ndp_reply")

    @ndp_reply.setter
    def ndp_reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ndp_reply", value)

    @property
    @pulumi.getter(name="outlookWebAccess")
    def outlook_web_access(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "outlook_web_access")

    @outlook_web_access.setter
    def outlook_web_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outlook_web_access", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def portforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable port forwarding. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "portforward")

    @portforward.setter
    def portforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portforward", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input['Vip6QuicArgs']]:
        """
        QUIC setting. The structure of `quic` block is documented below.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input['Vip6QuicArgs']]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip6RealserverArgs']]]]:
        """
        Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6RealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="srcFilters")
    def src_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SrcFilterArgs']]]]:
        """
        Source IP6 filter (x:x:x:x:x:x:x:x/x). Separate addresses with spaces. The structure of `src_filter` block is documented below.
        """
        return pulumi.get(self, "src_filters")

    @src_filters.setter
    def src_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SrcFilterArgs']]]]):
        pulumi.set(self, "src_filters", value)

    @property
    @pulumi.getter(name="sslAcceptFfdheGroups")
    def ssl_accept_ffdhe_groups(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_accept_ffdhe_groups")

    @ssl_accept_ffdhe_groups.setter
    def ssl_accept_ffdhe_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_accept_ffdhe_groups", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SSL certificate to use for SSL acceleration.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslClientFallback")
    def ssl_client_fallback(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_client_fallback")

    @ssl_client_fallback.setter
    def ssl_client_fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_fallback", value)

    @property
    @pulumi.getter(name="sslClientRekeyCount")
    def ssl_client_rekey_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of data in MB before triggering a client rekey (0 = disable).
        """
        return pulumi.get(self, "ssl_client_rekey_count")

    @ssl_client_rekey_count.setter
    def ssl_client_rekey_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_rekey_count", value)

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
        """
        return pulumi.get(self, "ssl_client_renegotiation")

    @ssl_client_renegotiation.setter
    def ssl_client_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_renegotiation", value)

    @property
    @pulumi.getter(name="sslClientSessionStateMax")
    def ssl_client_session_state_max(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of client to FortiGate SSL session states to keep.
        """
        return pulumi.get(self, "ssl_client_session_state_max")

    @ssl_client_session_state_max.setter
    def ssl_client_session_state_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_session_state_max", value)

    @property
    @pulumi.getter(name="sslClientSessionStateTimeout")
    def ssl_client_session_state_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Number of minutes to keep client to FortiGate SSL session state.
        """
        return pulumi.get(self, "ssl_client_session_state_timeout")

    @ssl_client_session_state_timeout.setter
    def ssl_client_session_state_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_session_state_timeout", value)

    @property
    @pulumi.getter(name="sslClientSessionStateType")
    def ssl_client_session_state_type(self) -> Optional[pulumi.Input[str]]:
        """
        How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        """
        return pulumi.get(self, "ssl_client_session_state_type")

    @ssl_client_session_state_type.setter
    def ssl_client_session_state_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_session_state_type", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslHpkp")
    def ssl_hpkp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
        """
        return pulumi.get(self, "ssl_hpkp")

    @ssl_hpkp.setter
    def ssl_hpkp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp", value)

    @property
    @pulumi.getter(name="sslHpkpAge")
    def ssl_hpkp_age(self) -> Optional[pulumi.Input[int]]:
        """
        Number of minutes the web browser should keep HPKP.
        """
        return pulumi.get(self, "ssl_hpkp_age")

    @ssl_hpkp_age.setter
    def ssl_hpkp_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_hpkp_age", value)

    @property
    @pulumi.getter(name="sslHpkpBackup")
    def ssl_hpkp_backup(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate to generate backup HPKP pin from.
        """
        return pulumi.get(self, "ssl_hpkp_backup")

    @ssl_hpkp_backup.setter
    def ssl_hpkp_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_backup", value)

    @property
    @pulumi.getter(name="sslHpkpIncludeSubdomains")
    def ssl_hpkp_include_subdomains(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_hpkp_include_subdomains")

    @ssl_hpkp_include_subdomains.setter
    def ssl_hpkp_include_subdomains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_include_subdomains", value)

    @property
    @pulumi.getter(name="sslHpkpPrimary")
    def ssl_hpkp_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate to generate primary HPKP pin from.
        """
        return pulumi.get(self, "ssl_hpkp_primary")

    @ssl_hpkp_primary.setter
    def ssl_hpkp_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_primary", value)

    @property
    @pulumi.getter(name="sslHpkpReportUri")
    def ssl_hpkp_report_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URL to report HPKP violations to.
        """
        return pulumi.get(self, "ssl_hpkp_report_uri")

    @ssl_hpkp_report_uri.setter
    def ssl_hpkp_report_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_report_uri", value)

    @property
    @pulumi.getter(name="sslHsts")
    def ssl_hsts(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_hsts")

    @ssl_hsts.setter
    def ssl_hsts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hsts", value)

    @property
    @pulumi.getter(name="sslHstsAge")
    def ssl_hsts_age(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds the client should honour the HSTS setting.
        """
        return pulumi.get(self, "ssl_hsts_age")

    @ssl_hsts_age.setter
    def ssl_hsts_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_hsts_age", value)

    @property
    @pulumi.getter(name="sslHstsIncludeSubdomains")
    def ssl_hsts_include_subdomains(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_hsts_include_subdomains")

    @ssl_hsts_include_subdomains.setter
    def ssl_hsts_include_subdomains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hsts_include_subdomains", value)

    @property
    @pulumi.getter(name="sslHttpLocationConversion")
    def ssl_http_location_conversion(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_http_location_conversion")

    @ssl_http_location_conversion.setter
    def ssl_http_location_conversion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_http_location_conversion", value)

    @property
    @pulumi.getter(name="sslHttpMatchHost")
    def ssl_http_match_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_http_match_host")

    @ssl_http_match_host.setter
    def ssl_http_match_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_http_match_host", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a client.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a client.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
        """
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="sslPfs")
    def ssl_pfs(self) -> Optional[pulumi.Input[str]]:
        """
        Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
        """
        return pulumi.get(self, "ssl_pfs")

    @ssl_pfs.setter
    def ssl_pfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_pfs", value)

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_send_empty_frags")

    @ssl_send_empty_frags.setter
    def ssl_send_empty_frags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_send_empty_frags", value)

    @property
    @pulumi.getter(name="sslServerAlgorithm")
    def ssl_server_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
        """
        return pulumi.get(self, "ssl_server_algorithm")

    @ssl_server_algorithm.setter
    def ssl_server_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_algorithm", value)

    @property
    @pulumi.getter(name="sslServerCipherSuites")
    def ssl_server_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslServerCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_server_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_server_cipher_suites")

    @ssl_server_cipher_suites.setter
    def ssl_server_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip6SslServerCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_server_cipher_suites", value)

    @property
    @pulumi.getter(name="sslServerMaxVersion")
    def ssl_server_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a server. Use the client setting by default.
        """
        return pulumi.get(self, "ssl_server_max_version")

    @ssl_server_max_version.setter
    def ssl_server_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_max_version", value)

    @property
    @pulumi.getter(name="sslServerMinVersion")
    def ssl_server_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
        """
        return pulumi.get(self, "ssl_server_min_version")

    @ssl_server_min_version.setter
    def ssl_server_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_min_version", value)

    @property
    @pulumi.getter(name="sslServerRenegotiation")
    def ssl_server_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_server_renegotiation")

    @ssl_server_renegotiation.setter
    def ssl_server_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_renegotiation", value)

    @property
    @pulumi.getter(name="sslServerSessionStateMax")
    def ssl_server_session_state_max(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of FortiGate to Server SSL session states to keep.
        """
        return pulumi.get(self, "ssl_server_session_state_max")

    @ssl_server_session_state_max.setter
    def ssl_server_session_state_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_server_session_state_max", value)

    @property
    @pulumi.getter(name="sslServerSessionStateTimeout")
    def ssl_server_session_state_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Number of minutes to keep FortiGate to Server SSL session state.
        """
        return pulumi.get(self, "ssl_server_session_state_timeout")

    @ssl_server_session_state_timeout.setter
    def ssl_server_session_state_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_server_session_state_timeout", value)

    @property
    @pulumi.getter(name="sslServerSessionStateType")
    def ssl_server_session_state_type(self) -> Optional[pulumi.Input[str]]:
        """
        How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        """
        return pulumi.get(self, "ssl_server_session_state_type")

    @ssl_server_session_state_type.setter
    def ssl_server_session_state_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_session_state_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Configure a static NAT or server load balance VIP.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="weblogicServer")
    def weblogic_server(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "weblogic_server")

    @weblogic_server.setter
    def weblogic_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weblogic_server", value)

    @property
    @pulumi.getter(name="websphereServer")
    def websphere_server(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "websphere_server")

    @websphere_server.setter
    def websphere_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "websphere_server", value)


class Vip6(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_nat64_route: Optional[pulumi.Input[str]] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 embedded_ipv4_address: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 h2_support: Optional[pulumi.Input[str]] = None,
                 h3_support: Optional[pulumi.Input[str]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 http_ip_header: Optional[pulumi.Input[str]] = None,
                 http_ip_header_name: Optional[pulumi.Input[str]] = None,
                 http_multiplex: Optional[pulumi.Input[str]] = None,
                 http_redirect: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 ipv4_mappedip: Optional[pulumi.Input[str]] = None,
                 ipv4_mappedport: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mappedip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 max_embryonic_connections: Optional[pulumi.Input[int]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6MonitorArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat66: Optional[pulumi.Input[str]] = None,
                 nat_source_vip: Optional[pulumi.Input[str]] = None,
                 ndp_reply: Optional[pulumi.Input[str]] = None,
                 outlook_web_access: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input[pulumi.InputType['Vip6QuicArgs']]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6RealserverArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SrcFilterArgs']]]]] = None,
                 ssl_accept_ffdhe_groups: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SslCipherSuiteArgs']]]]] = None,
                 ssl_client_fallback: Optional[pulumi.Input[str]] = None,
                 ssl_client_rekey_count: Optional[pulumi.Input[int]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_client_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_type: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_age: Optional[pulumi.Input[int]] = None,
                 ssl_hpkp_backup: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_primary: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_report_uri: Optional[pulumi.Input[str]] = None,
                 ssl_hsts: Optional[pulumi.Input[str]] = None,
                 ssl_hsts_age: Optional[pulumi.Input[int]] = None,
                 ssl_hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_http_location_conversion: Optional[pulumi.Input[str]] = None,
                 ssl_http_match_host: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 ssl_pfs: Optional[pulumi.Input[str]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 ssl_server_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_server_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SslServerCipherSuiteArgs']]]]] = None,
                 ssl_server_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_server_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weblogic_server: Optional[pulumi.Input[str]] = None,
                 websphere_server: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure virtual IP for IPv6.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Vip6("trname",
            arp_reply="enable",
            color=0,
            extip="2001:1:1:12::100",
            extport="0-65535",
            fosid=0,
            http_cookie_age=60,
            http_cookie_domain_from_host="disable",
            http_cookie_generation=0,
            http_cookie_share="same-ip",
            http_ip_header="disable",
            http_multiplex="disable",
            https_cookie_secure="disable",
            ldb_method="static",
            mappedip="2001:1:1:12::200",
            mappedport="0-65535",
            max_embryonic_connections=1000,
            outlook_web_access="disable",
            persistence="none",
            portforward="disable",
            protocol="tcp",
            ssl_algorithm="high",
            ssl_client_fallback="enable",
            ssl_client_renegotiation="secure",
            ssl_client_session_state_max=1000,
            ssl_client_session_state_timeout=30,
            ssl_client_session_state_type="both",
            ssl_dh_bits="2048",
            ssl_hpkp="disable",
            ssl_hpkp_age=5184000,
            ssl_hpkp_include_subdomains="disable",
            ssl_hsts="disable",
            ssl_hsts_age=5184000,
            ssl_hsts_include_subdomains="disable",
            ssl_http_location_conversion="disable",
            ssl_http_match_host="enable",
            ssl_max_version="tls-1.2",
            ssl_min_version="tls-1.1",
            ssl_mode="half",
            ssl_pfs="require",
            ssl_send_empty_frags="enable",
            ssl_server_algorithm="client",
            ssl_server_max_version="client",
            ssl_server_min_version="client",
            ssl_server_session_state_max=100,
            ssl_server_session_state_timeout=60,
            ssl_server_session_state_type="both",
            type="static-nat",
            weblogic_server="disable",
            websphere_server="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Vip6 can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/vip6:Vip6 labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/vip6:Vip6 labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] add_nat64_route: Enable/disable adding NAT64 route. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] arp_reply: Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] embedded_ipv4_address: Enable/disable embedded IPv4 address. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] extip: IP address or address range on the external interface that you want to map to an address or address range on the destination network.
        :param pulumi.Input[str] extport: Incoming port number range that you want to map to a port number range on the destination network.
        :param pulumi.Input[int] fosid: Custom defined ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] h2_support: Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h3_support: Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] http_ip_header: For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_ip_header_name: For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
        :param pulumi.Input[str] http_multiplex: Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_redirect: Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ipv4_mappedip: Start-mapped-IPv4-address [-end mapped-IPv4-address].
        :param pulumi.Input[str] ipv4_mappedport: IPv4 port number range on the destination network to which the external port number range is mapped.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
        :param pulumi.Input[str] mappedip: Mapped IP address range in the format startIP-endIP.
        :param pulumi.Input[str] mappedport: Port number range on the destination network to which the external port number range is mapped.
        :param pulumi.Input[int] max_embryonic_connections: Maximum number of incomplete connections.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6MonitorArgs']]]] monitors: Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
        :param pulumi.Input[str] name: Virtual ip6 name.
        :param pulumi.Input[str] nat64: Enable/disable DNAT64. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nat66: Enable/disable DNAT66. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nat_source_vip: Enable to perform SNAT on traffic from mappedip to the extip for all egress interfaces. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ndp_reply: Enable/disable this FortiGate unit's ability to respond to NDP requests for this virtual IP address (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] outlook_web_access: Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
        :param pulumi.Input[str] portforward: Enable port forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] protocol: Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`.
        :param pulumi.Input[pulumi.InputType['Vip6QuicArgs']] quic: QUIC setting. The structure of `quic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6RealserverArgs']]]] realservers: Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] server_type: Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SrcFilterArgs']]]] src_filters: Source IP6 filter (x:x:x:x:x:x:x:x/x). Separate addresses with spaces. The structure of `src_filter` block is documented below.
        :param pulumi.Input[str] ssl_accept_ffdhe_groups: Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
        :param pulumi.Input[str] ssl_certificate: The name of the SSL certificate to use for SSL acceleration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SslCipherSuiteArgs']]]] ssl_cipher_suites: SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_client_fallback: Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ssl_client_rekey_count: Maximum length of data in MB before triggering a client rekey (0 = disable).
        :param pulumi.Input[str] ssl_client_renegotiation: Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
        :param pulumi.Input[int] ssl_client_session_state_max: Maximum number of client to FortiGate SSL session states to keep.
        :param pulumi.Input[int] ssl_client_session_state_timeout: Number of minutes to keep client to FortiGate SSL session state.
        :param pulumi.Input[str] ssl_client_session_state_type: How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_hpkp: Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
        :param pulumi.Input[int] ssl_hpkp_age: Number of minutes the web browser should keep HPKP.
        :param pulumi.Input[str] ssl_hpkp_backup: Certificate to generate backup HPKP pin from.
        :param pulumi.Input[str] ssl_hpkp_include_subdomains: Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_hpkp_primary: Certificate to generate primary HPKP pin from.
        :param pulumi.Input[str] ssl_hpkp_report_uri: URL to report HPKP violations to.
        :param pulumi.Input[str] ssl_hsts: Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ssl_hsts_age: Number of seconds the client should honour the HSTS setting.
        :param pulumi.Input[str] ssl_hsts_include_subdomains: Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_http_location_conversion: Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_http_match_host: Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a client.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a client.
        :param pulumi.Input[str] ssl_mode: Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
        :param pulumi.Input[str] ssl_pfs: Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
        :param pulumi.Input[str] ssl_send_empty_frags: Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_server_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SslServerCipherSuiteArgs']]]] ssl_server_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_server_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_server_max_version: Highest SSL/TLS version acceptable from a server. Use the client setting by default.
        :param pulumi.Input[str] ssl_server_min_version: Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
        :param pulumi.Input[str] ssl_server_renegotiation: Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ssl_server_session_state_max: Maximum number of FortiGate to Server SSL session states to keep.
        :param pulumi.Input[int] ssl_server_session_state_timeout: Number of minutes to keep FortiGate to Server SSL session state.
        :param pulumi.Input[str] ssl_server_session_state_type: How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        :param pulumi.Input[str] type: Configure a static NAT or server load balance VIP.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weblogic_server: Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] websphere_server: Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Vip6Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure virtual IP for IPv6.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Vip6("trname",
            arp_reply="enable",
            color=0,
            extip="2001:1:1:12::100",
            extport="0-65535",
            fosid=0,
            http_cookie_age=60,
            http_cookie_domain_from_host="disable",
            http_cookie_generation=0,
            http_cookie_share="same-ip",
            http_ip_header="disable",
            http_multiplex="disable",
            https_cookie_secure="disable",
            ldb_method="static",
            mappedip="2001:1:1:12::200",
            mappedport="0-65535",
            max_embryonic_connections=1000,
            outlook_web_access="disable",
            persistence="none",
            portforward="disable",
            protocol="tcp",
            ssl_algorithm="high",
            ssl_client_fallback="enable",
            ssl_client_renegotiation="secure",
            ssl_client_session_state_max=1000,
            ssl_client_session_state_timeout=30,
            ssl_client_session_state_type="both",
            ssl_dh_bits="2048",
            ssl_hpkp="disable",
            ssl_hpkp_age=5184000,
            ssl_hpkp_include_subdomains="disable",
            ssl_hsts="disable",
            ssl_hsts_age=5184000,
            ssl_hsts_include_subdomains="disable",
            ssl_http_location_conversion="disable",
            ssl_http_match_host="enable",
            ssl_max_version="tls-1.2",
            ssl_min_version="tls-1.1",
            ssl_mode="half",
            ssl_pfs="require",
            ssl_send_empty_frags="enable",
            ssl_server_algorithm="client",
            ssl_server_max_version="client",
            ssl_server_min_version="client",
            ssl_server_session_state_max=100,
            ssl_server_session_state_timeout=60,
            ssl_server_session_state_type="both",
            type="static-nat",
            weblogic_server="disable",
            websphere_server="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Vip6 can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/vip6:Vip6 labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/vip6:Vip6 labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param Vip6Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Vip6Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_nat64_route: Optional[pulumi.Input[str]] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 embedded_ipv4_address: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 h2_support: Optional[pulumi.Input[str]] = None,
                 h3_support: Optional[pulumi.Input[str]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 http_ip_header: Optional[pulumi.Input[str]] = None,
                 http_ip_header_name: Optional[pulumi.Input[str]] = None,
                 http_multiplex: Optional[pulumi.Input[str]] = None,
                 http_redirect: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 ipv4_mappedip: Optional[pulumi.Input[str]] = None,
                 ipv4_mappedport: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mappedip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 max_embryonic_connections: Optional[pulumi.Input[int]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6MonitorArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat66: Optional[pulumi.Input[str]] = None,
                 nat_source_vip: Optional[pulumi.Input[str]] = None,
                 ndp_reply: Optional[pulumi.Input[str]] = None,
                 outlook_web_access: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input[pulumi.InputType['Vip6QuicArgs']]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6RealserverArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SrcFilterArgs']]]]] = None,
                 ssl_accept_ffdhe_groups: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SslCipherSuiteArgs']]]]] = None,
                 ssl_client_fallback: Optional[pulumi.Input[str]] = None,
                 ssl_client_rekey_count: Optional[pulumi.Input[int]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_client_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_type: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_age: Optional[pulumi.Input[int]] = None,
                 ssl_hpkp_backup: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_primary: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_report_uri: Optional[pulumi.Input[str]] = None,
                 ssl_hsts: Optional[pulumi.Input[str]] = None,
                 ssl_hsts_age: Optional[pulumi.Input[int]] = None,
                 ssl_hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_http_location_conversion: Optional[pulumi.Input[str]] = None,
                 ssl_http_match_host: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 ssl_pfs: Optional[pulumi.Input[str]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 ssl_server_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_server_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SslServerCipherSuiteArgs']]]]] = None,
                 ssl_server_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_server_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weblogic_server: Optional[pulumi.Input[str]] = None,
                 websphere_server: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Vip6Args.__new__(Vip6Args)

            __props__.__dict__["add_nat64_route"] = add_nat64_route
            __props__.__dict__["arp_reply"] = arp_reply
            __props__.__dict__["color"] = color
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["embedded_ipv4_address"] = embedded_ipv4_address
            if extip is None and not opts.urn:
                raise TypeError("Missing required property 'extip'")
            __props__.__dict__["extip"] = extip
            __props__.__dict__["extport"] = extport
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["h2_support"] = h2_support
            __props__.__dict__["h3_support"] = h3_support
            __props__.__dict__["http_cookie_age"] = http_cookie_age
            __props__.__dict__["http_cookie_domain"] = http_cookie_domain
            __props__.__dict__["http_cookie_domain_from_host"] = http_cookie_domain_from_host
            __props__.__dict__["http_cookie_generation"] = http_cookie_generation
            __props__.__dict__["http_cookie_path"] = http_cookie_path
            __props__.__dict__["http_cookie_share"] = http_cookie_share
            __props__.__dict__["http_ip_header"] = http_ip_header
            __props__.__dict__["http_ip_header_name"] = http_ip_header_name
            __props__.__dict__["http_multiplex"] = http_multiplex
            __props__.__dict__["http_redirect"] = http_redirect
            __props__.__dict__["https_cookie_secure"] = https_cookie_secure
            __props__.__dict__["ipv4_mappedip"] = ipv4_mappedip
            __props__.__dict__["ipv4_mappedport"] = ipv4_mappedport
            __props__.__dict__["ldb_method"] = ldb_method
            if mappedip is None and not opts.urn:
                raise TypeError("Missing required property 'mappedip'")
            __props__.__dict__["mappedip"] = mappedip
            __props__.__dict__["mappedport"] = mappedport
            __props__.__dict__["max_embryonic_connections"] = max_embryonic_connections
            __props__.__dict__["monitors"] = monitors
            __props__.__dict__["name"] = name
            __props__.__dict__["nat64"] = nat64
            __props__.__dict__["nat66"] = nat66
            __props__.__dict__["nat_source_vip"] = nat_source_vip
            __props__.__dict__["ndp_reply"] = ndp_reply
            __props__.__dict__["outlook_web_access"] = outlook_web_access
            __props__.__dict__["persistence"] = persistence
            __props__.__dict__["portforward"] = portforward
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["quic"] = quic
            __props__.__dict__["realservers"] = realservers
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["src_filters"] = src_filters
            __props__.__dict__["ssl_accept_ffdhe_groups"] = ssl_accept_ffdhe_groups
            __props__.__dict__["ssl_algorithm"] = ssl_algorithm
            __props__.__dict__["ssl_certificate"] = ssl_certificate
            __props__.__dict__["ssl_cipher_suites"] = ssl_cipher_suites
            __props__.__dict__["ssl_client_fallback"] = ssl_client_fallback
            __props__.__dict__["ssl_client_rekey_count"] = ssl_client_rekey_count
            __props__.__dict__["ssl_client_renegotiation"] = ssl_client_renegotiation
            __props__.__dict__["ssl_client_session_state_max"] = ssl_client_session_state_max
            __props__.__dict__["ssl_client_session_state_timeout"] = ssl_client_session_state_timeout
            __props__.__dict__["ssl_client_session_state_type"] = ssl_client_session_state_type
            __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
            __props__.__dict__["ssl_hpkp"] = ssl_hpkp
            __props__.__dict__["ssl_hpkp_age"] = ssl_hpkp_age
            __props__.__dict__["ssl_hpkp_backup"] = ssl_hpkp_backup
            __props__.__dict__["ssl_hpkp_include_subdomains"] = ssl_hpkp_include_subdomains
            __props__.__dict__["ssl_hpkp_primary"] = ssl_hpkp_primary
            __props__.__dict__["ssl_hpkp_report_uri"] = ssl_hpkp_report_uri
            __props__.__dict__["ssl_hsts"] = ssl_hsts
            __props__.__dict__["ssl_hsts_age"] = ssl_hsts_age
            __props__.__dict__["ssl_hsts_include_subdomains"] = ssl_hsts_include_subdomains
            __props__.__dict__["ssl_http_location_conversion"] = ssl_http_location_conversion
            __props__.__dict__["ssl_http_match_host"] = ssl_http_match_host
            __props__.__dict__["ssl_max_version"] = ssl_max_version
            __props__.__dict__["ssl_min_version"] = ssl_min_version
            __props__.__dict__["ssl_mode"] = ssl_mode
            __props__.__dict__["ssl_pfs"] = ssl_pfs
            __props__.__dict__["ssl_send_empty_frags"] = ssl_send_empty_frags
            __props__.__dict__["ssl_server_algorithm"] = ssl_server_algorithm
            __props__.__dict__["ssl_server_cipher_suites"] = ssl_server_cipher_suites
            __props__.__dict__["ssl_server_max_version"] = ssl_server_max_version
            __props__.__dict__["ssl_server_min_version"] = ssl_server_min_version
            __props__.__dict__["ssl_server_renegotiation"] = ssl_server_renegotiation
            __props__.__dict__["ssl_server_session_state_max"] = ssl_server_session_state_max
            __props__.__dict__["ssl_server_session_state_timeout"] = ssl_server_session_state_timeout
            __props__.__dict__["ssl_server_session_state_type"] = ssl_server_session_state_type
            __props__.__dict__["type"] = type
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["weblogic_server"] = weblogic_server
            __props__.__dict__["websphere_server"] = websphere_server
        super(Vip6, __self__).__init__(
            'fortios:firewall/vip6:Vip6',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_nat64_route: Optional[pulumi.Input[str]] = None,
            arp_reply: Optional[pulumi.Input[str]] = None,
            color: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            embedded_ipv4_address: Optional[pulumi.Input[str]] = None,
            extip: Optional[pulumi.Input[str]] = None,
            extport: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            h2_support: Optional[pulumi.Input[str]] = None,
            h3_support: Optional[pulumi.Input[str]] = None,
            http_cookie_age: Optional[pulumi.Input[int]] = None,
            http_cookie_domain: Optional[pulumi.Input[str]] = None,
            http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
            http_cookie_generation: Optional[pulumi.Input[int]] = None,
            http_cookie_path: Optional[pulumi.Input[str]] = None,
            http_cookie_share: Optional[pulumi.Input[str]] = None,
            http_ip_header: Optional[pulumi.Input[str]] = None,
            http_ip_header_name: Optional[pulumi.Input[str]] = None,
            http_multiplex: Optional[pulumi.Input[str]] = None,
            http_redirect: Optional[pulumi.Input[str]] = None,
            https_cookie_secure: Optional[pulumi.Input[str]] = None,
            ipv4_mappedip: Optional[pulumi.Input[str]] = None,
            ipv4_mappedport: Optional[pulumi.Input[str]] = None,
            ldb_method: Optional[pulumi.Input[str]] = None,
            mappedip: Optional[pulumi.Input[str]] = None,
            mappedport: Optional[pulumi.Input[str]] = None,
            max_embryonic_connections: Optional[pulumi.Input[int]] = None,
            monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6MonitorArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nat64: Optional[pulumi.Input[str]] = None,
            nat66: Optional[pulumi.Input[str]] = None,
            nat_source_vip: Optional[pulumi.Input[str]] = None,
            ndp_reply: Optional[pulumi.Input[str]] = None,
            outlook_web_access: Optional[pulumi.Input[str]] = None,
            persistence: Optional[pulumi.Input[str]] = None,
            portforward: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            quic: Optional[pulumi.Input[pulumi.InputType['Vip6QuicArgs']]] = None,
            realservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6RealserverArgs']]]]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            src_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SrcFilterArgs']]]]] = None,
            ssl_accept_ffdhe_groups: Optional[pulumi.Input[str]] = None,
            ssl_algorithm: Optional[pulumi.Input[str]] = None,
            ssl_certificate: Optional[pulumi.Input[str]] = None,
            ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SslCipherSuiteArgs']]]]] = None,
            ssl_client_fallback: Optional[pulumi.Input[str]] = None,
            ssl_client_rekey_count: Optional[pulumi.Input[int]] = None,
            ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
            ssl_client_session_state_max: Optional[pulumi.Input[int]] = None,
            ssl_client_session_state_timeout: Optional[pulumi.Input[int]] = None,
            ssl_client_session_state_type: Optional[pulumi.Input[str]] = None,
            ssl_dh_bits: Optional[pulumi.Input[str]] = None,
            ssl_hpkp: Optional[pulumi.Input[str]] = None,
            ssl_hpkp_age: Optional[pulumi.Input[int]] = None,
            ssl_hpkp_backup: Optional[pulumi.Input[str]] = None,
            ssl_hpkp_include_subdomains: Optional[pulumi.Input[str]] = None,
            ssl_hpkp_primary: Optional[pulumi.Input[str]] = None,
            ssl_hpkp_report_uri: Optional[pulumi.Input[str]] = None,
            ssl_hsts: Optional[pulumi.Input[str]] = None,
            ssl_hsts_age: Optional[pulumi.Input[int]] = None,
            ssl_hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
            ssl_http_location_conversion: Optional[pulumi.Input[str]] = None,
            ssl_http_match_host: Optional[pulumi.Input[str]] = None,
            ssl_max_version: Optional[pulumi.Input[str]] = None,
            ssl_min_version: Optional[pulumi.Input[str]] = None,
            ssl_mode: Optional[pulumi.Input[str]] = None,
            ssl_pfs: Optional[pulumi.Input[str]] = None,
            ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
            ssl_server_algorithm: Optional[pulumi.Input[str]] = None,
            ssl_server_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SslServerCipherSuiteArgs']]]]] = None,
            ssl_server_max_version: Optional[pulumi.Input[str]] = None,
            ssl_server_min_version: Optional[pulumi.Input[str]] = None,
            ssl_server_renegotiation: Optional[pulumi.Input[str]] = None,
            ssl_server_session_state_max: Optional[pulumi.Input[int]] = None,
            ssl_server_session_state_timeout: Optional[pulumi.Input[int]] = None,
            ssl_server_session_state_type: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            weblogic_server: Optional[pulumi.Input[str]] = None,
            websphere_server: Optional[pulumi.Input[str]] = None) -> 'Vip6':
        """
        Get an existing Vip6 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] add_nat64_route: Enable/disable adding NAT64 route. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] arp_reply: Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] embedded_ipv4_address: Enable/disable embedded IPv4 address. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] extip: IP address or address range on the external interface that you want to map to an address or address range on the destination network.
        :param pulumi.Input[str] extport: Incoming port number range that you want to map to a port number range on the destination network.
        :param pulumi.Input[int] fosid: Custom defined ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] h2_support: Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h3_support: Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] http_ip_header: For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_ip_header_name: For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
        :param pulumi.Input[str] http_multiplex: Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_redirect: Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ipv4_mappedip: Start-mapped-IPv4-address [-end mapped-IPv4-address].
        :param pulumi.Input[str] ipv4_mappedport: IPv4 port number range on the destination network to which the external port number range is mapped.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
        :param pulumi.Input[str] mappedip: Mapped IP address range in the format startIP-endIP.
        :param pulumi.Input[str] mappedport: Port number range on the destination network to which the external port number range is mapped.
        :param pulumi.Input[int] max_embryonic_connections: Maximum number of incomplete connections.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6MonitorArgs']]]] monitors: Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
        :param pulumi.Input[str] name: Virtual ip6 name.
        :param pulumi.Input[str] nat64: Enable/disable DNAT64. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nat66: Enable/disable DNAT66. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nat_source_vip: Enable to perform SNAT on traffic from mappedip to the extip for all egress interfaces. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ndp_reply: Enable/disable this FortiGate unit's ability to respond to NDP requests for this virtual IP address (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] outlook_web_access: Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
        :param pulumi.Input[str] portforward: Enable port forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] protocol: Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`.
        :param pulumi.Input[pulumi.InputType['Vip6QuicArgs']] quic: QUIC setting. The structure of `quic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6RealserverArgs']]]] realservers: Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] server_type: Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SrcFilterArgs']]]] src_filters: Source IP6 filter (x:x:x:x:x:x:x:x/x). Separate addresses with spaces. The structure of `src_filter` block is documented below.
        :param pulumi.Input[str] ssl_accept_ffdhe_groups: Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
        :param pulumi.Input[str] ssl_certificate: The name of the SSL certificate to use for SSL acceleration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SslCipherSuiteArgs']]]] ssl_cipher_suites: SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_client_fallback: Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ssl_client_rekey_count: Maximum length of data in MB before triggering a client rekey (0 = disable).
        :param pulumi.Input[str] ssl_client_renegotiation: Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
        :param pulumi.Input[int] ssl_client_session_state_max: Maximum number of client to FortiGate SSL session states to keep.
        :param pulumi.Input[int] ssl_client_session_state_timeout: Number of minutes to keep client to FortiGate SSL session state.
        :param pulumi.Input[str] ssl_client_session_state_type: How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_hpkp: Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
        :param pulumi.Input[int] ssl_hpkp_age: Number of minutes the web browser should keep HPKP.
        :param pulumi.Input[str] ssl_hpkp_backup: Certificate to generate backup HPKP pin from.
        :param pulumi.Input[str] ssl_hpkp_include_subdomains: Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_hpkp_primary: Certificate to generate primary HPKP pin from.
        :param pulumi.Input[str] ssl_hpkp_report_uri: URL to report HPKP violations to.
        :param pulumi.Input[str] ssl_hsts: Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ssl_hsts_age: Number of seconds the client should honour the HSTS setting.
        :param pulumi.Input[str] ssl_hsts_include_subdomains: Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_http_location_conversion: Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_http_match_host: Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a client.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a client.
        :param pulumi.Input[str] ssl_mode: Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
        :param pulumi.Input[str] ssl_pfs: Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
        :param pulumi.Input[str] ssl_send_empty_frags: Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_server_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip6SslServerCipherSuiteArgs']]]] ssl_server_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_server_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_server_max_version: Highest SSL/TLS version acceptable from a server. Use the client setting by default.
        :param pulumi.Input[str] ssl_server_min_version: Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
        :param pulumi.Input[str] ssl_server_renegotiation: Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ssl_server_session_state_max: Maximum number of FortiGate to Server SSL session states to keep.
        :param pulumi.Input[int] ssl_server_session_state_timeout: Number of minutes to keep FortiGate to Server SSL session state.
        :param pulumi.Input[str] ssl_server_session_state_type: How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        :param pulumi.Input[str] type: Configure a static NAT or server load balance VIP.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weblogic_server: Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] websphere_server: Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Vip6State.__new__(_Vip6State)

        __props__.__dict__["add_nat64_route"] = add_nat64_route
        __props__.__dict__["arp_reply"] = arp_reply
        __props__.__dict__["color"] = color
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["embedded_ipv4_address"] = embedded_ipv4_address
        __props__.__dict__["extip"] = extip
        __props__.__dict__["extport"] = extport
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["h2_support"] = h2_support
        __props__.__dict__["h3_support"] = h3_support
        __props__.__dict__["http_cookie_age"] = http_cookie_age
        __props__.__dict__["http_cookie_domain"] = http_cookie_domain
        __props__.__dict__["http_cookie_domain_from_host"] = http_cookie_domain_from_host
        __props__.__dict__["http_cookie_generation"] = http_cookie_generation
        __props__.__dict__["http_cookie_path"] = http_cookie_path
        __props__.__dict__["http_cookie_share"] = http_cookie_share
        __props__.__dict__["http_ip_header"] = http_ip_header
        __props__.__dict__["http_ip_header_name"] = http_ip_header_name
        __props__.__dict__["http_multiplex"] = http_multiplex
        __props__.__dict__["http_redirect"] = http_redirect
        __props__.__dict__["https_cookie_secure"] = https_cookie_secure
        __props__.__dict__["ipv4_mappedip"] = ipv4_mappedip
        __props__.__dict__["ipv4_mappedport"] = ipv4_mappedport
        __props__.__dict__["ldb_method"] = ldb_method
        __props__.__dict__["mappedip"] = mappedip
        __props__.__dict__["mappedport"] = mappedport
        __props__.__dict__["max_embryonic_connections"] = max_embryonic_connections
        __props__.__dict__["monitors"] = monitors
        __props__.__dict__["name"] = name
        __props__.__dict__["nat64"] = nat64
        __props__.__dict__["nat66"] = nat66
        __props__.__dict__["nat_source_vip"] = nat_source_vip
        __props__.__dict__["ndp_reply"] = ndp_reply
        __props__.__dict__["outlook_web_access"] = outlook_web_access
        __props__.__dict__["persistence"] = persistence
        __props__.__dict__["portforward"] = portforward
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["quic"] = quic
        __props__.__dict__["realservers"] = realservers
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["src_filters"] = src_filters
        __props__.__dict__["ssl_accept_ffdhe_groups"] = ssl_accept_ffdhe_groups
        __props__.__dict__["ssl_algorithm"] = ssl_algorithm
        __props__.__dict__["ssl_certificate"] = ssl_certificate
        __props__.__dict__["ssl_cipher_suites"] = ssl_cipher_suites
        __props__.__dict__["ssl_client_fallback"] = ssl_client_fallback
        __props__.__dict__["ssl_client_rekey_count"] = ssl_client_rekey_count
        __props__.__dict__["ssl_client_renegotiation"] = ssl_client_renegotiation
        __props__.__dict__["ssl_client_session_state_max"] = ssl_client_session_state_max
        __props__.__dict__["ssl_client_session_state_timeout"] = ssl_client_session_state_timeout
        __props__.__dict__["ssl_client_session_state_type"] = ssl_client_session_state_type
        __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
        __props__.__dict__["ssl_hpkp"] = ssl_hpkp
        __props__.__dict__["ssl_hpkp_age"] = ssl_hpkp_age
        __props__.__dict__["ssl_hpkp_backup"] = ssl_hpkp_backup
        __props__.__dict__["ssl_hpkp_include_subdomains"] = ssl_hpkp_include_subdomains
        __props__.__dict__["ssl_hpkp_primary"] = ssl_hpkp_primary
        __props__.__dict__["ssl_hpkp_report_uri"] = ssl_hpkp_report_uri
        __props__.__dict__["ssl_hsts"] = ssl_hsts
        __props__.__dict__["ssl_hsts_age"] = ssl_hsts_age
        __props__.__dict__["ssl_hsts_include_subdomains"] = ssl_hsts_include_subdomains
        __props__.__dict__["ssl_http_location_conversion"] = ssl_http_location_conversion
        __props__.__dict__["ssl_http_match_host"] = ssl_http_match_host
        __props__.__dict__["ssl_max_version"] = ssl_max_version
        __props__.__dict__["ssl_min_version"] = ssl_min_version
        __props__.__dict__["ssl_mode"] = ssl_mode
        __props__.__dict__["ssl_pfs"] = ssl_pfs
        __props__.__dict__["ssl_send_empty_frags"] = ssl_send_empty_frags
        __props__.__dict__["ssl_server_algorithm"] = ssl_server_algorithm
        __props__.__dict__["ssl_server_cipher_suites"] = ssl_server_cipher_suites
        __props__.__dict__["ssl_server_max_version"] = ssl_server_max_version
        __props__.__dict__["ssl_server_min_version"] = ssl_server_min_version
        __props__.__dict__["ssl_server_renegotiation"] = ssl_server_renegotiation
        __props__.__dict__["ssl_server_session_state_max"] = ssl_server_session_state_max
        __props__.__dict__["ssl_server_session_state_timeout"] = ssl_server_session_state_timeout
        __props__.__dict__["ssl_server_session_state_type"] = ssl_server_session_state_type
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["weblogic_server"] = weblogic_server
        __props__.__dict__["websphere_server"] = websphere_server
        return Vip6(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addNat64Route")
    def add_nat64_route(self) -> pulumi.Output[str]:
        """
        Enable/disable adding NAT64 route. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "add_nat64_route")

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> pulumi.Output[str]:
        """
        Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "arp_reply")

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[int]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="embeddedIpv4Address")
    def embedded_ipv4_address(self) -> pulumi.Output[str]:
        """
        Enable/disable embedded IPv4 address. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "embedded_ipv4_address")

    @property
    @pulumi.getter
    def extip(self) -> pulumi.Output[str]:
        """
        IP address or address range on the external interface that you want to map to an address or address range on the destination network.
        """
        return pulumi.get(self, "extip")

    @property
    @pulumi.getter
    def extport(self) -> pulumi.Output[str]:
        """
        Incoming port number range that you want to map to a port number range on the destination network.
        """
        return pulumi.get(self, "extport")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        Custom defined ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="h2Support")
    def h2_support(self) -> pulumi.Output[str]:
        """
        Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h2_support")

    @property
    @pulumi.getter(name="h3Support")
    def h3_support(self) -> pulumi.Output[str]:
        """
        Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h3_support")

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> pulumi.Output[int]:
        """
        Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
        """
        return pulumi.get(self, "http_cookie_age")

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> pulumi.Output[str]:
        """
        Domain that HTTP cookie persistence should apply to.
        """
        return pulumi.get(self, "http_cookie_domain")

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> pulumi.Output[str]:
        """
        Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_cookie_domain_from_host")

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> pulumi.Output[int]:
        """
        Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        """
        return pulumi.get(self, "http_cookie_generation")

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> pulumi.Output[str]:
        """
        Limit HTTP cookie persistence to the specified path.
        """
        return pulumi.get(self, "http_cookie_path")

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> pulumi.Output[str]:
        """
        Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        """
        return pulumi.get(self, "http_cookie_share")

    @property
    @pulumi.getter(name="httpIpHeader")
    def http_ip_header(self) -> pulumi.Output[str]:
        """
        For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_ip_header")

    @property
    @pulumi.getter(name="httpIpHeaderName")
    def http_ip_header_name(self) -> pulumi.Output[str]:
        """
        For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
        """
        return pulumi.get(self, "http_ip_header_name")

    @property
    @pulumi.getter(name="httpMultiplex")
    def http_multiplex(self) -> pulumi.Output[str]:
        """
        Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_multiplex")

    @property
    @pulumi.getter(name="httpRedirect")
    def http_redirect(self) -> pulumi.Output[str]:
        """
        Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_redirect")

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> pulumi.Output[str]:
        """
        Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "https_cookie_secure")

    @property
    @pulumi.getter(name="ipv4Mappedip")
    def ipv4_mappedip(self) -> pulumi.Output[str]:
        """
        Start-mapped-IPv4-address [-end mapped-IPv4-address].
        """
        return pulumi.get(self, "ipv4_mappedip")

    @property
    @pulumi.getter(name="ipv4Mappedport")
    def ipv4_mappedport(self) -> pulumi.Output[str]:
        """
        IPv4 port number range on the destination network to which the external port number range is mapped.
        """
        return pulumi.get(self, "ipv4_mappedport")

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> pulumi.Output[str]:
        """
        Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
        """
        return pulumi.get(self, "ldb_method")

    @property
    @pulumi.getter
    def mappedip(self) -> pulumi.Output[str]:
        """
        Mapped IP address range in the format startIP-endIP.
        """
        return pulumi.get(self, "mappedip")

    @property
    @pulumi.getter
    def mappedport(self) -> pulumi.Output[str]:
        """
        Port number range on the destination network to which the external port number range is mapped.
        """
        return pulumi.get(self, "mappedport")

    @property
    @pulumi.getter(name="maxEmbryonicConnections")
    def max_embryonic_connections(self) -> pulumi.Output[int]:
        """
        Maximum number of incomplete connections.
        """
        return pulumi.get(self, "max_embryonic_connections")

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Output[Optional[Sequence['outputs.Vip6Monitor']]]:
        """
        Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
        """
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Virtual ip6 name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat64(self) -> pulumi.Output[str]:
        """
        Enable/disable DNAT64. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat64")

    @property
    @pulumi.getter
    def nat66(self) -> pulumi.Output[str]:
        """
        Enable/disable DNAT66. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat66")

    @property
    @pulumi.getter(name="natSourceVip")
    def nat_source_vip(self) -> pulumi.Output[str]:
        """
        Enable to perform SNAT on traffic from mappedip to the extip for all egress interfaces. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat_source_vip")

    @property
    @pulumi.getter(name="ndpReply")
    def ndp_reply(self) -> pulumi.Output[str]:
        """
        Enable/disable this FortiGate unit's ability to respond to NDP requests for this virtual IP address (default = enable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ndp_reply")

    @property
    @pulumi.getter(name="outlookWebAccess")
    def outlook_web_access(self) -> pulumi.Output[str]:
        """
        Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "outlook_web_access")

    @property
    @pulumi.getter
    def persistence(self) -> pulumi.Output[str]:
        """
        Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
        """
        return pulumi.get(self, "persistence")

    @property
    @pulumi.getter
    def portforward(self) -> pulumi.Output[str]:
        """
        Enable port forwarding. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "portforward")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def quic(self) -> pulumi.Output['outputs.Vip6Quic']:
        """
        QUIC setting. The structure of `quic` block is documented below.
        """
        return pulumi.get(self, "quic")

    @property
    @pulumi.getter
    def realservers(self) -> pulumi.Output[Optional[Sequence['outputs.Vip6Realserver']]]:
        """
        Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        """
        Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
        """
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter(name="srcFilters")
    def src_filters(self) -> pulumi.Output[Optional[Sequence['outputs.Vip6SrcFilter']]]:
        """
        Source IP6 filter (x:x:x:x:x:x:x:x/x). Separate addresses with spaces. The structure of `src_filter` block is documented below.
        """
        return pulumi.get(self, "src_filters")

    @property
    @pulumi.getter(name="sslAcceptFfdheGroups")
    def ssl_accept_ffdhe_groups(self) -> pulumi.Output[str]:
        """
        Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_accept_ffdhe_groups")

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> pulumi.Output[str]:
        """
        Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Output[str]:
        """
        The name of the SSL certificate to use for SSL acceleration.
        """
        return pulumi.get(self, "ssl_certificate")

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> pulumi.Output[Optional[Sequence['outputs.Vip6SslCipherSuite']]]:
        """
        SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_cipher_suites")

    @property
    @pulumi.getter(name="sslClientFallback")
    def ssl_client_fallback(self) -> pulumi.Output[str]:
        """
        Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_client_fallback")

    @property
    @pulumi.getter(name="sslClientRekeyCount")
    def ssl_client_rekey_count(self) -> pulumi.Output[int]:
        """
        Maximum length of data in MB before triggering a client rekey (0 = disable).
        """
        return pulumi.get(self, "ssl_client_rekey_count")

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> pulumi.Output[str]:
        """
        Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
        """
        return pulumi.get(self, "ssl_client_renegotiation")

    @property
    @pulumi.getter(name="sslClientSessionStateMax")
    def ssl_client_session_state_max(self) -> pulumi.Output[int]:
        """
        Maximum number of client to FortiGate SSL session states to keep.
        """
        return pulumi.get(self, "ssl_client_session_state_max")

    @property
    @pulumi.getter(name="sslClientSessionStateTimeout")
    def ssl_client_session_state_timeout(self) -> pulumi.Output[int]:
        """
        Number of minutes to keep client to FortiGate SSL session state.
        """
        return pulumi.get(self, "ssl_client_session_state_timeout")

    @property
    @pulumi.getter(name="sslClientSessionStateType")
    def ssl_client_session_state_type(self) -> pulumi.Output[str]:
        """
        How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        """
        return pulumi.get(self, "ssl_client_session_state_type")

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> pulumi.Output[str]:
        """
        Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @property
    @pulumi.getter(name="sslHpkp")
    def ssl_hpkp(self) -> pulumi.Output[str]:
        """
        Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
        """
        return pulumi.get(self, "ssl_hpkp")

    @property
    @pulumi.getter(name="sslHpkpAge")
    def ssl_hpkp_age(self) -> pulumi.Output[int]:
        """
        Number of minutes the web browser should keep HPKP.
        """
        return pulumi.get(self, "ssl_hpkp_age")

    @property
    @pulumi.getter(name="sslHpkpBackup")
    def ssl_hpkp_backup(self) -> pulumi.Output[str]:
        """
        Certificate to generate backup HPKP pin from.
        """
        return pulumi.get(self, "ssl_hpkp_backup")

    @property
    @pulumi.getter(name="sslHpkpIncludeSubdomains")
    def ssl_hpkp_include_subdomains(self) -> pulumi.Output[str]:
        """
        Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_hpkp_include_subdomains")

    @property
    @pulumi.getter(name="sslHpkpPrimary")
    def ssl_hpkp_primary(self) -> pulumi.Output[str]:
        """
        Certificate to generate primary HPKP pin from.
        """
        return pulumi.get(self, "ssl_hpkp_primary")

    @property
    @pulumi.getter(name="sslHpkpReportUri")
    def ssl_hpkp_report_uri(self) -> pulumi.Output[Optional[str]]:
        """
        URL to report HPKP violations to.
        """
        return pulumi.get(self, "ssl_hpkp_report_uri")

    @property
    @pulumi.getter(name="sslHsts")
    def ssl_hsts(self) -> pulumi.Output[str]:
        """
        Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_hsts")

    @property
    @pulumi.getter(name="sslHstsAge")
    def ssl_hsts_age(self) -> pulumi.Output[int]:
        """
        Number of seconds the client should honour the HSTS setting.
        """
        return pulumi.get(self, "ssl_hsts_age")

    @property
    @pulumi.getter(name="sslHstsIncludeSubdomains")
    def ssl_hsts_include_subdomains(self) -> pulumi.Output[str]:
        """
        Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_hsts_include_subdomains")

    @property
    @pulumi.getter(name="sslHttpLocationConversion")
    def ssl_http_location_conversion(self) -> pulumi.Output[str]:
        """
        Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_http_location_conversion")

    @property
    @pulumi.getter(name="sslHttpMatchHost")
    def ssl_http_match_host(self) -> pulumi.Output[str]:
        """
        Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_http_match_host")

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> pulumi.Output[str]:
        """
        Highest SSL/TLS version acceptable from a client.
        """
        return pulumi.get(self, "ssl_max_version")

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> pulumi.Output[str]:
        """
        Lowest SSL/TLS version acceptable from a client.
        """
        return pulumi.get(self, "ssl_min_version")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> pulumi.Output[str]:
        """
        Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
        """
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="sslPfs")
    def ssl_pfs(self) -> pulumi.Output[str]:
        """
        Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
        """
        return pulumi.get(self, "ssl_pfs")

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> pulumi.Output[str]:
        """
        Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_send_empty_frags")

    @property
    @pulumi.getter(name="sslServerAlgorithm")
    def ssl_server_algorithm(self) -> pulumi.Output[str]:
        """
        Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
        """
        return pulumi.get(self, "ssl_server_algorithm")

    @property
    @pulumi.getter(name="sslServerCipherSuites")
    def ssl_server_cipher_suites(self) -> pulumi.Output[Optional[Sequence['outputs.Vip6SslServerCipherSuite']]]:
        """
        SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_server_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_server_cipher_suites")

    @property
    @pulumi.getter(name="sslServerMaxVersion")
    def ssl_server_max_version(self) -> pulumi.Output[str]:
        """
        Highest SSL/TLS version acceptable from a server. Use the client setting by default.
        """
        return pulumi.get(self, "ssl_server_max_version")

    @property
    @pulumi.getter(name="sslServerMinVersion")
    def ssl_server_min_version(self) -> pulumi.Output[str]:
        """
        Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
        """
        return pulumi.get(self, "ssl_server_min_version")

    @property
    @pulumi.getter(name="sslServerRenegotiation")
    def ssl_server_renegotiation(self) -> pulumi.Output[str]:
        """
        Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_server_renegotiation")

    @property
    @pulumi.getter(name="sslServerSessionStateMax")
    def ssl_server_session_state_max(self) -> pulumi.Output[int]:
        """
        Maximum number of FortiGate to Server SSL session states to keep.
        """
        return pulumi.get(self, "ssl_server_session_state_max")

    @property
    @pulumi.getter(name="sslServerSessionStateTimeout")
    def ssl_server_session_state_timeout(self) -> pulumi.Output[int]:
        """
        Number of minutes to keep FortiGate to Server SSL session state.
        """
        return pulumi.get(self, "ssl_server_session_state_timeout")

    @property
    @pulumi.getter(name="sslServerSessionStateType")
    def ssl_server_session_state_type(self) -> pulumi.Output[str]:
        """
        How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
        """
        return pulumi.get(self, "ssl_server_session_state_type")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Configure a static NAT or server load balance VIP.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="weblogicServer")
    def weblogic_server(self) -> pulumi.Output[str]:
        """
        Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "weblogic_server")

    @property
    @pulumi.getter(name="websphereServer")
    def websphere_server(self) -> pulumi.Output[str]:
        """
        Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "websphere_server")

