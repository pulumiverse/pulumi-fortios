# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['SettingArgs', 'Setting']

@pulumi.input_type
class SettingArgs:
    def __init__(__self__, *,
                 caname: Optional[pulumi.Input[str]] = None,
                 host_trusted_checking: Optional[pulumi.Input[str]] = None,
                 hostkey_dsa1024: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa256: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa384: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa521: Optional[pulumi.Input[str]] = None,
                 hostkey_ed25519: Optional[pulumi.Input[str]] = None,
                 hostkey_rsa2048: Optional[pulumi.Input[str]] = None,
                 untrusted_caname: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Setting resource.
        :param pulumi.Input[str] caname: CA certificate used by SSH Inspection.
        :param pulumi.Input[str] host_trusted_checking: Enable/disable host trusted checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] hostkey_dsa1024: DSA certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa256: ECDSA nid256 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa384: ECDSA nid384 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa521: ECDSA nid384 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ed25519: ED25519 hostkey used by SSH proxy.
        :param pulumi.Input[str] hostkey_rsa2048: RSA certificate used by SSH proxy.
        :param pulumi.Input[str] untrusted_caname: Untrusted CA certificate used by SSH Inspection.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if caname is not None:
            pulumi.set(__self__, "caname", caname)
        if host_trusted_checking is not None:
            pulumi.set(__self__, "host_trusted_checking", host_trusted_checking)
        if hostkey_dsa1024 is not None:
            pulumi.set(__self__, "hostkey_dsa1024", hostkey_dsa1024)
        if hostkey_ecdsa256 is not None:
            pulumi.set(__self__, "hostkey_ecdsa256", hostkey_ecdsa256)
        if hostkey_ecdsa384 is not None:
            pulumi.set(__self__, "hostkey_ecdsa384", hostkey_ecdsa384)
        if hostkey_ecdsa521 is not None:
            pulumi.set(__self__, "hostkey_ecdsa521", hostkey_ecdsa521)
        if hostkey_ed25519 is not None:
            pulumi.set(__self__, "hostkey_ed25519", hostkey_ed25519)
        if hostkey_rsa2048 is not None:
            pulumi.set(__self__, "hostkey_rsa2048", hostkey_rsa2048)
        if untrusted_caname is not None:
            pulumi.set(__self__, "untrusted_caname", untrusted_caname)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def caname(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate used by SSH Inspection.
        """
        return pulumi.get(self, "caname")

    @caname.setter
    def caname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caname", value)

    @property
    @pulumi.getter(name="hostTrustedChecking")
    def host_trusted_checking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable host trusted checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "host_trusted_checking")

    @host_trusted_checking.setter
    def host_trusted_checking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_trusted_checking", value)

    @property
    @pulumi.getter(name="hostkeyDsa1024")
    def hostkey_dsa1024(self) -> Optional[pulumi.Input[str]]:
        """
        DSA certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_dsa1024")

    @hostkey_dsa1024.setter
    def hostkey_dsa1024(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_dsa1024", value)

    @property
    @pulumi.getter(name="hostkeyEcdsa256")
    def hostkey_ecdsa256(self) -> Optional[pulumi.Input[str]]:
        """
        ECDSA nid256 certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ecdsa256")

    @hostkey_ecdsa256.setter
    def hostkey_ecdsa256(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_ecdsa256", value)

    @property
    @pulumi.getter(name="hostkeyEcdsa384")
    def hostkey_ecdsa384(self) -> Optional[pulumi.Input[str]]:
        """
        ECDSA nid384 certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ecdsa384")

    @hostkey_ecdsa384.setter
    def hostkey_ecdsa384(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_ecdsa384", value)

    @property
    @pulumi.getter(name="hostkeyEcdsa521")
    def hostkey_ecdsa521(self) -> Optional[pulumi.Input[str]]:
        """
        ECDSA nid384 certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ecdsa521")

    @hostkey_ecdsa521.setter
    def hostkey_ecdsa521(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_ecdsa521", value)

    @property
    @pulumi.getter(name="hostkeyEd25519")
    def hostkey_ed25519(self) -> Optional[pulumi.Input[str]]:
        """
        ED25519 hostkey used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ed25519")

    @hostkey_ed25519.setter
    def hostkey_ed25519(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_ed25519", value)

    @property
    @pulumi.getter(name="hostkeyRsa2048")
    def hostkey_rsa2048(self) -> Optional[pulumi.Input[str]]:
        """
        RSA certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_rsa2048")

    @hostkey_rsa2048.setter
    def hostkey_rsa2048(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_rsa2048", value)

    @property
    @pulumi.getter(name="untrustedCaname")
    def untrusted_caname(self) -> Optional[pulumi.Input[str]]:
        """
        Untrusted CA certificate used by SSH Inspection.
        """
        return pulumi.get(self, "untrusted_caname")

    @untrusted_caname.setter
    def untrusted_caname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_caname", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SettingState:
    def __init__(__self__, *,
                 caname: Optional[pulumi.Input[str]] = None,
                 host_trusted_checking: Optional[pulumi.Input[str]] = None,
                 hostkey_dsa1024: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa256: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa384: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa521: Optional[pulumi.Input[str]] = None,
                 hostkey_ed25519: Optional[pulumi.Input[str]] = None,
                 hostkey_rsa2048: Optional[pulumi.Input[str]] = None,
                 untrusted_caname: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Setting resources.
        :param pulumi.Input[str] caname: CA certificate used by SSH Inspection.
        :param pulumi.Input[str] host_trusted_checking: Enable/disable host trusted checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] hostkey_dsa1024: DSA certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa256: ECDSA nid256 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa384: ECDSA nid384 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa521: ECDSA nid384 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ed25519: ED25519 hostkey used by SSH proxy.
        :param pulumi.Input[str] hostkey_rsa2048: RSA certificate used by SSH proxy.
        :param pulumi.Input[str] untrusted_caname: Untrusted CA certificate used by SSH Inspection.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if caname is not None:
            pulumi.set(__self__, "caname", caname)
        if host_trusted_checking is not None:
            pulumi.set(__self__, "host_trusted_checking", host_trusted_checking)
        if hostkey_dsa1024 is not None:
            pulumi.set(__self__, "hostkey_dsa1024", hostkey_dsa1024)
        if hostkey_ecdsa256 is not None:
            pulumi.set(__self__, "hostkey_ecdsa256", hostkey_ecdsa256)
        if hostkey_ecdsa384 is not None:
            pulumi.set(__self__, "hostkey_ecdsa384", hostkey_ecdsa384)
        if hostkey_ecdsa521 is not None:
            pulumi.set(__self__, "hostkey_ecdsa521", hostkey_ecdsa521)
        if hostkey_ed25519 is not None:
            pulumi.set(__self__, "hostkey_ed25519", hostkey_ed25519)
        if hostkey_rsa2048 is not None:
            pulumi.set(__self__, "hostkey_rsa2048", hostkey_rsa2048)
        if untrusted_caname is not None:
            pulumi.set(__self__, "untrusted_caname", untrusted_caname)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def caname(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate used by SSH Inspection.
        """
        return pulumi.get(self, "caname")

    @caname.setter
    def caname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caname", value)

    @property
    @pulumi.getter(name="hostTrustedChecking")
    def host_trusted_checking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable host trusted checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "host_trusted_checking")

    @host_trusted_checking.setter
    def host_trusted_checking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_trusted_checking", value)

    @property
    @pulumi.getter(name="hostkeyDsa1024")
    def hostkey_dsa1024(self) -> Optional[pulumi.Input[str]]:
        """
        DSA certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_dsa1024")

    @hostkey_dsa1024.setter
    def hostkey_dsa1024(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_dsa1024", value)

    @property
    @pulumi.getter(name="hostkeyEcdsa256")
    def hostkey_ecdsa256(self) -> Optional[pulumi.Input[str]]:
        """
        ECDSA nid256 certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ecdsa256")

    @hostkey_ecdsa256.setter
    def hostkey_ecdsa256(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_ecdsa256", value)

    @property
    @pulumi.getter(name="hostkeyEcdsa384")
    def hostkey_ecdsa384(self) -> Optional[pulumi.Input[str]]:
        """
        ECDSA nid384 certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ecdsa384")

    @hostkey_ecdsa384.setter
    def hostkey_ecdsa384(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_ecdsa384", value)

    @property
    @pulumi.getter(name="hostkeyEcdsa521")
    def hostkey_ecdsa521(self) -> Optional[pulumi.Input[str]]:
        """
        ECDSA nid384 certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ecdsa521")

    @hostkey_ecdsa521.setter
    def hostkey_ecdsa521(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_ecdsa521", value)

    @property
    @pulumi.getter(name="hostkeyEd25519")
    def hostkey_ed25519(self) -> Optional[pulumi.Input[str]]:
        """
        ED25519 hostkey used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ed25519")

    @hostkey_ed25519.setter
    def hostkey_ed25519(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_ed25519", value)

    @property
    @pulumi.getter(name="hostkeyRsa2048")
    def hostkey_rsa2048(self) -> Optional[pulumi.Input[str]]:
        """
        RSA certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_rsa2048")

    @hostkey_rsa2048.setter
    def hostkey_rsa2048(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostkey_rsa2048", value)

    @property
    @pulumi.getter(name="untrustedCaname")
    def untrusted_caname(self) -> Optional[pulumi.Input[str]]:
        """
        Untrusted CA certificate used by SSH Inspection.
        """
        return pulumi.get(self, "untrusted_caname")

    @untrusted_caname.setter
    def untrusted_caname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_caname", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Setting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 caname: Optional[pulumi.Input[str]] = None,
                 host_trusted_checking: Optional[pulumi.Input[str]] = None,
                 hostkey_dsa1024: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa256: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa384: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa521: Optional[pulumi.Input[str]] = None,
                 hostkey_ed25519: Optional[pulumi.Input[str]] = None,
                 hostkey_rsa2048: Optional[pulumi.Input[str]] = None,
                 untrusted_caname: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        SSH proxy settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.ssh.Setting("trname",
            caname="Fortinet_SSH_CA",
            host_trusted_checking="enable",
            hostkey_dsa1024="Fortinet_SSH_DSA1024",
            hostkey_ecdsa256="Fortinet_SSH_ECDSA256",
            hostkey_ecdsa384="Fortinet_SSH_ECDSA384",
            hostkey_ecdsa521="Fortinet_SSH_ECDSA521",
            hostkey_ed25519="Fortinet_SSH_ED25519",
            hostkey_rsa2048="Fortinet_SSH_RSA2048",
            untrusted_caname="Fortinet_SSH_CA_Untrusted")
        ```

        ## Import

        FirewallSsh Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/ssh/setting:Setting labelname FirewallSshSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/ssh/setting:Setting labelname FirewallSshSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] caname: CA certificate used by SSH Inspection.
        :param pulumi.Input[str] host_trusted_checking: Enable/disable host trusted checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] hostkey_dsa1024: DSA certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa256: ECDSA nid256 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa384: ECDSA nid384 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa521: ECDSA nid384 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ed25519: ED25519 hostkey used by SSH proxy.
        :param pulumi.Input[str] hostkey_rsa2048: RSA certificate used by SSH proxy.
        :param pulumi.Input[str] untrusted_caname: Untrusted CA certificate used by SSH Inspection.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        SSH proxy settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.ssh.Setting("trname",
            caname="Fortinet_SSH_CA",
            host_trusted_checking="enable",
            hostkey_dsa1024="Fortinet_SSH_DSA1024",
            hostkey_ecdsa256="Fortinet_SSH_ECDSA256",
            hostkey_ecdsa384="Fortinet_SSH_ECDSA384",
            hostkey_ecdsa521="Fortinet_SSH_ECDSA521",
            hostkey_ed25519="Fortinet_SSH_ED25519",
            hostkey_rsa2048="Fortinet_SSH_RSA2048",
            untrusted_caname="Fortinet_SSH_CA_Untrusted")
        ```

        ## Import

        FirewallSsh Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/ssh/setting:Setting labelname FirewallSshSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/ssh/setting:Setting labelname FirewallSshSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 caname: Optional[pulumi.Input[str]] = None,
                 host_trusted_checking: Optional[pulumi.Input[str]] = None,
                 hostkey_dsa1024: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa256: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa384: Optional[pulumi.Input[str]] = None,
                 hostkey_ecdsa521: Optional[pulumi.Input[str]] = None,
                 hostkey_ed25519: Optional[pulumi.Input[str]] = None,
                 hostkey_rsa2048: Optional[pulumi.Input[str]] = None,
                 untrusted_caname: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingArgs.__new__(SettingArgs)

            __props__.__dict__["caname"] = caname
            __props__.__dict__["host_trusted_checking"] = host_trusted_checking
            __props__.__dict__["hostkey_dsa1024"] = hostkey_dsa1024
            __props__.__dict__["hostkey_ecdsa256"] = hostkey_ecdsa256
            __props__.__dict__["hostkey_ecdsa384"] = hostkey_ecdsa384
            __props__.__dict__["hostkey_ecdsa521"] = hostkey_ecdsa521
            __props__.__dict__["hostkey_ed25519"] = hostkey_ed25519
            __props__.__dict__["hostkey_rsa2048"] = hostkey_rsa2048
            __props__.__dict__["untrusted_caname"] = untrusted_caname
            __props__.__dict__["vdomparam"] = vdomparam
        super(Setting, __self__).__init__(
            'fortios:firewall/ssh/setting:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            caname: Optional[pulumi.Input[str]] = None,
            host_trusted_checking: Optional[pulumi.Input[str]] = None,
            hostkey_dsa1024: Optional[pulumi.Input[str]] = None,
            hostkey_ecdsa256: Optional[pulumi.Input[str]] = None,
            hostkey_ecdsa384: Optional[pulumi.Input[str]] = None,
            hostkey_ecdsa521: Optional[pulumi.Input[str]] = None,
            hostkey_ed25519: Optional[pulumi.Input[str]] = None,
            hostkey_rsa2048: Optional[pulumi.Input[str]] = None,
            untrusted_caname: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Setting':
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] caname: CA certificate used by SSH Inspection.
        :param pulumi.Input[str] host_trusted_checking: Enable/disable host trusted checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] hostkey_dsa1024: DSA certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa256: ECDSA nid256 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa384: ECDSA nid384 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ecdsa521: ECDSA nid384 certificate used by SSH proxy.
        :param pulumi.Input[str] hostkey_ed25519: ED25519 hostkey used by SSH proxy.
        :param pulumi.Input[str] hostkey_rsa2048: RSA certificate used by SSH proxy.
        :param pulumi.Input[str] untrusted_caname: Untrusted CA certificate used by SSH Inspection.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingState.__new__(_SettingState)

        __props__.__dict__["caname"] = caname
        __props__.__dict__["host_trusted_checking"] = host_trusted_checking
        __props__.__dict__["hostkey_dsa1024"] = hostkey_dsa1024
        __props__.__dict__["hostkey_ecdsa256"] = hostkey_ecdsa256
        __props__.__dict__["hostkey_ecdsa384"] = hostkey_ecdsa384
        __props__.__dict__["hostkey_ecdsa521"] = hostkey_ecdsa521
        __props__.__dict__["hostkey_ed25519"] = hostkey_ed25519
        __props__.__dict__["hostkey_rsa2048"] = hostkey_rsa2048
        __props__.__dict__["untrusted_caname"] = untrusted_caname
        __props__.__dict__["vdomparam"] = vdomparam
        return Setting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def caname(self) -> pulumi.Output[str]:
        """
        CA certificate used by SSH Inspection.
        """
        return pulumi.get(self, "caname")

    @property
    @pulumi.getter(name="hostTrustedChecking")
    def host_trusted_checking(self) -> pulumi.Output[str]:
        """
        Enable/disable host trusted checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "host_trusted_checking")

    @property
    @pulumi.getter(name="hostkeyDsa1024")
    def hostkey_dsa1024(self) -> pulumi.Output[str]:
        """
        DSA certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_dsa1024")

    @property
    @pulumi.getter(name="hostkeyEcdsa256")
    def hostkey_ecdsa256(self) -> pulumi.Output[str]:
        """
        ECDSA nid256 certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ecdsa256")

    @property
    @pulumi.getter(name="hostkeyEcdsa384")
    def hostkey_ecdsa384(self) -> pulumi.Output[str]:
        """
        ECDSA nid384 certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ecdsa384")

    @property
    @pulumi.getter(name="hostkeyEcdsa521")
    def hostkey_ecdsa521(self) -> pulumi.Output[str]:
        """
        ECDSA nid384 certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ecdsa521")

    @property
    @pulumi.getter(name="hostkeyEd25519")
    def hostkey_ed25519(self) -> pulumi.Output[str]:
        """
        ED25519 hostkey used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_ed25519")

    @property
    @pulumi.getter(name="hostkeyRsa2048")
    def hostkey_rsa2048(self) -> pulumi.Output[str]:
        """
        RSA certificate used by SSH proxy.
        """
        return pulumi.get(self, "hostkey_rsa2048")

    @property
    @pulumi.getter(name="untrustedCaname")
    def untrusted_caname(self) -> pulumi.Output[str]:
        """
        Untrusted CA certificate used by SSH Inspection.
        """
        return pulumi.get(self, "untrusted_caname")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

