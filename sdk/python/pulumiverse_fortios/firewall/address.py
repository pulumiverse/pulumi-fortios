# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AddressArgs', 'Address']

@pulumi.input_type
class AddressArgs:
    def __init__(__self__, *,
                 allow_routing: Optional[pulumi.Input[str]] = None,
                 associated_interface: Optional[pulumi.Input[str]] = None,
                 cache_ttl: Optional[pulumi.Input[int]] = None,
                 clearpass_spt: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 end_mac: Optional[pulumi.Input[str]] = None,
                 epg_name: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input['AddressFssoGroupArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hw_model: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input['AddressListArgs']]]] = None,
                 macaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['AddressMacaddrArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_ip_only: Optional[pulumi.Input[str]] = None,
                 obj_id: Optional[pulumi.Input[str]] = None,
                 obj_tag: Optional[pulumi.Input[str]] = None,
                 obj_type: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 policy_group: Optional[pulumi.Input[str]] = None,
                 route_tag: Optional[pulumi.Input[int]] = None,
                 sdn: Optional[pulumi.Input[str]] = None,
                 sdn_addr_type: Optional[pulumi.Input[str]] = None,
                 sdn_tag: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 start_mac: Optional[pulumi.Input[str]] = None,
                 sub_type: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 subnet_name: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 tag_detection_level: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input['AddressTaggingArgs']]]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None,
                 wildcard_fqdn: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Address resource.
        :param pulumi.Input[str] allow_routing: Enable/disable use of this address in the static route configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] associated_interface: Network interface associated with address.
        :param pulumi.Input[int] cache_ttl: Defines the minimal TTL of individual IP addresses in FQDN cache measured in seconds.
        :param pulumi.Input[str] clearpass_spt: SPT (System Posture Token) value. Valid values: `unknown`, `healthy`, `quarantine`, `checkup`, `transient`, `infected`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] country: IP addresses associated to a specific country.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] end_ip: Final IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] end_mac: Last MAC address in the range.
        :param pulumi.Input[str] epg_name: Endpoint group name.
        :param pulumi.Input[str] fabric_object: Security Fabric global object setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] filter: Match criteria filter.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name address.
        :param pulumi.Input[Sequence[pulumi.Input['AddressFssoGroupArgs']]] fsso_groups: FSSO group(s). The structure of `fsso_group` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hw_model: Dynamic address matching hardware model.
        :param pulumi.Input[str] hw_vendor: Dynamic address matching hardware vendor.
        :param pulumi.Input[str] interface: Name of interface whose IP address is to be used.
        :param pulumi.Input[Sequence[pulumi.Input['AddressListArgs']]] lists: IP address list. The structure of `list` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AddressMacaddrArgs']]] macaddrs: Multiple MAC address ranges. The structure of `macaddr` block is documented below.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] node_ip_only: Enable/disable collection of node addresses only in Kubernetes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] obj_id: Object ID for NSX.
        :param pulumi.Input[str] obj_tag: Tag of dynamic address object.
        :param pulumi.Input[str] obj_type: Object type. Valid values: `ip`, `mac`.
        :param pulumi.Input[str] organization: Organization domain name (Syntax: organization/domain).
        :param pulumi.Input[str] os: Dynamic address matching operating system.
        :param pulumi.Input[str] policy_group: Policy group name.
        :param pulumi.Input[int] route_tag: route-tag address.
        :param pulumi.Input[str] sdn: SDN.
        :param pulumi.Input[str] sdn_addr_type: Type of addresses to collect. Valid values: `private`, `public`, `all`.
        :param pulumi.Input[str] sdn_tag: SDN Tag.
        :param pulumi.Input[str] start_ip: First IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] start_mac: First MAC address in the range.
        :param pulumi.Input[str] sub_type: Sub-type of address.
        :param pulumi.Input[str] subnet: IP address and subnet mask of address.
        :param pulumi.Input[str] subnet_name: Subnet name.
        :param pulumi.Input[str] sw_version: Dynamic address matching software version.
        :param pulumi.Input[str] tag_detection_level: Tag detection level of dynamic address object.
        :param pulumi.Input[str] tag_type: Tag type of dynamic address object.
        :param pulumi.Input[Sequence[pulumi.Input['AddressTaggingArgs']]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[str] tenant: Tenant.
        :param pulumi.Input[str] type: Type of address.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable address visibility in the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wildcard: IP address and wildcard netmask.
        :param pulumi.Input[str] wildcard_fqdn: Fully Qualified Domain Name with wildcard characters.
        """
        if allow_routing is not None:
            pulumi.set(__self__, "allow_routing", allow_routing)
        if associated_interface is not None:
            pulumi.set(__self__, "associated_interface", associated_interface)
        if cache_ttl is not None:
            pulumi.set(__self__, "cache_ttl", cache_ttl)
        if clearpass_spt is not None:
            pulumi.set(__self__, "clearpass_spt", clearpass_spt)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if end_mac is not None:
            pulumi.set(__self__, "end_mac", end_mac)
        if epg_name is not None:
            pulumi.set(__self__, "epg_name", epg_name)
        if fabric_object is not None:
            pulumi.set(__self__, "fabric_object", fabric_object)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if fsso_groups is not None:
            pulumi.set(__self__, "fsso_groups", fsso_groups)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hw_model is not None:
            pulumi.set(__self__, "hw_model", hw_model)
        if hw_vendor is not None:
            pulumi.set(__self__, "hw_vendor", hw_vendor)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if macaddrs is not None:
            pulumi.set(__self__, "macaddrs", macaddrs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_ip_only is not None:
            pulumi.set(__self__, "node_ip_only", node_ip_only)
        if obj_id is not None:
            pulumi.set(__self__, "obj_id", obj_id)
        if obj_tag is not None:
            pulumi.set(__self__, "obj_tag", obj_tag)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if policy_group is not None:
            pulumi.set(__self__, "policy_group", policy_group)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if sdn is not None:
            pulumi.set(__self__, "sdn", sdn)
        if sdn_addr_type is not None:
            pulumi.set(__self__, "sdn_addr_type", sdn_addr_type)
        if sdn_tag is not None:
            pulumi.set(__self__, "sdn_tag", sdn_tag)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if start_mac is not None:
            pulumi.set(__self__, "start_mac", start_mac)
        if sub_type is not None:
            pulumi.set(__self__, "sub_type", sub_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if subnet_name is not None:
            pulumi.set(__self__, "subnet_name", subnet_name)
        if sw_version is not None:
            pulumi.set(__self__, "sw_version", sw_version)
        if tag_detection_level is not None:
            pulumi.set(__self__, "tag_detection_level", tag_detection_level)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)
        if taggings is not None:
            pulumi.set(__self__, "taggings", taggings)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)
        if wildcard_fqdn is not None:
            pulumi.set(__self__, "wildcard_fqdn", wildcard_fqdn)

    @property
    @pulumi.getter(name="allowRouting")
    def allow_routing(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of this address in the static route configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_routing")

    @allow_routing.setter
    def allow_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_routing", value)

    @property
    @pulumi.getter(name="associatedInterface")
    def associated_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Network interface associated with address.
        """
        return pulumi.get(self, "associated_interface")

    @associated_interface.setter
    def associated_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "associated_interface", value)

    @property
    @pulumi.getter(name="cacheTtl")
    def cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Defines the minimal TTL of individual IP addresses in FQDN cache measured in seconds.
        """
        return pulumi.get(self, "cache_ttl")

    @cache_ttl.setter
    def cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_ttl", value)

    @property
    @pulumi.getter(name="clearpassSpt")
    def clearpass_spt(self) -> Optional[pulumi.Input[str]]:
        """
        SPT (System Posture Token) value. Valid values: `unknown`, `healthy`, `quarantine`, `checkup`, `transient`, `infected`.
        """
        return pulumi.get(self, "clearpass_spt")

    @clearpass_spt.setter
    def clearpass_spt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clearpass_spt", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        IP addresses associated to a specific country.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Final IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="endMac")
    def end_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Last MAC address in the range.
        """
        return pulumi.get(self, "end_mac")

    @end_mac.setter
    def end_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_mac", value)

    @property
    @pulumi.getter(name="epgName")
    def epg_name(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint group name.
        """
        return pulumi.get(self, "epg_name")

    @epg_name.setter
    def epg_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epg_name", value)

    @property
    @pulumi.getter(name="fabricObject")
    def fabric_object(self) -> Optional[pulumi.Input[str]]:
        """
        Security Fabric global object setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fabric_object")

    @fabric_object.setter
    def fabric_object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Match criteria filter.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Fully Qualified Domain Name address.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AddressFssoGroupArgs']]]]:
        """
        FSSO group(s). The structure of `fsso_group` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @fsso_groups.setter
    def fsso_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AddressFssoGroupArgs']]]]):
        pulumi.set(self, "fsso_groups", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="hwModel")
    def hw_model(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic address matching hardware model.
        """
        return pulumi.get(self, "hw_model")

    @hw_model.setter
    def hw_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_model", value)

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic address matching hardware vendor.
        """
        return pulumi.get(self, "hw_vendor")

    @hw_vendor.setter
    def hw_vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_vendor", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of interface whose IP address is to be used.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AddressListArgs']]]]:
        """
        IP address list. The structure of `list` block is documented below.
        """
        return pulumi.get(self, "lists")

    @lists.setter
    def lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AddressListArgs']]]]):
        pulumi.set(self, "lists", value)

    @property
    @pulumi.getter
    def macaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AddressMacaddrArgs']]]]:
        """
        Multiple MAC address ranges. The structure of `macaddr` block is documented below.
        """
        return pulumi.get(self, "macaddrs")

    @macaddrs.setter
    def macaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AddressMacaddrArgs']]]]):
        pulumi.set(self, "macaddrs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeIpOnly")
    def node_ip_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable collection of node addresses only in Kubernetes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "node_ip_only")

    @node_ip_only.setter
    def node_ip_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_ip_only", value)

    @property
    @pulumi.getter(name="objId")
    def obj_id(self) -> Optional[pulumi.Input[str]]:
        """
        Object ID for NSX.
        """
        return pulumi.get(self, "obj_id")

    @obj_id.setter
    def obj_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "obj_id", value)

    @property
    @pulumi.getter(name="objTag")
    def obj_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Tag of dynamic address object.
        """
        return pulumi.get(self, "obj_tag")

    @obj_tag.setter
    def obj_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "obj_tag", value)

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[pulumi.Input[str]]:
        """
        Object type. Valid values: `ip`, `mac`.
        """
        return pulumi.get(self, "obj_type")

    @obj_type.setter
    def obj_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "obj_type", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        Organization domain name (Syntax: organization/domain).
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic address matching operating system.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter(name="policyGroup")
    def policy_group(self) -> Optional[pulumi.Input[str]]:
        """
        Policy group name.
        """
        return pulumi.get(self, "policy_group")

    @policy_group.setter
    def policy_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_group", value)

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[pulumi.Input[int]]:
        """
        route-tag address.
        """
        return pulumi.get(self, "route_tag")

    @route_tag.setter
    def route_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_tag", value)

    @property
    @pulumi.getter
    def sdn(self) -> Optional[pulumi.Input[str]]:
        """
        SDN.
        """
        return pulumi.get(self, "sdn")

    @sdn.setter
    def sdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdn", value)

    @property
    @pulumi.getter(name="sdnAddrType")
    def sdn_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of addresses to collect. Valid values: `private`, `public`, `all`.
        """
        return pulumi.get(self, "sdn_addr_type")

    @sdn_addr_type.setter
    def sdn_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdn_addr_type", value)

    @property
    @pulumi.getter(name="sdnTag")
    def sdn_tag(self) -> Optional[pulumi.Input[str]]:
        """
        SDN Tag.
        """
        return pulumi.get(self, "sdn_tag")

    @sdn_tag.setter
    def sdn_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdn_tag", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        First IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter(name="startMac")
    def start_mac(self) -> Optional[pulumi.Input[str]]:
        """
        First MAC address in the range.
        """
        return pulumi.get(self, "start_mac")

    @start_mac.setter
    def start_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_mac", value)

    @property
    @pulumi.getter(name="subType")
    def sub_type(self) -> Optional[pulumi.Input[str]]:
        """
        Sub-type of address.
        """
        return pulumi.get(self, "sub_type")

    @sub_type.setter
    def sub_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_type", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP address and subnet mask of address.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet name.
        """
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="swVersion")
    def sw_version(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic address matching software version.
        """
        return pulumi.get(self, "sw_version")

    @sw_version.setter
    def sw_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sw_version", value)

    @property
    @pulumi.getter(name="tagDetectionLevel")
    def tag_detection_level(self) -> Optional[pulumi.Input[str]]:
        """
        Tag detection level of dynamic address object.
        """
        return pulumi.get(self, "tag_detection_level")

    @tag_detection_level.setter
    def tag_detection_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_detection_level", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tag type of dynamic address object.
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)

    @property
    @pulumi.getter
    def taggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AddressTaggingArgs']]]]:
        """
        Config object tagging. The structure of `tagging` block is documented below.
        """
        return pulumi.get(self, "taggings")

    @taggings.setter
    def taggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AddressTaggingArgs']]]]):
        pulumi.set(self, "taggings", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        Tenant.
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address visibility in the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[str]]:
        """
        IP address and wildcard netmask.
        """
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard", value)

    @property
    @pulumi.getter(name="wildcardFqdn")
    def wildcard_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Fully Qualified Domain Name with wildcard characters.
        """
        return pulumi.get(self, "wildcard_fqdn")

    @wildcard_fqdn.setter
    def wildcard_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard_fqdn", value)


@pulumi.input_type
class _AddressState:
    def __init__(__self__, *,
                 allow_routing: Optional[pulumi.Input[str]] = None,
                 associated_interface: Optional[pulumi.Input[str]] = None,
                 cache_ttl: Optional[pulumi.Input[int]] = None,
                 clearpass_spt: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 end_mac: Optional[pulumi.Input[str]] = None,
                 epg_name: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input['AddressFssoGroupArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hw_model: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input['AddressListArgs']]]] = None,
                 macaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['AddressMacaddrArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_ip_only: Optional[pulumi.Input[str]] = None,
                 obj_id: Optional[pulumi.Input[str]] = None,
                 obj_tag: Optional[pulumi.Input[str]] = None,
                 obj_type: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 policy_group: Optional[pulumi.Input[str]] = None,
                 route_tag: Optional[pulumi.Input[int]] = None,
                 sdn: Optional[pulumi.Input[str]] = None,
                 sdn_addr_type: Optional[pulumi.Input[str]] = None,
                 sdn_tag: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 start_mac: Optional[pulumi.Input[str]] = None,
                 sub_type: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 subnet_name: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 tag_detection_level: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input['AddressTaggingArgs']]]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None,
                 wildcard_fqdn: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Address resources.
        :param pulumi.Input[str] allow_routing: Enable/disable use of this address in the static route configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] associated_interface: Network interface associated with address.
        :param pulumi.Input[int] cache_ttl: Defines the minimal TTL of individual IP addresses in FQDN cache measured in seconds.
        :param pulumi.Input[str] clearpass_spt: SPT (System Posture Token) value. Valid values: `unknown`, `healthy`, `quarantine`, `checkup`, `transient`, `infected`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] country: IP addresses associated to a specific country.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] end_ip: Final IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] end_mac: Last MAC address in the range.
        :param pulumi.Input[str] epg_name: Endpoint group name.
        :param pulumi.Input[str] fabric_object: Security Fabric global object setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] filter: Match criteria filter.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name address.
        :param pulumi.Input[Sequence[pulumi.Input['AddressFssoGroupArgs']]] fsso_groups: FSSO group(s). The structure of `fsso_group` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hw_model: Dynamic address matching hardware model.
        :param pulumi.Input[str] hw_vendor: Dynamic address matching hardware vendor.
        :param pulumi.Input[str] interface: Name of interface whose IP address is to be used.
        :param pulumi.Input[Sequence[pulumi.Input['AddressListArgs']]] lists: IP address list. The structure of `list` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AddressMacaddrArgs']]] macaddrs: Multiple MAC address ranges. The structure of `macaddr` block is documented below.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] node_ip_only: Enable/disable collection of node addresses only in Kubernetes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] obj_id: Object ID for NSX.
        :param pulumi.Input[str] obj_tag: Tag of dynamic address object.
        :param pulumi.Input[str] obj_type: Object type. Valid values: `ip`, `mac`.
        :param pulumi.Input[str] organization: Organization domain name (Syntax: organization/domain).
        :param pulumi.Input[str] os: Dynamic address matching operating system.
        :param pulumi.Input[str] policy_group: Policy group name.
        :param pulumi.Input[int] route_tag: route-tag address.
        :param pulumi.Input[str] sdn: SDN.
        :param pulumi.Input[str] sdn_addr_type: Type of addresses to collect. Valid values: `private`, `public`, `all`.
        :param pulumi.Input[str] sdn_tag: SDN Tag.
        :param pulumi.Input[str] start_ip: First IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] start_mac: First MAC address in the range.
        :param pulumi.Input[str] sub_type: Sub-type of address.
        :param pulumi.Input[str] subnet: IP address and subnet mask of address.
        :param pulumi.Input[str] subnet_name: Subnet name.
        :param pulumi.Input[str] sw_version: Dynamic address matching software version.
        :param pulumi.Input[str] tag_detection_level: Tag detection level of dynamic address object.
        :param pulumi.Input[str] tag_type: Tag type of dynamic address object.
        :param pulumi.Input[Sequence[pulumi.Input['AddressTaggingArgs']]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[str] tenant: Tenant.
        :param pulumi.Input[str] type: Type of address.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable address visibility in the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wildcard: IP address and wildcard netmask.
        :param pulumi.Input[str] wildcard_fqdn: Fully Qualified Domain Name with wildcard characters.
        """
        if allow_routing is not None:
            pulumi.set(__self__, "allow_routing", allow_routing)
        if associated_interface is not None:
            pulumi.set(__self__, "associated_interface", associated_interface)
        if cache_ttl is not None:
            pulumi.set(__self__, "cache_ttl", cache_ttl)
        if clearpass_spt is not None:
            pulumi.set(__self__, "clearpass_spt", clearpass_spt)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if end_mac is not None:
            pulumi.set(__self__, "end_mac", end_mac)
        if epg_name is not None:
            pulumi.set(__self__, "epg_name", epg_name)
        if fabric_object is not None:
            pulumi.set(__self__, "fabric_object", fabric_object)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if fsso_groups is not None:
            pulumi.set(__self__, "fsso_groups", fsso_groups)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hw_model is not None:
            pulumi.set(__self__, "hw_model", hw_model)
        if hw_vendor is not None:
            pulumi.set(__self__, "hw_vendor", hw_vendor)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if macaddrs is not None:
            pulumi.set(__self__, "macaddrs", macaddrs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_ip_only is not None:
            pulumi.set(__self__, "node_ip_only", node_ip_only)
        if obj_id is not None:
            pulumi.set(__self__, "obj_id", obj_id)
        if obj_tag is not None:
            pulumi.set(__self__, "obj_tag", obj_tag)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if policy_group is not None:
            pulumi.set(__self__, "policy_group", policy_group)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if sdn is not None:
            pulumi.set(__self__, "sdn", sdn)
        if sdn_addr_type is not None:
            pulumi.set(__self__, "sdn_addr_type", sdn_addr_type)
        if sdn_tag is not None:
            pulumi.set(__self__, "sdn_tag", sdn_tag)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if start_mac is not None:
            pulumi.set(__self__, "start_mac", start_mac)
        if sub_type is not None:
            pulumi.set(__self__, "sub_type", sub_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if subnet_name is not None:
            pulumi.set(__self__, "subnet_name", subnet_name)
        if sw_version is not None:
            pulumi.set(__self__, "sw_version", sw_version)
        if tag_detection_level is not None:
            pulumi.set(__self__, "tag_detection_level", tag_detection_level)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)
        if taggings is not None:
            pulumi.set(__self__, "taggings", taggings)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)
        if wildcard_fqdn is not None:
            pulumi.set(__self__, "wildcard_fqdn", wildcard_fqdn)

    @property
    @pulumi.getter(name="allowRouting")
    def allow_routing(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of this address in the static route configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_routing")

    @allow_routing.setter
    def allow_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_routing", value)

    @property
    @pulumi.getter(name="associatedInterface")
    def associated_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Network interface associated with address.
        """
        return pulumi.get(self, "associated_interface")

    @associated_interface.setter
    def associated_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "associated_interface", value)

    @property
    @pulumi.getter(name="cacheTtl")
    def cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Defines the minimal TTL of individual IP addresses in FQDN cache measured in seconds.
        """
        return pulumi.get(self, "cache_ttl")

    @cache_ttl.setter
    def cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_ttl", value)

    @property
    @pulumi.getter(name="clearpassSpt")
    def clearpass_spt(self) -> Optional[pulumi.Input[str]]:
        """
        SPT (System Posture Token) value. Valid values: `unknown`, `healthy`, `quarantine`, `checkup`, `transient`, `infected`.
        """
        return pulumi.get(self, "clearpass_spt")

    @clearpass_spt.setter
    def clearpass_spt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clearpass_spt", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        IP addresses associated to a specific country.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Final IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="endMac")
    def end_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Last MAC address in the range.
        """
        return pulumi.get(self, "end_mac")

    @end_mac.setter
    def end_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_mac", value)

    @property
    @pulumi.getter(name="epgName")
    def epg_name(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint group name.
        """
        return pulumi.get(self, "epg_name")

    @epg_name.setter
    def epg_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epg_name", value)

    @property
    @pulumi.getter(name="fabricObject")
    def fabric_object(self) -> Optional[pulumi.Input[str]]:
        """
        Security Fabric global object setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fabric_object")

    @fabric_object.setter
    def fabric_object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Match criteria filter.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Fully Qualified Domain Name address.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AddressFssoGroupArgs']]]]:
        """
        FSSO group(s). The structure of `fsso_group` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @fsso_groups.setter
    def fsso_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AddressFssoGroupArgs']]]]):
        pulumi.set(self, "fsso_groups", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="hwModel")
    def hw_model(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic address matching hardware model.
        """
        return pulumi.get(self, "hw_model")

    @hw_model.setter
    def hw_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_model", value)

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic address matching hardware vendor.
        """
        return pulumi.get(self, "hw_vendor")

    @hw_vendor.setter
    def hw_vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_vendor", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of interface whose IP address is to be used.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AddressListArgs']]]]:
        """
        IP address list. The structure of `list` block is documented below.
        """
        return pulumi.get(self, "lists")

    @lists.setter
    def lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AddressListArgs']]]]):
        pulumi.set(self, "lists", value)

    @property
    @pulumi.getter
    def macaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AddressMacaddrArgs']]]]:
        """
        Multiple MAC address ranges. The structure of `macaddr` block is documented below.
        """
        return pulumi.get(self, "macaddrs")

    @macaddrs.setter
    def macaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AddressMacaddrArgs']]]]):
        pulumi.set(self, "macaddrs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeIpOnly")
    def node_ip_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable collection of node addresses only in Kubernetes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "node_ip_only")

    @node_ip_only.setter
    def node_ip_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_ip_only", value)

    @property
    @pulumi.getter(name="objId")
    def obj_id(self) -> Optional[pulumi.Input[str]]:
        """
        Object ID for NSX.
        """
        return pulumi.get(self, "obj_id")

    @obj_id.setter
    def obj_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "obj_id", value)

    @property
    @pulumi.getter(name="objTag")
    def obj_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Tag of dynamic address object.
        """
        return pulumi.get(self, "obj_tag")

    @obj_tag.setter
    def obj_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "obj_tag", value)

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[pulumi.Input[str]]:
        """
        Object type. Valid values: `ip`, `mac`.
        """
        return pulumi.get(self, "obj_type")

    @obj_type.setter
    def obj_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "obj_type", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        Organization domain name (Syntax: organization/domain).
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic address matching operating system.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter(name="policyGroup")
    def policy_group(self) -> Optional[pulumi.Input[str]]:
        """
        Policy group name.
        """
        return pulumi.get(self, "policy_group")

    @policy_group.setter
    def policy_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_group", value)

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[pulumi.Input[int]]:
        """
        route-tag address.
        """
        return pulumi.get(self, "route_tag")

    @route_tag.setter
    def route_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_tag", value)

    @property
    @pulumi.getter
    def sdn(self) -> Optional[pulumi.Input[str]]:
        """
        SDN.
        """
        return pulumi.get(self, "sdn")

    @sdn.setter
    def sdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdn", value)

    @property
    @pulumi.getter(name="sdnAddrType")
    def sdn_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of addresses to collect. Valid values: `private`, `public`, `all`.
        """
        return pulumi.get(self, "sdn_addr_type")

    @sdn_addr_type.setter
    def sdn_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdn_addr_type", value)

    @property
    @pulumi.getter(name="sdnTag")
    def sdn_tag(self) -> Optional[pulumi.Input[str]]:
        """
        SDN Tag.
        """
        return pulumi.get(self, "sdn_tag")

    @sdn_tag.setter
    def sdn_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdn_tag", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        First IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter(name="startMac")
    def start_mac(self) -> Optional[pulumi.Input[str]]:
        """
        First MAC address in the range.
        """
        return pulumi.get(self, "start_mac")

    @start_mac.setter
    def start_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_mac", value)

    @property
    @pulumi.getter(name="subType")
    def sub_type(self) -> Optional[pulumi.Input[str]]:
        """
        Sub-type of address.
        """
        return pulumi.get(self, "sub_type")

    @sub_type.setter
    def sub_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_type", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP address and subnet mask of address.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet name.
        """
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="swVersion")
    def sw_version(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic address matching software version.
        """
        return pulumi.get(self, "sw_version")

    @sw_version.setter
    def sw_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sw_version", value)

    @property
    @pulumi.getter(name="tagDetectionLevel")
    def tag_detection_level(self) -> Optional[pulumi.Input[str]]:
        """
        Tag detection level of dynamic address object.
        """
        return pulumi.get(self, "tag_detection_level")

    @tag_detection_level.setter
    def tag_detection_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_detection_level", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tag type of dynamic address object.
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)

    @property
    @pulumi.getter
    def taggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AddressTaggingArgs']]]]:
        """
        Config object tagging. The structure of `tagging` block is documented below.
        """
        return pulumi.get(self, "taggings")

    @taggings.setter
    def taggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AddressTaggingArgs']]]]):
        pulumi.set(self, "taggings", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        Tenant.
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address visibility in the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[str]]:
        """
        IP address and wildcard netmask.
        """
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard", value)

    @property
    @pulumi.getter(name="wildcardFqdn")
    def wildcard_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Fully Qualified Domain Name with wildcard characters.
        """
        return pulumi.get(self, "wildcard_fqdn")

    @wildcard_fqdn.setter
    def wildcard_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard_fqdn", value)


class Address(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_routing: Optional[pulumi.Input[str]] = None,
                 associated_interface: Optional[pulumi.Input[str]] = None,
                 cache_ttl: Optional[pulumi.Input[int]] = None,
                 clearpass_spt: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 end_mac: Optional[pulumi.Input[str]] = None,
                 epg_name: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressFssoGroupArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hw_model: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressListArgs']]]]] = None,
                 macaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressMacaddrArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_ip_only: Optional[pulumi.Input[str]] = None,
                 obj_id: Optional[pulumi.Input[str]] = None,
                 obj_tag: Optional[pulumi.Input[str]] = None,
                 obj_type: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 policy_group: Optional[pulumi.Input[str]] = None,
                 route_tag: Optional[pulumi.Input[int]] = None,
                 sdn: Optional[pulumi.Input[str]] = None,
                 sdn_addr_type: Optional[pulumi.Input[str]] = None,
                 sdn_tag: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 start_mac: Optional[pulumi.Input[str]] = None,
                 sub_type: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 subnet_name: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 tag_detection_level: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressTaggingArgs']]]]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None,
                 wildcard_fqdn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IPv4 addresses.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Address("trname",
            allow_routing="disable",
            associated_interface="port2",
            color=3,
            end_ip="255.255.255.0",
            start_ip="22.1.1.0",
            subnet="22.1.1.0 255.255.255.0",
            type="ipmask",
            visibility="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Address can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/address:Address labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/address:Address labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_routing: Enable/disable use of this address in the static route configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] associated_interface: Network interface associated with address.
        :param pulumi.Input[int] cache_ttl: Defines the minimal TTL of individual IP addresses in FQDN cache measured in seconds.
        :param pulumi.Input[str] clearpass_spt: SPT (System Posture Token) value. Valid values: `unknown`, `healthy`, `quarantine`, `checkup`, `transient`, `infected`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] country: IP addresses associated to a specific country.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] end_ip: Final IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] end_mac: Last MAC address in the range.
        :param pulumi.Input[str] epg_name: Endpoint group name.
        :param pulumi.Input[str] fabric_object: Security Fabric global object setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] filter: Match criteria filter.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressFssoGroupArgs']]]] fsso_groups: FSSO group(s). The structure of `fsso_group` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hw_model: Dynamic address matching hardware model.
        :param pulumi.Input[str] hw_vendor: Dynamic address matching hardware vendor.
        :param pulumi.Input[str] interface: Name of interface whose IP address is to be used.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressListArgs']]]] lists: IP address list. The structure of `list` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressMacaddrArgs']]]] macaddrs: Multiple MAC address ranges. The structure of `macaddr` block is documented below.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] node_ip_only: Enable/disable collection of node addresses only in Kubernetes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] obj_id: Object ID for NSX.
        :param pulumi.Input[str] obj_tag: Tag of dynamic address object.
        :param pulumi.Input[str] obj_type: Object type. Valid values: `ip`, `mac`.
        :param pulumi.Input[str] organization: Organization domain name (Syntax: organization/domain).
        :param pulumi.Input[str] os: Dynamic address matching operating system.
        :param pulumi.Input[str] policy_group: Policy group name.
        :param pulumi.Input[int] route_tag: route-tag address.
        :param pulumi.Input[str] sdn: SDN.
        :param pulumi.Input[str] sdn_addr_type: Type of addresses to collect. Valid values: `private`, `public`, `all`.
        :param pulumi.Input[str] sdn_tag: SDN Tag.
        :param pulumi.Input[str] start_ip: First IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] start_mac: First MAC address in the range.
        :param pulumi.Input[str] sub_type: Sub-type of address.
        :param pulumi.Input[str] subnet: IP address and subnet mask of address.
        :param pulumi.Input[str] subnet_name: Subnet name.
        :param pulumi.Input[str] sw_version: Dynamic address matching software version.
        :param pulumi.Input[str] tag_detection_level: Tag detection level of dynamic address object.
        :param pulumi.Input[str] tag_type: Tag type of dynamic address object.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressTaggingArgs']]]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[str] tenant: Tenant.
        :param pulumi.Input[str] type: Type of address.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable address visibility in the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wildcard: IP address and wildcard netmask.
        :param pulumi.Input[str] wildcard_fqdn: Fully Qualified Domain Name with wildcard characters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AddressArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IPv4 addresses.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Address("trname",
            allow_routing="disable",
            associated_interface="port2",
            color=3,
            end_ip="255.255.255.0",
            start_ip="22.1.1.0",
            subnet="22.1.1.0 255.255.255.0",
            type="ipmask",
            visibility="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Address can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/address:Address labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/address:Address labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param AddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_routing: Optional[pulumi.Input[str]] = None,
                 associated_interface: Optional[pulumi.Input[str]] = None,
                 cache_ttl: Optional[pulumi.Input[int]] = None,
                 clearpass_spt: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 end_mac: Optional[pulumi.Input[str]] = None,
                 epg_name: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressFssoGroupArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hw_model: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressListArgs']]]]] = None,
                 macaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressMacaddrArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_ip_only: Optional[pulumi.Input[str]] = None,
                 obj_id: Optional[pulumi.Input[str]] = None,
                 obj_tag: Optional[pulumi.Input[str]] = None,
                 obj_type: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 policy_group: Optional[pulumi.Input[str]] = None,
                 route_tag: Optional[pulumi.Input[int]] = None,
                 sdn: Optional[pulumi.Input[str]] = None,
                 sdn_addr_type: Optional[pulumi.Input[str]] = None,
                 sdn_tag: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 start_mac: Optional[pulumi.Input[str]] = None,
                 sub_type: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 subnet_name: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 tag_detection_level: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressTaggingArgs']]]]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None,
                 wildcard_fqdn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AddressArgs.__new__(AddressArgs)

            __props__.__dict__["allow_routing"] = allow_routing
            __props__.__dict__["associated_interface"] = associated_interface
            __props__.__dict__["cache_ttl"] = cache_ttl
            __props__.__dict__["clearpass_spt"] = clearpass_spt
            __props__.__dict__["color"] = color
            __props__.__dict__["comment"] = comment
            __props__.__dict__["country"] = country
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["end_ip"] = end_ip
            __props__.__dict__["end_mac"] = end_mac
            __props__.__dict__["epg_name"] = epg_name
            __props__.__dict__["fabric_object"] = fabric_object
            __props__.__dict__["filter"] = filter
            __props__.__dict__["fqdn"] = fqdn
            __props__.__dict__["fsso_groups"] = fsso_groups
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["hw_model"] = hw_model
            __props__.__dict__["hw_vendor"] = hw_vendor
            __props__.__dict__["interface"] = interface
            __props__.__dict__["lists"] = lists
            __props__.__dict__["macaddrs"] = macaddrs
            __props__.__dict__["name"] = name
            __props__.__dict__["node_ip_only"] = node_ip_only
            __props__.__dict__["obj_id"] = obj_id
            __props__.__dict__["obj_tag"] = obj_tag
            __props__.__dict__["obj_type"] = obj_type
            __props__.__dict__["organization"] = organization
            __props__.__dict__["os"] = os
            __props__.__dict__["policy_group"] = policy_group
            __props__.__dict__["route_tag"] = route_tag
            __props__.__dict__["sdn"] = sdn
            __props__.__dict__["sdn_addr_type"] = sdn_addr_type
            __props__.__dict__["sdn_tag"] = sdn_tag
            __props__.__dict__["start_ip"] = start_ip
            __props__.__dict__["start_mac"] = start_mac
            __props__.__dict__["sub_type"] = sub_type
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["subnet_name"] = subnet_name
            __props__.__dict__["sw_version"] = sw_version
            __props__.__dict__["tag_detection_level"] = tag_detection_level
            __props__.__dict__["tag_type"] = tag_type
            __props__.__dict__["taggings"] = taggings
            __props__.__dict__["tenant"] = tenant
            __props__.__dict__["type"] = type
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["visibility"] = visibility
            __props__.__dict__["wildcard"] = wildcard
            __props__.__dict__["wildcard_fqdn"] = wildcard_fqdn
        super(Address, __self__).__init__(
            'fortios:firewall/address:Address',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_routing: Optional[pulumi.Input[str]] = None,
            associated_interface: Optional[pulumi.Input[str]] = None,
            cache_ttl: Optional[pulumi.Input[int]] = None,
            clearpass_spt: Optional[pulumi.Input[str]] = None,
            color: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            country: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            end_ip: Optional[pulumi.Input[str]] = None,
            end_mac: Optional[pulumi.Input[str]] = None,
            epg_name: Optional[pulumi.Input[str]] = None,
            fabric_object: Optional[pulumi.Input[str]] = None,
            filter: Optional[pulumi.Input[str]] = None,
            fqdn: Optional[pulumi.Input[str]] = None,
            fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressFssoGroupArgs']]]]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            hw_model: Optional[pulumi.Input[str]] = None,
            hw_vendor: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressListArgs']]]]] = None,
            macaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressMacaddrArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_ip_only: Optional[pulumi.Input[str]] = None,
            obj_id: Optional[pulumi.Input[str]] = None,
            obj_tag: Optional[pulumi.Input[str]] = None,
            obj_type: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None,
            os: Optional[pulumi.Input[str]] = None,
            policy_group: Optional[pulumi.Input[str]] = None,
            route_tag: Optional[pulumi.Input[int]] = None,
            sdn: Optional[pulumi.Input[str]] = None,
            sdn_addr_type: Optional[pulumi.Input[str]] = None,
            sdn_tag: Optional[pulumi.Input[str]] = None,
            start_ip: Optional[pulumi.Input[str]] = None,
            start_mac: Optional[pulumi.Input[str]] = None,
            sub_type: Optional[pulumi.Input[str]] = None,
            subnet: Optional[pulumi.Input[str]] = None,
            subnet_name: Optional[pulumi.Input[str]] = None,
            sw_version: Optional[pulumi.Input[str]] = None,
            tag_detection_level: Optional[pulumi.Input[str]] = None,
            tag_type: Optional[pulumi.Input[str]] = None,
            taggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressTaggingArgs']]]]] = None,
            tenant: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            visibility: Optional[pulumi.Input[str]] = None,
            wildcard: Optional[pulumi.Input[str]] = None,
            wildcard_fqdn: Optional[pulumi.Input[str]] = None) -> 'Address':
        """
        Get an existing Address resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_routing: Enable/disable use of this address in the static route configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] associated_interface: Network interface associated with address.
        :param pulumi.Input[int] cache_ttl: Defines the minimal TTL of individual IP addresses in FQDN cache measured in seconds.
        :param pulumi.Input[str] clearpass_spt: SPT (System Posture Token) value. Valid values: `unknown`, `healthy`, `quarantine`, `checkup`, `transient`, `infected`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] country: IP addresses associated to a specific country.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] end_ip: Final IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] end_mac: Last MAC address in the range.
        :param pulumi.Input[str] epg_name: Endpoint group name.
        :param pulumi.Input[str] fabric_object: Security Fabric global object setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] filter: Match criteria filter.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressFssoGroupArgs']]]] fsso_groups: FSSO group(s). The structure of `fsso_group` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hw_model: Dynamic address matching hardware model.
        :param pulumi.Input[str] hw_vendor: Dynamic address matching hardware vendor.
        :param pulumi.Input[str] interface: Name of interface whose IP address is to be used.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressListArgs']]]] lists: IP address list. The structure of `list` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressMacaddrArgs']]]] macaddrs: Multiple MAC address ranges. The structure of `macaddr` block is documented below.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] node_ip_only: Enable/disable collection of node addresses only in Kubernetes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] obj_id: Object ID for NSX.
        :param pulumi.Input[str] obj_tag: Tag of dynamic address object.
        :param pulumi.Input[str] obj_type: Object type. Valid values: `ip`, `mac`.
        :param pulumi.Input[str] organization: Organization domain name (Syntax: organization/domain).
        :param pulumi.Input[str] os: Dynamic address matching operating system.
        :param pulumi.Input[str] policy_group: Policy group name.
        :param pulumi.Input[int] route_tag: route-tag address.
        :param pulumi.Input[str] sdn: SDN.
        :param pulumi.Input[str] sdn_addr_type: Type of addresses to collect. Valid values: `private`, `public`, `all`.
        :param pulumi.Input[str] sdn_tag: SDN Tag.
        :param pulumi.Input[str] start_ip: First IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] start_mac: First MAC address in the range.
        :param pulumi.Input[str] sub_type: Sub-type of address.
        :param pulumi.Input[str] subnet: IP address and subnet mask of address.
        :param pulumi.Input[str] subnet_name: Subnet name.
        :param pulumi.Input[str] sw_version: Dynamic address matching software version.
        :param pulumi.Input[str] tag_detection_level: Tag detection level of dynamic address object.
        :param pulumi.Input[str] tag_type: Tag type of dynamic address object.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AddressTaggingArgs']]]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[str] tenant: Tenant.
        :param pulumi.Input[str] type: Type of address.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable address visibility in the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wildcard: IP address and wildcard netmask.
        :param pulumi.Input[str] wildcard_fqdn: Fully Qualified Domain Name with wildcard characters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AddressState.__new__(_AddressState)

        __props__.__dict__["allow_routing"] = allow_routing
        __props__.__dict__["associated_interface"] = associated_interface
        __props__.__dict__["cache_ttl"] = cache_ttl
        __props__.__dict__["clearpass_spt"] = clearpass_spt
        __props__.__dict__["color"] = color
        __props__.__dict__["comment"] = comment
        __props__.__dict__["country"] = country
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["end_ip"] = end_ip
        __props__.__dict__["end_mac"] = end_mac
        __props__.__dict__["epg_name"] = epg_name
        __props__.__dict__["fabric_object"] = fabric_object
        __props__.__dict__["filter"] = filter
        __props__.__dict__["fqdn"] = fqdn
        __props__.__dict__["fsso_groups"] = fsso_groups
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["hw_model"] = hw_model
        __props__.__dict__["hw_vendor"] = hw_vendor
        __props__.__dict__["interface"] = interface
        __props__.__dict__["lists"] = lists
        __props__.__dict__["macaddrs"] = macaddrs
        __props__.__dict__["name"] = name
        __props__.__dict__["node_ip_only"] = node_ip_only
        __props__.__dict__["obj_id"] = obj_id
        __props__.__dict__["obj_tag"] = obj_tag
        __props__.__dict__["obj_type"] = obj_type
        __props__.__dict__["organization"] = organization
        __props__.__dict__["os"] = os
        __props__.__dict__["policy_group"] = policy_group
        __props__.__dict__["route_tag"] = route_tag
        __props__.__dict__["sdn"] = sdn
        __props__.__dict__["sdn_addr_type"] = sdn_addr_type
        __props__.__dict__["sdn_tag"] = sdn_tag
        __props__.__dict__["start_ip"] = start_ip
        __props__.__dict__["start_mac"] = start_mac
        __props__.__dict__["sub_type"] = sub_type
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["subnet_name"] = subnet_name
        __props__.__dict__["sw_version"] = sw_version
        __props__.__dict__["tag_detection_level"] = tag_detection_level
        __props__.__dict__["tag_type"] = tag_type
        __props__.__dict__["taggings"] = taggings
        __props__.__dict__["tenant"] = tenant
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["visibility"] = visibility
        __props__.__dict__["wildcard"] = wildcard
        __props__.__dict__["wildcard_fqdn"] = wildcard_fqdn
        return Address(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowRouting")
    def allow_routing(self) -> pulumi.Output[str]:
        """
        Enable/disable use of this address in the static route configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_routing")

    @property
    @pulumi.getter(name="associatedInterface")
    def associated_interface(self) -> pulumi.Output[Optional[str]]:
        """
        Network interface associated with address.
        """
        return pulumi.get(self, "associated_interface")

    @property
    @pulumi.getter(name="cacheTtl")
    def cache_ttl(self) -> pulumi.Output[Optional[int]]:
        """
        Defines the minimal TTL of individual IP addresses in FQDN cache measured in seconds.
        """
        return pulumi.get(self, "cache_ttl")

    @property
    @pulumi.getter(name="clearpassSpt")
    def clearpass_spt(self) -> pulumi.Output[str]:
        """
        SPT (System Posture Token) value. Valid values: `unknown`, `healthy`, `quarantine`, `checkup`, `transient`, `infected`.
        """
        return pulumi.get(self, "clearpass_spt")

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[Optional[int]]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def country(self) -> pulumi.Output[Optional[str]]:
        """
        IP addresses associated to a specific country.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> pulumi.Output[str]:
        """
        Final IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter(name="endMac")
    def end_mac(self) -> pulumi.Output[str]:
        """
        Last MAC address in the range.
        """
        return pulumi.get(self, "end_mac")

    @property
    @pulumi.getter(name="epgName")
    def epg_name(self) -> pulumi.Output[Optional[str]]:
        """
        Endpoint group name.
        """
        return pulumi.get(self, "epg_name")

    @property
    @pulumi.getter(name="fabricObject")
    def fabric_object(self) -> pulumi.Output[str]:
        """
        Security Fabric global object setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fabric_object")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output[Optional[str]]:
        """
        Match criteria filter.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Output[Optional[str]]:
        """
        Fully Qualified Domain Name address.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> pulumi.Output[Optional[Sequence['outputs.AddressFssoGroup']]]:
        """
        FSSO group(s). The structure of `fsso_group` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="hwModel")
    def hw_model(self) -> pulumi.Output[Optional[str]]:
        """
        Dynamic address matching hardware model.
        """
        return pulumi.get(self, "hw_model")

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> pulumi.Output[Optional[str]]:
        """
        Dynamic address matching hardware vendor.
        """
        return pulumi.get(self, "hw_vendor")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[Optional[str]]:
        """
        Name of interface whose IP address is to be used.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def lists(self) -> pulumi.Output[Sequence['outputs.AddressList']]:
        """
        IP address list. The structure of `list` block is documented below.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def macaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.AddressMacaddr']]]:
        """
        Multiple MAC address ranges. The structure of `macaddr` block is documented below.
        """
        return pulumi.get(self, "macaddrs")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeIpOnly")
    def node_ip_only(self) -> pulumi.Output[str]:
        """
        Enable/disable collection of node addresses only in Kubernetes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "node_ip_only")

    @property
    @pulumi.getter(name="objId")
    def obj_id(self) -> pulumi.Output[Optional[str]]:
        """
        Object ID for NSX.
        """
        return pulumi.get(self, "obj_id")

    @property
    @pulumi.getter(name="objTag")
    def obj_tag(self) -> pulumi.Output[Optional[str]]:
        """
        Tag of dynamic address object.
        """
        return pulumi.get(self, "obj_tag")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> pulumi.Output[str]:
        """
        Object type. Valid values: `ip`, `mac`.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[Optional[str]]:
        """
        Organization domain name (Syntax: organization/domain).
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def os(self) -> pulumi.Output[Optional[str]]:
        """
        Dynamic address matching operating system.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="policyGroup")
    def policy_group(self) -> pulumi.Output[Optional[str]]:
        """
        Policy group name.
        """
        return pulumi.get(self, "policy_group")

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> pulumi.Output[Optional[int]]:
        """
        route-tag address.
        """
        return pulumi.get(self, "route_tag")

    @property
    @pulumi.getter
    def sdn(self) -> pulumi.Output[Optional[str]]:
        """
        SDN.
        """
        return pulumi.get(self, "sdn")

    @property
    @pulumi.getter(name="sdnAddrType")
    def sdn_addr_type(self) -> pulumi.Output[str]:
        """
        Type of addresses to collect. Valid values: `private`, `public`, `all`.
        """
        return pulumi.get(self, "sdn_addr_type")

    @property
    @pulumi.getter(name="sdnTag")
    def sdn_tag(self) -> pulumi.Output[Optional[str]]:
        """
        SDN Tag.
        """
        return pulumi.get(self, "sdn_tag")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> pulumi.Output[str]:
        """
        First IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter(name="startMac")
    def start_mac(self) -> pulumi.Output[str]:
        """
        First MAC address in the range.
        """
        return pulumi.get(self, "start_mac")

    @property
    @pulumi.getter(name="subType")
    def sub_type(self) -> pulumi.Output[str]:
        """
        Sub-type of address.
        """
        return pulumi.get(self, "sub_type")

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[str]:
        """
        IP address and subnet mask of address.
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> pulumi.Output[Optional[str]]:
        """
        Subnet name.
        """
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="swVersion")
    def sw_version(self) -> pulumi.Output[Optional[str]]:
        """
        Dynamic address matching software version.
        """
        return pulumi.get(self, "sw_version")

    @property
    @pulumi.getter(name="tagDetectionLevel")
    def tag_detection_level(self) -> pulumi.Output[Optional[str]]:
        """
        Tag detection level of dynamic address object.
        """
        return pulumi.get(self, "tag_detection_level")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> pulumi.Output[Optional[str]]:
        """
        Tag type of dynamic address object.
        """
        return pulumi.get(self, "tag_type")

    @property
    @pulumi.getter
    def taggings(self) -> pulumi.Output[Optional[Sequence['outputs.AddressTagging']]]:
        """
        Config object tagging. The structure of `tagging` block is documented below.
        """
        return pulumi.get(self, "taggings")

    @property
    @pulumi.getter
    def tenant(self) -> pulumi.Output[Optional[str]]:
        """
        Tenant.
        """
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of address.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable address visibility in the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "visibility")

    @property
    @pulumi.getter
    def wildcard(self) -> pulumi.Output[str]:
        """
        IP address and wildcard netmask.
        """
        return pulumi.get(self, "wildcard")

    @property
    @pulumi.getter(name="wildcardFqdn")
    def wildcard_fqdn(self) -> pulumi.Output[Optional[str]]:
        """
        Fully Qualified Domain Name with wildcard characters.
        """
        return pulumi.get(self, "wildcard_fqdn")

