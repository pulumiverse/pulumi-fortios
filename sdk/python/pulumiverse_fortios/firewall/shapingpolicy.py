# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ShapingpolicyArgs', 'Shapingpolicy']

@pulumi.input_type
class ShapingpolicyArgs:
    def __init__(__self__, *,
                 dstintfs: pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstintfArgs']]],
                 srcaddrs: pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddrArgs']]],
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppCategoryArgs']]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppGroupArgs']]]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyApplicationArgs']]]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 cos: Optional[pulumi.Input[str]] = None,
                 cos_mask: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddr6Args']]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddrArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyGroupArgs']]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceNameArgs']]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomGroupArgs']]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomArgs']]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcGroupArgs']]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcIdArgs']]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcNameArgs']]]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyServiceArgs']]]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddr6Args']]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcintfArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 traffic_type: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUrlCategoryArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUserArgs']]]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Shapingpolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstintfArgs']]] dstintfs: One or more outgoing (egress) interfaces. The structure of `dstintf` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddrArgs']]] srcaddrs: IPv4 source address and address group names. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppCategoryArgs']]] app_categories: IDs of one or more application categories that this shaper applies application control traffic shaping to. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppGroupArgs']]] app_groups: One or more application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyApplicationArgs']]] applications: IDs of one or more applications that this shaper applies application control traffic shaping to. The structure of `application` block is documented below.
        :param pulumi.Input[int] class_id: Traffic class ID.
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[str] cos: VLAN CoS bit pattern.
        :param pulumi.Input[str] cos_mask: VLAN CoS evaluated bits.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddr6Args']]] dstaddr6s: IPv6 destination address and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddrArgs']]] dstaddrs: IPv4 destination address and address group names. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Shaping policy ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyGroupArgs']]] groups: Apply this traffic shaping policy to user groups that have authenticated with the FortiGate. The structure of `groups` block is documented below.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomArgs']]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceGroupArgs']]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceIdArgs']]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceNameArgs']]] internet_service_names: Internet Service ID. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomGroupArgs']]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomArgs']]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcGroupArgs']]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcIdArgs']]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcNameArgs']]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] ip_version: Apply this traffic shaping policy to IPv4 or IPv6 traffic. Valid values: `4`, `6`.
        :param pulumi.Input[str] name: Shaping policy name.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper to apply with this policy.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyServiceArgs']]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddr6Args']]] srcaddr6s: IPv6 source address and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcintfArgs']]] srcintfs: One or more incoming (ingress) interfaces. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] status: Enable/disable this traffic shaping policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: ToS (Type of Service) value used for comparison.
        :param pulumi.Input[str] tos_mask: Non-zero bit positions are used for comparison while zero bit positions are ignored.
        :param pulumi.Input[str] tos_negate: Enable negated TOS match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper to apply to traffic forwarded by the firewall policy.
        :param pulumi.Input[str] traffic_shaper_reverse: Traffic shaper to apply to response traffic received by the firewall policy.
        :param pulumi.Input[str] traffic_type: Traffic type. Valid values: `forwarding`, `local-in`, `local-out`.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUrlCategoryArgs']]] url_categories: IDs of one or more FortiGuard Web Filtering categories that this shaper applies traffic shaping to. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUserArgs']]] users: Apply this traffic shaping policy to individual users that have authenticated with the FortiGate. The structure of `users` block is documented below.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "dstintfs", dstintfs)
        pulumi.set(__self__, "srcaddrs", srcaddrs)
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_groups is not None:
            pulumi.set(__self__, "app_groups", app_groups)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cos is not None:
            pulumi.set(__self__, "cos", cos)
        if cos_mask is not None:
            pulumi.set(__self__, "cos_mask", cos_mask)
        if diffserv_forward is not None:
            pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse is not None:
            pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward is not None:
            pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev is not None:
            pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service_src_custom_groups", internet_service_src_custom_groups)
        if internet_service_src_customs is not None:
            pulumi.set(__self__, "internet_service_src_customs", internet_service_src_customs)
        if internet_service_src_groups is not None:
            pulumi.set(__self__, "internet_service_src_groups", internet_service_src_groups)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names is not None:
            pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if tos_negate is not None:
            pulumi.set(__self__, "tos_negate", tos_negate)
        if traffic_shaper is not None:
            pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse is not None:
            pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstintfArgs']]]:
        """
        One or more outgoing (egress) interfaces. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstintfArgs']]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddrArgs']]]:
        """
        IPv4 source address and address group names. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddrArgs']]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppCategoryArgs']]]]:
        """
        IDs of one or more application categories that this shaper applies application control traffic shaping to. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppGroupArgs']]]]:
        """
        One or more application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @app_groups.setter
    def app_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppGroupArgs']]]]):
        pulumi.set(self, "app_groups", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyApplicationArgs']]]]:
        """
        IDs of one or more applications that this shaper applies application control traffic shaping to. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[pulumi.Input[int]]:
        """
        Traffic class ID.
        """
        return pulumi.get(self, "class_id")

    @class_id.setter
    def class_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "class_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def cos(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN CoS bit pattern.
        """
        return pulumi.get(self, "cos")

    @cos.setter
    def cos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos", value)

    @property
    @pulumi.getter(name="cosMask")
    def cos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN CoS evaluated bits.
        """
        return pulumi.get(self, "cos_mask")

    @cos_mask.setter
    def cos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_mask", value)

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_forward")

    @diffserv_forward.setter
    def diffserv_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_forward", value)

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_reverse")

    @diffserv_reverse.setter
    def diffserv_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_reverse", value)

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @diffservcode_forward.setter
    def diffservcode_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_forward", value)

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @diffservcode_rev.setter
    def diffservcode_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_rev", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddr6Args']]]]:
        """
        IPv6 destination address and address group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddrArgs']]]]:
        """
        IPv4 destination address and address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Shaping policy ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyGroupArgs']]]]:
        """
        Apply this traffic shaping policy to user groups that have authenticated with the FortiGate. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomArgs']]]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceGroupArgs']]]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceIdArgs']]]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceNameArgs']]]]:
        """
        Internet Service ID. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomGroupArgs']]]]:
        """
        Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_custom_groups")

    @internet_service_src_custom_groups.setter
    def internet_service_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomArgs']]]]:
        """
        Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_customs")

    @internet_service_src_customs.setter
    def internet_service_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomArgs']]]]):
        pulumi.set(self, "internet_service_src_customs", value)

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcGroupArgs']]]]:
        """
        Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_groups")

    @internet_service_src_groups.setter
    def internet_service_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcIdArgs']]]]:
        """
        Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcIdArgs']]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcNameArgs']]]]:
        """
        Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_names")

    @internet_service_src_names.setter
    def internet_service_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcNameArgs']]]]):
        pulumi.set(self, "internet_service_src_names", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        Apply this traffic shaping policy to IPv4 or IPv6 traffic. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Shaping policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Per-IP traffic shaper to apply with this policy.
        """
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyServiceArgs']]]]:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddr6Args']]]]:
        """
        IPv6 source address and address group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcintfArgs']]]]:
        """
        One or more incoming (ingress) interfaces. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this traffic shaping policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        """
        ToS (Type of Service) value used for comparison.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Non-zero bit positions are used for comparison while zero bit positions are ignored.
        """
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter(name="tosNegate")
    def tos_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable negated TOS match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tos_negate")

    @tos_negate.setter
    def tos_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_negate", value)

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper to apply to traffic forwarded by the firewall policy.
        """
        return pulumi.get(self, "traffic_shaper")

    @traffic_shaper.setter
    def traffic_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper", value)

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper to apply to response traffic received by the firewall policy.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @traffic_shaper_reverse.setter
    def traffic_shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper_reverse", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic type. Valid values: `forwarding`, `local-in`, `local-out`.
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_type", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUrlCategoryArgs']]]]:
        """
        IDs of one or more FortiGuard Web Filtering categories that this shaper applies traffic shaping to. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUrlCategoryArgs']]]]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUserArgs']]]]:
        """
        Apply this traffic shaping policy to individual users that have authenticated with the FortiGate. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ShapingpolicyState:
    def __init__(__self__, *,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppCategoryArgs']]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppGroupArgs']]]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyApplicationArgs']]]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 cos: Optional[pulumi.Input[str]] = None,
                 cos_mask: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddr6Args']]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddrArgs']]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstintfArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyGroupArgs']]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceNameArgs']]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomGroupArgs']]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomArgs']]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcGroupArgs']]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcIdArgs']]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcNameArgs']]]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyServiceArgs']]]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddr6Args']]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddrArgs']]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcintfArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 traffic_type: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUrlCategoryArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUserArgs']]]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Shapingpolicy resources.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppCategoryArgs']]] app_categories: IDs of one or more application categories that this shaper applies application control traffic shaping to. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppGroupArgs']]] app_groups: One or more application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyApplicationArgs']]] applications: IDs of one or more applications that this shaper applies application control traffic shaping to. The structure of `application` block is documented below.
        :param pulumi.Input[int] class_id: Traffic class ID.
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[str] cos: VLAN CoS bit pattern.
        :param pulumi.Input[str] cos_mask: VLAN CoS evaluated bits.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddr6Args']]] dstaddr6s: IPv6 destination address and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddrArgs']]] dstaddrs: IPv4 destination address and address group names. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstintfArgs']]] dstintfs: One or more outgoing (egress) interfaces. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Shaping policy ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyGroupArgs']]] groups: Apply this traffic shaping policy to user groups that have authenticated with the FortiGate. The structure of `groups` block is documented below.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomArgs']]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceGroupArgs']]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceIdArgs']]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceNameArgs']]] internet_service_names: Internet Service ID. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomGroupArgs']]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomArgs']]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcGroupArgs']]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcIdArgs']]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcNameArgs']]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] ip_version: Apply this traffic shaping policy to IPv4 or IPv6 traffic. Valid values: `4`, `6`.
        :param pulumi.Input[str] name: Shaping policy name.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper to apply with this policy.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyServiceArgs']]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddr6Args']]] srcaddr6s: IPv6 source address and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddrArgs']]] srcaddrs: IPv4 source address and address group names. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcintfArgs']]] srcintfs: One or more incoming (ingress) interfaces. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] status: Enable/disable this traffic shaping policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: ToS (Type of Service) value used for comparison.
        :param pulumi.Input[str] tos_mask: Non-zero bit positions are used for comparison while zero bit positions are ignored.
        :param pulumi.Input[str] tos_negate: Enable negated TOS match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper to apply to traffic forwarded by the firewall policy.
        :param pulumi.Input[str] traffic_shaper_reverse: Traffic shaper to apply to response traffic received by the firewall policy.
        :param pulumi.Input[str] traffic_type: Traffic type. Valid values: `forwarding`, `local-in`, `local-out`.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUrlCategoryArgs']]] url_categories: IDs of one or more FortiGuard Web Filtering categories that this shaper applies traffic shaping to. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUserArgs']]] users: Apply this traffic shaping policy to individual users that have authenticated with the FortiGate. The structure of `users` block is documented below.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_groups is not None:
            pulumi.set(__self__, "app_groups", app_groups)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cos is not None:
            pulumi.set(__self__, "cos", cos)
        if cos_mask is not None:
            pulumi.set(__self__, "cos_mask", cos_mask)
        if diffserv_forward is not None:
            pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse is not None:
            pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward is not None:
            pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev is not None:
            pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service_src_custom_groups", internet_service_src_custom_groups)
        if internet_service_src_customs is not None:
            pulumi.set(__self__, "internet_service_src_customs", internet_service_src_customs)
        if internet_service_src_groups is not None:
            pulumi.set(__self__, "internet_service_src_groups", internet_service_src_groups)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names is not None:
            pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if tos_negate is not None:
            pulumi.set(__self__, "tos_negate", tos_negate)
        if traffic_shaper is not None:
            pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse is not None:
            pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppCategoryArgs']]]]:
        """
        IDs of one or more application categories that this shaper applies application control traffic shaping to. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppGroupArgs']]]]:
        """
        One or more application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @app_groups.setter
    def app_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyAppGroupArgs']]]]):
        pulumi.set(self, "app_groups", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyApplicationArgs']]]]:
        """
        IDs of one or more applications that this shaper applies application control traffic shaping to. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[pulumi.Input[int]]:
        """
        Traffic class ID.
        """
        return pulumi.get(self, "class_id")

    @class_id.setter
    def class_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "class_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def cos(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN CoS bit pattern.
        """
        return pulumi.get(self, "cos")

    @cos.setter
    def cos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos", value)

    @property
    @pulumi.getter(name="cosMask")
    def cos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN CoS evaluated bits.
        """
        return pulumi.get(self, "cos_mask")

    @cos_mask.setter
    def cos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_mask", value)

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_forward")

    @diffserv_forward.setter
    def diffserv_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_forward", value)

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_reverse")

    @diffserv_reverse.setter
    def diffserv_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_reverse", value)

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @diffservcode_forward.setter
    def diffservcode_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_forward", value)

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @diffservcode_rev.setter
    def diffservcode_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_rev", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddr6Args']]]]:
        """
        IPv6 destination address and address group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddrArgs']]]]:
        """
        IPv4 destination address and address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstintfArgs']]]]:
        """
        One or more outgoing (egress) interfaces. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyDstintfArgs']]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Shaping policy ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyGroupArgs']]]]:
        """
        Apply this traffic shaping policy to user groups that have authenticated with the FortiGate. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomArgs']]]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceGroupArgs']]]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceIdArgs']]]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceNameArgs']]]]:
        """
        Internet Service ID. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomGroupArgs']]]]:
        """
        Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_custom_groups")

    @internet_service_src_custom_groups.setter
    def internet_service_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomArgs']]]]:
        """
        Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_customs")

    @internet_service_src_customs.setter
    def internet_service_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcCustomArgs']]]]):
        pulumi.set(self, "internet_service_src_customs", value)

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcGroupArgs']]]]:
        """
        Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_groups")

    @internet_service_src_groups.setter
    def internet_service_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcIdArgs']]]]:
        """
        Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcIdArgs']]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcNameArgs']]]]:
        """
        Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_names")

    @internet_service_src_names.setter
    def internet_service_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyInternetServiceSrcNameArgs']]]]):
        pulumi.set(self, "internet_service_src_names", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        Apply this traffic shaping policy to IPv4 or IPv6 traffic. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Shaping policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Per-IP traffic shaper to apply with this policy.
        """
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyServiceArgs']]]]:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddr6Args']]]]:
        """
        IPv6 source address and address group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddrArgs']]]]:
        """
        IPv4 source address and address group names. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcintfArgs']]]]:
        """
        One or more incoming (ingress) interfaces. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicySrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this traffic shaping policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        """
        ToS (Type of Service) value used for comparison.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Non-zero bit positions are used for comparison while zero bit positions are ignored.
        """
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter(name="tosNegate")
    def tos_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable negated TOS match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tos_negate")

    @tos_negate.setter
    def tos_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_negate", value)

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper to apply to traffic forwarded by the firewall policy.
        """
        return pulumi.get(self, "traffic_shaper")

    @traffic_shaper.setter
    def traffic_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper", value)

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper to apply to response traffic received by the firewall policy.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @traffic_shaper_reverse.setter
    def traffic_shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper_reverse", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic type. Valid values: `forwarding`, `local-in`, `local-out`.
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_type", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUrlCategoryArgs']]]]:
        """
        IDs of one or more FortiGuard Web Filtering categories that this shaper applies traffic shaping to. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUrlCategoryArgs']]]]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUserArgs']]]]:
        """
        Apply this traffic shaping policy to individual users that have authenticated with the FortiGate. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ShapingpolicyUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Shapingpolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyAppCategoryArgs']]]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyAppGroupArgs']]]]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyApplicationArgs']]]]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 cos: Optional[pulumi.Input[str]] = None,
                 cos_mask: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstaddr6Args']]]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstaddrArgs']]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstintfArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyGroupArgs']]]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceCustomGroupArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceGroupArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceIdArgs']]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceNameArgs']]]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcCustomArgs']]]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcGroupArgs']]]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcIdArgs']]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcNameArgs']]]]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyServiceArgs']]]]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcaddr6Args']]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcaddrArgs']]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcintfArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 traffic_type: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyUrlCategoryArgs']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyUserArgs']]]]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure shaping policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Shapingpolicy("trname",
            class_id=0,
            diffserv_forward="disable",
            diffserv_reverse="disable",
            diffservcode_forward="000000",
            diffservcode_rev="000000",
            dstaddrs=[fortios.firewall.ShapingpolicyDstaddrArgs(
                name="all",
            )],
            dstintfs=[fortios.firewall.ShapingpolicyDstintfArgs(
                name="port4",
            )],
            fosid=1,
            internet_service="disable",
            internet_service_src="disable",
            ip_version="4",
            services=[fortios.firewall.ShapingpolicyServiceArgs(
                name="ALL",
            )],
            srcaddrs=[fortios.firewall.ShapingpolicySrcaddrArgs(
                name="all",
            )],
            status="enable",
            tos="0x00",
            tos_mask="0x00",
            tos_negate="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall ShapingPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/shapingpolicy:Shapingpolicy labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/shapingpolicy:Shapingpolicy labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyAppCategoryArgs']]]] app_categories: IDs of one or more application categories that this shaper applies application control traffic shaping to. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyAppGroupArgs']]]] app_groups: One or more application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyApplicationArgs']]]] applications: IDs of one or more applications that this shaper applies application control traffic shaping to. The structure of `application` block is documented below.
        :param pulumi.Input[int] class_id: Traffic class ID.
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[str] cos: VLAN CoS bit pattern.
        :param pulumi.Input[str] cos_mask: VLAN CoS evaluated bits.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstaddr6Args']]]] dstaddr6s: IPv6 destination address and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstaddrArgs']]]] dstaddrs: IPv4 destination address and address group names. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstintfArgs']]]] dstintfs: One or more outgoing (egress) interfaces. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Shaping policy ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyGroupArgs']]]] groups: Apply this traffic shaping policy to user groups that have authenticated with the FortiGate. The structure of `groups` block is documented below.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceCustomGroupArgs']]]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceCustomArgs']]]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceGroupArgs']]]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceIdArgs']]]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceNameArgs']]]] internet_service_names: Internet Service ID. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcCustomGroupArgs']]]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcCustomArgs']]]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcGroupArgs']]]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcIdArgs']]]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcNameArgs']]]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] ip_version: Apply this traffic shaping policy to IPv4 or IPv6 traffic. Valid values: `4`, `6`.
        :param pulumi.Input[str] name: Shaping policy name.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper to apply with this policy.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyServiceArgs']]]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcaddr6Args']]]] srcaddr6s: IPv6 source address and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcaddrArgs']]]] srcaddrs: IPv4 source address and address group names. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcintfArgs']]]] srcintfs: One or more incoming (ingress) interfaces. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] status: Enable/disable this traffic shaping policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: ToS (Type of Service) value used for comparison.
        :param pulumi.Input[str] tos_mask: Non-zero bit positions are used for comparison while zero bit positions are ignored.
        :param pulumi.Input[str] tos_negate: Enable negated TOS match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper to apply to traffic forwarded by the firewall policy.
        :param pulumi.Input[str] traffic_shaper_reverse: Traffic shaper to apply to response traffic received by the firewall policy.
        :param pulumi.Input[str] traffic_type: Traffic type. Valid values: `forwarding`, `local-in`, `local-out`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyUrlCategoryArgs']]]] url_categories: IDs of one or more FortiGuard Web Filtering categories that this shaper applies traffic shaping to. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyUserArgs']]]] users: Apply this traffic shaping policy to individual users that have authenticated with the FortiGate. The structure of `users` block is documented below.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ShapingpolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure shaping policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Shapingpolicy("trname",
            class_id=0,
            diffserv_forward="disable",
            diffserv_reverse="disable",
            diffservcode_forward="000000",
            diffservcode_rev="000000",
            dstaddrs=[fortios.firewall.ShapingpolicyDstaddrArgs(
                name="all",
            )],
            dstintfs=[fortios.firewall.ShapingpolicyDstintfArgs(
                name="port4",
            )],
            fosid=1,
            internet_service="disable",
            internet_service_src="disable",
            ip_version="4",
            services=[fortios.firewall.ShapingpolicyServiceArgs(
                name="ALL",
            )],
            srcaddrs=[fortios.firewall.ShapingpolicySrcaddrArgs(
                name="all",
            )],
            status="enable",
            tos="0x00",
            tos_mask="0x00",
            tos_negate="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall ShapingPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/shapingpolicy:Shapingpolicy labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/shapingpolicy:Shapingpolicy labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ShapingpolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ShapingpolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyAppCategoryArgs']]]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyAppGroupArgs']]]]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyApplicationArgs']]]]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 cos: Optional[pulumi.Input[str]] = None,
                 cos_mask: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstaddr6Args']]]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstaddrArgs']]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstintfArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyGroupArgs']]]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceCustomGroupArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceGroupArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceIdArgs']]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceNameArgs']]]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcCustomArgs']]]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcGroupArgs']]]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcIdArgs']]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcNameArgs']]]]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyServiceArgs']]]]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcaddr6Args']]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcaddrArgs']]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcintfArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 traffic_type: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyUrlCategoryArgs']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyUserArgs']]]]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ShapingpolicyArgs.__new__(ShapingpolicyArgs)

            __props__.__dict__["app_categories"] = app_categories
            __props__.__dict__["app_groups"] = app_groups
            __props__.__dict__["applications"] = applications
            __props__.__dict__["class_id"] = class_id
            __props__.__dict__["comment"] = comment
            __props__.__dict__["cos"] = cos
            __props__.__dict__["cos_mask"] = cos_mask
            __props__.__dict__["diffserv_forward"] = diffserv_forward
            __props__.__dict__["diffserv_reverse"] = diffserv_reverse
            __props__.__dict__["diffservcode_forward"] = diffservcode_forward
            __props__.__dict__["diffservcode_rev"] = diffservcode_rev
            __props__.__dict__["dstaddr6s"] = dstaddr6s
            __props__.__dict__["dstaddrs"] = dstaddrs
            if dstintfs is None and not opts.urn:
                raise TypeError("Missing required property 'dstintfs'")
            __props__.__dict__["dstintfs"] = dstintfs
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["groups"] = groups
            __props__.__dict__["internet_service"] = internet_service
            __props__.__dict__["internet_service_custom_groups"] = internet_service_custom_groups
            __props__.__dict__["internet_service_customs"] = internet_service_customs
            __props__.__dict__["internet_service_groups"] = internet_service_groups
            __props__.__dict__["internet_service_ids"] = internet_service_ids
            __props__.__dict__["internet_service_names"] = internet_service_names
            __props__.__dict__["internet_service_src"] = internet_service_src
            __props__.__dict__["internet_service_src_custom_groups"] = internet_service_src_custom_groups
            __props__.__dict__["internet_service_src_customs"] = internet_service_src_customs
            __props__.__dict__["internet_service_src_groups"] = internet_service_src_groups
            __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
            __props__.__dict__["internet_service_src_names"] = internet_service_src_names
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["name"] = name
            __props__.__dict__["per_ip_shaper"] = per_ip_shaper
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["services"] = services
            __props__.__dict__["srcaddr6s"] = srcaddr6s
            if srcaddrs is None and not opts.urn:
                raise TypeError("Missing required property 'srcaddrs'")
            __props__.__dict__["srcaddrs"] = srcaddrs
            __props__.__dict__["srcintfs"] = srcintfs
            __props__.__dict__["status"] = status
            __props__.__dict__["tos"] = tos
            __props__.__dict__["tos_mask"] = tos_mask
            __props__.__dict__["tos_negate"] = tos_negate
            __props__.__dict__["traffic_shaper"] = traffic_shaper
            __props__.__dict__["traffic_shaper_reverse"] = traffic_shaper_reverse
            __props__.__dict__["traffic_type"] = traffic_type
            __props__.__dict__["url_categories"] = url_categories
            __props__.__dict__["users"] = users
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
        super(Shapingpolicy, __self__).__init__(
            'fortios:firewall/shapingpolicy:Shapingpolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyAppCategoryArgs']]]]] = None,
            app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyAppGroupArgs']]]]] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyApplicationArgs']]]]] = None,
            class_id: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            cos: Optional[pulumi.Input[str]] = None,
            cos_mask: Optional[pulumi.Input[str]] = None,
            diffserv_forward: Optional[pulumi.Input[str]] = None,
            diffserv_reverse: Optional[pulumi.Input[str]] = None,
            diffservcode_forward: Optional[pulumi.Input[str]] = None,
            diffservcode_rev: Optional[pulumi.Input[str]] = None,
            dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstaddr6Args']]]]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstaddrArgs']]]]] = None,
            dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstintfArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyGroupArgs']]]]] = None,
            internet_service: Optional[pulumi.Input[str]] = None,
            internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceCustomGroupArgs']]]]] = None,
            internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceCustomArgs']]]]] = None,
            internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceGroupArgs']]]]] = None,
            internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceIdArgs']]]]] = None,
            internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceNameArgs']]]]] = None,
            internet_service_src: Optional[pulumi.Input[str]] = None,
            internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
            internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcCustomArgs']]]]] = None,
            internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcGroupArgs']]]]] = None,
            internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcIdArgs']]]]] = None,
            internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcNameArgs']]]]] = None,
            ip_version: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            per_ip_shaper: Optional[pulumi.Input[str]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyServiceArgs']]]]] = None,
            srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcaddr6Args']]]]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcaddrArgs']]]]] = None,
            srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcintfArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tos: Optional[pulumi.Input[str]] = None,
            tos_mask: Optional[pulumi.Input[str]] = None,
            tos_negate: Optional[pulumi.Input[str]] = None,
            traffic_shaper: Optional[pulumi.Input[str]] = None,
            traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
            traffic_type: Optional[pulumi.Input[str]] = None,
            url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyUrlCategoryArgs']]]]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyUserArgs']]]]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Shapingpolicy':
        """
        Get an existing Shapingpolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyAppCategoryArgs']]]] app_categories: IDs of one or more application categories that this shaper applies application control traffic shaping to. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyAppGroupArgs']]]] app_groups: One or more application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyApplicationArgs']]]] applications: IDs of one or more applications that this shaper applies application control traffic shaping to. The structure of `application` block is documented below.
        :param pulumi.Input[int] class_id: Traffic class ID.
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[str] cos: VLAN CoS bit pattern.
        :param pulumi.Input[str] cos_mask: VLAN CoS evaluated bits.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstaddr6Args']]]] dstaddr6s: IPv6 destination address and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstaddrArgs']]]] dstaddrs: IPv4 destination address and address group names. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyDstintfArgs']]]] dstintfs: One or more outgoing (egress) interfaces. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Shaping policy ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyGroupArgs']]]] groups: Apply this traffic shaping policy to user groups that have authenticated with the FortiGate. The structure of `groups` block is documented below.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceCustomGroupArgs']]]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceCustomArgs']]]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceGroupArgs']]]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceIdArgs']]]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceNameArgs']]]] internet_service_names: Internet Service ID. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcCustomGroupArgs']]]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcCustomArgs']]]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcGroupArgs']]]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcIdArgs']]]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyInternetServiceSrcNameArgs']]]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] ip_version: Apply this traffic shaping policy to IPv4 or IPv6 traffic. Valid values: `4`, `6`.
        :param pulumi.Input[str] name: Shaping policy name.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper to apply with this policy.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyServiceArgs']]]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcaddr6Args']]]] srcaddr6s: IPv6 source address and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcaddrArgs']]]] srcaddrs: IPv4 source address and address group names. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicySrcintfArgs']]]] srcintfs: One or more incoming (ingress) interfaces. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] status: Enable/disable this traffic shaping policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: ToS (Type of Service) value used for comparison.
        :param pulumi.Input[str] tos_mask: Non-zero bit positions are used for comparison while zero bit positions are ignored.
        :param pulumi.Input[str] tos_negate: Enable negated TOS match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper to apply to traffic forwarded by the firewall policy.
        :param pulumi.Input[str] traffic_shaper_reverse: Traffic shaper to apply to response traffic received by the firewall policy.
        :param pulumi.Input[str] traffic_type: Traffic type. Valid values: `forwarding`, `local-in`, `local-out`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyUrlCategoryArgs']]]] url_categories: IDs of one or more FortiGuard Web Filtering categories that this shaper applies traffic shaping to. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ShapingpolicyUserArgs']]]] users: Apply this traffic shaping policy to individual users that have authenticated with the FortiGate. The structure of `users` block is documented below.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ShapingpolicyState.__new__(_ShapingpolicyState)

        __props__.__dict__["app_categories"] = app_categories
        __props__.__dict__["app_groups"] = app_groups
        __props__.__dict__["applications"] = applications
        __props__.__dict__["class_id"] = class_id
        __props__.__dict__["comment"] = comment
        __props__.__dict__["cos"] = cos
        __props__.__dict__["cos_mask"] = cos_mask
        __props__.__dict__["diffserv_forward"] = diffserv_forward
        __props__.__dict__["diffserv_reverse"] = diffserv_reverse
        __props__.__dict__["diffservcode_forward"] = diffservcode_forward
        __props__.__dict__["diffservcode_rev"] = diffservcode_rev
        __props__.__dict__["dstaddr6s"] = dstaddr6s
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dstintfs"] = dstintfs
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["groups"] = groups
        __props__.__dict__["internet_service"] = internet_service
        __props__.__dict__["internet_service_custom_groups"] = internet_service_custom_groups
        __props__.__dict__["internet_service_customs"] = internet_service_customs
        __props__.__dict__["internet_service_groups"] = internet_service_groups
        __props__.__dict__["internet_service_ids"] = internet_service_ids
        __props__.__dict__["internet_service_names"] = internet_service_names
        __props__.__dict__["internet_service_src"] = internet_service_src
        __props__.__dict__["internet_service_src_custom_groups"] = internet_service_src_custom_groups
        __props__.__dict__["internet_service_src_customs"] = internet_service_src_customs
        __props__.__dict__["internet_service_src_groups"] = internet_service_src_groups
        __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
        __props__.__dict__["internet_service_src_names"] = internet_service_src_names
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["name"] = name
        __props__.__dict__["per_ip_shaper"] = per_ip_shaper
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["services"] = services
        __props__.__dict__["srcaddr6s"] = srcaddr6s
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["srcintfs"] = srcintfs
        __props__.__dict__["status"] = status
        __props__.__dict__["tos"] = tos
        __props__.__dict__["tos_mask"] = tos_mask
        __props__.__dict__["tos_negate"] = tos_negate
        __props__.__dict__["traffic_shaper"] = traffic_shaper
        __props__.__dict__["traffic_shaper_reverse"] = traffic_shaper_reverse
        __props__.__dict__["traffic_type"] = traffic_type
        __props__.__dict__["url_categories"] = url_categories
        __props__.__dict__["users"] = users
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        return Shapingpolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyAppCategory']]]:
        """
        IDs of one or more application categories that this shaper applies application control traffic shaping to. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyAppGroup']]]:
        """
        One or more application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyApplication']]]:
        """
        IDs of one or more applications that this shaper applies application control traffic shaping to. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> pulumi.Output[int]:
        """
        Traffic class ID.
        """
        return pulumi.get(self, "class_id")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def cos(self) -> pulumi.Output[str]:
        """
        VLAN CoS bit pattern.
        """
        return pulumi.get(self, "cos")

    @property
    @pulumi.getter(name="cosMask")
    def cos_mask(self) -> pulumi.Output[str]:
        """
        VLAN CoS evaluated bits.
        """
        return pulumi.get(self, "cos_mask")

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> pulumi.Output[str]:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_forward")

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> pulumi.Output[str]:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_reverse")

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> pulumi.Output[str]:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> pulumi.Output[str]:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @property
    @pulumi.getter
    def dstaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyDstaddr6']]]:
        """
        IPv6 destination address and address group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyDstaddr']]]:
        """
        IPv4 destination address and address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Output[Sequence['outputs.ShapingpolicyDstintf']]:
        """
        One or more outgoing (egress) interfaces. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        Shaping policy ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyGroup']]]:
        """
        Apply this traffic shaping policy to user groups that have authenticated with the FortiGate. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> pulumi.Output[str]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyInternetServiceCustomGroup']]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyInternetServiceCustom']]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyInternetServiceGroup']]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyInternetServiceId']]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyInternetServiceName']]]:
        """
        Internet Service ID. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> pulumi.Output[str]:
        """
        Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src")

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyInternetServiceSrcCustomGroup']]]:
        """
        Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_custom_groups")

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyInternetServiceSrcCustom']]]:
        """
        Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_customs")

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyInternetServiceSrcGroup']]]:
        """
        Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_groups")

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyInternetServiceSrcId']]]:
        """
        Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyInternetServiceSrcName']]]:
        """
        Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_names")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[str]:
        """
        Apply this traffic shaping policy to IPv4 or IPv6 traffic. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Shaping policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> pulumi.Output[str]:
        """
        Per-IP traffic shaper to apply with this policy.
        """
        return pulumi.get(self, "per_ip_shaper")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[str]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyService']]]:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicySrcaddr6']]]:
        """
        IPv6 source address and address group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Sequence['outputs.ShapingpolicySrcaddr']]:
        """
        IPv4 source address and address group names. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicySrcintf']]]:
        """
        One or more incoming (ingress) interfaces. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this traffic shaping policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Output[str]:
        """
        ToS (Type of Service) value used for comparison.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> pulumi.Output[str]:
        """
        Non-zero bit positions are used for comparison while zero bit positions are ignored.
        """
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter(name="tosNegate")
    def tos_negate(self) -> pulumi.Output[str]:
        """
        Enable negated TOS match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tos_negate")

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> pulumi.Output[str]:
        """
        Traffic shaper to apply to traffic forwarded by the firewall policy.
        """
        return pulumi.get(self, "traffic_shaper")

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> pulumi.Output[str]:
        """
        Traffic shaper to apply to response traffic received by the firewall policy.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> pulumi.Output[str]:
        """
        Traffic type. Valid values: `forwarding`, `local-in`, `local-out`.
        """
        return pulumi.get(self, "traffic_type")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyUrlCategory']]]:
        """
        IDs of one or more FortiGuard Web Filtering categories that this shaper applies traffic shaping to. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence['outputs.ShapingpolicyUser']]]:
        """
        Apply this traffic shaping policy to individual users that have authenticated with the FortiGate. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

