# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SnifferArgs', 'Sniffer']

@pulumi.input_type
class SnifferArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 anomalies: Optional[pulumi.Input[Sequence[pulumi.Input['SnifferAnomalyArgs']]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 casb_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 ip_threatfeed_status: Optional[pulumi.Input[str]] = None,
                 ip_threatfeeds: Optional[pulumi.Input[Sequence[pulumi.Input['SnifferIpThreatfeedArgs']]]] = None,
                 ips_dos_status: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 max_packet_count: Optional[pulumi.Input[int]] = None,
                 non_ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Sniffer resource.
        :param pulumi.Input[str] interface: Interface name that traffic sniffing will take place on.
        :param pulumi.Input[Sequence[pulumi.Input['SnifferAnomalyArgs']]] anomalies: Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing application list.
        :param pulumi.Input[str] application_list_status: Enable/disable application control profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing antivirus profile.
        :param pulumi.Input[str] av_profile_status: Enable/disable antivirus profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] casb_profile_status: Enable/disable CASB profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_profile_status: Enable/disable DLP profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dlp_sensor_status: Enable/disable DLP sensor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dsri: Enable/disable DSRI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] emailfilter_profile_status: Enable/disable emailfilter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] file_filter_profile_status: Enable/disable file filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fosid: Sniffer ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] host: Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
        :param pulumi.Input[str] ip_threatfeed_status: Enable/disable IP threat feed. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SnifferIpThreatfeedArgs']]] ip_threatfeeds: Name of an existing IP threat feed. The structure of `ip_threatfeed` block is documented below.
        :param pulumi.Input[str] ips_dos_status: Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_sensor_status: Enable/disable IPS sensor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipv6: Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[int] max_packet_count: Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
        :param pulumi.Input[str] non_ip: Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] port: Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
        :param pulumi.Input[str] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] spamfilter_profile: Name of an existing spam filter profile.
        :param pulumi.Input[str] spamfilter_profile_status: Enable/disable spam filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan: List of VLANs to sniff.
        :param pulumi.Input[str] webfilter_profile: Name of an existing web filter profile.
        :param pulumi.Input[str] webfilter_profile_status: Enable/disable web filter profile. Valid values: `enable`, `disable`.
        """
        pulumi.set(__self__, "interface", interface)
        if anomalies is not None:
            pulumi.set(__self__, "anomalies", anomalies)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if application_list_status is not None:
            pulumi.set(__self__, "application_list_status", application_list_status)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if av_profile_status is not None:
            pulumi.set(__self__, "av_profile_status", av_profile_status)
        if casb_profile is not None:
            pulumi.set(__self__, "casb_profile", casb_profile)
        if casb_profile_status is not None:
            pulumi.set(__self__, "casb_profile_status", casb_profile_status)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_profile_status is not None:
            pulumi.set(__self__, "dlp_profile_status", dlp_profile_status)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dlp_sensor_status is not None:
            pulumi.set(__self__, "dlp_sensor_status", dlp_sensor_status)
        if dsri is not None:
            pulumi.set(__self__, "dsri", dsri)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if emailfilter_profile_status is not None:
            pulumi.set(__self__, "emailfilter_profile_status", emailfilter_profile_status)
        if file_filter_profile is not None:
            pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if file_filter_profile_status is not None:
            pulumi.set(__self__, "file_filter_profile_status", file_filter_profile_status)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ip_threatfeed_status is not None:
            pulumi.set(__self__, "ip_threatfeed_status", ip_threatfeed_status)
        if ip_threatfeeds is not None:
            pulumi.set(__self__, "ip_threatfeeds", ip_threatfeeds)
        if ips_dos_status is not None:
            pulumi.set(__self__, "ips_dos_status", ips_dos_status)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_sensor_status is not None:
            pulumi.set(__self__, "ips_sensor_status", ips_sensor_status)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if max_packet_count is not None:
            pulumi.set(__self__, "max_packet_count", max_packet_count)
        if non_ip is not None:
            pulumi.set(__self__, "non_ip", non_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if spamfilter_profile_status is not None:
            pulumi.set(__self__, "spamfilter_profile_status", spamfilter_profile_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webfilter_profile_status is not None:
            pulumi.set(__self__, "webfilter_profile_status", webfilter_profile_status)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        Interface name that traffic sniffing will take place on.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def anomalies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnifferAnomalyArgs']]]]:
        """
        Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
        """
        return pulumi.get(self, "anomalies")

    @anomalies.setter
    def anomalies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnifferAnomalyArgs']]]]):
        pulumi.set(self, "anomalies", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing application list.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="applicationListStatus")
    def application_list_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable application control profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "application_list_status")

    @application_list_status.setter
    def application_list_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list_status", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="avProfileStatus")
    def av_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable antivirus profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_profile_status")

    @av_profile_status.setter
    def av_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile_status", value)

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @casb_profile.setter
    def casb_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile", value)

    @property
    @pulumi.getter(name="casbProfileStatus")
    def casb_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable CASB profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "casb_profile_status")

    @casb_profile_status.setter
    def casb_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile_status", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP profile.
        """
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpProfileStatus")
    def dlp_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_profile_status")

    @dlp_profile_status.setter
    def dlp_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile_status", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dlpSensorStatus")
    def dlp_sensor_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP sensor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_sensor_status")

    @dlp_sensor_status.setter
    def dlp_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor_status", value)

    @property
    @pulumi.getter
    def dsri(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DSRI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dsri")

    @dsri.setter
    def dsri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsri", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter(name="emailfilterProfileStatus")
    def emailfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable emailfilter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emailfilter_profile_status")

    @emailfilter_profile_status.setter
    def emailfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile_status", value)

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing file-filter profile.
        """
        return pulumi.get(self, "file_filter_profile")

    @file_filter_profile.setter
    def file_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile", value)

    @property
    @pulumi.getter(name="fileFilterProfileStatus")
    def file_filter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "file_filter_profile_status")

    @file_filter_profile_status.setter
    def file_filter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile_status", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Sniffer ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="ipThreatfeedStatus")
    def ip_threatfeed_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IP threat feed. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip_threatfeed_status")

    @ip_threatfeed_status.setter
    def ip_threatfeed_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_threatfeed_status", value)

    @property
    @pulumi.getter(name="ipThreatfeeds")
    def ip_threatfeeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnifferIpThreatfeedArgs']]]]:
        """
        Name of an existing IP threat feed. The structure of `ip_threatfeed` block is documented below.
        """
        return pulumi.get(self, "ip_threatfeeds")

    @ip_threatfeeds.setter
    def ip_threatfeeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnifferIpThreatfeedArgs']]]]):
        pulumi.set(self, "ip_threatfeeds", value)

    @property
    @pulumi.getter(name="ipsDosStatus")
    def ips_dos_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_dos_status")

    @ips_dos_status.setter
    def ips_dos_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_dos_status", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsSensorStatus")
    def ips_sensor_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS sensor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_sensor_status")

    @ips_sensor_status.setter
    def ips_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor_status", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="maxPacketCount")
    def max_packet_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
        """
        return pulumi.get(self, "max_packet_count")

    @max_packet_count.setter
    def max_packet_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_packet_count", value)

    @property
    @pulumi.getter(name="nonIp")
    def non_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "non_ip")

    @non_ip.setter
    def non_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "non_ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="spamfilterProfileStatus")
    def spamfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spam filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spamfilter_profile_status")

    @spamfilter_profile_status.setter
    def spamfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[str]]:
        """
        List of VLANs to sniff.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webfilterProfileStatus")
    def webfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web filter profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_profile_status")

    @webfilter_profile_status.setter
    def webfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile_status", value)


@pulumi.input_type
class _SnifferState:
    def __init__(__self__, *,
                 anomalies: Optional[pulumi.Input[Sequence[pulumi.Input['SnifferAnomalyArgs']]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 casb_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_threatfeed_status: Optional[pulumi.Input[str]] = None,
                 ip_threatfeeds: Optional[pulumi.Input[Sequence[pulumi.Input['SnifferIpThreatfeedArgs']]]] = None,
                 ips_dos_status: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 max_packet_count: Optional[pulumi.Input[int]] = None,
                 non_ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Sniffer resources.
        :param pulumi.Input[Sequence[pulumi.Input['SnifferAnomalyArgs']]] anomalies: Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing application list.
        :param pulumi.Input[str] application_list_status: Enable/disable application control profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing antivirus profile.
        :param pulumi.Input[str] av_profile_status: Enable/disable antivirus profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] casb_profile_status: Enable/disable CASB profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_profile_status: Enable/disable DLP profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dlp_sensor_status: Enable/disable DLP sensor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dsri: Enable/disable DSRI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] emailfilter_profile_status: Enable/disable emailfilter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] file_filter_profile_status: Enable/disable file filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fosid: Sniffer ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] host: Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
        :param pulumi.Input[str] interface: Interface name that traffic sniffing will take place on.
        :param pulumi.Input[str] ip_threatfeed_status: Enable/disable IP threat feed. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SnifferIpThreatfeedArgs']]] ip_threatfeeds: Name of an existing IP threat feed. The structure of `ip_threatfeed` block is documented below.
        :param pulumi.Input[str] ips_dos_status: Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_sensor_status: Enable/disable IPS sensor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipv6: Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[int] max_packet_count: Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
        :param pulumi.Input[str] non_ip: Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] port: Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
        :param pulumi.Input[str] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] spamfilter_profile: Name of an existing spam filter profile.
        :param pulumi.Input[str] spamfilter_profile_status: Enable/disable spam filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan: List of VLANs to sniff.
        :param pulumi.Input[str] webfilter_profile: Name of an existing web filter profile.
        :param pulumi.Input[str] webfilter_profile_status: Enable/disable web filter profile. Valid values: `enable`, `disable`.
        """
        if anomalies is not None:
            pulumi.set(__self__, "anomalies", anomalies)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if application_list_status is not None:
            pulumi.set(__self__, "application_list_status", application_list_status)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if av_profile_status is not None:
            pulumi.set(__self__, "av_profile_status", av_profile_status)
        if casb_profile is not None:
            pulumi.set(__self__, "casb_profile", casb_profile)
        if casb_profile_status is not None:
            pulumi.set(__self__, "casb_profile_status", casb_profile_status)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_profile_status is not None:
            pulumi.set(__self__, "dlp_profile_status", dlp_profile_status)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dlp_sensor_status is not None:
            pulumi.set(__self__, "dlp_sensor_status", dlp_sensor_status)
        if dsri is not None:
            pulumi.set(__self__, "dsri", dsri)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if emailfilter_profile_status is not None:
            pulumi.set(__self__, "emailfilter_profile_status", emailfilter_profile_status)
        if file_filter_profile is not None:
            pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if file_filter_profile_status is not None:
            pulumi.set(__self__, "file_filter_profile_status", file_filter_profile_status)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_threatfeed_status is not None:
            pulumi.set(__self__, "ip_threatfeed_status", ip_threatfeed_status)
        if ip_threatfeeds is not None:
            pulumi.set(__self__, "ip_threatfeeds", ip_threatfeeds)
        if ips_dos_status is not None:
            pulumi.set(__self__, "ips_dos_status", ips_dos_status)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_sensor_status is not None:
            pulumi.set(__self__, "ips_sensor_status", ips_sensor_status)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if max_packet_count is not None:
            pulumi.set(__self__, "max_packet_count", max_packet_count)
        if non_ip is not None:
            pulumi.set(__self__, "non_ip", non_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if spamfilter_profile_status is not None:
            pulumi.set(__self__, "spamfilter_profile_status", spamfilter_profile_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webfilter_profile_status is not None:
            pulumi.set(__self__, "webfilter_profile_status", webfilter_profile_status)

    @property
    @pulumi.getter
    def anomalies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnifferAnomalyArgs']]]]:
        """
        Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
        """
        return pulumi.get(self, "anomalies")

    @anomalies.setter
    def anomalies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnifferAnomalyArgs']]]]):
        pulumi.set(self, "anomalies", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing application list.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="applicationListStatus")
    def application_list_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable application control profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "application_list_status")

    @application_list_status.setter
    def application_list_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list_status", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="avProfileStatus")
    def av_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable antivirus profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_profile_status")

    @av_profile_status.setter
    def av_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile_status", value)

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @casb_profile.setter
    def casb_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile", value)

    @property
    @pulumi.getter(name="casbProfileStatus")
    def casb_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable CASB profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "casb_profile_status")

    @casb_profile_status.setter
    def casb_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile_status", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP profile.
        """
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpProfileStatus")
    def dlp_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_profile_status")

    @dlp_profile_status.setter
    def dlp_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile_status", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dlpSensorStatus")
    def dlp_sensor_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP sensor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_sensor_status")

    @dlp_sensor_status.setter
    def dlp_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor_status", value)

    @property
    @pulumi.getter
    def dsri(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DSRI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dsri")

    @dsri.setter
    def dsri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsri", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter(name="emailfilterProfileStatus")
    def emailfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable emailfilter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emailfilter_profile_status")

    @emailfilter_profile_status.setter
    def emailfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile_status", value)

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing file-filter profile.
        """
        return pulumi.get(self, "file_filter_profile")

    @file_filter_profile.setter
    def file_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile", value)

    @property
    @pulumi.getter(name="fileFilterProfileStatus")
    def file_filter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "file_filter_profile_status")

    @file_filter_profile_status.setter
    def file_filter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile_status", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Sniffer ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name that traffic sniffing will take place on.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipThreatfeedStatus")
    def ip_threatfeed_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IP threat feed. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip_threatfeed_status")

    @ip_threatfeed_status.setter
    def ip_threatfeed_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_threatfeed_status", value)

    @property
    @pulumi.getter(name="ipThreatfeeds")
    def ip_threatfeeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnifferIpThreatfeedArgs']]]]:
        """
        Name of an existing IP threat feed. The structure of `ip_threatfeed` block is documented below.
        """
        return pulumi.get(self, "ip_threatfeeds")

    @ip_threatfeeds.setter
    def ip_threatfeeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnifferIpThreatfeedArgs']]]]):
        pulumi.set(self, "ip_threatfeeds", value)

    @property
    @pulumi.getter(name="ipsDosStatus")
    def ips_dos_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_dos_status")

    @ips_dos_status.setter
    def ips_dos_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_dos_status", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsSensorStatus")
    def ips_sensor_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS sensor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_sensor_status")

    @ips_sensor_status.setter
    def ips_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor_status", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="maxPacketCount")
    def max_packet_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
        """
        return pulumi.get(self, "max_packet_count")

    @max_packet_count.setter
    def max_packet_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_packet_count", value)

    @property
    @pulumi.getter(name="nonIp")
    def non_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "non_ip")

    @non_ip.setter
    def non_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "non_ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="spamfilterProfileStatus")
    def spamfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spam filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spamfilter_profile_status")

    @spamfilter_profile_status.setter
    def spamfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[str]]:
        """
        List of VLANs to sniff.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webfilterProfileStatus")
    def webfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web filter profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_profile_status")

    @webfilter_profile_status.setter
    def webfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile_status", value)


class Sniffer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anomalies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnifferAnomalyArgs']]]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 casb_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_threatfeed_status: Optional[pulumi.Input[str]] = None,
                 ip_threatfeeds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnifferIpThreatfeedArgs']]]]] = None,
                 ips_dos_status: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 max_packet_count: Optional[pulumi.Input[int]] = None,
                 non_ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure sniffer.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Sniffer("trname",
            application_list_status="disable",
            av_profile_status="disable",
            dlp_sensor_status="disable",
            dsri="disable",
            fosid=1,
            interface="port4",
            ips_dos_status="disable",
            ips_sensor_status="disable",
            ipv6="disable",
            logtraffic="utm",
            max_packet_count=4000,
            non_ip="enable",
            scan_botnet_connections="disable",
            spamfilter_profile_status="disable",
            status="enable",
            webfilter_profile_status="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Sniffer can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/sniffer:Sniffer labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/sniffer:Sniffer labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnifferAnomalyArgs']]]] anomalies: Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing application list.
        :param pulumi.Input[str] application_list_status: Enable/disable application control profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing antivirus profile.
        :param pulumi.Input[str] av_profile_status: Enable/disable antivirus profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] casb_profile_status: Enable/disable CASB profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_profile_status: Enable/disable DLP profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dlp_sensor_status: Enable/disable DLP sensor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dsri: Enable/disable DSRI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] emailfilter_profile_status: Enable/disable emailfilter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] file_filter_profile_status: Enable/disable file filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fosid: Sniffer ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] host: Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
        :param pulumi.Input[str] interface: Interface name that traffic sniffing will take place on.
        :param pulumi.Input[str] ip_threatfeed_status: Enable/disable IP threat feed. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnifferIpThreatfeedArgs']]]] ip_threatfeeds: Name of an existing IP threat feed. The structure of `ip_threatfeed` block is documented below.
        :param pulumi.Input[str] ips_dos_status: Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_sensor_status: Enable/disable IPS sensor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipv6: Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[int] max_packet_count: Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
        :param pulumi.Input[str] non_ip: Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] port: Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
        :param pulumi.Input[str] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] spamfilter_profile: Name of an existing spam filter profile.
        :param pulumi.Input[str] spamfilter_profile_status: Enable/disable spam filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan: List of VLANs to sniff.
        :param pulumi.Input[str] webfilter_profile: Name of an existing web filter profile.
        :param pulumi.Input[str] webfilter_profile_status: Enable/disable web filter profile. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnifferArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure sniffer.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Sniffer("trname",
            application_list_status="disable",
            av_profile_status="disable",
            dlp_sensor_status="disable",
            dsri="disable",
            fosid=1,
            interface="port4",
            ips_dos_status="disable",
            ips_sensor_status="disable",
            ipv6="disable",
            logtraffic="utm",
            max_packet_count=4000,
            non_ip="enable",
            scan_botnet_connections="disable",
            spamfilter_profile_status="disable",
            status="enable",
            webfilter_profile_status="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Sniffer can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/sniffer:Sniffer labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/sniffer:Sniffer labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SnifferArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnifferArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anomalies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnifferAnomalyArgs']]]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 casb_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_threatfeed_status: Optional[pulumi.Input[str]] = None,
                 ip_threatfeeds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnifferIpThreatfeedArgs']]]]] = None,
                 ips_dos_status: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 max_packet_count: Optional[pulumi.Input[int]] = None,
                 non_ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnifferArgs.__new__(SnifferArgs)

            __props__.__dict__["anomalies"] = anomalies
            __props__.__dict__["application_list"] = application_list
            __props__.__dict__["application_list_status"] = application_list_status
            __props__.__dict__["av_profile"] = av_profile
            __props__.__dict__["av_profile_status"] = av_profile_status
            __props__.__dict__["casb_profile"] = casb_profile
            __props__.__dict__["casb_profile_status"] = casb_profile_status
            __props__.__dict__["dlp_profile"] = dlp_profile
            __props__.__dict__["dlp_profile_status"] = dlp_profile_status
            __props__.__dict__["dlp_sensor"] = dlp_sensor
            __props__.__dict__["dlp_sensor_status"] = dlp_sensor_status
            __props__.__dict__["dsri"] = dsri
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["emailfilter_profile"] = emailfilter_profile
            __props__.__dict__["emailfilter_profile_status"] = emailfilter_profile_status
            __props__.__dict__["file_filter_profile"] = file_filter_profile
            __props__.__dict__["file_filter_profile_status"] = file_filter_profile_status
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["host"] = host
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ip_threatfeed_status"] = ip_threatfeed_status
            __props__.__dict__["ip_threatfeeds"] = ip_threatfeeds
            __props__.__dict__["ips_dos_status"] = ips_dos_status
            __props__.__dict__["ips_sensor"] = ips_sensor
            __props__.__dict__["ips_sensor_status"] = ips_sensor_status
            __props__.__dict__["ipv6"] = ipv6
            __props__.__dict__["logtraffic"] = logtraffic
            __props__.__dict__["max_packet_count"] = max_packet_count
            __props__.__dict__["non_ip"] = non_ip
            __props__.__dict__["port"] = port
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
            __props__.__dict__["spamfilter_profile"] = spamfilter_profile
            __props__.__dict__["spamfilter_profile_status"] = spamfilter_profile_status
            __props__.__dict__["status"] = status
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["webfilter_profile"] = webfilter_profile
            __props__.__dict__["webfilter_profile_status"] = webfilter_profile_status
        super(Sniffer, __self__).__init__(
            'fortios:firewall/sniffer:Sniffer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anomalies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnifferAnomalyArgs']]]]] = None,
            application_list: Optional[pulumi.Input[str]] = None,
            application_list_status: Optional[pulumi.Input[str]] = None,
            av_profile: Optional[pulumi.Input[str]] = None,
            av_profile_status: Optional[pulumi.Input[str]] = None,
            casb_profile: Optional[pulumi.Input[str]] = None,
            casb_profile_status: Optional[pulumi.Input[str]] = None,
            dlp_profile: Optional[pulumi.Input[str]] = None,
            dlp_profile_status: Optional[pulumi.Input[str]] = None,
            dlp_sensor: Optional[pulumi.Input[str]] = None,
            dlp_sensor_status: Optional[pulumi.Input[str]] = None,
            dsri: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            emailfilter_profile: Optional[pulumi.Input[str]] = None,
            emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
            file_filter_profile: Optional[pulumi.Input[str]] = None,
            file_filter_profile_status: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip_threatfeed_status: Optional[pulumi.Input[str]] = None,
            ip_threatfeeds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnifferIpThreatfeedArgs']]]]] = None,
            ips_dos_status: Optional[pulumi.Input[str]] = None,
            ips_sensor: Optional[pulumi.Input[str]] = None,
            ips_sensor_status: Optional[pulumi.Input[str]] = None,
            ipv6: Optional[pulumi.Input[str]] = None,
            logtraffic: Optional[pulumi.Input[str]] = None,
            max_packet_count: Optional[pulumi.Input[int]] = None,
            non_ip: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            scan_botnet_connections: Optional[pulumi.Input[str]] = None,
            spamfilter_profile: Optional[pulumi.Input[str]] = None,
            spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vlan: Optional[pulumi.Input[str]] = None,
            webfilter_profile: Optional[pulumi.Input[str]] = None,
            webfilter_profile_status: Optional[pulumi.Input[str]] = None) -> 'Sniffer':
        """
        Get an existing Sniffer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnifferAnomalyArgs']]]] anomalies: Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing application list.
        :param pulumi.Input[str] application_list_status: Enable/disable application control profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing antivirus profile.
        :param pulumi.Input[str] av_profile_status: Enable/disable antivirus profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] casb_profile_status: Enable/disable CASB profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_profile_status: Enable/disable DLP profile. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dlp_sensor_status: Enable/disable DLP sensor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dsri: Enable/disable DSRI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] emailfilter_profile_status: Enable/disable emailfilter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] file_filter_profile_status: Enable/disable file filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fosid: Sniffer ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] host: Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
        :param pulumi.Input[str] interface: Interface name that traffic sniffing will take place on.
        :param pulumi.Input[str] ip_threatfeed_status: Enable/disable IP threat feed. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnifferIpThreatfeedArgs']]]] ip_threatfeeds: Name of an existing IP threat feed. The structure of `ip_threatfeed` block is documented below.
        :param pulumi.Input[str] ips_dos_status: Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_sensor_status: Enable/disable IPS sensor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipv6: Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[int] max_packet_count: Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
        :param pulumi.Input[str] non_ip: Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] port: Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
        :param pulumi.Input[str] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] spamfilter_profile: Name of an existing spam filter profile.
        :param pulumi.Input[str] spamfilter_profile_status: Enable/disable spam filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan: List of VLANs to sniff.
        :param pulumi.Input[str] webfilter_profile: Name of an existing web filter profile.
        :param pulumi.Input[str] webfilter_profile_status: Enable/disable web filter profile. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnifferState.__new__(_SnifferState)

        __props__.__dict__["anomalies"] = anomalies
        __props__.__dict__["application_list"] = application_list
        __props__.__dict__["application_list_status"] = application_list_status
        __props__.__dict__["av_profile"] = av_profile
        __props__.__dict__["av_profile_status"] = av_profile_status
        __props__.__dict__["casb_profile"] = casb_profile
        __props__.__dict__["casb_profile_status"] = casb_profile_status
        __props__.__dict__["dlp_profile"] = dlp_profile
        __props__.__dict__["dlp_profile_status"] = dlp_profile_status
        __props__.__dict__["dlp_sensor"] = dlp_sensor
        __props__.__dict__["dlp_sensor_status"] = dlp_sensor_status
        __props__.__dict__["dsri"] = dsri
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["emailfilter_profile"] = emailfilter_profile
        __props__.__dict__["emailfilter_profile_status"] = emailfilter_profile_status
        __props__.__dict__["file_filter_profile"] = file_filter_profile
        __props__.__dict__["file_filter_profile_status"] = file_filter_profile_status
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["host"] = host
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip_threatfeed_status"] = ip_threatfeed_status
        __props__.__dict__["ip_threatfeeds"] = ip_threatfeeds
        __props__.__dict__["ips_dos_status"] = ips_dos_status
        __props__.__dict__["ips_sensor"] = ips_sensor
        __props__.__dict__["ips_sensor_status"] = ips_sensor_status
        __props__.__dict__["ipv6"] = ipv6
        __props__.__dict__["logtraffic"] = logtraffic
        __props__.__dict__["max_packet_count"] = max_packet_count
        __props__.__dict__["non_ip"] = non_ip
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
        __props__.__dict__["spamfilter_profile"] = spamfilter_profile
        __props__.__dict__["spamfilter_profile_status"] = spamfilter_profile_status
        __props__.__dict__["status"] = status
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vlan"] = vlan
        __props__.__dict__["webfilter_profile"] = webfilter_profile
        __props__.__dict__["webfilter_profile_status"] = webfilter_profile_status
        return Sniffer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def anomalies(self) -> pulumi.Output[Optional[Sequence['outputs.SnifferAnomaly']]]:
        """
        Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
        """
        return pulumi.get(self, "anomalies")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> pulumi.Output[str]:
        """
        Name of an existing application list.
        """
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter(name="applicationListStatus")
    def application_list_status(self) -> pulumi.Output[str]:
        """
        Enable/disable application control profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "application_list_status")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="avProfileStatus")
    def av_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable antivirus profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_profile_status")

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @property
    @pulumi.getter(name="casbProfileStatus")
    def casb_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable CASB profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "casb_profile_status")

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing DLP profile.
        """
        return pulumi.get(self, "dlp_profile")

    @property
    @pulumi.getter(name="dlpProfileStatus")
    def dlp_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable DLP profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_profile_status")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> pulumi.Output[str]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter(name="dlpSensorStatus")
    def dlp_sensor_status(self) -> pulumi.Output[str]:
        """
        Enable/disable DLP sensor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_sensor_status")

    @property
    @pulumi.getter
    def dsri(self) -> pulumi.Output[str]:
        """
        Enable/disable DSRI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dsri")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter(name="emailfilterProfileStatus")
    def emailfilter_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable emailfilter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emailfilter_profile_status")

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing file-filter profile.
        """
        return pulumi.get(self, "file_filter_profile")

    @property
    @pulumi.getter(name="fileFilterProfileStatus")
    def file_filter_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "file_filter_profile_status")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        Sniffer ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Interface name that traffic sniffing will take place on.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipThreatfeedStatus")
    def ip_threatfeed_status(self) -> pulumi.Output[str]:
        """
        Enable/disable IP threat feed. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip_threatfeed_status")

    @property
    @pulumi.getter(name="ipThreatfeeds")
    def ip_threatfeeds(self) -> pulumi.Output[Optional[Sequence['outputs.SnifferIpThreatfeed']]]:
        """
        Name of an existing IP threat feed. The structure of `ip_threatfeed` block is documented below.
        """
        return pulumi.get(self, "ip_threatfeeds")

    @property
    @pulumi.getter(name="ipsDosStatus")
    def ips_dos_status(self) -> pulumi.Output[str]:
        """
        Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_dos_status")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> pulumi.Output[str]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter(name="ipsSensorStatus")
    def ips_sensor_status(self) -> pulumi.Output[str]:
        """
        Enable/disable IPS sensor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_sensor_status")

    @property
    @pulumi.getter
    def ipv6(self) -> pulumi.Output[str]:
        """
        Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def logtraffic(self) -> pulumi.Output[str]:
        """
        Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="maxPacketCount")
    def max_packet_count(self) -> pulumi.Output[int]:
        """
        Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
        """
        return pulumi.get(self, "max_packet_count")

    @property
    @pulumi.getter(name="nonIp")
    def non_ip(self) -> pulumi.Output[str]:
        """
        Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "non_ip")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[str]:
        """
        Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> pulumi.Output[str]:
        """
        Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter(name="spamfilterProfileStatus")
    def spamfilter_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable spam filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spamfilter_profile_status")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[str]:
        """
        List of VLANs to sniff.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @property
    @pulumi.getter(name="webfilterProfileStatus")
    def webfilter_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable web filter profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_profile_status")

