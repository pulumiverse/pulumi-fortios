# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'Accessproxy6ApiGateway6Args',
    'Accessproxy6ApiGateway6ApplicationArgs',
    'Accessproxy6ApiGateway6QuicArgs',
    'Accessproxy6ApiGateway6RealserverArgs',
    'Accessproxy6ApiGateway6RealserverSshHostKeyArgs',
    'Accessproxy6ApiGateway6SslCipherSuiteArgs',
    'Accessproxy6ApiGatewayArgs',
    'Accessproxy6ApiGatewayApplicationArgs',
    'Accessproxy6ApiGatewayQuicArgs',
    'Accessproxy6ApiGatewayRealserverArgs',
    'Accessproxy6ApiGatewayRealserverSshHostKeyArgs',
    'Accessproxy6ApiGatewaySslCipherSuiteArgs',
    'AccessproxyApiGateway6Args',
    'AccessproxyApiGateway6ApplicationArgs',
    'AccessproxyApiGateway6QuicArgs',
    'AccessproxyApiGateway6RealserverArgs',
    'AccessproxyApiGateway6RealserverSshHostKeyArgs',
    'AccessproxyApiGateway6SslCipherSuiteArgs',
    'AccessproxyApiGatewayArgs',
    'AccessproxyApiGatewayApplicationArgs',
    'AccessproxyApiGatewayQuicArgs',
    'AccessproxyApiGatewayRealserverArgs',
    'AccessproxyApiGatewayRealserverSshHostKeyArgs',
    'AccessproxyApiGatewaySslCipherSuiteArgs',
    'AccessproxysshclientcertCertExtensionArgs',
    'Address6ListArgs',
    'Address6MacaddrArgs',
    'Address6SubnetSegmentArgs',
    'Address6TaggingArgs',
    'Address6TaggingTagArgs',
    'Address6templateSubnetSegmentArgs',
    'Address6templateSubnetSegmentValueArgs',
    'AddressFssoGroupArgs',
    'AddressListArgs',
    'AddressMacaddrArgs',
    'AddressTaggingArgs',
    'AddressTaggingTagArgs',
    'Addrgrp6ExcludeMemberArgs',
    'Addrgrp6MemberArgs',
    'Addrgrp6TaggingArgs',
    'Addrgrp6TaggingTagArgs',
    'AddrgrpExcludeMemberArgs',
    'AddrgrpMemberArgs',
    'AddrgrpTaggingArgs',
    'AddrgrpTaggingTagArgs',
    'AuthportalGroupArgs',
    'CentralsnatmapDstAddr6Args',
    'CentralsnatmapDstAddrArgs',
    'CentralsnatmapDstintfArgs',
    'CentralsnatmapNatIppool6Args',
    'CentralsnatmapNatIppoolArgs',
    'CentralsnatmapOrigAddr6Args',
    'CentralsnatmapOrigAddrArgs',
    'CentralsnatmapSortStatePolicyListArgs',
    'CentralsnatmapSrcintfArgs',
    'CountryRegionArgs',
    'DecryptedtrafficmirrorInterfaceArgs',
    'DoSpolicy6AnomalyArgs',
    'DoSpolicy6DstaddrArgs',
    'DoSpolicy6ServiceArgs',
    'DoSpolicy6SrcaddrArgs',
    'DoSpolicyAnomalyArgs',
    'DoSpolicyDstaddrArgs',
    'DoSpolicyServiceArgs',
    'DoSpolicySrcaddrArgs',
    'IdentitybasedrouteRuleArgs',
    'IdentitybasedrouteRuleGroupArgs',
    'Interfacepolicy6Dstaddr6Args',
    'Interfacepolicy6Service6Args',
    'Interfacepolicy6Srcaddr6Args',
    'InterfacepolicyDstaddrArgs',
    'InterfacepolicyServiceArgs',
    'InterfacepolicySrcaddrArgs',
    'InternetserviceadditionEntryArgs',
    'InternetserviceadditionEntryPortRangeArgs',
    'InternetservicecustomEntryArgs',
    'InternetservicecustomEntryDst6Args',
    'InternetservicecustomEntryDstArgs',
    'InternetservicecustomEntryPortRangeArgs',
    'InternetservicecustomgroupMemberArgs',
    'InternetservicedefinitionEntryArgs',
    'InternetservicedefinitionEntryPortRangeArgs',
    'InternetserviceextensionDisableEntryArgs',
    'InternetserviceextensionDisableEntryIp6RangeArgs',
    'InternetserviceextensionDisableEntryIpRangeArgs',
    'InternetserviceextensionDisableEntryPortRangeArgs',
    'InternetserviceextensionEntryArgs',
    'InternetserviceextensionEntryDst6Args',
    'InternetserviceextensionEntryDstArgs',
    'InternetserviceextensionEntryPortRangeArgs',
    'InternetservicegroupMemberArgs',
    'InternetservicesubappSubAppArgs',
    'Localinpolicy6DstaddrArgs',
    'Localinpolicy6ServiceArgs',
    'Localinpolicy6SrcaddrArgs',
    'LocalinpolicyDstaddrArgs',
    'LocalinpolicyServiceArgs',
    'LocalinpolicySrcaddrArgs',
    'Multicastaddress6TaggingArgs',
    'Multicastaddress6TaggingTagArgs',
    'MulticastaddressTaggingArgs',
    'MulticastaddressTaggingTagArgs',
    'Multicastpolicy6DstaddrArgs',
    'Multicastpolicy6SrcaddrArgs',
    'MulticastpolicyDstaddrArgs',
    'MulticastpolicySrcaddrArgs',
    'Policy46DstaddrArgs',
    'Policy46PoolnameArgs',
    'Policy46ServiceArgs',
    'Policy46SrcaddrArgs',
    'Policy64DstaddrArgs',
    'Policy64PoolnameArgs',
    'Policy64ServiceArgs',
    'Policy64SrcaddrArgs',
    'Policy6AppCategoryArgs',
    'Policy6AppGroupArgs',
    'Policy6ApplicationArgs',
    'Policy6CustomLogFieldArgs',
    'Policy6DeviceArgs',
    'Policy6DstaddrArgs',
    'Policy6DstintfArgs',
    'Policy6FssoGroupArgs',
    'Policy6GroupArgs',
    'Policy6PoolnameArgs',
    'Policy6ServiceArgs',
    'Policy6SrcaddrArgs',
    'Policy6SrcintfArgs',
    'Policy6SslMirrorIntfArgs',
    'Policy6UrlCategoryArgs',
    'Policy6UserArgs',
    'PolicyAppCategoryArgs',
    'PolicyAppGroupArgs',
    'PolicyApplicationArgs',
    'PolicyCustomLogFieldArgs',
    'PolicyDeviceArgs',
    'PolicyDstaddr6Args',
    'PolicyDstaddrArgs',
    'PolicyDstintfArgs',
    'PolicyFssoGroupArgs',
    'PolicyGroupArgs',
    'PolicyInternetService6CustomArgs',
    'PolicyInternetService6CustomGroupArgs',
    'PolicyInternetService6GroupArgs',
    'PolicyInternetService6NameArgs',
    'PolicyInternetService6SrcCustomArgs',
    'PolicyInternetService6SrcCustomGroupArgs',
    'PolicyInternetService6SrcGroupArgs',
    'PolicyInternetService6SrcNameArgs',
    'PolicyInternetServiceCustomArgs',
    'PolicyInternetServiceCustomGroupArgs',
    'PolicyInternetServiceGroupArgs',
    'PolicyInternetServiceIdArgs',
    'PolicyInternetServiceNameArgs',
    'PolicyInternetServiceSrcCustomArgs',
    'PolicyInternetServiceSrcCustomGroupArgs',
    'PolicyInternetServiceSrcGroupArgs',
    'PolicyInternetServiceSrcIdArgs',
    'PolicyInternetServiceSrcNameArgs',
    'PolicyNetworkServiceDynamicArgs',
    'PolicyNetworkServiceSrcDynamicArgs',
    'PolicyNtlmEnabledBrowserArgs',
    'PolicyPcpPoolnameArgs',
    'PolicyPoolname6Args',
    'PolicyPoolnameArgs',
    'PolicyRtpAddrArgs',
    'PolicyServiceArgs',
    'PolicySgtArgs',
    'PolicySortStatePolicyListArgs',
    'PolicySrcVendorMacArgs',
    'PolicySrcaddr6Args',
    'PolicySrcaddrArgs',
    'PolicySrcintfArgs',
    'PolicySslMirrorIntfArgs',
    'PolicyUrlCategoryArgs',
    'PolicyUserArgs',
    'PolicyZtnaEmsTagArgs',
    'PolicyZtnaEmsTagSecondaryArgs',
    'PolicyZtnaGeoTagArgs',
    'ProfileprotocoloptionsCifsArgs',
    'ProfileprotocoloptionsCifsServerKeytabArgs',
    'ProfileprotocoloptionsDnsArgs',
    'ProfileprotocoloptionsFtpArgs',
    'ProfileprotocoloptionsHttpArgs',
    'ProfileprotocoloptionsImapArgs',
    'ProfileprotocoloptionsMailSignatureArgs',
    'ProfileprotocoloptionsMapiArgs',
    'ProfileprotocoloptionsNntpArgs',
    'ProfileprotocoloptionsPop3Args',
    'ProfileprotocoloptionsSmtpArgs',
    'ProfileprotocoloptionsSshArgs',
    'ProxyaddressApplicationArgs',
    'ProxyaddressCategoryArgs',
    'ProxyaddressHeaderGroupArgs',
    'ProxyaddressTaggingArgs',
    'ProxyaddressTaggingTagArgs',
    'ProxyaddrgrpMemberArgs',
    'ProxyaddrgrpTaggingArgs',
    'ProxyaddrgrpTaggingTagArgs',
    'ProxypolicyAccessProxy6Args',
    'ProxypolicyAccessProxyArgs',
    'ProxypolicyDstaddr6Args',
    'ProxypolicyDstaddrArgs',
    'ProxypolicyDstintfArgs',
    'ProxypolicyGroupArgs',
    'ProxypolicyInternetService6CustomArgs',
    'ProxypolicyInternetService6CustomGroupArgs',
    'ProxypolicyInternetService6GroupArgs',
    'ProxypolicyInternetService6NameArgs',
    'ProxypolicyInternetServiceCustomArgs',
    'ProxypolicyInternetServiceCustomGroupArgs',
    'ProxypolicyInternetServiceGroupArgs',
    'ProxypolicyInternetServiceIdArgs',
    'ProxypolicyInternetServiceNameArgs',
    'ProxypolicyPoolnameArgs',
    'ProxypolicyServiceArgs',
    'ProxypolicySortStatePolicyListArgs',
    'ProxypolicySrcaddr6Args',
    'ProxypolicySrcaddrArgs',
    'ProxypolicySrcintfArgs',
    'ProxypolicyUserArgs',
    'ProxypolicyZtnaEmsTagArgs',
    'RegionCityArgs',
    'SecurityPolicyseqStatePolicyListArgs',
    'SecuritypolicyAppCategoryArgs',
    'SecuritypolicyAppGroupArgs',
    'SecuritypolicyApplicationArgs',
    'SecuritypolicyDstaddr4Args',
    'SecuritypolicyDstaddr6Args',
    'SecuritypolicyDstaddrArgs',
    'SecuritypolicyDstintfArgs',
    'SecuritypolicyFssoGroupArgs',
    'SecuritypolicyGroupArgs',
    'SecuritypolicyInternetService6CustomArgs',
    'SecuritypolicyInternetService6CustomGroupArgs',
    'SecuritypolicyInternetService6GroupArgs',
    'SecuritypolicyInternetService6NameArgs',
    'SecuritypolicyInternetService6SrcCustomArgs',
    'SecuritypolicyInternetService6SrcCustomGroupArgs',
    'SecuritypolicyInternetService6SrcGroupArgs',
    'SecuritypolicyInternetService6SrcNameArgs',
    'SecuritypolicyInternetServiceCustomArgs',
    'SecuritypolicyInternetServiceCustomGroupArgs',
    'SecuritypolicyInternetServiceGroupArgs',
    'SecuritypolicyInternetServiceIdArgs',
    'SecuritypolicyInternetServiceNameArgs',
    'SecuritypolicyInternetServiceSrcCustomArgs',
    'SecuritypolicyInternetServiceSrcCustomGroupArgs',
    'SecuritypolicyInternetServiceSrcGroupArgs',
    'SecuritypolicyInternetServiceSrcIdArgs',
    'SecuritypolicyInternetServiceSrcNameArgs',
    'SecuritypolicyServiceArgs',
    'SecuritypolicySortStatePolicyListArgs',
    'SecuritypolicySrcaddr4Args',
    'SecuritypolicySrcaddr6Args',
    'SecuritypolicySrcaddrArgs',
    'SecuritypolicySrcintfArgs',
    'SecuritypolicyUrlCategoryArgs',
    'SecuritypolicyUserArgs',
    'ShapingpolicyAppCategoryArgs',
    'ShapingpolicyAppGroupArgs',
    'ShapingpolicyApplicationArgs',
    'ShapingpolicyDstaddr6Args',
    'ShapingpolicyDstaddrArgs',
    'ShapingpolicyDstintfArgs',
    'ShapingpolicyGroupArgs',
    'ShapingpolicyInternetServiceCustomArgs',
    'ShapingpolicyInternetServiceCustomGroupArgs',
    'ShapingpolicyInternetServiceGroupArgs',
    'ShapingpolicyInternetServiceIdArgs',
    'ShapingpolicyInternetServiceNameArgs',
    'ShapingpolicyInternetServiceSrcCustomArgs',
    'ShapingpolicyInternetServiceSrcCustomGroupArgs',
    'ShapingpolicyInternetServiceSrcGroupArgs',
    'ShapingpolicyInternetServiceSrcIdArgs',
    'ShapingpolicyInternetServiceSrcNameArgs',
    'ShapingpolicyServiceArgs',
    'ShapingpolicySrcaddr6Args',
    'ShapingpolicySrcaddrArgs',
    'ShapingpolicySrcintfArgs',
    'ShapingpolicyUrlCategoryArgs',
    'ShapingpolicyUserArgs',
    'ShapingprofileShapingEntryArgs',
    'SnifferAnomalyArgs',
    'SnifferIpThreatfeedArgs',
    'SslsshprofileDotArgs',
    'SslsshprofileFtpsArgs',
    'SslsshprofileHttpsArgs',
    'SslsshprofileImapsArgs',
    'SslsshprofilePop3sArgs',
    'SslsshprofileSmtpsArgs',
    'SslsshprofileSshArgs',
    'SslsshprofileSslArgs',
    'SslsshprofileSslExemptArgs',
    'SslsshprofileSslServerArgs',
    'TtlpolicyServiceArgs',
    'TtlpolicySrcaddrArgs',
    'Vip46MonitorArgs',
    'Vip46RealserverArgs',
    'Vip46SrcFilterArgs',
    'Vip46SrcintfFilterArgs',
    'Vip64MonitorArgs',
    'Vip64RealserverArgs',
    'Vip64SrcFilterArgs',
    'Vip6MonitorArgs',
    'Vip6QuicArgs',
    'Vip6RealserverArgs',
    'Vip6SrcFilterArgs',
    'Vip6SslCipherSuiteArgs',
    'Vip6SslServerCipherSuiteArgs',
    'VipExtaddrArgs',
    'VipGslbPublicIpArgs',
    'VipMappedipArgs',
    'VipMonitorArgs',
    'VipQuicArgs',
    'VipRealserverArgs',
    'VipServiceArgs',
    'VipSrcFilterArgs',
    'VipSrcintfFilterArgs',
    'VipSslCipherSuiteArgs',
    'VipSslServerCipherSuiteArgs',
    'Vipgrp46MemberArgs',
    'Vipgrp64MemberArgs',
    'Vipgrp6MemberArgs',
    'VipgrpMemberArgs',
]

@pulumi.input_type
class Accessproxy6ApiGateway6Args:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6ApplicationArgs']]]] = None,
                 h2_support: Optional[pulumi.Input[str]] = None,
                 h3_support: Optional[pulumi.Input[str]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input['Accessproxy6ApiGateway6QuicArgs']] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6RealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6SslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6ApplicationArgs']]] applications: SaaS application controlled by this Access Proxy. The structure of `application` block is documented below.
        :param pulumi.Input[str] h2_support: HTTP2 support, default=Enable. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h3_support: HTTP3/QUIC support, default=Disable. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: API Gateway ID.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        :param pulumi.Input['Accessproxy6ApiGateway6QuicArgs'] quic: QUIC setting. The structure of `quic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6RealserverArgs']]] realservers: Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] saml_redirect: Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] saml_server: SAML service provider configuration for VIP authentication.
        :param pulumi.Input[str] service: Service.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6SslCipherSuiteArgs']]] ssl_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_renegotiation: Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_vpn_web_portal: SSL-VPN web portal.
        :param pulumi.Input[str] url_map: URL pattern to match.
        :param pulumi.Input[str] url_map_type: Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        :param pulumi.Input[str] virtual_host: Virtual host.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if h2_support is not None:
            pulumi.set(__self__, "h2_support", h2_support)
        if h3_support is not None:
            pulumi.set(__self__, "h3_support", h3_support)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6ApplicationArgs']]]]:
        """
        SaaS application controlled by this Access Proxy. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6ApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="h2Support")
    def h2_support(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP2 support, default=Enable. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h2_support")

    @h2_support.setter
    def h2_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h2_support", value)

    @property
    @pulumi.getter(name="h3Support")
    def h3_support(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP3/QUIC support, default=Disable. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h3_support")

    @h3_support.setter
    def h3_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h3_support", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        """
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain that HTTP cookie persistence should apply to.
        """
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        """
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        Limit HTTP cookie persistence to the specified path.
        """
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        """
        Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        """
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        API Gateway ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input['Accessproxy6ApiGateway6QuicArgs']]:
        """
        QUIC setting. The structure of `quic` block is documented below.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input['Accessproxy6ApiGateway6QuicArgs']]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6RealserverArgs']]]]:
        """
        Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6RealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        """
        SAML service provider configuration for VIP authentication.
        """
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6SslCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6SslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_renegotiation")

    @ssl_renegotiation.setter
    def ssl_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_renegotiation", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        """
        SSL-VPN web portal.
        """
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern to match.
        """
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        """
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual host.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class Accessproxy6ApiGateway6ApplicationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: SaaS application name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SaaS application name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Accessproxy6ApiGateway6QuicArgs:
    def __init__(__self__, *,
                 ack_delay_exponent: Optional[pulumi.Input[int]] = None,
                 active_connection_id_limit: Optional[pulumi.Input[int]] = None,
                 active_migration: Optional[pulumi.Input[str]] = None,
                 grease_quic_bit: Optional[pulumi.Input[str]] = None,
                 max_ack_delay: Optional[pulumi.Input[int]] = None,
                 max_datagram_frame_size: Optional[pulumi.Input[int]] = None,
                 max_idle_timeout: Optional[pulumi.Input[int]] = None,
                 max_udp_payload_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] ack_delay_exponent: ACK delay exponent (1 - 20, default = 3).
        :param pulumi.Input[int] active_connection_id_limit: Active connection ID limit (1 - 8, default = 2).
        :param pulumi.Input[str] active_migration: Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] grease_quic_bit: Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_ack_delay: Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        :param pulumi.Input[int] max_datagram_frame_size: Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        :param pulumi.Input[int] max_idle_timeout: Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        :param pulumi.Input[int] max_udp_payload_size: Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        if ack_delay_exponent is not None:
            pulumi.set(__self__, "ack_delay_exponent", ack_delay_exponent)
        if active_connection_id_limit is not None:
            pulumi.set(__self__, "active_connection_id_limit", active_connection_id_limit)
        if active_migration is not None:
            pulumi.set(__self__, "active_migration", active_migration)
        if grease_quic_bit is not None:
            pulumi.set(__self__, "grease_quic_bit", grease_quic_bit)
        if max_ack_delay is not None:
            pulumi.set(__self__, "max_ack_delay", max_ack_delay)
        if max_datagram_frame_size is not None:
            pulumi.set(__self__, "max_datagram_frame_size", max_datagram_frame_size)
        if max_idle_timeout is not None:
            pulumi.set(__self__, "max_idle_timeout", max_idle_timeout)
        if max_udp_payload_size is not None:
            pulumi.set(__self__, "max_udp_payload_size", max_udp_payload_size)

    @property
    @pulumi.getter(name="ackDelayExponent")
    def ack_delay_exponent(self) -> Optional[pulumi.Input[int]]:
        """
        ACK delay exponent (1 - 20, default = 3).
        """
        return pulumi.get(self, "ack_delay_exponent")

    @ack_delay_exponent.setter
    def ack_delay_exponent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_delay_exponent", value)

    @property
    @pulumi.getter(name="activeConnectionIdLimit")
    def active_connection_id_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Active connection ID limit (1 - 8, default = 2).
        """
        return pulumi.get(self, "active_connection_id_limit")

    @active_connection_id_limit.setter
    def active_connection_id_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_connection_id_limit", value)

    @property
    @pulumi.getter(name="activeMigration")
    def active_migration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "active_migration")

    @active_migration.setter
    def active_migration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_migration", value)

    @property
    @pulumi.getter(name="greaseQuicBit")
    def grease_quic_bit(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "grease_quic_bit")

    @grease_quic_bit.setter
    def grease_quic_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grease_quic_bit", value)

    @property
    @pulumi.getter(name="maxAckDelay")
    def max_ack_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        """
        return pulumi.get(self, "max_ack_delay")

    @max_ack_delay.setter
    def max_ack_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ack_delay", value)

    @property
    @pulumi.getter(name="maxDatagramFrameSize")
    def max_datagram_frame_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_datagram_frame_size")

    @max_datagram_frame_size.setter
    def max_datagram_frame_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_datagram_frame_size", value)

    @property
    @pulumi.getter(name="maxIdleTimeout")
    def max_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        """
        return pulumi.get(self, "max_idle_timeout")

    @max_idle_timeout.setter
    def max_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_timeout", value)

    @property
    @pulumi.getter(name="maxUdpPayloadSize")
    def max_udp_payload_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_udp_payload_size")

    @max_udp_payload_size.setter
    def max_udp_payload_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_udp_payload_size", value)


@pulumi.input_type
class Accessproxy6ApiGateway6RealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_auth: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6RealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 tunnel_encryption: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_type: Type of address. Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] address: Address or address group of the real server.
        :param pulumi.Input[str] domain: Wildcard domain name of the real server.
        :param pulumi.Input[str] external_auth: Enable/disable use of external browser as user-agent for SAML user authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] health_check: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] health_check_proto: Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        :param pulumi.Input[str] holddown_interval: Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IPv6 address of the real server.
        :param pulumi.Input[str] mappedport: Port for communicating with the real server.
        :param pulumi.Input[int] port: Port for communicating with the real server.
        :param pulumi.Input[str] ssh_client_cert: Set access-proxy SSH client certificate profile.
        :param pulumi.Input[str] ssh_host_key_validation: Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6RealserverSshHostKeyArgs']]] ssh_host_keys: One or more server host key. The structure of `ssh_host_key` block is documented below.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[str] translate_host: Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_encryption: Tunnel encryption. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group of the real server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard domain name of the real server.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of external browser as user-agent for SAML user authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "external_auth")

    @external_auth.setter
    def external_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        """
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Set access-proxy SSH client certificate profile.
        """
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6RealserverSshHostKeyArgs']]]]:
        """
        One or more server host key. The structure of `ssh_host_key` block is documented below.
        """
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGateway6RealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel encryption. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_encryption")

    @tunnel_encryption.setter
    def tunnel_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_encryption", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class Accessproxy6ApiGateway6RealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server host key name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server host key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Accessproxy6ApiGateway6SslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class Accessproxy6ApiGatewayArgs:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayApplicationArgs']]]] = None,
                 h2_support: Optional[pulumi.Input[str]] = None,
                 h3_support: Optional[pulumi.Input[str]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input['Accessproxy6ApiGatewayQuicArgs']] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayRealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewaySslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayApplicationArgs']]] applications: SaaS application controlled by this Access Proxy. The structure of `application` block is documented below.
        :param pulumi.Input[str] h2_support: HTTP2 support, default=Enable. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h3_support: HTTP3/QUIC support, default=Disable. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: API Gateway ID.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        :param pulumi.Input['Accessproxy6ApiGatewayQuicArgs'] quic: QUIC setting. The structure of `quic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayRealserverArgs']]] realservers: Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] saml_redirect: Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] saml_server: SAML service provider configuration for VIP authentication.
        :param pulumi.Input[str] service: Service.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewaySslCipherSuiteArgs']]] ssl_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_renegotiation: Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_vpn_web_portal: SSL-VPN web portal.
        :param pulumi.Input[str] url_map: URL pattern to match.
        :param pulumi.Input[str] url_map_type: Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        :param pulumi.Input[str] virtual_host: Virtual host.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if h2_support is not None:
            pulumi.set(__self__, "h2_support", h2_support)
        if h3_support is not None:
            pulumi.set(__self__, "h3_support", h3_support)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayApplicationArgs']]]]:
        """
        SaaS application controlled by this Access Proxy. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="h2Support")
    def h2_support(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP2 support, default=Enable. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h2_support")

    @h2_support.setter
    def h2_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h2_support", value)

    @property
    @pulumi.getter(name="h3Support")
    def h3_support(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP3/QUIC support, default=Disable. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h3_support")

    @h3_support.setter
    def h3_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h3_support", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        """
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain that HTTP cookie persistence should apply to.
        """
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        """
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        Limit HTTP cookie persistence to the specified path.
        """
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        """
        Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        """
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        API Gateway ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input['Accessproxy6ApiGatewayQuicArgs']]:
        """
        QUIC setting. The structure of `quic` block is documented below.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input['Accessproxy6ApiGatewayQuicArgs']]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayRealserverArgs']]]]:
        """
        Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayRealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        """
        SAML service provider configuration for VIP authentication.
        """
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewaySslCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewaySslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_renegotiation")

    @ssl_renegotiation.setter
    def ssl_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_renegotiation", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        """
        SSL-VPN web portal.
        """
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern to match.
        """
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        """
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual host.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class Accessproxy6ApiGatewayApplicationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: SaaS application name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SaaS application name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Accessproxy6ApiGatewayQuicArgs:
    def __init__(__self__, *,
                 ack_delay_exponent: Optional[pulumi.Input[int]] = None,
                 active_connection_id_limit: Optional[pulumi.Input[int]] = None,
                 active_migration: Optional[pulumi.Input[str]] = None,
                 grease_quic_bit: Optional[pulumi.Input[str]] = None,
                 max_ack_delay: Optional[pulumi.Input[int]] = None,
                 max_datagram_frame_size: Optional[pulumi.Input[int]] = None,
                 max_idle_timeout: Optional[pulumi.Input[int]] = None,
                 max_udp_payload_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] ack_delay_exponent: ACK delay exponent (1 - 20, default = 3).
        :param pulumi.Input[int] active_connection_id_limit: Active connection ID limit (1 - 8, default = 2).
        :param pulumi.Input[str] active_migration: Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] grease_quic_bit: Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_ack_delay: Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        :param pulumi.Input[int] max_datagram_frame_size: Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        :param pulumi.Input[int] max_idle_timeout: Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        :param pulumi.Input[int] max_udp_payload_size: Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        if ack_delay_exponent is not None:
            pulumi.set(__self__, "ack_delay_exponent", ack_delay_exponent)
        if active_connection_id_limit is not None:
            pulumi.set(__self__, "active_connection_id_limit", active_connection_id_limit)
        if active_migration is not None:
            pulumi.set(__self__, "active_migration", active_migration)
        if grease_quic_bit is not None:
            pulumi.set(__self__, "grease_quic_bit", grease_quic_bit)
        if max_ack_delay is not None:
            pulumi.set(__self__, "max_ack_delay", max_ack_delay)
        if max_datagram_frame_size is not None:
            pulumi.set(__self__, "max_datagram_frame_size", max_datagram_frame_size)
        if max_idle_timeout is not None:
            pulumi.set(__self__, "max_idle_timeout", max_idle_timeout)
        if max_udp_payload_size is not None:
            pulumi.set(__self__, "max_udp_payload_size", max_udp_payload_size)

    @property
    @pulumi.getter(name="ackDelayExponent")
    def ack_delay_exponent(self) -> Optional[pulumi.Input[int]]:
        """
        ACK delay exponent (1 - 20, default = 3).
        """
        return pulumi.get(self, "ack_delay_exponent")

    @ack_delay_exponent.setter
    def ack_delay_exponent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_delay_exponent", value)

    @property
    @pulumi.getter(name="activeConnectionIdLimit")
    def active_connection_id_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Active connection ID limit (1 - 8, default = 2).
        """
        return pulumi.get(self, "active_connection_id_limit")

    @active_connection_id_limit.setter
    def active_connection_id_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_connection_id_limit", value)

    @property
    @pulumi.getter(name="activeMigration")
    def active_migration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "active_migration")

    @active_migration.setter
    def active_migration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_migration", value)

    @property
    @pulumi.getter(name="greaseQuicBit")
    def grease_quic_bit(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "grease_quic_bit")

    @grease_quic_bit.setter
    def grease_quic_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grease_quic_bit", value)

    @property
    @pulumi.getter(name="maxAckDelay")
    def max_ack_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        """
        return pulumi.get(self, "max_ack_delay")

    @max_ack_delay.setter
    def max_ack_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ack_delay", value)

    @property
    @pulumi.getter(name="maxDatagramFrameSize")
    def max_datagram_frame_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_datagram_frame_size")

    @max_datagram_frame_size.setter
    def max_datagram_frame_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_datagram_frame_size", value)

    @property
    @pulumi.getter(name="maxIdleTimeout")
    def max_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        """
        return pulumi.get(self, "max_idle_timeout")

    @max_idle_timeout.setter
    def max_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_timeout", value)

    @property
    @pulumi.getter(name="maxUdpPayloadSize")
    def max_udp_payload_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_udp_payload_size")

    @max_udp_payload_size.setter
    def max_udp_payload_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_udp_payload_size", value)


@pulumi.input_type
class Accessproxy6ApiGatewayRealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_auth: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayRealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 tunnel_encryption: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_type: Type of address. Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] address: Address or address group of the real server.
        :param pulumi.Input[str] domain: Wildcard domain name of the real server.
        :param pulumi.Input[str] external_auth: Enable/disable use of external browser as user-agent for SAML user authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] health_check: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] health_check_proto: Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        :param pulumi.Input[str] holddown_interval: Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IPv6 address of the real server.
        :param pulumi.Input[str] mappedport: Port for communicating with the real server.
        :param pulumi.Input[int] port: Port for communicating with the real server.
        :param pulumi.Input[str] ssh_client_cert: Set access-proxy SSH client certificate profile.
        :param pulumi.Input[str] ssh_host_key_validation: Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayRealserverSshHostKeyArgs']]] ssh_host_keys: One or more server host key. The structure of `ssh_host_key` block is documented below.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[str] translate_host: Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_encryption: Tunnel encryption. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group of the real server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard domain name of the real server.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of external browser as user-agent for SAML user authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "external_auth")

    @external_auth.setter
    def external_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        """
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Set access-proxy SSH client certificate profile.
        """
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayRealserverSshHostKeyArgs']]]]:
        """
        One or more server host key. The structure of `ssh_host_key` block is documented below.
        """
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Accessproxy6ApiGatewayRealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel encryption. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_encryption")

    @tunnel_encryption.setter
    def tunnel_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_encryption", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class Accessproxy6ApiGatewayRealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server host key name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server host key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Accessproxy6ApiGatewaySslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class AccessproxyApiGateway6Args:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6ApplicationArgs']]]] = None,
                 h2_support: Optional[pulumi.Input[str]] = None,
                 h3_support: Optional[pulumi.Input[str]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input['AccessproxyApiGateway6QuicArgs']] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6RealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6SslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6ApplicationArgs']]] applications: SaaS application controlled by this Access Proxy. The structure of `application` block is documented below.
        :param pulumi.Input[str] h2_support: HTTP2 support, default=Enable. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h3_support: HTTP3/QUIC support, default=Disable. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: API Gateway ID.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        :param pulumi.Input['AccessproxyApiGateway6QuicArgs'] quic: QUIC setting. The structure of `quic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6RealserverArgs']]] realservers: Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] saml_redirect: Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] saml_server: SAML service provider configuration for VIP authentication.
        :param pulumi.Input[str] service: Service.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6SslCipherSuiteArgs']]] ssl_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_renegotiation: Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_vpn_web_portal: SSL-VPN web portal.
        :param pulumi.Input[str] url_map: URL pattern to match.
        :param pulumi.Input[str] url_map_type: Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        :param pulumi.Input[str] virtual_host: Virtual host.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if h2_support is not None:
            pulumi.set(__self__, "h2_support", h2_support)
        if h3_support is not None:
            pulumi.set(__self__, "h3_support", h3_support)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6ApplicationArgs']]]]:
        """
        SaaS application controlled by this Access Proxy. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6ApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="h2Support")
    def h2_support(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP2 support, default=Enable. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h2_support")

    @h2_support.setter
    def h2_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h2_support", value)

    @property
    @pulumi.getter(name="h3Support")
    def h3_support(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP3/QUIC support, default=Disable. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h3_support")

    @h3_support.setter
    def h3_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h3_support", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        """
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain that HTTP cookie persistence should apply to.
        """
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        """
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        Limit HTTP cookie persistence to the specified path.
        """
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        """
        Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        """
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        API Gateway ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input['AccessproxyApiGateway6QuicArgs']]:
        """
        QUIC setting. The structure of `quic` block is documented below.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input['AccessproxyApiGateway6QuicArgs']]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6RealserverArgs']]]]:
        """
        Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6RealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        """
        SAML service provider configuration for VIP authentication.
        """
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6SslCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6SslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_renegotiation")

    @ssl_renegotiation.setter
    def ssl_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_renegotiation", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        """
        SSL-VPN web portal.
        """
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern to match.
        """
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        """
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual host.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class AccessproxyApiGateway6ApplicationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: SaaS application name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SaaS application name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AccessproxyApiGateway6QuicArgs:
    def __init__(__self__, *,
                 ack_delay_exponent: Optional[pulumi.Input[int]] = None,
                 active_connection_id_limit: Optional[pulumi.Input[int]] = None,
                 active_migration: Optional[pulumi.Input[str]] = None,
                 grease_quic_bit: Optional[pulumi.Input[str]] = None,
                 max_ack_delay: Optional[pulumi.Input[int]] = None,
                 max_datagram_frame_size: Optional[pulumi.Input[int]] = None,
                 max_idle_timeout: Optional[pulumi.Input[int]] = None,
                 max_udp_payload_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] ack_delay_exponent: ACK delay exponent (1 - 20, default = 3).
        :param pulumi.Input[int] active_connection_id_limit: Active connection ID limit (1 - 8, default = 2).
        :param pulumi.Input[str] active_migration: Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] grease_quic_bit: Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_ack_delay: Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        :param pulumi.Input[int] max_datagram_frame_size: Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        :param pulumi.Input[int] max_idle_timeout: Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        :param pulumi.Input[int] max_udp_payload_size: Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        if ack_delay_exponent is not None:
            pulumi.set(__self__, "ack_delay_exponent", ack_delay_exponent)
        if active_connection_id_limit is not None:
            pulumi.set(__self__, "active_connection_id_limit", active_connection_id_limit)
        if active_migration is not None:
            pulumi.set(__self__, "active_migration", active_migration)
        if grease_quic_bit is not None:
            pulumi.set(__self__, "grease_quic_bit", grease_quic_bit)
        if max_ack_delay is not None:
            pulumi.set(__self__, "max_ack_delay", max_ack_delay)
        if max_datagram_frame_size is not None:
            pulumi.set(__self__, "max_datagram_frame_size", max_datagram_frame_size)
        if max_idle_timeout is not None:
            pulumi.set(__self__, "max_idle_timeout", max_idle_timeout)
        if max_udp_payload_size is not None:
            pulumi.set(__self__, "max_udp_payload_size", max_udp_payload_size)

    @property
    @pulumi.getter(name="ackDelayExponent")
    def ack_delay_exponent(self) -> Optional[pulumi.Input[int]]:
        """
        ACK delay exponent (1 - 20, default = 3).
        """
        return pulumi.get(self, "ack_delay_exponent")

    @ack_delay_exponent.setter
    def ack_delay_exponent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_delay_exponent", value)

    @property
    @pulumi.getter(name="activeConnectionIdLimit")
    def active_connection_id_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Active connection ID limit (1 - 8, default = 2).
        """
        return pulumi.get(self, "active_connection_id_limit")

    @active_connection_id_limit.setter
    def active_connection_id_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_connection_id_limit", value)

    @property
    @pulumi.getter(name="activeMigration")
    def active_migration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "active_migration")

    @active_migration.setter
    def active_migration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_migration", value)

    @property
    @pulumi.getter(name="greaseQuicBit")
    def grease_quic_bit(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "grease_quic_bit")

    @grease_quic_bit.setter
    def grease_quic_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grease_quic_bit", value)

    @property
    @pulumi.getter(name="maxAckDelay")
    def max_ack_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        """
        return pulumi.get(self, "max_ack_delay")

    @max_ack_delay.setter
    def max_ack_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ack_delay", value)

    @property
    @pulumi.getter(name="maxDatagramFrameSize")
    def max_datagram_frame_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_datagram_frame_size")

    @max_datagram_frame_size.setter
    def max_datagram_frame_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_datagram_frame_size", value)

    @property
    @pulumi.getter(name="maxIdleTimeout")
    def max_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        """
        return pulumi.get(self, "max_idle_timeout")

    @max_idle_timeout.setter
    def max_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_timeout", value)

    @property
    @pulumi.getter(name="maxUdpPayloadSize")
    def max_udp_payload_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_udp_payload_size")

    @max_udp_payload_size.setter
    def max_udp_payload_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_udp_payload_size", value)


@pulumi.input_type
class AccessproxyApiGateway6RealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_auth: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6RealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 tunnel_encryption: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_type: Type of address. Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] address: Address or address group of the real server.
        :param pulumi.Input[str] domain: Wildcard domain name of the real server.
        :param pulumi.Input[str] external_auth: Enable/disable use of external browser as user-agent for SAML user authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] health_check: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] health_check_proto: Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        :param pulumi.Input[str] holddown_interval: Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IPv6 address of the real server.
        :param pulumi.Input[str] mappedport: Port for communicating with the real server.
        :param pulumi.Input[int] port: Port for communicating with the real server.
        :param pulumi.Input[str] ssh_client_cert: Set access-proxy SSH client certificate profile.
        :param pulumi.Input[str] ssh_host_key_validation: Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6RealserverSshHostKeyArgs']]] ssh_host_keys: One or more server host key. The structure of `ssh_host_key` block is documented below.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[str] translate_host: Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_encryption: Tunnel encryption. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group of the real server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard domain name of the real server.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of external browser as user-agent for SAML user authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "external_auth")

    @external_auth.setter
    def external_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        """
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Set access-proxy SSH client certificate profile.
        """
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6RealserverSshHostKeyArgs']]]]:
        """
        One or more server host key. The structure of `ssh_host_key` block is documented below.
        """
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGateway6RealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel encryption. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_encryption")

    @tunnel_encryption.setter
    def tunnel_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_encryption", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class AccessproxyApiGateway6RealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server host key name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server host key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AccessproxyApiGateway6SslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class AccessproxyApiGatewayArgs:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayApplicationArgs']]]] = None,
                 h2_support: Optional[pulumi.Input[str]] = None,
                 h3_support: Optional[pulumi.Input[str]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input['AccessproxyApiGatewayQuicArgs']] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayRealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewaySslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayApplicationArgs']]] applications: SaaS application controlled by this Access Proxy. The structure of `application` block is documented below.
        :param pulumi.Input[str] h2_support: HTTP2 support, default=Enable. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h3_support: HTTP3/QUIC support, default=Disable. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: API Gateway ID.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        :param pulumi.Input['AccessproxyApiGatewayQuicArgs'] quic: QUIC setting. The structure of `quic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayRealserverArgs']]] realservers: Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] saml_redirect: Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] saml_server: SAML service provider configuration for VIP authentication.
        :param pulumi.Input[str] service: Service.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewaySslCipherSuiteArgs']]] ssl_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_renegotiation: Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_vpn_web_portal: SSL-VPN web portal.
        :param pulumi.Input[str] url_map: URL pattern to match.
        :param pulumi.Input[str] url_map_type: Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        :param pulumi.Input[str] virtual_host: Virtual host.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if h2_support is not None:
            pulumi.set(__self__, "h2_support", h2_support)
        if h3_support is not None:
            pulumi.set(__self__, "h3_support", h3_support)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayApplicationArgs']]]]:
        """
        SaaS application controlled by this Access Proxy. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="h2Support")
    def h2_support(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP2 support, default=Enable. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h2_support")

    @h2_support.setter
    def h2_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h2_support", value)

    @property
    @pulumi.getter(name="h3Support")
    def h3_support(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP3/QUIC support, default=Disable. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h3_support")

    @h3_support.setter
    def h3_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h3_support", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        """
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain that HTTP cookie persistence should apply to.
        """
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        """
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        Limit HTTP cookie persistence to the specified path.
        """
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        """
        Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        """
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        API Gateway ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input['AccessproxyApiGatewayQuicArgs']]:
        """
        QUIC setting. The structure of `quic` block is documented below.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input['AccessproxyApiGatewayQuicArgs']]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayRealserverArgs']]]]:
        """
        Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayRealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        """
        SAML service provider configuration for VIP authentication.
        """
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewaySslCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewaySslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_renegotiation")

    @ssl_renegotiation.setter
    def ssl_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_renegotiation", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        """
        SSL-VPN web portal.
        """
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern to match.
        """
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        """
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual host.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class AccessproxyApiGatewayApplicationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: SaaS application name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SaaS application name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AccessproxyApiGatewayQuicArgs:
    def __init__(__self__, *,
                 ack_delay_exponent: Optional[pulumi.Input[int]] = None,
                 active_connection_id_limit: Optional[pulumi.Input[int]] = None,
                 active_migration: Optional[pulumi.Input[str]] = None,
                 grease_quic_bit: Optional[pulumi.Input[str]] = None,
                 max_ack_delay: Optional[pulumi.Input[int]] = None,
                 max_datagram_frame_size: Optional[pulumi.Input[int]] = None,
                 max_idle_timeout: Optional[pulumi.Input[int]] = None,
                 max_udp_payload_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] ack_delay_exponent: ACK delay exponent (1 - 20, default = 3).
        :param pulumi.Input[int] active_connection_id_limit: Active connection ID limit (1 - 8, default = 2).
        :param pulumi.Input[str] active_migration: Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] grease_quic_bit: Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_ack_delay: Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        :param pulumi.Input[int] max_datagram_frame_size: Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        :param pulumi.Input[int] max_idle_timeout: Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        :param pulumi.Input[int] max_udp_payload_size: Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        if ack_delay_exponent is not None:
            pulumi.set(__self__, "ack_delay_exponent", ack_delay_exponent)
        if active_connection_id_limit is not None:
            pulumi.set(__self__, "active_connection_id_limit", active_connection_id_limit)
        if active_migration is not None:
            pulumi.set(__self__, "active_migration", active_migration)
        if grease_quic_bit is not None:
            pulumi.set(__self__, "grease_quic_bit", grease_quic_bit)
        if max_ack_delay is not None:
            pulumi.set(__self__, "max_ack_delay", max_ack_delay)
        if max_datagram_frame_size is not None:
            pulumi.set(__self__, "max_datagram_frame_size", max_datagram_frame_size)
        if max_idle_timeout is not None:
            pulumi.set(__self__, "max_idle_timeout", max_idle_timeout)
        if max_udp_payload_size is not None:
            pulumi.set(__self__, "max_udp_payload_size", max_udp_payload_size)

    @property
    @pulumi.getter(name="ackDelayExponent")
    def ack_delay_exponent(self) -> Optional[pulumi.Input[int]]:
        """
        ACK delay exponent (1 - 20, default = 3).
        """
        return pulumi.get(self, "ack_delay_exponent")

    @ack_delay_exponent.setter
    def ack_delay_exponent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_delay_exponent", value)

    @property
    @pulumi.getter(name="activeConnectionIdLimit")
    def active_connection_id_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Active connection ID limit (1 - 8, default = 2).
        """
        return pulumi.get(self, "active_connection_id_limit")

    @active_connection_id_limit.setter
    def active_connection_id_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_connection_id_limit", value)

    @property
    @pulumi.getter(name="activeMigration")
    def active_migration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "active_migration")

    @active_migration.setter
    def active_migration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_migration", value)

    @property
    @pulumi.getter(name="greaseQuicBit")
    def grease_quic_bit(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "grease_quic_bit")

    @grease_quic_bit.setter
    def grease_quic_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grease_quic_bit", value)

    @property
    @pulumi.getter(name="maxAckDelay")
    def max_ack_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        """
        return pulumi.get(self, "max_ack_delay")

    @max_ack_delay.setter
    def max_ack_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ack_delay", value)

    @property
    @pulumi.getter(name="maxDatagramFrameSize")
    def max_datagram_frame_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_datagram_frame_size")

    @max_datagram_frame_size.setter
    def max_datagram_frame_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_datagram_frame_size", value)

    @property
    @pulumi.getter(name="maxIdleTimeout")
    def max_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        """
        return pulumi.get(self, "max_idle_timeout")

    @max_idle_timeout.setter
    def max_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_timeout", value)

    @property
    @pulumi.getter(name="maxUdpPayloadSize")
    def max_udp_payload_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_udp_payload_size")

    @max_udp_payload_size.setter
    def max_udp_payload_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_udp_payload_size", value)


@pulumi.input_type
class AccessproxyApiGatewayRealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_auth: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayRealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 tunnel_encryption: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_type: Type of address. Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] address: Address or address group of the real server.
        :param pulumi.Input[str] domain: Wildcard domain name of the real server.
        :param pulumi.Input[str] external_auth: Enable/disable use of external browser as user-agent for SAML user authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] health_check: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] health_check_proto: Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        :param pulumi.Input[str] holddown_interval: Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IPv6 address of the real server.
        :param pulumi.Input[str] mappedport: Port for communicating with the real server.
        :param pulumi.Input[int] port: Port for communicating with the real server.
        :param pulumi.Input[str] ssh_client_cert: Set access-proxy SSH client certificate profile.
        :param pulumi.Input[str] ssh_host_key_validation: Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayRealserverSshHostKeyArgs']]] ssh_host_keys: One or more server host key. The structure of `ssh_host_key` block is documented below.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[str] translate_host: Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_encryption: Tunnel encryption. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group of the real server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard domain name of the real server.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of external browser as user-agent for SAML user authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "external_auth")

    @external_auth.setter
    def external_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        """
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Set access-proxy SSH client certificate profile.
        """
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayRealserverSshHostKeyArgs']]]]:
        """
        One or more server host key. The structure of `ssh_host_key` block is documented below.
        """
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessproxyApiGatewayRealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel encryption. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_encryption")

    @tunnel_encryption.setter
    def tunnel_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_encryption", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class AccessproxyApiGatewayRealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server host key name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server host key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AccessproxyApiGatewaySslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class AccessproxysshclientcertCertExtensionArgs:
    def __init__(__self__, *,
                 critical: Optional[pulumi.Input[str]] = None,
                 data: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] critical: Critical option. Valid values: `no`, `yes`.
        :param pulumi.Input[str] data: Data of certificate extension.
        :param pulumi.Input[str] name: Name of certificate extension.
        :param pulumi.Input[str] type: Type of certificate extension. Valid values: `fixed`, `user`.
        """
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[str]]:
        """
        Critical option. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        """
        Data of certificate extension.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of certificate extension.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of certificate extension. Valid values: `fixed`, `user`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class Address6ListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: IP.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class Address6MacaddrArgs:
    def __init__(__self__, *,
                 macaddr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] macaddr: MAC address ranges <start>[-<end>] separated by space.
        """
        if macaddr is not None:
            pulumi.set(__self__, "macaddr", macaddr)

    @property
    @pulumi.getter
    def macaddr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address ranges <start>[-<end>] separated by space.
        """
        return pulumi.get(self, "macaddr")

    @macaddr.setter
    def macaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "macaddr", value)


@pulumi.input_type
class Address6SubnetSegmentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] type: Subnet segment type. Valid values: `any`, `specific`.
        :param pulumi.Input[str] value: Subnet segment value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet segment type. Valid values: `any`, `specific`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet segment value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Address6TaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['Address6TaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tagging entry name.
        :param pulumi.Input[Sequence[pulumi.Input['Address6TaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Address6TaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Address6TaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class Address6TaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Address6templateSubnetSegmentArgs:
    def __init__(__self__, *,
                 bits: Optional[pulumi.Input[int]] = None,
                 exclusive: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['Address6templateSubnetSegmentValueArgs']]]] = None):
        """
        :param pulumi.Input[int] bits: Number of bits.
        :param pulumi.Input[str] exclusive: Enable/disable exclusive value. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: Subnet segment ID.
        :param pulumi.Input[str] name: Subnet segment name.
        :param pulumi.Input[Sequence[pulumi.Input['Address6templateSubnetSegmentValueArgs']]] values: Subnet segment values. The structure of `values` block is documented below.
        """
        if bits is not None:
            pulumi.set(__self__, "bits", bits)
        if exclusive is not None:
            pulumi.set(__self__, "exclusive", exclusive)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def bits(self) -> Optional[pulumi.Input[int]]:
        """
        Number of bits.
        """
        return pulumi.get(self, "bits")

    @bits.setter
    def bits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bits", value)

    @property
    @pulumi.getter
    def exclusive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exclusive value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "exclusive")

    @exclusive.setter
    def exclusive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclusive", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Subnet segment ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet segment name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Address6templateSubnetSegmentValueArgs']]]]:
        """
        Subnet segment values. The structure of `values` block is documented below.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Address6templateSubnetSegmentValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class Address6templateSubnetSegmentValueArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Subnet segment value name.
        :param pulumi.Input[str] value: Subnet segment value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet segment value name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet segment value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AddressFssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: FSSO group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FSSO group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AddressListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: IP.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class AddressMacaddrArgs:
    def __init__(__self__, *,
                 macaddr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] macaddr: MAC address ranges <start>[-<end>] separated by space.
        """
        if macaddr is not None:
            pulumi.set(__self__, "macaddr", macaddr)

    @property
    @pulumi.getter
    def macaddr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address ranges <start>[-<end>] separated by space.
        """
        return pulumi.get(self, "macaddr")

    @macaddr.setter
    def macaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "macaddr", value)


@pulumi.input_type
class AddressTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['AddressTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tagging entry name.
        :param pulumi.Input[Sequence[pulumi.Input['AddressTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AddressTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AddressTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class AddressTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Addrgrp6ExcludeMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address6 name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address6 name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Addrgrp6MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address6/addrgrp6 name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address6/addrgrp6 name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Addrgrp6TaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['Addrgrp6TaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tagging entry name.
        :param pulumi.Input[Sequence[pulumi.Input['Addrgrp6TaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Addrgrp6TaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Addrgrp6TaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class Addrgrp6TaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AddrgrpExcludeMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AddrgrpMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AddrgrpTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['AddrgrpTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tagging entry name.
        :param pulumi.Input[Sequence[pulumi.Input['AddrgrpTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AddrgrpTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AddrgrpTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class AddrgrpTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthportalGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CentralsnatmapDstAddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CentralsnatmapDstAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CentralsnatmapDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CentralsnatmapNatIppool6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CentralsnatmapNatIppoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CentralsnatmapOrigAddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CentralsnatmapOrigAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CentralsnatmapSortStatePolicyListArgs:
    def __init__(__self__, *,
                 policyid: Optional[pulumi.Input[str]] = None):
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policyid", value)


@pulumi.input_type
class CentralsnatmapSrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CountryRegionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Region ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Region ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class DecryptedtrafficmirrorInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Decrypted traffic mirror interface.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Decrypted traffic mirror interface.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DoSpolicy6AnomalyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 thresholddefault: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Action taken when the threshold is reached.
        :param pulumi.Input[str] log: Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Anomaly name.
        :param pulumi.Input[str] quarantine: Quarantine method. Valid values: `none`, `attacker`.
        :param pulumi.Input[str] quarantine_expiry: Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        :param pulumi.Input[str] quarantine_log: Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this anomaly. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] threshold: Anomaly threshold. Number of detected instances that triggers the anomaly action. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: packets per minute. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: packets per second or concurrent session number.
        :param pulumi.Input[int] thresholddefault: Number of detected instances which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: packets per minute. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: packets per second or concurrent session number.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken when the threshold is reached.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine method. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this anomaly. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Anomaly threshold. Number of detected instances that triggers the anomaly action. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: packets per minute. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: packets per second or concurrent session number.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[pulumi.Input[int]]:
        """
        Number of detected instances which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: packets per minute. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: packets per second or concurrent session number.
        """
        return pulumi.get(self, "thresholddefault")

    @thresholddefault.setter
    def thresholddefault(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thresholddefault", value)


@pulumi.input_type
class DoSpolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DoSpolicy6ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DoSpolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DoSpolicyAnomalyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 thresholddefault: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Action taken when the threshold is reached.
        :param pulumi.Input[str] log: Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Anomaly name.
        :param pulumi.Input[str] quarantine: Quarantine method. Valid values: `none`, `attacker`.
        :param pulumi.Input[str] quarantine_expiry: Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        :param pulumi.Input[str] quarantine_log: Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this anomaly. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] threshold: Anomaly threshold. Number of detected instances that triggers the anomaly action. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: packets per minute. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: packets per second or concurrent session number.
        :param pulumi.Input[int] thresholddefault: Number of detected instances which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: packets per minute. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: packets per second or concurrent session number.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken when the threshold is reached.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine method. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this anomaly. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Anomaly threshold. Number of detected instances that triggers the anomaly action. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: packets per minute. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: packets per second or concurrent session number.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[pulumi.Input[int]]:
        """
        Number of detected instances which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: packets per minute. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: packets per second or concurrent session number.
        """
        return pulumi.get(self, "thresholddefault")

    @thresholddefault.setter
    def thresholddefault(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thresholddefault", value)


@pulumi.input_type
class DoSpolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DoSpolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DoSpolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IdentitybasedrouteRuleArgs:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['IdentitybasedrouteRuleGroupArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] device: Outgoing interface for the rule.
        :param pulumi.Input[str] gateway: IPv4 address of the gateway (Format: xxx.xxx.xxx.xxx , Default: 0.0.0.0).
        :param pulumi.Input[Sequence[pulumi.Input['IdentitybasedrouteRuleGroupArgs']]] groups: Select one or more group(s) from available groups that are allowed to use this route. Separate group names with a space. The structure of `groups` block is documented below.
        :param pulumi.Input[int] id: Rule ID.
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        Outgoing interface for the rule.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the gateway (Format: xxx.xxx.xxx.xxx , Default: 0.0.0.0).
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IdentitybasedrouteRuleGroupArgs']]]]:
        """
        Select one or more group(s) from available groups that are allowed to use this route. Separate group names with a space. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IdentitybasedrouteRuleGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class IdentitybasedrouteRuleGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Interfacepolicy6Dstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Interfacepolicy6Service6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Interfacepolicy6Srcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InterfacepolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InterfacepolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InterfacepolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InternetserviceadditionEntryArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceadditionEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] id: Entry ID(1-255).
        :param pulumi.Input[Sequence[pulumi.Input['InternetserviceadditionEntryPortRangeArgs']]] port_ranges: Port ranges in the custom entry. The structure of `port_range` block is documented below.
        :param pulumi.Input[int] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID(1-255).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceadditionEntryPortRangeArgs']]]]:
        """
        Port ranges in the custom entry. The structure of `port_range` block is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceadditionEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class InternetserviceadditionEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_port: Integer value for ending TCP/UDP/SCTP destination port in range (1 to 65535).
        :param pulumi.Input[int] id: Custom entry port range ID.
        :param pulumi.Input[int] start_port: Integer value for starting TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for ending TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom entry port range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for starting TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class InternetservicecustomEntryArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 dst6s: Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryDst6Args']]]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryDstArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryDst6Args']]] dst6s: Destination address6 or address6 group name. The structure of `dst6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryDstArgs']]] dsts: Destination address or address group name. The structure of `dst` block is documented below.
        :param pulumi.Input[int] id: Entry ID(1-255).
        :param pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryPortRangeArgs']]] port_ranges: Port ranges in the custom entry. The structure of `port_range` block is documented below.
        :param pulumi.Input[int] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryDst6Args']]]]:
        """
        Destination address6 or address6 group name. The structure of `dst6` block is documented below.
        """
        return pulumi.get(self, "dst6s")

    @dst6s.setter
    def dst6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryDst6Args']]]]):
        pulumi.set(self, "dst6s", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryDstArgs']]]]:
        """
        Destination address or address group name. The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID(1-255).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryPortRangeArgs']]]]:
        """
        Port ranges in the custom entry. The structure of `port_range` block is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicecustomEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class InternetservicecustomEntryDst6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InternetservicecustomEntryDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select the destination address6 or address group object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select the destination address6 or address group object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InternetservicecustomEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_port: Integer value for ending TCP/UDP/SCTP destination port in range (1 to 65535).
        :param pulumi.Input[int] id: Custom entry port range ID.
        :param pulumi.Input[int] start_port: Integer value for starting TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for ending TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom entry port range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for starting TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class InternetservicecustomgroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group member name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group member name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InternetservicedefinitionEntryArgs:
    def __init__(__self__, *,
                 category_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicedefinitionEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] category_id: Internet Service category ID.
        :param pulumi.Input[str] name: Internet Service name.
        :param pulumi.Input[int] port: Integer value for ending TCP/UDP/SCTP destination port in range (0 to 65535). 0 means undefined.
        :param pulumi.Input[Sequence[pulumi.Input['InternetservicedefinitionEntryPortRangeArgs']]] port_ranges: Port ranges in the definition entry. The structure of `port_range` block is documented below.
        :param pulumi.Input[int] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        :param pulumi.Input[int] seq_num: Entry sequence number.
        """
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service category ID.
        """
        return pulumi.get(self, "category_id")

    @category_id.setter
    def category_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for ending TCP/UDP/SCTP destination port in range (0 to 65535). 0 means undefined.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicedefinitionEntryPortRangeArgs']]]]:
        """
        Port ranges in the definition entry. The structure of `port_range` block is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetservicedefinitionEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Entry sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class InternetservicedefinitionEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_port: Ending TCP/UDP/SCTP destination port (1 to 65535).
        :param pulumi.Input[int] id: Custom entry port range ID.
        :param pulumi.Input[int] start_port: Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        Ending TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom entry port range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class InternetserviceextensionDisableEntryArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip6_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryIp6RangeArgs']]]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryIpRangeArgs']]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] id: Disable entry ID.
        :param pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryIp6RangeArgs']]] ip6_ranges: IPv6 ranges in the disable entry. The structure of `ip6_range` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryIpRangeArgs']]] ip_ranges: IP ranges in the disable entry. The structure of `ip_range` block is documented below.
        :param pulumi.Input[int] port: Integer value for the TCP/IP port (0 - 65535).
        :param pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryPortRangeArgs']]] port_ranges: Port ranges in the disable entry. The structure of `port_range` block is documented below.
        :param pulumi.Input[int] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip6_ranges is not None:
            pulumi.set(__self__, "ip6_ranges", ip6_ranges)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Disable entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip6Ranges")
    def ip6_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryIp6RangeArgs']]]]:
        """
        IPv6 ranges in the disable entry. The structure of `ip6_range` block is documented below.
        """
        return pulumi.get(self, "ip6_ranges")

    @ip6_ranges.setter
    def ip6_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryIp6RangeArgs']]]]):
        pulumi.set(self, "ip6_ranges", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryIpRangeArgs']]]]:
        """
        IP ranges in the disable entry. The structure of `ip_range` block is documented below.
        """
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryIpRangeArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the TCP/IP port (0 - 65535).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryPortRangeArgs']]]]:
        """
        Port ranges in the disable entry. The structure of `port_range` block is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionDisableEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class InternetserviceextensionDisableEntryIp6RangeArgs:
    def __init__(__self__, *,
                 end_ip6: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip6: End IPv6 address.
        :param pulumi.Input[int] id: Disable entry ID.
        :param pulumi.Input[str] start_ip6: Start IPv6 address.
        """
        if end_ip6 is not None:
            pulumi.set(__self__, "end_ip6", end_ip6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip6 is not None:
            pulumi.set(__self__, "start_ip6", start_ip6)

    @property
    @pulumi.getter(name="endIp6")
    def end_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        End IPv6 address.
        """
        return pulumi.get(self, "end_ip6")

    @end_ip6.setter
    def end_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip6", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Disable entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp6")
    def start_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Start IPv6 address.
        """
        return pulumi.get(self, "start_ip6")

    @start_ip6.setter
    def start_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip6", value)


@pulumi.input_type
class InternetserviceextensionDisableEntryIpRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: End IP address.
               
               The `ip6_range` block supports:
        :param pulumi.Input[int] id: Disable entry range ID.
        :param pulumi.Input[str] start_ip: Start IP address.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End IP address.

        The `ip6_range` block supports:
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Disable entry range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start IP address.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class InternetserviceextensionDisableEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_port: Ending TCP/UDP/SCTP destination port (1 to 65535).
        :param pulumi.Input[int] id: Custom entry port range ID.
        :param pulumi.Input[int] start_port: Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        Ending TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom entry port range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class InternetserviceextensionEntryArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 dst6s: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryDst6Args']]]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryDstArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryDst6Args']]] dst6s: Destination address6 or address6 group name. The structure of `dst6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryDstArgs']]] dsts: Destination address or address group name. The structure of `dst` block is documented below.
        :param pulumi.Input[int] id: Entry ID(1-255).
        :param pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryPortRangeArgs']]] port_ranges: Port ranges in the custom entry. The structure of `port_range` block is documented below.
        :param pulumi.Input[int] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryDst6Args']]]]:
        """
        Destination address6 or address6 group name. The structure of `dst6` block is documented below.
        """
        return pulumi.get(self, "dst6s")

    @dst6s.setter
    def dst6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryDst6Args']]]]):
        pulumi.set(self, "dst6s", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryDstArgs']]]]:
        """
        Destination address or address group name. The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID(1-255).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryPortRangeArgs']]]]:
        """
        Port ranges in the custom entry. The structure of `port_range` block is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetserviceextensionEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class InternetserviceextensionEntryDst6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select the destination address6 or address group object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select the destination address6 or address group object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InternetserviceextensionEntryDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select the destination address6 or address group object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select the destination address6 or address group object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InternetserviceextensionEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_port: Ending TCP/UDP/SCTP destination port (1 to 65535).
        :param pulumi.Input[int] id: Custom entry port range ID.
        :param pulumi.Input[int] start_port: Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        Ending TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom entry port range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class InternetservicegroupMemberArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Internet Service ID.
        :param pulumi.Input[str] name: Internet Service name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InternetservicesubappSubAppArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Subapp ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Subapp ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class Localinpolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Localinpolicy6ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Localinpolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LocalinpolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LocalinpolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LocalinpolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Multicastaddress6TaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['Multicastaddress6TaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tagging entry name.
        :param pulumi.Input[Sequence[pulumi.Input['Multicastaddress6TaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Multicastaddress6TaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Multicastaddress6TaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class Multicastaddress6TaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class MulticastaddressTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['MulticastaddressTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tagging entry name.
        :param pulumi.Input[Sequence[pulumi.Input['MulticastaddressTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MulticastaddressTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MulticastaddressTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class MulticastaddressTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Multicastpolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Multicastpolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class MulticastpolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Destination address objects.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Destination address objects.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class MulticastpolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Source address objects.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Source address objects.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy46DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy46PoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy46ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy46SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy64DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy64PoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy64ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy64SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6AppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Category IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Category IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class Policy6AppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6ApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class Policy6CustomLogFieldArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] field_id: Custom log field.
        """
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        """
        Custom log field.
        """
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class Policy6DeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Device or group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Device or group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6DstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6FssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6GroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6PoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6SrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6SslMirrorIntfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Policy6UrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class Policy6UserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of individual users that can authenticate with this policy.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of individual users that can authenticate with this policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Category IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Category IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PolicyAppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PolicyCustomLogFieldArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] field_id: Custom log field.
        """
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        """
        Custom log field.
        """
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class PolicyDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Device or group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Device or group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyFssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetService6CustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetService6CustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetService6GroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetService6NameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetService6SrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetService6SrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetService6SrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetService6SrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetServiceSrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetServiceSrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetServiceSrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyInternetServiceSrcIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PolicyInternetServiceSrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyNetworkServiceDynamicArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Dynamic Network Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic Network Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyNetworkServiceSrcDynamicArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Dynamic Network Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic Network Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyNtlmEnabledBrowserArgs:
    def __init__(__self__, *,
                 user_agent_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] user_agent_string: User agent string.
        """
        if user_agent_string is not None:
            pulumi.set(__self__, "user_agent_string", user_agent_string)

    @property
    @pulumi.getter(name="userAgentString")
    def user_agent_string(self) -> Optional[pulumi.Input[str]]:
        """
        User agent string.
        """
        return pulumi.get(self, "user_agent_string")

    @user_agent_string.setter
    def user_agent_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent_string", value)


@pulumi.input_type
class PolicyPcpPoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: PCP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        PCP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyPoolname6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyPoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyRtpAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicySgtArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Security group tag.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Security group tag.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PolicySortStatePolicyListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policyid", value)


@pulumi.input_type
class PolicySrcVendorMacArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Vendor MAC ID.
               
               The `internet_service6_name` block supports:
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Vendor MAC ID.

        The `internet_service6_name` block supports:
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicySslMirrorIntfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyUrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of individual users that can authenticate with this policy.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of individual users that can authenticate with this policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyZtnaEmsTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyZtnaEmsTagSecondaryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyZtnaGeoTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileprotocoloptionsCifsArgs:
    def __init__(__self__, *,
                 domain_controller: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 server_credential_type: Optional[pulumi.Input[str]] = None,
                 server_keytabs: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileprotocoloptionsCifsServerKeytabArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] domain_controller: Domain for which to decrypt CIFS traffic.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (MB).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 445).
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_credential_type: CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileprotocoloptionsCifsServerKeytabArgs']]] server_keytabs: Server keytab. The structure of `server_keytab` block is documented below.
        :param pulumi.Input[str] status: Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_window_maximum: Maximum dynamic TCP window size.
        :param pulumi.Input[int] tcp_window_minimum: Minimum dynamic TCP window size.
        :param pulumi.Input[int] tcp_window_size: Set TCP static window size.
        :param pulumi.Input[str] tcp_window_type: Specify type of TCP window to use for this protocol.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        if domain_controller is not None:
            pulumi.set(__self__, "domain_controller", domain_controller)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if server_credential_type is not None:
            pulumi.set(__self__, "server_credential_type", server_credential_type)
        if server_keytabs is not None:
            pulumi.set(__self__, "server_keytabs", server_keytabs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Domain for which to decrypt CIFS traffic.
        """
        return pulumi.get(self, "domain_controller")

    @domain_controller.setter
    def domain_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_controller", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (MB).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 445).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="serverCredentialType")
    def server_credential_type(self) -> Optional[pulumi.Input[str]]:
        """
        CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
        """
        return pulumi.get(self, "server_credential_type")

    @server_credential_type.setter
    def server_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_credential_type", value)

    @property
    @pulumi.getter(name="serverKeytabs")
    def server_keytabs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileprotocoloptionsCifsServerKeytabArgs']]]]:
        """
        Server keytab. The structure of `server_keytab` block is documented below.
        """
        return pulumi.get(self, "server_keytabs")

    @server_keytabs.setter
    def server_keytabs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileprotocoloptionsCifsServerKeytabArgs']]]]):
        pulumi.set(self, "server_keytabs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum dynamic TCP window size.
        """
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum dynamic TCP window size.
        """
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        """
        Set TCP static window size.
        """
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify type of TCP window to use for this protocol.
        """
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class ProfileprotocoloptionsCifsServerKeytabArgs:
    def __init__(__self__, *,
                 keytab: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keytab: Base64 encoded keytab file containing credential of the server.
        :param pulumi.Input[str] principal: Service principal.  For example, "host/cifsserver.example.com@example.com".
        """
        if keytab is not None:
            pulumi.set(__self__, "keytab", keytab)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def keytab(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded keytab file containing credential of the server.
        """
        return pulumi.get(self, "keytab")

    @keytab.setter
    def keytab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keytab", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input[str]]:
        """
        Service principal.  For example, "host/cifsserver.example.com@example.com".
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal", value)


@pulumi.input_type
class ProfileprotocoloptionsDnsArgs:
    def __init__(__self__, *,
                 ports: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 53).
        :param pulumi.Input[str] status: Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        """
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 53).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileprotocoloptionsFtpArgs:
    def __init__(__self__, *,
                 comfort_amount: Optional[pulumi.Input[int]] = None,
                 comfort_interval: Optional[pulumi.Input[int]] = None,
                 explicit_ftp_tls: Optional[pulumi.Input[str]] = None,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stream_based_uncompressed_limit: Optional[pulumi.Input[int]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] comfort_amount: Number of bytes to send in each transmission for client comforting (bytes). On FortiOS versions 6.2.0: 1 - 10240 bytes, default = 1. On FortiOS versions 6.2.4-7.2.3: 1 - 65535 bytes, default = 1.
        :param pulumi.Input[int] comfort_interval: Interval between successive transmissions of data for client comforting (seconds).
        :param pulumi.Input[str] explicit_ftp_tls: Enable/disable FTP redirection for explicit FTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `clientcomfort`, `oversize`, `splice`, `bypass-rest-command`, `bypass-mode-command`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (MB).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 21).
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[str] status: Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] stream_based_uncompressed_limit: Maximum stream-based uncompressed data size that will be scanned in megabytes. Stream-based uncompression used only under certain conditions (unlimited = 0, default = 0).
        :param pulumi.Input[int] tcp_window_maximum: Maximum dynamic TCP window size.
        :param pulumi.Input[int] tcp_window_minimum: Minimum dynamic TCP window size.
        :param pulumi.Input[int] tcp_window_size: Set TCP static window size.
        :param pulumi.Input[str] tcp_window_type: TCP window type to use for this protocol.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if explicit_ftp_tls is not None:
            pulumi.set(__self__, "explicit_ftp_tls", explicit_ftp_tls)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[pulumi.Input[int]]:
        """
        Number of bytes to send in each transmission for client comforting (bytes). On FortiOS versions 6.2.0: 1 - 10240 bytes, default = 1. On FortiOS versions 6.2.4-7.2.3: 1 - 65535 bytes, default = 1.
        """
        return pulumi.get(self, "comfort_amount")

    @comfort_amount.setter
    def comfort_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_amount", value)

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between successive transmissions of data for client comforting (seconds).
        """
        return pulumi.get(self, "comfort_interval")

    @comfort_interval.setter
    def comfort_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_interval", value)

    @property
    @pulumi.getter(name="explicitFtpTls")
    def explicit_ftp_tls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FTP redirection for explicit FTPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "explicit_ftp_tls")

    @explicit_ftp_tls.setter
    def explicit_ftp_tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "explicit_ftp_tls", value)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `clientcomfort`, `oversize`, `splice`, `bypass-rest-command`, `bypass-mode-command`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (MB).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 21).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum stream-based uncompressed data size that will be scanned in megabytes. Stream-based uncompression used only under certain conditions (unlimited = 0, default = 0).
        """
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @stream_based_uncompressed_limit.setter
    def stream_based_uncompressed_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_based_uncompressed_limit", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum dynamic TCP window size.
        """
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum dynamic TCP window size.
        """
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        """
        Set TCP static window size.
        """
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        """
        TCP window type to use for this protocol.
        """
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class ProfileprotocoloptionsHttpArgs:
    def __init__(__self__, *,
                 address_ip_rating: Optional[pulumi.Input[str]] = None,
                 block_page_status_code: Optional[pulumi.Input[int]] = None,
                 comfort_amount: Optional[pulumi.Input[int]] = None,
                 comfort_interval: Optional[pulumi.Input[int]] = None,
                 fortinet_bar: Optional[pulumi.Input[str]] = None,
                 fortinet_bar_port: Optional[pulumi.Input[int]] = None,
                 h2c: Optional[pulumi.Input[str]] = None,
                 http_policy: Optional[pulumi.Input[str]] = None,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 post_lang: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 range_block: Optional[pulumi.Input[str]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stream_based_uncompressed_limit: Optional[pulumi.Input[int]] = None,
                 streaming_content_bypass: Optional[pulumi.Input[str]] = None,
                 strip_x_forwarded_for: Optional[pulumi.Input[str]] = None,
                 switching_protocols: Optional[pulumi.Input[str]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 tunnel_non_http: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None,
                 unknown_content_encoding: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 verify_dns_for_policy_matching: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address_ip_rating: Enable/disable IP based URL rating. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] block_page_status_code: Code number returned for blocked HTTP pages (non-FortiGuard only) (100 - 599, default = 403).
        :param pulumi.Input[int] comfort_amount: Amount of data to send in a transmission for client comforting. On FortiOS versions 6.2.0: 1 - 10240 bytes, default = 1. On FortiOS versions 6.2.4-7.2.3: 1 - 65535 bytes, default = 1.
        :param pulumi.Input[int] comfort_interval: Interval between successive transmissions of data for client comforting (seconds).
        :param pulumi.Input[str] fortinet_bar: Enable/disable Fortinet bar on HTML content. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fortinet_bar_port: Port for use by Fortinet Bar (1 - 65535, default = 8011).
        :param pulumi.Input[str] h2c: Enable/disable h2c HTTP connection upgrade. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_policy: Enable/disable HTTP policy check. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `clientcomfort`, `servercomfort`, `oversize`, `chunkedbypass`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (MB). On FortiOS versions 6.2.0-7.2.3: 1 - 383 MB, default = 10.
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 80).
        :param pulumi.Input[str] post_lang: ID codes for character sets to be used to convert to UTF-8 for banned words and DLP on HTTP posts (maximum of 5 character sets). Valid values: `jisx0201`, `jisx0208`, `jisx0212`, `gb2312`, `ksc5601-ex`, `euc-jp`, `sjis`, `iso2022-jp`, `iso2022-jp-1`, `iso2022-jp-2`, `euc-cn`, `ces-gbk`, `hz`, `ces-big5`, `euc-kr`, `iso2022-jp-3`, `iso8859-1`, `tis620`, `cp874`, `cp1252`, `cp1251`.
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] range_block: Enable/disable blocking of partial downloads. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] retry_count: Number of attempts to retry HTTP connection (0 - 100, default = 0).
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[str] status: Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] stream_based_uncompressed_limit: Maximum stream-based uncompressed data size that will be scanned in megabytes. Stream-based uncompression used only under certain conditions (unlimited = 0, default = 0).
        :param pulumi.Input[str] streaming_content_bypass: Enable/disable bypassing of streaming content from buffering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strip_x_forwarded_for: Enable/disable stripping of HTTP X-Forwarded-For header. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switching_protocols: Bypass from scanning, or block a connection that attempts to switch protocol. Valid values: `bypass`, `block`.
        :param pulumi.Input[int] tcp_window_maximum: Maximum dynamic TCP window size.
        :param pulumi.Input[int] tcp_window_minimum: Minimum dynamic TCP window size.
        :param pulumi.Input[int] tcp_window_size: Set TCP static window size.
        :param pulumi.Input[str] tcp_window_type: Specify type of TCP window to use for this protocol.
        :param pulumi.Input[str] tunnel_non_http: Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (MB).
        :param pulumi.Input[str] unknown_content_encoding: Configure the action the FortiGate unit will take on unknown content-encoding. Valid values: `block`, `inspect`, `bypass`.
        :param pulumi.Input[str] unknown_http_version: How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
        :param pulumi.Input[str] verify_dns_for_policy_matching: Enable/disable verification of DNS for policy matching. Valid values: `enable`, `disable`.
        """
        if address_ip_rating is not None:
            pulumi.set(__self__, "address_ip_rating", address_ip_rating)
        if block_page_status_code is not None:
            pulumi.set(__self__, "block_page_status_code", block_page_status_code)
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if fortinet_bar is not None:
            pulumi.set(__self__, "fortinet_bar", fortinet_bar)
        if fortinet_bar_port is not None:
            pulumi.set(__self__, "fortinet_bar_port", fortinet_bar_port)
        if h2c is not None:
            pulumi.set(__self__, "h2c", h2c)
        if http_policy is not None:
            pulumi.set(__self__, "http_policy", http_policy)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if post_lang is not None:
            pulumi.set(__self__, "post_lang", post_lang)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if range_block is not None:
            pulumi.set(__self__, "range_block", range_block)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if streaming_content_bypass is not None:
            pulumi.set(__self__, "streaming_content_bypass", streaming_content_bypass)
        if strip_x_forwarded_for is not None:
            pulumi.set(__self__, "strip_x_forwarded_for", strip_x_forwarded_for)
        if switching_protocols is not None:
            pulumi.set(__self__, "switching_protocols", switching_protocols)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if tunnel_non_http is not None:
            pulumi.set(__self__, "tunnel_non_http", tunnel_non_http)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)
        if unknown_content_encoding is not None:
            pulumi.set(__self__, "unknown_content_encoding", unknown_content_encoding)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)
        if verify_dns_for_policy_matching is not None:
            pulumi.set(__self__, "verify_dns_for_policy_matching", verify_dns_for_policy_matching)

    @property
    @pulumi.getter(name="addressIpRating")
    def address_ip_rating(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IP based URL rating. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "address_ip_rating")

    @address_ip_rating.setter
    def address_ip_rating(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_ip_rating", value)

    @property
    @pulumi.getter(name="blockPageStatusCode")
    def block_page_status_code(self) -> Optional[pulumi.Input[int]]:
        """
        Code number returned for blocked HTTP pages (non-FortiGuard only) (100 - 599, default = 403).
        """
        return pulumi.get(self, "block_page_status_code")

    @block_page_status_code.setter
    def block_page_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_page_status_code", value)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of data to send in a transmission for client comforting. On FortiOS versions 6.2.0: 1 - 10240 bytes, default = 1. On FortiOS versions 6.2.4-7.2.3: 1 - 65535 bytes, default = 1.
        """
        return pulumi.get(self, "comfort_amount")

    @comfort_amount.setter
    def comfort_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_amount", value)

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between successive transmissions of data for client comforting (seconds).
        """
        return pulumi.get(self, "comfort_interval")

    @comfort_interval.setter
    def comfort_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_interval", value)

    @property
    @pulumi.getter(name="fortinetBar")
    def fortinet_bar(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fortinet bar on HTML content. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortinet_bar")

    @fortinet_bar.setter
    def fortinet_bar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortinet_bar", value)

    @property
    @pulumi.getter(name="fortinetBarPort")
    def fortinet_bar_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for use by Fortinet Bar (1 - 65535, default = 8011).
        """
        return pulumi.get(self, "fortinet_bar_port")

    @fortinet_bar_port.setter
    def fortinet_bar_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortinet_bar_port", value)

    @property
    @pulumi.getter
    def h2c(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable h2c HTTP connection upgrade. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "h2c")

    @h2c.setter
    def h2c(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h2c", value)

    @property
    @pulumi.getter(name="httpPolicy")
    def http_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP policy check. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_policy")

    @http_policy.setter
    def http_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_policy", value)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `clientcomfort`, `servercomfort`, `oversize`, `chunkedbypass`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (MB). On FortiOS versions 6.2.0-7.2.3: 1 - 383 MB, default = 10.
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 80).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="postLang")
    def post_lang(self) -> Optional[pulumi.Input[str]]:
        """
        ID codes for character sets to be used to convert to UTF-8 for banned words and DLP on HTTP posts (maximum of 5 character sets). Valid values: `jisx0201`, `jisx0208`, `jisx0212`, `gb2312`, `ksc5601-ex`, `euc-jp`, `sjis`, `iso2022-jp`, `iso2022-jp-1`, `iso2022-jp-2`, `euc-cn`, `ces-gbk`, `hz`, `ces-big5`, `euc-kr`, `iso2022-jp-3`, `iso8859-1`, `tis620`, `cp874`, `cp1252`, `cp1251`.
        """
        return pulumi.get(self, "post_lang")

    @post_lang.setter
    def post_lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_lang", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="rangeBlock")
    def range_block(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable blocking of partial downloads. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "range_block")

    @range_block.setter
    def range_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range_block", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of attempts to retry HTTP connection (0 - 100, default = 0).
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum stream-based uncompressed data size that will be scanned in megabytes. Stream-based uncompression used only under certain conditions (unlimited = 0, default = 0).
        """
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @stream_based_uncompressed_limit.setter
    def stream_based_uncompressed_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_based_uncompressed_limit", value)

    @property
    @pulumi.getter(name="streamingContentBypass")
    def streaming_content_bypass(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bypassing of streaming content from buffering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "streaming_content_bypass")

    @streaming_content_bypass.setter
    def streaming_content_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "streaming_content_bypass", value)

    @property
    @pulumi.getter(name="stripXForwardedFor")
    def strip_x_forwarded_for(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of HTTP X-Forwarded-For header. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "strip_x_forwarded_for")

    @strip_x_forwarded_for.setter
    def strip_x_forwarded_for(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strip_x_forwarded_for", value)

    @property
    @pulumi.getter(name="switchingProtocols")
    def switching_protocols(self) -> Optional[pulumi.Input[str]]:
        """
        Bypass from scanning, or block a connection that attempts to switch protocol. Valid values: `bypass`, `block`.
        """
        return pulumi.get(self, "switching_protocols")

    @switching_protocols.setter
    def switching_protocols(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switching_protocols", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum dynamic TCP window size.
        """
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum dynamic TCP window size.
        """
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        """
        Set TCP static window size.
        """
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify type of TCP window to use for this protocol.
        """
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="tunnelNonHttp")
    def tunnel_non_http(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_non_http")

    @tunnel_non_http.setter
    def tunnel_non_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_non_http", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)

    @property
    @pulumi.getter(name="unknownContentEncoding")
    def unknown_content_encoding(self) -> Optional[pulumi.Input[str]]:
        """
        Configure the action the FortiGate unit will take on unknown content-encoding. Valid values: `block`, `inspect`, `bypass`.
        """
        return pulumi.get(self, "unknown_content_encoding")

    @unknown_content_encoding.setter
    def unknown_content_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_content_encoding", value)

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[pulumi.Input[str]]:
        """
        How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
        """
        return pulumi.get(self, "unknown_http_version")

    @unknown_http_version.setter
    def unknown_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_http_version", value)

    @property
    @pulumi.getter(name="verifyDnsForPolicyMatching")
    def verify_dns_for_policy_matching(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of DNS for policy matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "verify_dns_for_policy_matching")

    @verify_dns_for_policy_matching.setter
    def verify_dns_for_policy_matching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_dns_for_policy_matching", value)


@pulumi.input_type
class ProfileprotocoloptionsImapArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `fragmail`, `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (MB).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 143).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[str] status: Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `fragmail`, `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (MB).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 143).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class ProfileprotocoloptionsMailSignatureArgs:
    def __init__(__self__, *,
                 signature: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] signature: Email signature to be added to outgoing email (if the signature contains spaces, enclose with quotation marks).
        :param pulumi.Input[str] status: Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input[str]]:
        """
        Email signature to be added to outgoing email (if the signature contains spaces, enclose with quotation marks).
        """
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileprotocoloptionsMapiArgs:
    def __init__(__self__, *,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `fragmail`, `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (MB).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 110).
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `fragmail`, `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (MB).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 110).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class ProfileprotocoloptionsNntpArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`, `splice`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (MB).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 119).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`, `splice`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (MB).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 119).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class ProfileprotocoloptionsPop3Args:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (MB).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 445).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[str] status: Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (MB).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 445).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class ProfileprotocoloptionsSmtpArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 server_busy: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `fragmail`, `oversize`, `splice`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (MB).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 25).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_busy: Enable/disable SMTP server busy when server not available. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[str] status: Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if server_busy is not None:
            pulumi.set(__self__, "server_busy", server_busy)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `fragmail`, `oversize`, `splice`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (MB).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 25).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="serverBusy")
    def server_busy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMTP server busy when server not available. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "server_busy")

    @server_busy.setter
    def server_busy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_busy", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of scanning for this protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class ProfileprotocoloptionsSshArgs:
    def __init__(__self__, *,
                 comfort_amount: Optional[pulumi.Input[int]] = None,
                 comfort_interval: Optional[pulumi.Input[int]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 stream_based_uncompressed_limit: Optional[pulumi.Input[int]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] comfort_amount: Number of bytes to send in each transmission for client comforting (bytes).
        :param pulumi.Input[int] comfort_interval: Interval between successive transmissions of data for client comforting (seconds).
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`, `clientcomfort`, `servercomfort`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (MB).
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[int] stream_based_uncompressed_limit: Maximum stream-based uncompressed data size that will be scanned in megabytes. Stream-based uncompression used only under certain conditions (unlimited = 0, default = 0).
        :param pulumi.Input[int] tcp_window_maximum: Maximum dynamic TCP window size.
        :param pulumi.Input[int] tcp_window_minimum: Minimum dynamic TCP window size.
        :param pulumi.Input[int] tcp_window_size: Set TCP static window size.
        :param pulumi.Input[str] tcp_window_type: TCP window type to use for this protocol.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[pulumi.Input[int]]:
        """
        Number of bytes to send in each transmission for client comforting (bytes).
        """
        return pulumi.get(self, "comfort_amount")

    @comfort_amount.setter
    def comfort_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_amount", value)

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between successive transmissions of data for client comforting (seconds).
        """
        return pulumi.get(self, "comfort_interval")

    @comfort_interval.setter
    def comfort_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_interval", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`, `clientcomfort`, `servercomfort`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (MB).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum stream-based uncompressed data size that will be scanned in megabytes. Stream-based uncompression used only under certain conditions (unlimited = 0, default = 0).
        """
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @stream_based_uncompressed_limit.setter
    def stream_based_uncompressed_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_based_uncompressed_limit", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum dynamic TCP window size.
        """
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum dynamic TCP window size.
        """
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        """
        Set TCP static window size.
        """
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        """
        TCP window type to use for this protocol.
        """
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (MB).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class ProxyaddressApplicationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: SaaS applicaton name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SaaS applicaton name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxyaddressCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Fortiguard category id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Fortiguard category id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ProxyaddressHeaderGroupArgs:
    def __init__(__self__, *,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] case_sensitivity: Case sensitivity in pattern. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] header: HTTP header regular expression.
        :param pulumi.Input[str] header_name: HTTP header.
        :param pulumi.Input[int] id: ID.
        """
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Case sensitivity in pattern. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "case_sensitivity")

    @case_sensitivity.setter
    def case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_sensitivity", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header regular expression.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ProxyaddressTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tagging entry name.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ProxyaddressTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxyaddrgrpMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxyaddrgrpTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddrgrpTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tagging entry name.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyaddrgrpTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddrgrpTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddrgrpTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ProxyaddrgrpTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyAccessProxy6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyAccessProxyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Access proxy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Access proxy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyInternetService6CustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyInternetService6CustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyInternetService6GroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyInternetService6NameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service IPv6 group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service IPv6 group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ProxypolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyPoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicySortStatePolicyListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policyid", value)


@pulumi.input_type
class ProxypolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProxypolicyZtnaEmsTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: EMS Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        EMS Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RegionCityArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: City ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        City ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SecurityPolicyseqStatePolicyListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policyid", value)


@pulumi.input_type
class SecuritypolicyAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Category IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Category IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SecuritypolicyAppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SecuritypolicyDstaddr4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyFssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: User group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetService6CustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetService6CustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetService6GroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetService6NameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetService6SrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetService6SrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetService6SrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetService6SrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SecuritypolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetServiceSrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetServiceSrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service6 group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service6 group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetServiceSrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyInternetServiceSrcIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SecuritypolicyInternetServiceSrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicySortStatePolicyListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policyid", value)


@pulumi.input_type
class SecuritypolicySrcaddr4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecuritypolicyUrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SecuritypolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: User name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Category IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Category IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ShapingpolicyAppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ShapingpolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Shaping policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Shaping policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ShapingpolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyInternetServiceSrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyInternetServiceSrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyInternetServiceSrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyInternetServiceSrcIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ShapingpolicyInternetServiceSrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Shaping policy name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Shaping policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingpolicyUrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ShapingpolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: User name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ShapingprofileShapingEntryArgs:
    def __init__(__self__, *,
                 burst_in_msec: Optional[pulumi.Input[int]] = None,
                 cburst_in_msec: Optional[pulumi.Input[int]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 guaranteed_bandwidth_percentage: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 max: Optional[pulumi.Input[int]] = None,
                 maximum_bandwidth_percentage: Optional[pulumi.Input[int]] = None,
                 min: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 red_probability: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] burst_in_msec: Number of bytes that can be burst at maximum-bandwidth speed. Formula: burst = maximum-bandwidth*burst-in-msec.
        :param pulumi.Input[int] cburst_in_msec: Number of bytes that can be burst as fast as the interface can transmit. Formula: cburst = maximum-bandwidth*cburst-in-msec.
        :param pulumi.Input[int] class_id: Class ID.
        :param pulumi.Input[int] guaranteed_bandwidth_percentage: Guaranteed bandwith in percentage.
        :param pulumi.Input[int] id: ID number.
        :param pulumi.Input[int] limit: Hard limit on the real queue size in packets.
        :param pulumi.Input[int] max: Average queue size in packets at which RED drop probability is maximal.
        :param pulumi.Input[int] maximum_bandwidth_percentage: Maximum bandwith in percentage.
        :param pulumi.Input[int] min: Average queue size in packets at which RED drop becomes a possibility.
        :param pulumi.Input[str] priority: Priority.
        :param pulumi.Input[int] red_probability: Maximum probability (in percentage) for RED marking.
        """
        if burst_in_msec is not None:
            pulumi.set(__self__, "burst_in_msec", burst_in_msec)
        if cburst_in_msec is not None:
            pulumi.set(__self__, "cburst_in_msec", cburst_in_msec)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if guaranteed_bandwidth_percentage is not None:
            pulumi.set(__self__, "guaranteed_bandwidth_percentage", guaranteed_bandwidth_percentage)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if maximum_bandwidth_percentage is not None:
            pulumi.set(__self__, "maximum_bandwidth_percentage", maximum_bandwidth_percentage)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if red_probability is not None:
            pulumi.set(__self__, "red_probability", red_probability)

    @property
    @pulumi.getter(name="burstInMsec")
    def burst_in_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Number of bytes that can be burst at maximum-bandwidth speed. Formula: burst = maximum-bandwidth*burst-in-msec.
        """
        return pulumi.get(self, "burst_in_msec")

    @burst_in_msec.setter
    def burst_in_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "burst_in_msec", value)

    @property
    @pulumi.getter(name="cburstInMsec")
    def cburst_in_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Number of bytes that can be burst as fast as the interface can transmit. Formula: cburst = maximum-bandwidth*cburst-in-msec.
        """
        return pulumi.get(self, "cburst_in_msec")

    @cburst_in_msec.setter
    def cburst_in_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cburst_in_msec", value)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[pulumi.Input[int]]:
        """
        Class ID.
        """
        return pulumi.get(self, "class_id")

    @class_id.setter
    def class_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "class_id", value)

    @property
    @pulumi.getter(name="guaranteedBandwidthPercentage")
    def guaranteed_bandwidth_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Guaranteed bandwith in percentage.
        """
        return pulumi.get(self, "guaranteed_bandwidth_percentage")

    @guaranteed_bandwidth_percentage.setter
    def guaranteed_bandwidth_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "guaranteed_bandwidth_percentage", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID number.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        Hard limit on the real queue size in packets.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        """
        Average queue size in packets at which RED drop probability is maximal.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter(name="maximumBandwidthPercentage")
    def maximum_bandwidth_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwith in percentage.
        """
        return pulumi.get(self, "maximum_bandwidth_percentage")

    @maximum_bandwidth_percentage.setter
    def maximum_bandwidth_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bandwidth_percentage", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[int]]:
        """
        Average queue size in packets at which RED drop becomes a possibility.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="redProbability")
    def red_probability(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum probability (in percentage) for RED marking.
        """
        return pulumi.get(self, "red_probability")

    @red_probability.setter
    def red_probability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "red_probability", value)


@pulumi.input_type
class SnifferAnomalyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 thresholddefault: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Action taken when the threshold is reached.
        :param pulumi.Input[str] log: Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Anomaly name.
        :param pulumi.Input[str] quarantine: Quarantine method. Valid values: `none`, `attacker`.
        :param pulumi.Input[str] quarantine_expiry: Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        :param pulumi.Input[str] quarantine_log: Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this anomaly. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] threshold: Anomaly threshold. Number of detected instances that triggers the anomaly action. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: packets per minute. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: packets per second or concurrent session number.
        :param pulumi.Input[int] thresholddefault: Number of detected instances (packets per second or concurrent session number) which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken when the threshold is reached.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine method. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this anomaly. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Anomaly threshold. Number of detected instances that triggers the anomaly action. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: packets per minute. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: packets per second or concurrent session number.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[pulumi.Input[int]]:
        """
        Number of detected instances (packets per second or concurrent session number) which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
        """
        return pulumi.get(self, "thresholddefault")

    @thresholddefault.setter
    def thresholddefault(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thresholddefault", value)


@pulumi.input_type
class SnifferIpThreatfeedArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Threat feed name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Threat feed name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SslsshprofileDotArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] quic: QUIC inspection status. On FortiOS versions 7.4.1: default = disable. On FortiOS versions >= 7.4.2: default = inspect.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input[str]]:
        """
        QUIC inspection status. On FortiOS versions 7.4.1: default = disable. On FortiOS versions >= 7.4.2: default = inspect.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class SslsshprofileFtpsArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 min_allowed_ssl_version: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] min_allowed_ssl_version: Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Allow, ignore, or block the untrusted SSL session server certificate. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "min_allowed_ssl_version")

    @min_allowed_ssl_version.setter
    def min_allowed_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_allowed_ssl_version", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow, ignore, or block the untrusted SSL session server certificate. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class SslsshprofileHttpsArgs:
    def __init__(__self__, *,
                 cert_probe_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 min_allowed_ssl_version: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_probe_failure: Action based on certificate probe failure. Valid values: `allow`, `block`.
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] min_allowed_ssl_version: Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] quic: QUIC inspection status. On FortiOS versions 7.4.1: default = disable. On FortiOS versions >= 7.4.2: default = inspect.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `certificate-inspection`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Allow, ignore, or block the untrusted SSL session server certificate. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_probe_failure is not None:
            pulumi.set(__self__, "cert_probe_failure", cert_probe_failure)
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certProbeFailure")
    def cert_probe_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate probe failure. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "cert_probe_failure")

    @cert_probe_failure.setter
    def cert_probe_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_probe_failure", value)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "min_allowed_ssl_version")

    @min_allowed_ssl_version.setter
    def min_allowed_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_allowed_ssl_version", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input[str]]:
        """
        QUIC inspection status. On FortiOS versions 7.4.1: default = disable. On FortiOS versions >= 7.4.2: default = inspect.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `certificate-inspection`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow, ignore, or block the untrusted SSL session server certificate. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class SslsshprofileImapsArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Allow, ignore, or block the untrusted SSL session server certificate. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow, ignore, or block the untrusted SSL session server certificate. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class SslsshprofilePop3sArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class SslsshprofileSmtpsArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Allow, ignore, or block the untrusted SSL session server certificate. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow, ignore, or block the untrusted SSL session server certificate. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class SslsshprofileSshArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 ssh_algorithm: Optional[pulumi.Input[str]] = None,
                 ssh_policy_check: Optional[pulumi.Input[str]] = None,
                 ssh_tun_policy_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] inspect_all: Level of SSL inspection. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssh_algorithm: Relative strength of encryption algorithms accepted during negotiation. Valid values: `compatible`, `high-encryption`.
        :param pulumi.Input[str] ssh_policy_check: Enable/disable SSH policy check. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssh_tun_policy_check: Enable/disable SSH tunnel policy check. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_version: Action based on SSH version being unsupported. Valid values: `bypass`, `block`.
        """
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if ssh_algorithm is not None:
            pulumi.set(__self__, "ssh_algorithm", ssh_algorithm)
        if ssh_policy_check is not None:
            pulumi.set(__self__, "ssh_policy_check", ssh_policy_check)
        if ssh_tun_policy_check is not None:
            pulumi.set(__self__, "ssh_tun_policy_check", ssh_tun_policy_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_version is not None:
            pulumi.set(__self__, "unsupported_version", unsupported_version)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Level of SSL inspection. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="sshAlgorithm")
    def ssh_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Relative strength of encryption algorithms accepted during negotiation. Valid values: `compatible`, `high-encryption`.
        """
        return pulumi.get(self, "ssh_algorithm")

    @ssh_algorithm.setter
    def ssh_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_algorithm", value)

    @property
    @pulumi.getter(name="sshPolicyCheck")
    def ssh_policy_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH policy check. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_policy_check")

    @ssh_policy_check.setter
    def ssh_policy_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_policy_check", value)

    @property
    @pulumi.getter(name="sshTunPolicyCheck")
    def ssh_tun_policy_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH tunnel policy check. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_tun_policy_check")

    @ssh_tun_policy_check.setter
    def ssh_tun_policy_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_tun_policy_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedVersion")
    def unsupported_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on SSH version being unsupported. Valid values: `bypass`, `block`.
        """
        return pulumi.get(self, "unsupported_version")

    @unsupported_version.setter
    def unsupported_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_version", value)


@pulumi.input_type
class SslsshprofileSslArgs:
    def __init__(__self__, *,
                 cert_probe_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 min_allowed_ssl_version: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_probe_failure: Action based on certificate probe failure. Valid values: `allow`, `block`.
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] inspect_all: Level of SSL inspection. Valid values: `disable`, `certificate-inspection`, `deep-inspection`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] min_allowed_ssl_version: Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Allow, ignore, or block the untrusted SSL session server certificate. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_probe_failure is not None:
            pulumi.set(__self__, "cert_probe_failure", cert_probe_failure)
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certProbeFailure")
    def cert_probe_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate probe failure. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "cert_probe_failure")

    @cert_probe_failure.setter
    def cert_probe_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_probe_failure", value)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Level of SSL inspection. Valid values: `disable`, `certificate-inspection`, `deep-inspection`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "min_allowed_ssl_version")

    @min_allowed_ssl_version.setter
    def min_allowed_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_allowed_ssl_version", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow, ignore, or block the untrusted SSL session server certificate. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class SslsshprofileSslExemptArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 address6: Optional[pulumi.Input[str]] = None,
                 fortiguard_category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 wildcard_fqdn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: IPv4 address object.
        :param pulumi.Input[str] address6: IPv6 address object.
        :param pulumi.Input[int] fortiguard_category: FortiGuard category ID.
        :param pulumi.Input[int] id: ID number.
        :param pulumi.Input[str] regex: Exempt servers by regular expression.
        :param pulumi.Input[str] type: Type of address object (IPv4 or IPv6) or FortiGuard category. Valid values: `fortiguard-category`, `address`, `address6`, `wildcard-fqdn`, `regex`.
        :param pulumi.Input[str] wildcard_fqdn: Exempt servers by wildcard FQDN.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address6 is not None:
            pulumi.set(__self__, "address6", address6)
        if fortiguard_category is not None:
            pulumi.set(__self__, "fortiguard_category", fortiguard_category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wildcard_fqdn is not None:
            pulumi.set(__self__, "wildcard_fqdn", wildcard_fqdn)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address object.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def address6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address object.
        """
        return pulumi.get(self, "address6")

    @address6.setter
    def address6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address6", value)

    @property
    @pulumi.getter(name="fortiguardCategory")
    def fortiguard_category(self) -> Optional[pulumi.Input[int]]:
        """
        FortiGuard category ID.
        """
        return pulumi.get(self, "fortiguard_category")

    @fortiguard_category.setter
    def fortiguard_category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortiguard_category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID number.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        """
        Exempt servers by regular expression.
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address object (IPv4 or IPv6) or FortiGuard category. Valid values: `fortiguard-category`, `address`, `address6`, `wildcard-fqdn`, `regex`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="wildcardFqdn")
    def wildcard_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Exempt servers by wildcard FQDN.
        """
        return pulumi.get(self, "wildcard_fqdn")

    @wildcard_fqdn.setter
    def wildcard_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard_fqdn", value)


@pulumi.input_type
class SslsshprofileSslServerArgs:
    def __init__(__self__, *,
                 ftps_client_cert_request: Optional[pulumi.Input[str]] = None,
                 ftps_client_certificate: Optional[pulumi.Input[str]] = None,
                 https_client_cert_request: Optional[pulumi.Input[str]] = None,
                 https_client_certificate: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 imaps_client_cert_request: Optional[pulumi.Input[str]] = None,
                 imaps_client_certificate: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 pop3s_client_cert_request: Optional[pulumi.Input[str]] = None,
                 pop3s_client_certificate: Optional[pulumi.Input[str]] = None,
                 smtps_client_cert_request: Optional[pulumi.Input[str]] = None,
                 smtps_client_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_other_client_cert_request: Optional[pulumi.Input[str]] = None,
                 ssl_other_client_certificate: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ftps_client_cert_request: Action based on client certificate request during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] ftps_client_certificate: Action based on received client certificate during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] https_client_cert_request: Action based on client certificate request during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] https_client_certificate: Action based on received client certificate during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[int] id: SSL server ID.
        :param pulumi.Input[str] imaps_client_cert_request: Action based on client certificate request during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] imaps_client_certificate: Action based on received client certificate during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] ip: IPv4 address of the SSL server.
        :param pulumi.Input[str] pop3s_client_cert_request: Action based on client certificate request during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] pop3s_client_certificate: Action based on received client certificate during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] smtps_client_cert_request: Action based on client certificate request during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] smtps_client_certificate: Action based on received client certificate during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] ssl_other_client_cert_request: Action based on client certificate request during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] ssl_other_client_certificate: Action based on received client certificate during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        if ftps_client_cert_request is not None:
            pulumi.set(__self__, "ftps_client_cert_request", ftps_client_cert_request)
        if ftps_client_certificate is not None:
            pulumi.set(__self__, "ftps_client_certificate", ftps_client_certificate)
        if https_client_cert_request is not None:
            pulumi.set(__self__, "https_client_cert_request", https_client_cert_request)
        if https_client_certificate is not None:
            pulumi.set(__self__, "https_client_certificate", https_client_certificate)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if imaps_client_cert_request is not None:
            pulumi.set(__self__, "imaps_client_cert_request", imaps_client_cert_request)
        if imaps_client_certificate is not None:
            pulumi.set(__self__, "imaps_client_certificate", imaps_client_certificate)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if pop3s_client_cert_request is not None:
            pulumi.set(__self__, "pop3s_client_cert_request", pop3s_client_cert_request)
        if pop3s_client_certificate is not None:
            pulumi.set(__self__, "pop3s_client_certificate", pop3s_client_certificate)
        if smtps_client_cert_request is not None:
            pulumi.set(__self__, "smtps_client_cert_request", smtps_client_cert_request)
        if smtps_client_certificate is not None:
            pulumi.set(__self__, "smtps_client_certificate", smtps_client_certificate)
        if ssl_other_client_cert_request is not None:
            pulumi.set(__self__, "ssl_other_client_cert_request", ssl_other_client_cert_request)
        if ssl_other_client_certificate is not None:
            pulumi.set(__self__, "ssl_other_client_certificate", ssl_other_client_certificate)

    @property
    @pulumi.getter(name="ftpsClientCertRequest")
    def ftps_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "ftps_client_cert_request")

    @ftps_client_cert_request.setter
    def ftps_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftps_client_cert_request", value)

    @property
    @pulumi.getter(name="ftpsClientCertificate")
    def ftps_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "ftps_client_certificate")

    @ftps_client_certificate.setter
    def ftps_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftps_client_certificate", value)

    @property
    @pulumi.getter(name="httpsClientCertRequest")
    def https_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "https_client_cert_request")

    @https_client_cert_request.setter
    def https_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_client_cert_request", value)

    @property
    @pulumi.getter(name="httpsClientCertificate")
    def https_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "https_client_certificate")

    @https_client_certificate.setter
    def https_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_client_certificate", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SSL server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imapsClientCertRequest")
    def imaps_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "imaps_client_cert_request")

    @imaps_client_cert_request.setter
    def imaps_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imaps_client_cert_request", value)

    @property
    @pulumi.getter(name="imapsClientCertificate")
    def imaps_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "imaps_client_certificate")

    @imaps_client_certificate.setter
    def imaps_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imaps_client_certificate", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the SSL server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="pop3sClientCertRequest")
    def pop3s_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "pop3s_client_cert_request")

    @pop3s_client_cert_request.setter
    def pop3s_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pop3s_client_cert_request", value)

    @property
    @pulumi.getter(name="pop3sClientCertificate")
    def pop3s_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "pop3s_client_certificate")

    @pop3s_client_certificate.setter
    def pop3s_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pop3s_client_certificate", value)

    @property
    @pulumi.getter(name="smtpsClientCertRequest")
    def smtps_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "smtps_client_cert_request")

    @smtps_client_cert_request.setter
    def smtps_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smtps_client_cert_request", value)

    @property
    @pulumi.getter(name="smtpsClientCertificate")
    def smtps_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "smtps_client_certificate")

    @smtps_client_certificate.setter
    def smtps_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smtps_client_certificate", value)

    @property
    @pulumi.getter(name="sslOtherClientCertRequest")
    def ssl_other_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "ssl_other_client_cert_request")

    @ssl_other_client_cert_request.setter
    def ssl_other_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_other_client_cert_request", value)

    @property
    @pulumi.getter(name="sslOtherClientCertificate")
    def ssl_other_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "ssl_other_client_certificate")

    @ssl_other_client_certificate.setter
    def ssl_other_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_other_client_certificate", value)


@pulumi.input_type
class TtlpolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TtlpolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Vip46MonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Health monitor name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Vip46RealserverArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] client_ip: Restrict server to a client IP in this range.
        :param pulumi.Input[str] healthcheck: Per server health check. Valid values: `disable`, `enable`, `vip`.
        :param pulumi.Input[int] holddown_interval: Hold down interval.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: Mapped server IPv6.
        :param pulumi.Input[int] max_connections: Maximum number of connections allowed to server.
        :param pulumi.Input[str] monitor: Health monitors.
        :param pulumi.Input[int] port: Mapped server port.
        :param pulumi.Input[str] status: Server administrative status. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[int] weight: weight
        """
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Restrict server to a client IP in this range.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        """
        Per server health check. Valid values: `disable`, `enable`, `vip`.
        """
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hold down interval.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped server IPv6.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of connections allowed to server.
        """
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitors.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Mapped server port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Server administrative status. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class Vip46SrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: Src-filter range.
        """
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Src-filter range.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class Vip46SrcintfFilterArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class Vip64MonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Health monitor name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Vip64RealserverArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] client_ip: Restrict server to a client IP in this range.
        :param pulumi.Input[str] healthcheck: Per server health check. Valid values: `disable`, `enable`, `vip`.
        :param pulumi.Input[int] holddown_interval: Hold down interval.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: Mapped server IP.
        :param pulumi.Input[int] max_connections: Maximum number of connections allowed to server.
        :param pulumi.Input[str] monitor: Health monitors.
        :param pulumi.Input[int] port: Mapped server port.
        :param pulumi.Input[str] status: Server administrative status. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[int] weight: weight
        """
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Restrict server to a client IP in this range.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        """
        Per server health check. Valid values: `disable`, `enable`, `vip`.
        """
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hold down interval.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped server IP.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of connections allowed to server.
        """
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitors.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Mapped server port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Server administrative status. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class Vip64SrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: Src-filter range.
        """
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Src-filter range.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class Vip6MonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Health monitor name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Vip6QuicArgs:
    def __init__(__self__, *,
                 ack_delay_exponent: Optional[pulumi.Input[int]] = None,
                 active_connection_id_limit: Optional[pulumi.Input[int]] = None,
                 active_migration: Optional[pulumi.Input[str]] = None,
                 grease_quic_bit: Optional[pulumi.Input[str]] = None,
                 max_ack_delay: Optional[pulumi.Input[int]] = None,
                 max_datagram_frame_size: Optional[pulumi.Input[int]] = None,
                 max_idle_timeout: Optional[pulumi.Input[int]] = None,
                 max_udp_payload_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] ack_delay_exponent: ACK delay exponent (1 - 20, default = 3).
        :param pulumi.Input[int] active_connection_id_limit: Active connection ID limit (1 - 8, default = 2).
        :param pulumi.Input[str] active_migration: Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] grease_quic_bit: Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_ack_delay: Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        :param pulumi.Input[int] max_datagram_frame_size: Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        :param pulumi.Input[int] max_idle_timeout: Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        :param pulumi.Input[int] max_udp_payload_size: Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        if ack_delay_exponent is not None:
            pulumi.set(__self__, "ack_delay_exponent", ack_delay_exponent)
        if active_connection_id_limit is not None:
            pulumi.set(__self__, "active_connection_id_limit", active_connection_id_limit)
        if active_migration is not None:
            pulumi.set(__self__, "active_migration", active_migration)
        if grease_quic_bit is not None:
            pulumi.set(__self__, "grease_quic_bit", grease_quic_bit)
        if max_ack_delay is not None:
            pulumi.set(__self__, "max_ack_delay", max_ack_delay)
        if max_datagram_frame_size is not None:
            pulumi.set(__self__, "max_datagram_frame_size", max_datagram_frame_size)
        if max_idle_timeout is not None:
            pulumi.set(__self__, "max_idle_timeout", max_idle_timeout)
        if max_udp_payload_size is not None:
            pulumi.set(__self__, "max_udp_payload_size", max_udp_payload_size)

    @property
    @pulumi.getter(name="ackDelayExponent")
    def ack_delay_exponent(self) -> Optional[pulumi.Input[int]]:
        """
        ACK delay exponent (1 - 20, default = 3).
        """
        return pulumi.get(self, "ack_delay_exponent")

    @ack_delay_exponent.setter
    def ack_delay_exponent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_delay_exponent", value)

    @property
    @pulumi.getter(name="activeConnectionIdLimit")
    def active_connection_id_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Active connection ID limit (1 - 8, default = 2).
        """
        return pulumi.get(self, "active_connection_id_limit")

    @active_connection_id_limit.setter
    def active_connection_id_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_connection_id_limit", value)

    @property
    @pulumi.getter(name="activeMigration")
    def active_migration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "active_migration")

    @active_migration.setter
    def active_migration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_migration", value)

    @property
    @pulumi.getter(name="greaseQuicBit")
    def grease_quic_bit(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "grease_quic_bit")

    @grease_quic_bit.setter
    def grease_quic_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grease_quic_bit", value)

    @property
    @pulumi.getter(name="maxAckDelay")
    def max_ack_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        """
        return pulumi.get(self, "max_ack_delay")

    @max_ack_delay.setter
    def max_ack_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ack_delay", value)

    @property
    @pulumi.getter(name="maxDatagramFrameSize")
    def max_datagram_frame_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_datagram_frame_size")

    @max_datagram_frame_size.setter
    def max_datagram_frame_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_datagram_frame_size", value)

    @property
    @pulumi.getter(name="maxIdleTimeout")
    def max_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        """
        return pulumi.get(self, "max_idle_timeout")

    @max_idle_timeout.setter
    def max_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_timeout", value)

    @property
    @pulumi.getter(name="maxUdpPayloadSize")
    def max_udp_payload_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_udp_payload_size")

    @max_udp_payload_size.setter
    def max_udp_payload_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_udp_payload_size", value)


@pulumi.input_type
class Vip6RealserverArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] client_ip: Only clients in this IP range can connect to this real server.
        :param pulumi.Input[str] healthcheck: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`, `vip`.
        :param pulumi.Input[int] holddown_interval: Time in seconds that the health check monitor continues to monitor an unresponsive server that should be active.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IPv6 address of the real server.
        :param pulumi.Input[int] max_connections: Max number of active connections that can directed to the real server. When reached, sessions are sent to other real servers.
        :param pulumi.Input[str] monitor: Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
        :param pulumi.Input[int] port: Port for communicating with the real server. Required if port forwarding is enabled.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[str] translate_host: Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Only clients in this IP range can connect to this real server.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`, `vip`.
        """
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds that the health check monitor continues to monitor an unresponsive server that should be active.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of active connections that can directed to the real server. When reached, sessions are sent to other real servers.
        """
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server. Required if port forwarding is enabled.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class Vip6SrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: Source-filter range.
        """
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Source-filter range.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class Vip6SslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class Vip6SslServerCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class VipExtaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VipGslbPublicIpArgs:
    def __init__(__self__, *,
                 index: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] index: Index of this public IP setting.
        :param pulumi.Input[str] ip: The publicly accessible IP address.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        Index of this public IP setting.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        The publicly accessible IP address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class VipMappedipArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: Mapped IP range.
        """
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped IP range.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class VipMonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Health monitor name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VipQuicArgs:
    def __init__(__self__, *,
                 ack_delay_exponent: Optional[pulumi.Input[int]] = None,
                 active_connection_id_limit: Optional[pulumi.Input[int]] = None,
                 active_migration: Optional[pulumi.Input[str]] = None,
                 grease_quic_bit: Optional[pulumi.Input[str]] = None,
                 max_ack_delay: Optional[pulumi.Input[int]] = None,
                 max_datagram_frame_size: Optional[pulumi.Input[int]] = None,
                 max_idle_timeout: Optional[pulumi.Input[int]] = None,
                 max_udp_payload_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] ack_delay_exponent: ACK delay exponent (1 - 20, default = 3).
        :param pulumi.Input[int] active_connection_id_limit: Active connection ID limit (1 - 8, default = 2).
        :param pulumi.Input[str] active_migration: Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] grease_quic_bit: Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_ack_delay: Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        :param pulumi.Input[int] max_datagram_frame_size: Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        :param pulumi.Input[int] max_idle_timeout: Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        :param pulumi.Input[int] max_udp_payload_size: Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        if ack_delay_exponent is not None:
            pulumi.set(__self__, "ack_delay_exponent", ack_delay_exponent)
        if active_connection_id_limit is not None:
            pulumi.set(__self__, "active_connection_id_limit", active_connection_id_limit)
        if active_migration is not None:
            pulumi.set(__self__, "active_migration", active_migration)
        if grease_quic_bit is not None:
            pulumi.set(__self__, "grease_quic_bit", grease_quic_bit)
        if max_ack_delay is not None:
            pulumi.set(__self__, "max_ack_delay", max_ack_delay)
        if max_datagram_frame_size is not None:
            pulumi.set(__self__, "max_datagram_frame_size", max_datagram_frame_size)
        if max_idle_timeout is not None:
            pulumi.set(__self__, "max_idle_timeout", max_idle_timeout)
        if max_udp_payload_size is not None:
            pulumi.set(__self__, "max_udp_payload_size", max_udp_payload_size)

    @property
    @pulumi.getter(name="ackDelayExponent")
    def ack_delay_exponent(self) -> Optional[pulumi.Input[int]]:
        """
        ACK delay exponent (1 - 20, default = 3).
        """
        return pulumi.get(self, "ack_delay_exponent")

    @ack_delay_exponent.setter
    def ack_delay_exponent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_delay_exponent", value)

    @property
    @pulumi.getter(name="activeConnectionIdLimit")
    def active_connection_id_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Active connection ID limit (1 - 8, default = 2).
        """
        return pulumi.get(self, "active_connection_id_limit")

    @active_connection_id_limit.setter
    def active_connection_id_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_connection_id_limit", value)

    @property
    @pulumi.getter(name="activeMigration")
    def active_migration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable active migration (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "active_migration")

    @active_migration.setter
    def active_migration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_migration", value)

    @property
    @pulumi.getter(name="greaseQuicBit")
    def grease_quic_bit(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable grease QUIC bit (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "grease_quic_bit")

    @grease_quic_bit.setter
    def grease_quic_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grease_quic_bit", value)

    @property
    @pulumi.getter(name="maxAckDelay")
    def max_ack_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum ACK delay in milliseconds (1 - 16383, default = 25).
        """
        return pulumi.get(self, "max_ack_delay")

    @max_ack_delay.setter
    def max_ack_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ack_delay", value)

    @property
    @pulumi.getter(name="maxDatagramFrameSize")
    def max_datagram_frame_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum datagram frame size in bytes (1 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_datagram_frame_size")

    @max_datagram_frame_size.setter
    def max_datagram_frame_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_datagram_frame_size", value)

    @property
    @pulumi.getter(name="maxIdleTimeout")
    def max_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum idle timeout milliseconds (1 - 60000, default = 30000).
        """
        return pulumi.get(self, "max_idle_timeout")

    @max_idle_timeout.setter
    def max_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_timeout", value)

    @property
    @pulumi.getter(name="maxUdpPayloadSize")
    def max_udp_payload_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum UDP payload size in bytes (1200 - 1500, default = 1500).
        """
        return pulumi.get(self, "max_udp_payload_size")

    @max_udp_payload_size.setter
    def max_udp_payload_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_udp_payload_size", value)


@pulumi.input_type
class VipRealserverArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] address: Dynamic address of the real server.
        :param pulumi.Input[str] client_ip: Only clients in this IP range can connect to this real server.
        :param pulumi.Input[str] healthcheck: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`, `vip`.
        :param pulumi.Input[int] holddown_interval: Time in seconds that the health check monitor continues to monitor and unresponsive server that should be active.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IP address of the real server.
        :param pulumi.Input[int] max_connections: Max number of active connections that can be directed to the real server. When reached, sessions are sent to other real servers.
        :param pulumi.Input[str] monitor: Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
        :param pulumi.Input[int] port: Port for communicating with the real server. Required if port forwarding is enabled.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[str] translate_host: Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Type of address. Valid values: `ip`, `address`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic address of the real server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Only clients in this IP range can connect to this real server.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`, `vip`.
        """
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds that the health check monitor continues to monitor and unresponsive server that should be active.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of active connections that can be directed to the real server. When reached, sessions are sent to other real servers.
        """
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server. Required if port forwarding is enabled.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable translation of hostname/IP from virtual server to real server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ip`, `address`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class VipServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VipSrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: Source-filter range.
        """
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Source-filter range.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class VipSrcintfFilterArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class VipSslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class VipSslServerCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class Vipgrp46MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VIP46 name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VIP46 name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Vipgrp64MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VIP64 name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VIP64 name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class Vipgrp6MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 VIP name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 VIP name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VipgrpMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VIP name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VIP name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


