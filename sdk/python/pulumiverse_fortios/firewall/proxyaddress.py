# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProxyaddressArgs', 'Proxyaddress']

@pulumi.input_type
class ProxyaddressArgs:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressApplicationArgs']]]] = None,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressCategoryArgs']]]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 header_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressHeaderGroupArgs']]]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 host_regex: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 referrer: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 ua: Optional[pulumi.Input[str]] = None,
                 ua_max_ver: Optional[pulumi.Input[str]] = None,
                 ua_min_ver: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Proxyaddress resource.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyaddressApplicationArgs']]] applications: SaaS application. The structure of `application` block is documented below.
        :param pulumi.Input[str] case_sensitivity: Enable to make the pattern case sensitive. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyaddressCategoryArgs']]] categories: FortiGuard category ID. The structure of `category` block is documented below.
        :param pulumi.Input[int] color: Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] header: HTTP header name as a regular expression.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyaddressHeaderGroupArgs']]] header_groups: HTTP header group. The structure of `header_group` block is documented below.
        :param pulumi.Input[str] header_name: Name of HTTP header.
        :param pulumi.Input[str] host: Address object for the host.
        :param pulumi.Input[str] host_regex: Host name as a regular expression.
        :param pulumi.Input[str] method: HTTP request methods to be used. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] path: URL path as a regular expression.
        :param pulumi.Input[str] query: Match the query part of the URL as a regular expression.
        :param pulumi.Input[str] referrer: Enable/disable use of referrer field in the HTTP header to match the address. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingArgs']]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[str] type: Proxy address type.
        :param pulumi.Input[str] ua: Names of browsers to be used as user agent.
        :param pulumi.Input[str] ua_max_ver: Maximum version of the user agent specified in dotted notation. For example, use 120 with the ua field set to "chrome" to require Google Chrome's maximum version must be 120.
        :param pulumi.Input[str] ua_min_ver: Minimum version of the user agent specified in dotted notation. For example, use 90.0.1 with the ua field set to "chrome" to require Google Chrome's minimum version must be 90.0.1.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable visibility of the object in the GUI. Valid values: `enable`, `disable`.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if header_groups is not None:
            pulumi.set(__self__, "header_groups", header_groups)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if host_regex is not None:
            pulumi.set(__self__, "host_regex", host_regex)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if referrer is not None:
            pulumi.set(__self__, "referrer", referrer)
        if taggings is not None:
            pulumi.set(__self__, "taggings", taggings)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if ua is not None:
            pulumi.set(__self__, "ua", ua)
        if ua_max_ver is not None:
            pulumi.set(__self__, "ua_max_ver", ua_max_ver)
        if ua_min_ver is not None:
            pulumi.set(__self__, "ua_min_ver", ua_min_ver)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressApplicationArgs']]]]:
        """
        SaaS application. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to make the pattern case sensitive. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "case_sensitivity")

    @case_sensitivity.setter
    def case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_sensitivity", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressCategoryArgs']]]]:
        """
        FortiGuard category ID. The structure of `category` block is documented below.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressCategoryArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header name as a regular expression.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="headerGroups")
    def header_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressHeaderGroupArgs']]]]:
        """
        HTTP header group. The structure of `header_group` block is documented below.
        """
        return pulumi.get(self, "header_groups")

    @header_groups.setter
    def header_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressHeaderGroupArgs']]]]):
        pulumi.set(self, "header_groups", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of HTTP header.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Address object for the host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="hostRegex")
    def host_regex(self) -> Optional[pulumi.Input[str]]:
        """
        Host name as a regular expression.
        """
        return pulumi.get(self, "host_regex")

    @host_regex.setter
    def host_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_regex", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP request methods to be used. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        URL path as a regular expression.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Match the query part of the URL as a regular expression.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def referrer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of referrer field in the HTTP header to match the address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "referrer")

    @referrer.setter
    def referrer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "referrer", value)

    @property
    @pulumi.getter
    def taggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingArgs']]]]:
        """
        Config object tagging. The structure of `tagging` block is documented below.
        """
        return pulumi.get(self, "taggings")

    @taggings.setter
    def taggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingArgs']]]]):
        pulumi.set(self, "taggings", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy address type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def ua(self) -> Optional[pulumi.Input[str]]:
        """
        Names of browsers to be used as user agent.
        """
        return pulumi.get(self, "ua")

    @ua.setter
    def ua(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ua", value)

    @property
    @pulumi.getter(name="uaMaxVer")
    def ua_max_ver(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum version of the user agent specified in dotted notation. For example, use 120 with the ua field set to "chrome" to require Google Chrome's maximum version must be 120.
        """
        return pulumi.get(self, "ua_max_ver")

    @ua_max_ver.setter
    def ua_max_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ua_max_ver", value)

    @property
    @pulumi.getter(name="uaMinVer")
    def ua_min_ver(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum version of the user agent specified in dotted notation. For example, use 90.0.1 with the ua field set to "chrome" to require Google Chrome's minimum version must be 90.0.1.
        """
        return pulumi.get(self, "ua_min_ver")

    @ua_min_ver.setter
    def ua_min_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ua_min_ver", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable visibility of the object in the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class _ProxyaddressState:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressApplicationArgs']]]] = None,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressCategoryArgs']]]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 header_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressHeaderGroupArgs']]]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 host_regex: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 referrer: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 ua: Optional[pulumi.Input[str]] = None,
                 ua_max_ver: Optional[pulumi.Input[str]] = None,
                 ua_min_ver: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Proxyaddress resources.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyaddressApplicationArgs']]] applications: SaaS application. The structure of `application` block is documented below.
        :param pulumi.Input[str] case_sensitivity: Enable to make the pattern case sensitive. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyaddressCategoryArgs']]] categories: FortiGuard category ID. The structure of `category` block is documented below.
        :param pulumi.Input[int] color: Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] header: HTTP header name as a regular expression.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyaddressHeaderGroupArgs']]] header_groups: HTTP header group. The structure of `header_group` block is documented below.
        :param pulumi.Input[str] header_name: Name of HTTP header.
        :param pulumi.Input[str] host: Address object for the host.
        :param pulumi.Input[str] host_regex: Host name as a regular expression.
        :param pulumi.Input[str] method: HTTP request methods to be used. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] path: URL path as a regular expression.
        :param pulumi.Input[str] query: Match the query part of the URL as a regular expression.
        :param pulumi.Input[str] referrer: Enable/disable use of referrer field in the HTTP header to match the address. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingArgs']]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[str] type: Proxy address type.
        :param pulumi.Input[str] ua: Names of browsers to be used as user agent.
        :param pulumi.Input[str] ua_max_ver: Maximum version of the user agent specified in dotted notation. For example, use 120 with the ua field set to "chrome" to require Google Chrome's maximum version must be 120.
        :param pulumi.Input[str] ua_min_ver: Minimum version of the user agent specified in dotted notation. For example, use 90.0.1 with the ua field set to "chrome" to require Google Chrome's minimum version must be 90.0.1.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable visibility of the object in the GUI. Valid values: `enable`, `disable`.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if header_groups is not None:
            pulumi.set(__self__, "header_groups", header_groups)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if host_regex is not None:
            pulumi.set(__self__, "host_regex", host_regex)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if referrer is not None:
            pulumi.set(__self__, "referrer", referrer)
        if taggings is not None:
            pulumi.set(__self__, "taggings", taggings)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if ua is not None:
            pulumi.set(__self__, "ua", ua)
        if ua_max_ver is not None:
            pulumi.set(__self__, "ua_max_ver", ua_max_ver)
        if ua_min_ver is not None:
            pulumi.set(__self__, "ua_min_ver", ua_min_ver)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressApplicationArgs']]]]:
        """
        SaaS application. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to make the pattern case sensitive. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "case_sensitivity")

    @case_sensitivity.setter
    def case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_sensitivity", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressCategoryArgs']]]]:
        """
        FortiGuard category ID. The structure of `category` block is documented below.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressCategoryArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header name as a regular expression.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="headerGroups")
    def header_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressHeaderGroupArgs']]]]:
        """
        HTTP header group. The structure of `header_group` block is documented below.
        """
        return pulumi.get(self, "header_groups")

    @header_groups.setter
    def header_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressHeaderGroupArgs']]]]):
        pulumi.set(self, "header_groups", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of HTTP header.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Address object for the host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="hostRegex")
    def host_regex(self) -> Optional[pulumi.Input[str]]:
        """
        Host name as a regular expression.
        """
        return pulumi.get(self, "host_regex")

    @host_regex.setter
    def host_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_regex", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP request methods to be used. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        URL path as a regular expression.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Match the query part of the URL as a regular expression.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def referrer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of referrer field in the HTTP header to match the address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "referrer")

    @referrer.setter
    def referrer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "referrer", value)

    @property
    @pulumi.getter
    def taggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingArgs']]]]:
        """
        Config object tagging. The structure of `tagging` block is documented below.
        """
        return pulumi.get(self, "taggings")

    @taggings.setter
    def taggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyaddressTaggingArgs']]]]):
        pulumi.set(self, "taggings", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy address type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def ua(self) -> Optional[pulumi.Input[str]]:
        """
        Names of browsers to be used as user agent.
        """
        return pulumi.get(self, "ua")

    @ua.setter
    def ua(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ua", value)

    @property
    @pulumi.getter(name="uaMaxVer")
    def ua_max_ver(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum version of the user agent specified in dotted notation. For example, use 120 with the ua field set to "chrome" to require Google Chrome's maximum version must be 120.
        """
        return pulumi.get(self, "ua_max_ver")

    @ua_max_ver.setter
    def ua_max_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ua_max_ver", value)

    @property
    @pulumi.getter(name="uaMinVer")
    def ua_min_ver(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum version of the user agent specified in dotted notation. For example, use 90.0.1 with the ua field set to "chrome" to require Google Chrome's minimum version must be 90.0.1.
        """
        return pulumi.get(self, "ua_min_ver")

    @ua_min_ver.setter
    def ua_min_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ua_min_ver", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable visibility of the object in the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


class Proxyaddress(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressApplicationArgs']]]]] = None,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressCategoryArgs']]]]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 header_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressHeaderGroupArgs']]]]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 host_regex: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 referrer: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressTaggingArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 ua: Optional[pulumi.Input[str]] = None,
                 ua_max_ver: Optional[pulumi.Input[str]] = None,
                 ua_min_ver: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Web proxy address configuration.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Proxyaddress("trname",
            case_sensitivity="disable",
            color=2,
            referrer="enable",
            type="host-regex",
            visibility="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall ProxyAddress can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/proxyaddress:Proxyaddress labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/proxyaddress:Proxyaddress labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressApplicationArgs']]]] applications: SaaS application. The structure of `application` block is documented below.
        :param pulumi.Input[str] case_sensitivity: Enable to make the pattern case sensitive. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressCategoryArgs']]]] categories: FortiGuard category ID. The structure of `category` block is documented below.
        :param pulumi.Input[int] color: Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] header: HTTP header name as a regular expression.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressHeaderGroupArgs']]]] header_groups: HTTP header group. The structure of `header_group` block is documented below.
        :param pulumi.Input[str] header_name: Name of HTTP header.
        :param pulumi.Input[str] host: Address object for the host.
        :param pulumi.Input[str] host_regex: Host name as a regular expression.
        :param pulumi.Input[str] method: HTTP request methods to be used. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] path: URL path as a regular expression.
        :param pulumi.Input[str] query: Match the query part of the URL as a regular expression.
        :param pulumi.Input[str] referrer: Enable/disable use of referrer field in the HTTP header to match the address. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressTaggingArgs']]]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[str] type: Proxy address type.
        :param pulumi.Input[str] ua: Names of browsers to be used as user agent.
        :param pulumi.Input[str] ua_max_ver: Maximum version of the user agent specified in dotted notation. For example, use 120 with the ua field set to "chrome" to require Google Chrome's maximum version must be 120.
        :param pulumi.Input[str] ua_min_ver: Minimum version of the user agent specified in dotted notation. For example, use 90.0.1 with the ua field set to "chrome" to require Google Chrome's minimum version must be 90.0.1.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable visibility of the object in the GUI. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProxyaddressArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Web proxy address configuration.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Proxyaddress("trname",
            case_sensitivity="disable",
            color=2,
            referrer="enable",
            type="host-regex",
            visibility="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall ProxyAddress can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/proxyaddress:Proxyaddress labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/proxyaddress:Proxyaddress labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ProxyaddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProxyaddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressApplicationArgs']]]]] = None,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressCategoryArgs']]]]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 header_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressHeaderGroupArgs']]]]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 host_regex: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 referrer: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressTaggingArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 ua: Optional[pulumi.Input[str]] = None,
                 ua_max_ver: Optional[pulumi.Input[str]] = None,
                 ua_min_ver: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProxyaddressArgs.__new__(ProxyaddressArgs)

            __props__.__dict__["applications"] = applications
            __props__.__dict__["case_sensitivity"] = case_sensitivity
            __props__.__dict__["categories"] = categories
            __props__.__dict__["color"] = color
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["header"] = header
            __props__.__dict__["header_groups"] = header_groups
            __props__.__dict__["header_name"] = header_name
            __props__.__dict__["host"] = host
            __props__.__dict__["host_regex"] = host_regex
            __props__.__dict__["method"] = method
            __props__.__dict__["name"] = name
            __props__.__dict__["path"] = path
            __props__.__dict__["query"] = query
            __props__.__dict__["referrer"] = referrer
            __props__.__dict__["taggings"] = taggings
            __props__.__dict__["type"] = type
            __props__.__dict__["ua"] = ua
            __props__.__dict__["ua_max_ver"] = ua_max_ver
            __props__.__dict__["ua_min_ver"] = ua_min_ver
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["visibility"] = visibility
        super(Proxyaddress, __self__).__init__(
            'fortios:firewall/proxyaddress:Proxyaddress',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressApplicationArgs']]]]] = None,
            case_sensitivity: Optional[pulumi.Input[str]] = None,
            categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressCategoryArgs']]]]] = None,
            color: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            header: Optional[pulumi.Input[str]] = None,
            header_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressHeaderGroupArgs']]]]] = None,
            header_name: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            host_regex: Optional[pulumi.Input[str]] = None,
            method: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            query: Optional[pulumi.Input[str]] = None,
            referrer: Optional[pulumi.Input[str]] = None,
            taggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressTaggingArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            ua: Optional[pulumi.Input[str]] = None,
            ua_max_ver: Optional[pulumi.Input[str]] = None,
            ua_min_ver: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            visibility: Optional[pulumi.Input[str]] = None) -> 'Proxyaddress':
        """
        Get an existing Proxyaddress resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressApplicationArgs']]]] applications: SaaS application. The structure of `application` block is documented below.
        :param pulumi.Input[str] case_sensitivity: Enable to make the pattern case sensitive. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressCategoryArgs']]]] categories: FortiGuard category ID. The structure of `category` block is documented below.
        :param pulumi.Input[int] color: Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] header: HTTP header name as a regular expression.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressHeaderGroupArgs']]]] header_groups: HTTP header group. The structure of `header_group` block is documented below.
        :param pulumi.Input[str] header_name: Name of HTTP header.
        :param pulumi.Input[str] host: Address object for the host.
        :param pulumi.Input[str] host_regex: Host name as a regular expression.
        :param pulumi.Input[str] method: HTTP request methods to be used. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] path: URL path as a regular expression.
        :param pulumi.Input[str] query: Match the query part of the URL as a regular expression.
        :param pulumi.Input[str] referrer: Enable/disable use of referrer field in the HTTP header to match the address. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyaddressTaggingArgs']]]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[str] type: Proxy address type.
        :param pulumi.Input[str] ua: Names of browsers to be used as user agent.
        :param pulumi.Input[str] ua_max_ver: Maximum version of the user agent specified in dotted notation. For example, use 120 with the ua field set to "chrome" to require Google Chrome's maximum version must be 120.
        :param pulumi.Input[str] ua_min_ver: Minimum version of the user agent specified in dotted notation. For example, use 90.0.1 with the ua field set to "chrome" to require Google Chrome's minimum version must be 90.0.1.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable visibility of the object in the GUI. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProxyaddressState.__new__(_ProxyaddressState)

        __props__.__dict__["applications"] = applications
        __props__.__dict__["case_sensitivity"] = case_sensitivity
        __props__.__dict__["categories"] = categories
        __props__.__dict__["color"] = color
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["header"] = header
        __props__.__dict__["header_groups"] = header_groups
        __props__.__dict__["header_name"] = header_name
        __props__.__dict__["host"] = host
        __props__.__dict__["host_regex"] = host_regex
        __props__.__dict__["method"] = method
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        __props__.__dict__["query"] = query
        __props__.__dict__["referrer"] = referrer
        __props__.__dict__["taggings"] = taggings
        __props__.__dict__["type"] = type
        __props__.__dict__["ua"] = ua
        __props__.__dict__["ua_max_ver"] = ua_max_ver
        __props__.__dict__["ua_min_ver"] = ua_min_ver
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["visibility"] = visibility
        return Proxyaddress(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Optional[Sequence['outputs.ProxyaddressApplication']]]:
        """
        SaaS application. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> pulumi.Output[str]:
        """
        Enable to make the pattern case sensitive. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "case_sensitivity")

    @property
    @pulumi.getter
    def categories(self) -> pulumi.Output[Optional[Sequence['outputs.ProxyaddressCategory']]]:
        """
        FortiGuard category ID. The structure of `category` block is documented below.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[int]:
        """
        Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def header(self) -> pulumi.Output[str]:
        """
        HTTP header name as a regular expression.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="headerGroups")
    def header_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ProxyaddressHeaderGroup']]]:
        """
        HTTP header group. The structure of `header_group` block is documented below.
        """
        return pulumi.get(self, "header_groups")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Output[str]:
        """
        Name of HTTP header.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Address object for the host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="hostRegex")
    def host_regex(self) -> pulumi.Output[str]:
        """
        Host name as a regular expression.
        """
        return pulumi.get(self, "host_regex")

    @property
    @pulumi.getter
    def method(self) -> pulumi.Output[str]:
        """
        HTTP request methods to be used. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        URL path as a regular expression.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def query(self) -> pulumi.Output[str]:
        """
        Match the query part of the URL as a regular expression.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def referrer(self) -> pulumi.Output[str]:
        """
        Enable/disable use of referrer field in the HTTP header to match the address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "referrer")

    @property
    @pulumi.getter
    def taggings(self) -> pulumi.Output[Optional[Sequence['outputs.ProxyaddressTagging']]]:
        """
        Config object tagging. The structure of `tagging` block is documented below.
        """
        return pulumi.get(self, "taggings")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Proxy address type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def ua(self) -> pulumi.Output[str]:
        """
        Names of browsers to be used as user agent.
        """
        return pulumi.get(self, "ua")

    @property
    @pulumi.getter(name="uaMaxVer")
    def ua_max_ver(self) -> pulumi.Output[str]:
        """
        Maximum version of the user agent specified in dotted notation. For example, use 120 with the ua field set to "chrome" to require Google Chrome's maximum version must be 120.
        """
        return pulumi.get(self, "ua_max_ver")

    @property
    @pulumi.getter(name="uaMinVer")
    def ua_min_ver(self) -> pulumi.Output[str]:
        """
        Minimum version of the user agent specified in dotted notation. For example, use 90.0.1 with the ua field set to "chrome" to require Google Chrome's minimum version must be 90.0.1.
        """
        return pulumi.get(self, "ua_min_ver")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[str]:
        """
        Enable/disable visibility of the object in the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "visibility")

