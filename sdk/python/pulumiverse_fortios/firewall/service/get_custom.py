# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetCustomResult',
    'AwaitableGetCustomResult',
    'get_custom',
    'get_custom_output',
]

@pulumi.output_type
class GetCustomResult:
    """
    A collection of values returned by getCustom.
    """
    def __init__(__self__, app_categories=None, app_service_type=None, applications=None, category=None, check_reset_range=None, color=None, comment=None, fabric_object=None, fqdn=None, helper=None, icmpcode=None, icmptype=None, id=None, iprange=None, name=None, protocol=None, protocol_number=None, proxy=None, sctp_portrange=None, session_ttl=None, tcp_halfclose_timer=None, tcp_halfopen_timer=None, tcp_portrange=None, tcp_rst_timer=None, tcp_timewait_timer=None, udp_idle_timer=None, udp_portrange=None, uuid=None, vdomparam=None, visibility=None):
        if app_categories and not isinstance(app_categories, list):
            raise TypeError("Expected argument 'app_categories' to be a list")
        pulumi.set(__self__, "app_categories", app_categories)
        if app_service_type and not isinstance(app_service_type, str):
            raise TypeError("Expected argument 'app_service_type' to be a str")
        pulumi.set(__self__, "app_service_type", app_service_type)
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        pulumi.set(__self__, "category", category)
        if check_reset_range and not isinstance(check_reset_range, str):
            raise TypeError("Expected argument 'check_reset_range' to be a str")
        pulumi.set(__self__, "check_reset_range", check_reset_range)
        if color and not isinstance(color, int):
            raise TypeError("Expected argument 'color' to be a int")
        pulumi.set(__self__, "color", color)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if fabric_object and not isinstance(fabric_object, str):
            raise TypeError("Expected argument 'fabric_object' to be a str")
        pulumi.set(__self__, "fabric_object", fabric_object)
        if fqdn and not isinstance(fqdn, str):
            raise TypeError("Expected argument 'fqdn' to be a str")
        pulumi.set(__self__, "fqdn", fqdn)
        if helper and not isinstance(helper, str):
            raise TypeError("Expected argument 'helper' to be a str")
        pulumi.set(__self__, "helper", helper)
        if icmpcode and not isinstance(icmpcode, int):
            raise TypeError("Expected argument 'icmpcode' to be a int")
        pulumi.set(__self__, "icmpcode", icmpcode)
        if icmptype and not isinstance(icmptype, int):
            raise TypeError("Expected argument 'icmptype' to be a int")
        pulumi.set(__self__, "icmptype", icmptype)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if iprange and not isinstance(iprange, str):
            raise TypeError("Expected argument 'iprange' to be a str")
        pulumi.set(__self__, "iprange", iprange)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if protocol_number and not isinstance(protocol_number, int):
            raise TypeError("Expected argument 'protocol_number' to be a int")
        pulumi.set(__self__, "protocol_number", protocol_number)
        if proxy and not isinstance(proxy, str):
            raise TypeError("Expected argument 'proxy' to be a str")
        pulumi.set(__self__, "proxy", proxy)
        if sctp_portrange and not isinstance(sctp_portrange, str):
            raise TypeError("Expected argument 'sctp_portrange' to be a str")
        pulumi.set(__self__, "sctp_portrange", sctp_portrange)
        if session_ttl and not isinstance(session_ttl, int):
            raise TypeError("Expected argument 'session_ttl' to be a int")
        pulumi.set(__self__, "session_ttl", session_ttl)
        if tcp_halfclose_timer and not isinstance(tcp_halfclose_timer, int):
            raise TypeError("Expected argument 'tcp_halfclose_timer' to be a int")
        pulumi.set(__self__, "tcp_halfclose_timer", tcp_halfclose_timer)
        if tcp_halfopen_timer and not isinstance(tcp_halfopen_timer, int):
            raise TypeError("Expected argument 'tcp_halfopen_timer' to be a int")
        pulumi.set(__self__, "tcp_halfopen_timer", tcp_halfopen_timer)
        if tcp_portrange and not isinstance(tcp_portrange, str):
            raise TypeError("Expected argument 'tcp_portrange' to be a str")
        pulumi.set(__self__, "tcp_portrange", tcp_portrange)
        if tcp_rst_timer and not isinstance(tcp_rst_timer, int):
            raise TypeError("Expected argument 'tcp_rst_timer' to be a int")
        pulumi.set(__self__, "tcp_rst_timer", tcp_rst_timer)
        if tcp_timewait_timer and not isinstance(tcp_timewait_timer, int):
            raise TypeError("Expected argument 'tcp_timewait_timer' to be a int")
        pulumi.set(__self__, "tcp_timewait_timer", tcp_timewait_timer)
        if udp_idle_timer and not isinstance(udp_idle_timer, int):
            raise TypeError("Expected argument 'udp_idle_timer' to be a int")
        pulumi.set(__self__, "udp_idle_timer", udp_idle_timer)
        if udp_portrange and not isinstance(udp_portrange, str):
            raise TypeError("Expected argument 'udp_portrange' to be a str")
        pulumi.set(__self__, "udp_portrange", udp_portrange)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Sequence['outputs.GetCustomAppCategoryResult']:
        """
        Application category ID. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @property
    @pulumi.getter(name="appServiceType")
    def app_service_type(self) -> str:
        """
        Application service type.
        """
        return pulumi.get(self, "app_service_type")

    @property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetCustomApplicationResult']:
        """
        Application ID. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Service category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="checkResetRange")
    def check_reset_range(self) -> str:
        """
        Configure the type of ICMP error message verification.
        """
        return pulumi.get(self, "check_reset_range")

    @property
    @pulumi.getter
    def color(self) -> int:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="fabricObject")
    def fabric_object(self) -> str:
        """
        Security Fabric global object setting.
        """
        return pulumi.get(self, "fabric_object")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        Fully qualified domain name.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def helper(self) -> str:
        """
        Helper name.
        """
        return pulumi.get(self, "helper")

    @property
    @pulumi.getter
    def icmpcode(self) -> int:
        """
        ICMP code.
        """
        return pulumi.get(self, "icmpcode")

    @property
    @pulumi.getter
    def icmptype(self) -> int:
        """
        ICMP type.
        """
        return pulumi.get(self, "icmptype")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def iprange(self) -> str:
        """
        Start and end of the IP range associated with service.
        """
        return pulumi.get(self, "iprange")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Custom service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol type based on IANA numbers.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> int:
        """
        IP protocol number.
        """
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def proxy(self) -> str:
        """
        Enable/disable web proxy service.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="sctpPortrange")
    def sctp_portrange(self) -> str:
        """
        Multiple SCTP port ranges.
        """
        return pulumi.get(self, "sctp_portrange")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> int:
        """
        Session TTL (300 - 604800, 0 = default).
        """
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="tcpHalfcloseTimer")
    def tcp_halfclose_timer(self) -> int:
        """
        Wait time to close a TCP session waiting for an unanswered FIN packet (1 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_halfclose_timer")

    @property
    @pulumi.getter(name="tcpHalfopenTimer")
    def tcp_halfopen_timer(self) -> int:
        """
        Wait time to close a TCP session waiting for an unanswered open session packet (1 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_halfopen_timer")

    @property
    @pulumi.getter(name="tcpPortrange")
    def tcp_portrange(self) -> str:
        """
        Multiple TCP port ranges.
        """
        return pulumi.get(self, "tcp_portrange")

    @property
    @pulumi.getter(name="tcpRstTimer")
    def tcp_rst_timer(self) -> int:
        """
        Set the length of the TCP CLOSE state in seconds (5 - 300 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_rst_timer")

    @property
    @pulumi.getter(name="tcpTimewaitTimer")
    def tcp_timewait_timer(self) -> int:
        """
        Set the length of the TCP TIME-WAIT state in seconds (1 - 300 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_timewait_timer")

    @property
    @pulumi.getter(name="udpIdleTimer")
    def udp_idle_timer(self) -> int:
        """
        UDP half close timeout (0 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "udp_idle_timer")

    @property
    @pulumi.getter(name="udpPortrange")
    def udp_portrange(self) -> str:
        """
        Multiple UDP port ranges.
        """
        return pulumi.get(self, "udp_portrange")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def visibility(self) -> str:
        """
        Enable/disable the visibility of the service on the GUI.
        """
        return pulumi.get(self, "visibility")


class AwaitableGetCustomResult(GetCustomResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomResult(
            app_categories=self.app_categories,
            app_service_type=self.app_service_type,
            applications=self.applications,
            category=self.category,
            check_reset_range=self.check_reset_range,
            color=self.color,
            comment=self.comment,
            fabric_object=self.fabric_object,
            fqdn=self.fqdn,
            helper=self.helper,
            icmpcode=self.icmpcode,
            icmptype=self.icmptype,
            id=self.id,
            iprange=self.iprange,
            name=self.name,
            protocol=self.protocol,
            protocol_number=self.protocol_number,
            proxy=self.proxy,
            sctp_portrange=self.sctp_portrange,
            session_ttl=self.session_ttl,
            tcp_halfclose_timer=self.tcp_halfclose_timer,
            tcp_halfopen_timer=self.tcp_halfopen_timer,
            tcp_portrange=self.tcp_portrange,
            tcp_rst_timer=self.tcp_rst_timer,
            tcp_timewait_timer=self.tcp_timewait_timer,
            udp_idle_timer=self.udp_idle_timer,
            udp_portrange=self.udp_portrange,
            uuid=self.uuid,
            vdomparam=self.vdomparam,
            visibility=self.visibility)


def get_custom(name: Optional[str] = None,
               vdomparam: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCustomResult:
    """
    Use this data source to get information on an fortios firewallservice custom


    :param str name: Specify the name of the desired firewallservice custom.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:firewall/service/getCustom:getCustom', __args__, opts=opts, typ=GetCustomResult).value

    return AwaitableGetCustomResult(
        app_categories=pulumi.get(__ret__, 'app_categories'),
        app_service_type=pulumi.get(__ret__, 'app_service_type'),
        applications=pulumi.get(__ret__, 'applications'),
        category=pulumi.get(__ret__, 'category'),
        check_reset_range=pulumi.get(__ret__, 'check_reset_range'),
        color=pulumi.get(__ret__, 'color'),
        comment=pulumi.get(__ret__, 'comment'),
        fabric_object=pulumi.get(__ret__, 'fabric_object'),
        fqdn=pulumi.get(__ret__, 'fqdn'),
        helper=pulumi.get(__ret__, 'helper'),
        icmpcode=pulumi.get(__ret__, 'icmpcode'),
        icmptype=pulumi.get(__ret__, 'icmptype'),
        id=pulumi.get(__ret__, 'id'),
        iprange=pulumi.get(__ret__, 'iprange'),
        name=pulumi.get(__ret__, 'name'),
        protocol=pulumi.get(__ret__, 'protocol'),
        protocol_number=pulumi.get(__ret__, 'protocol_number'),
        proxy=pulumi.get(__ret__, 'proxy'),
        sctp_portrange=pulumi.get(__ret__, 'sctp_portrange'),
        session_ttl=pulumi.get(__ret__, 'session_ttl'),
        tcp_halfclose_timer=pulumi.get(__ret__, 'tcp_halfclose_timer'),
        tcp_halfopen_timer=pulumi.get(__ret__, 'tcp_halfopen_timer'),
        tcp_portrange=pulumi.get(__ret__, 'tcp_portrange'),
        tcp_rst_timer=pulumi.get(__ret__, 'tcp_rst_timer'),
        tcp_timewait_timer=pulumi.get(__ret__, 'tcp_timewait_timer'),
        udp_idle_timer=pulumi.get(__ret__, 'udp_idle_timer'),
        udp_portrange=pulumi.get(__ret__, 'udp_portrange'),
        uuid=pulumi.get(__ret__, 'uuid'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        visibility=pulumi.get(__ret__, 'visibility'))


@_utilities.lift_output_func(get_custom)
def get_custom_output(name: Optional[pulumi.Input[str]] = None,
                      vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCustomResult]:
    """
    Use this data source to get information on an fortios firewallservice custom


    :param str name: Specify the name of the desired firewallservice custom.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
