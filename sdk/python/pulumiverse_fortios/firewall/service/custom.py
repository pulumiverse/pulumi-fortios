# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomArgs', 'Custom']

@pulumi.input_type
class CustomArgs:
    def __init__(__self__, *,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAppCategoryArgs']]]] = None,
                 app_service_type: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['CustomApplicationArgs']]]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 helper: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[int]] = None,
                 icmptype: Optional[pulumi.Input[int]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Custom resource.
        :param pulumi.Input[Sequence[pulumi.Input['CustomAppCategoryArgs']]] app_categories: Application category ID. The structure of `app_category` block is documented below.
        :param pulumi.Input[str] app_service_type: Application service type. Valid values: `disable`, `app-id`, `app-category`.
        :param pulumi.Input[Sequence[pulumi.Input['CustomApplicationArgs']]] applications: Application ID. The structure of `application` block is documented below.
        :param pulumi.Input[str] category: Service category.
        :param pulumi.Input[str] check_reset_range: Configure the type of ICMP error message verification. Valid values: `disable`, `strict`, `default`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fabric_object: Security Fabric global object setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fqdn: Fully qualified domain name.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] helper: Helper name.
        :param pulumi.Input[int] icmpcode: ICMP code.
        :param pulumi.Input[int] icmptype: ICMP type.
        :param pulumi.Input[str] iprange: Start and end of the IP range associated with service.
        :param pulumi.Input[str] name: Custom service name.
        :param pulumi.Input[str] protocol: Protocol type based on IANA numbers. Valid values: `TCP/UDP/SCTP`, `ICMP`, `ICMP6`, `IP`, `HTTP`, `FTP`, `CONNECT`, `SOCKS-TCP`, `SOCKS-UDP`, `ALL`.
        :param pulumi.Input[int] protocol_number: IP protocol number.
        :param pulumi.Input[str] proxy: Enable/disable web proxy service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sctp_portrange: Multiple SCTP port ranges.
        :param pulumi.Input[int] session_ttl: Session TTL (300 - 604800, 0 = default).
        :param pulumi.Input[int] tcp_halfclose_timer: Wait time to close a TCP session waiting for an unanswered FIN packet (1 - 86400 sec, 0 = default).
        :param pulumi.Input[int] tcp_halfopen_timer: Wait time to close a TCP session waiting for an unanswered open session packet (1 - 86400 sec, 0 = default).
        :param pulumi.Input[str] tcp_portrange: Multiple TCP port ranges.
        :param pulumi.Input[int] tcp_rst_timer: Set the length of the TCP CLOSE state in seconds (5 - 300 sec, 0 = default).
        :param pulumi.Input[int] tcp_timewait_timer: Set the length of the TCP TIME-WAIT state in seconds (1 - 300 sec, 0 = default).
        :param pulumi.Input[int] udp_idle_timer: Number of seconds before an idle UDP connection times out (0 - 86400 sec, 0 = default).
        :param pulumi.Input[str] udp_portrange: Multiple UDP port ranges.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable the visibility of the service on the GUI. Valid values: `enable`, `disable`.
        """
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_service_type is not None:
            pulumi.set(__self__, "app_service_type", app_service_type)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if check_reset_range is not None:
            pulumi.set(__self__, "check_reset_range", check_reset_range)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fabric_object is not None:
            pulumi.set(__self__, "fabric_object", fabric_object)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if helper is not None:
            pulumi.set(__self__, "helper", helper)
        if icmpcode is not None:
            pulumi.set(__self__, "icmpcode", icmpcode)
        if icmptype is not None:
            pulumi.set(__self__, "icmptype", icmptype)
        if iprange is not None:
            pulumi.set(__self__, "iprange", iprange)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_number is not None:
            pulumi.set(__self__, "protocol_number", protocol_number)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if sctp_portrange is not None:
            pulumi.set(__self__, "sctp_portrange", sctp_portrange)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if tcp_halfclose_timer is not None:
            pulumi.set(__self__, "tcp_halfclose_timer", tcp_halfclose_timer)
        if tcp_halfopen_timer is not None:
            pulumi.set(__self__, "tcp_halfopen_timer", tcp_halfopen_timer)
        if tcp_portrange is not None:
            pulumi.set(__self__, "tcp_portrange", tcp_portrange)
        if tcp_rst_timer is not None:
            pulumi.set(__self__, "tcp_rst_timer", tcp_rst_timer)
        if tcp_timewait_timer is not None:
            pulumi.set(__self__, "tcp_timewait_timer", tcp_timewait_timer)
        if udp_idle_timer is not None:
            pulumi.set(__self__, "udp_idle_timer", udp_idle_timer)
        if udp_portrange is not None:
            pulumi.set(__self__, "udp_portrange", udp_portrange)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAppCategoryArgs']]]]:
        """
        Application category ID. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appServiceType")
    def app_service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Application service type. Valid values: `disable`, `app-id`, `app-category`.
        """
        return pulumi.get(self, "app_service_type")

    @app_service_type.setter
    def app_service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_service_type", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomApplicationArgs']]]]:
        """
        Application ID. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Service category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="checkResetRange")
    def check_reset_range(self) -> Optional[pulumi.Input[str]]:
        """
        Configure the type of ICMP error message verification. Valid values: `disable`, `strict`, `default`.
        """
        return pulumi.get(self, "check_reset_range")

    @check_reset_range.setter
    def check_reset_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_reset_range", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fabricObject")
    def fabric_object(self) -> Optional[pulumi.Input[str]]:
        """
        Security Fabric global object setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fabric_object")

    @fabric_object.setter
    def fabric_object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified domain name.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def helper(self) -> Optional[pulumi.Input[str]]:
        """
        Helper name.
        """
        return pulumi.get(self, "helper")

    @helper.setter
    def helper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "helper", value)

    @property
    @pulumi.getter
    def icmpcode(self) -> Optional[pulumi.Input[int]]:
        """
        ICMP code.
        """
        return pulumi.get(self, "icmpcode")

    @icmpcode.setter
    def icmpcode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmpcode", value)

    @property
    @pulumi.getter
    def icmptype(self) -> Optional[pulumi.Input[int]]:
        """
        ICMP type.
        """
        return pulumi.get(self, "icmptype")

    @icmptype.setter
    def icmptype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmptype", value)

    @property
    @pulumi.getter
    def iprange(self) -> Optional[pulumi.Input[str]]:
        """
        Start and end of the IP range associated with service.
        """
        return pulumi.get(self, "iprange")

    @iprange.setter
    def iprange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iprange", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol type based on IANA numbers. Valid values: `TCP/UDP/SCTP`, `ICMP`, `ICMP6`, `IP`, `HTTP`, `FTP`, `CONNECT`, `SOCKS-TCP`, `SOCKS-UDP`, `ALL`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> Optional[pulumi.Input[int]]:
        """
        IP protocol number.
        """
        return pulumi.get(self, "protocol_number")

    @protocol_number.setter
    def protocol_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol_number", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web proxy service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="sctpPortrange")
    def sctp_portrange(self) -> Optional[pulumi.Input[str]]:
        """
        Multiple SCTP port ranges.
        """
        return pulumi.get(self, "sctp_portrange")

    @sctp_portrange.setter
    def sctp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_portrange", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Session TTL (300 - 604800, 0 = default).
        """
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="tcpHalfcloseTimer")
    def tcp_halfclose_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Wait time to close a TCP session waiting for an unanswered FIN packet (1 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_halfclose_timer")

    @tcp_halfclose_timer.setter
    def tcp_halfclose_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfclose_timer", value)

    @property
    @pulumi.getter(name="tcpHalfopenTimer")
    def tcp_halfopen_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Wait time to close a TCP session waiting for an unanswered open session packet (1 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_halfopen_timer")

    @tcp_halfopen_timer.setter
    def tcp_halfopen_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfopen_timer", value)

    @property
    @pulumi.getter(name="tcpPortrange")
    def tcp_portrange(self) -> Optional[pulumi.Input[str]]:
        """
        Multiple TCP port ranges.
        """
        return pulumi.get(self, "tcp_portrange")

    @tcp_portrange.setter
    def tcp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_portrange", value)

    @property
    @pulumi.getter(name="tcpRstTimer")
    def tcp_rst_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Set the length of the TCP CLOSE state in seconds (5 - 300 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_rst_timer")

    @tcp_rst_timer.setter
    def tcp_rst_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_rst_timer", value)

    @property
    @pulumi.getter(name="tcpTimewaitTimer")
    def tcp_timewait_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Set the length of the TCP TIME-WAIT state in seconds (1 - 300 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_timewait_timer")

    @tcp_timewait_timer.setter
    def tcp_timewait_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_timewait_timer", value)

    @property
    @pulumi.getter(name="udpIdleTimer")
    def udp_idle_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds before an idle UDP connection times out (0 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "udp_idle_timer")

    @udp_idle_timer.setter
    def udp_idle_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "udp_idle_timer", value)

    @property
    @pulumi.getter(name="udpPortrange")
    def udp_portrange(self) -> Optional[pulumi.Input[str]]:
        """
        Multiple UDP port ranges.
        """
        return pulumi.get(self, "udp_portrange")

    @udp_portrange.setter
    def udp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_portrange", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the visibility of the service on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class _CustomState:
    def __init__(__self__, *,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAppCategoryArgs']]]] = None,
                 app_service_type: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['CustomApplicationArgs']]]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 helper: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[int]] = None,
                 icmptype: Optional[pulumi.Input[int]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Custom resources.
        :param pulumi.Input[Sequence[pulumi.Input['CustomAppCategoryArgs']]] app_categories: Application category ID. The structure of `app_category` block is documented below.
        :param pulumi.Input[str] app_service_type: Application service type. Valid values: `disable`, `app-id`, `app-category`.
        :param pulumi.Input[Sequence[pulumi.Input['CustomApplicationArgs']]] applications: Application ID. The structure of `application` block is documented below.
        :param pulumi.Input[str] category: Service category.
        :param pulumi.Input[str] check_reset_range: Configure the type of ICMP error message verification. Valid values: `disable`, `strict`, `default`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fabric_object: Security Fabric global object setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fqdn: Fully qualified domain name.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] helper: Helper name.
        :param pulumi.Input[int] icmpcode: ICMP code.
        :param pulumi.Input[int] icmptype: ICMP type.
        :param pulumi.Input[str] iprange: Start and end of the IP range associated with service.
        :param pulumi.Input[str] name: Custom service name.
        :param pulumi.Input[str] protocol: Protocol type based on IANA numbers. Valid values: `TCP/UDP/SCTP`, `ICMP`, `ICMP6`, `IP`, `HTTP`, `FTP`, `CONNECT`, `SOCKS-TCP`, `SOCKS-UDP`, `ALL`.
        :param pulumi.Input[int] protocol_number: IP protocol number.
        :param pulumi.Input[str] proxy: Enable/disable web proxy service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sctp_portrange: Multiple SCTP port ranges.
        :param pulumi.Input[int] session_ttl: Session TTL (300 - 604800, 0 = default).
        :param pulumi.Input[int] tcp_halfclose_timer: Wait time to close a TCP session waiting for an unanswered FIN packet (1 - 86400 sec, 0 = default).
        :param pulumi.Input[int] tcp_halfopen_timer: Wait time to close a TCP session waiting for an unanswered open session packet (1 - 86400 sec, 0 = default).
        :param pulumi.Input[str] tcp_portrange: Multiple TCP port ranges.
        :param pulumi.Input[int] tcp_rst_timer: Set the length of the TCP CLOSE state in seconds (5 - 300 sec, 0 = default).
        :param pulumi.Input[int] tcp_timewait_timer: Set the length of the TCP TIME-WAIT state in seconds (1 - 300 sec, 0 = default).
        :param pulumi.Input[int] udp_idle_timer: Number of seconds before an idle UDP connection times out (0 - 86400 sec, 0 = default).
        :param pulumi.Input[str] udp_portrange: Multiple UDP port ranges.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable the visibility of the service on the GUI. Valid values: `enable`, `disable`.
        """
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_service_type is not None:
            pulumi.set(__self__, "app_service_type", app_service_type)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if check_reset_range is not None:
            pulumi.set(__self__, "check_reset_range", check_reset_range)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fabric_object is not None:
            pulumi.set(__self__, "fabric_object", fabric_object)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if helper is not None:
            pulumi.set(__self__, "helper", helper)
        if icmpcode is not None:
            pulumi.set(__self__, "icmpcode", icmpcode)
        if icmptype is not None:
            pulumi.set(__self__, "icmptype", icmptype)
        if iprange is not None:
            pulumi.set(__self__, "iprange", iprange)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_number is not None:
            pulumi.set(__self__, "protocol_number", protocol_number)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if sctp_portrange is not None:
            pulumi.set(__self__, "sctp_portrange", sctp_portrange)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if tcp_halfclose_timer is not None:
            pulumi.set(__self__, "tcp_halfclose_timer", tcp_halfclose_timer)
        if tcp_halfopen_timer is not None:
            pulumi.set(__self__, "tcp_halfopen_timer", tcp_halfopen_timer)
        if tcp_portrange is not None:
            pulumi.set(__self__, "tcp_portrange", tcp_portrange)
        if tcp_rst_timer is not None:
            pulumi.set(__self__, "tcp_rst_timer", tcp_rst_timer)
        if tcp_timewait_timer is not None:
            pulumi.set(__self__, "tcp_timewait_timer", tcp_timewait_timer)
        if udp_idle_timer is not None:
            pulumi.set(__self__, "udp_idle_timer", udp_idle_timer)
        if udp_portrange is not None:
            pulumi.set(__self__, "udp_portrange", udp_portrange)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAppCategoryArgs']]]]:
        """
        Application category ID. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appServiceType")
    def app_service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Application service type. Valid values: `disable`, `app-id`, `app-category`.
        """
        return pulumi.get(self, "app_service_type")

    @app_service_type.setter
    def app_service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_service_type", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomApplicationArgs']]]]:
        """
        Application ID. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Service category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="checkResetRange")
    def check_reset_range(self) -> Optional[pulumi.Input[str]]:
        """
        Configure the type of ICMP error message verification. Valid values: `disable`, `strict`, `default`.
        """
        return pulumi.get(self, "check_reset_range")

    @check_reset_range.setter
    def check_reset_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_reset_range", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fabricObject")
    def fabric_object(self) -> Optional[pulumi.Input[str]]:
        """
        Security Fabric global object setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fabric_object")

    @fabric_object.setter
    def fabric_object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified domain name.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def helper(self) -> Optional[pulumi.Input[str]]:
        """
        Helper name.
        """
        return pulumi.get(self, "helper")

    @helper.setter
    def helper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "helper", value)

    @property
    @pulumi.getter
    def icmpcode(self) -> Optional[pulumi.Input[int]]:
        """
        ICMP code.
        """
        return pulumi.get(self, "icmpcode")

    @icmpcode.setter
    def icmpcode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmpcode", value)

    @property
    @pulumi.getter
    def icmptype(self) -> Optional[pulumi.Input[int]]:
        """
        ICMP type.
        """
        return pulumi.get(self, "icmptype")

    @icmptype.setter
    def icmptype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmptype", value)

    @property
    @pulumi.getter
    def iprange(self) -> Optional[pulumi.Input[str]]:
        """
        Start and end of the IP range associated with service.
        """
        return pulumi.get(self, "iprange")

    @iprange.setter
    def iprange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iprange", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol type based on IANA numbers. Valid values: `TCP/UDP/SCTP`, `ICMP`, `ICMP6`, `IP`, `HTTP`, `FTP`, `CONNECT`, `SOCKS-TCP`, `SOCKS-UDP`, `ALL`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> Optional[pulumi.Input[int]]:
        """
        IP protocol number.
        """
        return pulumi.get(self, "protocol_number")

    @protocol_number.setter
    def protocol_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol_number", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web proxy service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="sctpPortrange")
    def sctp_portrange(self) -> Optional[pulumi.Input[str]]:
        """
        Multiple SCTP port ranges.
        """
        return pulumi.get(self, "sctp_portrange")

    @sctp_portrange.setter
    def sctp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_portrange", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Session TTL (300 - 604800, 0 = default).
        """
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="tcpHalfcloseTimer")
    def tcp_halfclose_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Wait time to close a TCP session waiting for an unanswered FIN packet (1 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_halfclose_timer")

    @tcp_halfclose_timer.setter
    def tcp_halfclose_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfclose_timer", value)

    @property
    @pulumi.getter(name="tcpHalfopenTimer")
    def tcp_halfopen_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Wait time to close a TCP session waiting for an unanswered open session packet (1 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_halfopen_timer")

    @tcp_halfopen_timer.setter
    def tcp_halfopen_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfopen_timer", value)

    @property
    @pulumi.getter(name="tcpPortrange")
    def tcp_portrange(self) -> Optional[pulumi.Input[str]]:
        """
        Multiple TCP port ranges.
        """
        return pulumi.get(self, "tcp_portrange")

    @tcp_portrange.setter
    def tcp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_portrange", value)

    @property
    @pulumi.getter(name="tcpRstTimer")
    def tcp_rst_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Set the length of the TCP CLOSE state in seconds (5 - 300 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_rst_timer")

    @tcp_rst_timer.setter
    def tcp_rst_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_rst_timer", value)

    @property
    @pulumi.getter(name="tcpTimewaitTimer")
    def tcp_timewait_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Set the length of the TCP TIME-WAIT state in seconds (1 - 300 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_timewait_timer")

    @tcp_timewait_timer.setter
    def tcp_timewait_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_timewait_timer", value)

    @property
    @pulumi.getter(name="udpIdleTimer")
    def udp_idle_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds before an idle UDP connection times out (0 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "udp_idle_timer")

    @udp_idle_timer.setter
    def udp_idle_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "udp_idle_timer", value)

    @property
    @pulumi.getter(name="udpPortrange")
    def udp_portrange(self) -> Optional[pulumi.Input[str]]:
        """
        Multiple UDP port ranges.
        """
        return pulumi.get(self, "udp_portrange")

    @udp_portrange.setter
    def udp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_portrange", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the visibility of the service on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


class Custom(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomAppCategoryArgs']]]]] = None,
                 app_service_type: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomApplicationArgs']]]]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 helper: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[int]] = None,
                 icmptype: Optional[pulumi.Input[int]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure custom services.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.service.Custom("trname",
            app_service_type="disable",
            category="General",
            check_reset_range="default",
            color=0,
            helper="auto",
            iprange="0.0.0.0",
            protocol="TCP/UDP/SCTP",
            protocol_number=6,
            proxy="disable",
            tcp_halfclose_timer=0,
            tcp_halfopen_timer=0,
            tcp_portrange="223-332",
            tcp_timewait_timer=0,
            udp_idle_timer=0,
            visibility="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        FirewallService Custom can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/service/custom:Custom labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/service/custom:Custom labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomAppCategoryArgs']]]] app_categories: Application category ID. The structure of `app_category` block is documented below.
        :param pulumi.Input[str] app_service_type: Application service type. Valid values: `disable`, `app-id`, `app-category`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomApplicationArgs']]]] applications: Application ID. The structure of `application` block is documented below.
        :param pulumi.Input[str] category: Service category.
        :param pulumi.Input[str] check_reset_range: Configure the type of ICMP error message verification. Valid values: `disable`, `strict`, `default`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fabric_object: Security Fabric global object setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fqdn: Fully qualified domain name.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] helper: Helper name.
        :param pulumi.Input[int] icmpcode: ICMP code.
        :param pulumi.Input[int] icmptype: ICMP type.
        :param pulumi.Input[str] iprange: Start and end of the IP range associated with service.
        :param pulumi.Input[str] name: Custom service name.
        :param pulumi.Input[str] protocol: Protocol type based on IANA numbers. Valid values: `TCP/UDP/SCTP`, `ICMP`, `ICMP6`, `IP`, `HTTP`, `FTP`, `CONNECT`, `SOCKS-TCP`, `SOCKS-UDP`, `ALL`.
        :param pulumi.Input[int] protocol_number: IP protocol number.
        :param pulumi.Input[str] proxy: Enable/disable web proxy service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sctp_portrange: Multiple SCTP port ranges.
        :param pulumi.Input[int] session_ttl: Session TTL (300 - 604800, 0 = default).
        :param pulumi.Input[int] tcp_halfclose_timer: Wait time to close a TCP session waiting for an unanswered FIN packet (1 - 86400 sec, 0 = default).
        :param pulumi.Input[int] tcp_halfopen_timer: Wait time to close a TCP session waiting for an unanswered open session packet (1 - 86400 sec, 0 = default).
        :param pulumi.Input[str] tcp_portrange: Multiple TCP port ranges.
        :param pulumi.Input[int] tcp_rst_timer: Set the length of the TCP CLOSE state in seconds (5 - 300 sec, 0 = default).
        :param pulumi.Input[int] tcp_timewait_timer: Set the length of the TCP TIME-WAIT state in seconds (1 - 300 sec, 0 = default).
        :param pulumi.Input[int] udp_idle_timer: Number of seconds before an idle UDP connection times out (0 - 86400 sec, 0 = default).
        :param pulumi.Input[str] udp_portrange: Multiple UDP port ranges.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable the visibility of the service on the GUI. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CustomArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure custom services.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.service.Custom("trname",
            app_service_type="disable",
            category="General",
            check_reset_range="default",
            color=0,
            helper="auto",
            iprange="0.0.0.0",
            protocol="TCP/UDP/SCTP",
            protocol_number=6,
            proxy="disable",
            tcp_halfclose_timer=0,
            tcp_halfopen_timer=0,
            tcp_portrange="223-332",
            tcp_timewait_timer=0,
            udp_idle_timer=0,
            visibility="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        FirewallService Custom can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/service/custom:Custom labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/service/custom:Custom labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param CustomArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomAppCategoryArgs']]]]] = None,
                 app_service_type: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomApplicationArgs']]]]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 helper: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[int]] = None,
                 icmptype: Optional[pulumi.Input[int]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomArgs.__new__(CustomArgs)

            __props__.__dict__["app_categories"] = app_categories
            __props__.__dict__["app_service_type"] = app_service_type
            __props__.__dict__["applications"] = applications
            __props__.__dict__["category"] = category
            __props__.__dict__["check_reset_range"] = check_reset_range
            __props__.__dict__["color"] = color
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fabric_object"] = fabric_object
            __props__.__dict__["fqdn"] = fqdn
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["helper"] = helper
            __props__.__dict__["icmpcode"] = icmpcode
            __props__.__dict__["icmptype"] = icmptype
            __props__.__dict__["iprange"] = iprange
            __props__.__dict__["name"] = name
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["protocol_number"] = protocol_number
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["sctp_portrange"] = sctp_portrange
            __props__.__dict__["session_ttl"] = session_ttl
            __props__.__dict__["tcp_halfclose_timer"] = tcp_halfclose_timer
            __props__.__dict__["tcp_halfopen_timer"] = tcp_halfopen_timer
            __props__.__dict__["tcp_portrange"] = tcp_portrange
            __props__.__dict__["tcp_rst_timer"] = tcp_rst_timer
            __props__.__dict__["tcp_timewait_timer"] = tcp_timewait_timer
            __props__.__dict__["udp_idle_timer"] = udp_idle_timer
            __props__.__dict__["udp_portrange"] = udp_portrange
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["visibility"] = visibility
        super(Custom, __self__).__init__(
            'fortios:firewall/service/custom:Custom',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomAppCategoryArgs']]]]] = None,
            app_service_type: Optional[pulumi.Input[str]] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomApplicationArgs']]]]] = None,
            category: Optional[pulumi.Input[str]] = None,
            check_reset_range: Optional[pulumi.Input[str]] = None,
            color: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fabric_object: Optional[pulumi.Input[str]] = None,
            fqdn: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            helper: Optional[pulumi.Input[str]] = None,
            icmpcode: Optional[pulumi.Input[int]] = None,
            icmptype: Optional[pulumi.Input[int]] = None,
            iprange: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            protocol_number: Optional[pulumi.Input[int]] = None,
            proxy: Optional[pulumi.Input[str]] = None,
            sctp_portrange: Optional[pulumi.Input[str]] = None,
            session_ttl: Optional[pulumi.Input[int]] = None,
            tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
            tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
            tcp_portrange: Optional[pulumi.Input[str]] = None,
            tcp_rst_timer: Optional[pulumi.Input[int]] = None,
            tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
            udp_idle_timer: Optional[pulumi.Input[int]] = None,
            udp_portrange: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            visibility: Optional[pulumi.Input[str]] = None) -> 'Custom':
        """
        Get an existing Custom resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomAppCategoryArgs']]]] app_categories: Application category ID. The structure of `app_category` block is documented below.
        :param pulumi.Input[str] app_service_type: Application service type. Valid values: `disable`, `app-id`, `app-category`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomApplicationArgs']]]] applications: Application ID. The structure of `application` block is documented below.
        :param pulumi.Input[str] category: Service category.
        :param pulumi.Input[str] check_reset_range: Configure the type of ICMP error message verification. Valid values: `disable`, `strict`, `default`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fabric_object: Security Fabric global object setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fqdn: Fully qualified domain name.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] helper: Helper name.
        :param pulumi.Input[int] icmpcode: ICMP code.
        :param pulumi.Input[int] icmptype: ICMP type.
        :param pulumi.Input[str] iprange: Start and end of the IP range associated with service.
        :param pulumi.Input[str] name: Custom service name.
        :param pulumi.Input[str] protocol: Protocol type based on IANA numbers. Valid values: `TCP/UDP/SCTP`, `ICMP`, `ICMP6`, `IP`, `HTTP`, `FTP`, `CONNECT`, `SOCKS-TCP`, `SOCKS-UDP`, `ALL`.
        :param pulumi.Input[int] protocol_number: IP protocol number.
        :param pulumi.Input[str] proxy: Enable/disable web proxy service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sctp_portrange: Multiple SCTP port ranges.
        :param pulumi.Input[int] session_ttl: Session TTL (300 - 604800, 0 = default).
        :param pulumi.Input[int] tcp_halfclose_timer: Wait time to close a TCP session waiting for an unanswered FIN packet (1 - 86400 sec, 0 = default).
        :param pulumi.Input[int] tcp_halfopen_timer: Wait time to close a TCP session waiting for an unanswered open session packet (1 - 86400 sec, 0 = default).
        :param pulumi.Input[str] tcp_portrange: Multiple TCP port ranges.
        :param pulumi.Input[int] tcp_rst_timer: Set the length of the TCP CLOSE state in seconds (5 - 300 sec, 0 = default).
        :param pulumi.Input[int] tcp_timewait_timer: Set the length of the TCP TIME-WAIT state in seconds (1 - 300 sec, 0 = default).
        :param pulumi.Input[int] udp_idle_timer: Number of seconds before an idle UDP connection times out (0 - 86400 sec, 0 = default).
        :param pulumi.Input[str] udp_portrange: Multiple UDP port ranges.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] visibility: Enable/disable the visibility of the service on the GUI. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomState.__new__(_CustomState)

        __props__.__dict__["app_categories"] = app_categories
        __props__.__dict__["app_service_type"] = app_service_type
        __props__.__dict__["applications"] = applications
        __props__.__dict__["category"] = category
        __props__.__dict__["check_reset_range"] = check_reset_range
        __props__.__dict__["color"] = color
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fabric_object"] = fabric_object
        __props__.__dict__["fqdn"] = fqdn
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["helper"] = helper
        __props__.__dict__["icmpcode"] = icmpcode
        __props__.__dict__["icmptype"] = icmptype
        __props__.__dict__["iprange"] = iprange
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["protocol_number"] = protocol_number
        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["sctp_portrange"] = sctp_portrange
        __props__.__dict__["session_ttl"] = session_ttl
        __props__.__dict__["tcp_halfclose_timer"] = tcp_halfclose_timer
        __props__.__dict__["tcp_halfopen_timer"] = tcp_halfopen_timer
        __props__.__dict__["tcp_portrange"] = tcp_portrange
        __props__.__dict__["tcp_rst_timer"] = tcp_rst_timer
        __props__.__dict__["tcp_timewait_timer"] = tcp_timewait_timer
        __props__.__dict__["udp_idle_timer"] = udp_idle_timer
        __props__.__dict__["udp_portrange"] = udp_portrange
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["visibility"] = visibility
        return Custom(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> pulumi.Output[Optional[Sequence['outputs.CustomAppCategory']]]:
        """
        Application category ID. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @property
    @pulumi.getter(name="appServiceType")
    def app_service_type(self) -> pulumi.Output[str]:
        """
        Application service type. Valid values: `disable`, `app-id`, `app-category`.
        """
        return pulumi.get(self, "app_service_type")

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Optional[Sequence['outputs.CustomApplication']]]:
        """
        Application ID. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[str]:
        """
        Service category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="checkResetRange")
    def check_reset_range(self) -> pulumi.Output[str]:
        """
        Configure the type of ICMP error message verification. Valid values: `disable`, `strict`, `default`.
        """
        return pulumi.get(self, "check_reset_range")

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[int]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fabricObject")
    def fabric_object(self) -> pulumi.Output[str]:
        """
        Security Fabric global object setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fabric_object")

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Output[str]:
        """
        Fully qualified domain name.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def helper(self) -> pulumi.Output[str]:
        """
        Helper name.
        """
        return pulumi.get(self, "helper")

    @property
    @pulumi.getter
    def icmpcode(self) -> pulumi.Output[int]:
        """
        ICMP code.
        """
        return pulumi.get(self, "icmpcode")

    @property
    @pulumi.getter
    def icmptype(self) -> pulumi.Output[int]:
        """
        ICMP type.
        """
        return pulumi.get(self, "icmptype")

    @property
    @pulumi.getter
    def iprange(self) -> pulumi.Output[str]:
        """
        Start and end of the IP range associated with service.
        """
        return pulumi.get(self, "iprange")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Custom service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Protocol type based on IANA numbers. Valid values: `TCP/UDP/SCTP`, `ICMP`, `ICMP6`, `IP`, `HTTP`, `FTP`, `CONNECT`, `SOCKS-TCP`, `SOCKS-UDP`, `ALL`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> pulumi.Output[int]:
        """
        IP protocol number.
        """
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output[str]:
        """
        Enable/disable web proxy service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="sctpPortrange")
    def sctp_portrange(self) -> pulumi.Output[str]:
        """
        Multiple SCTP port ranges.
        """
        return pulumi.get(self, "sctp_portrange")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> pulumi.Output[int]:
        """
        Session TTL (300 - 604800, 0 = default).
        """
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="tcpHalfcloseTimer")
    def tcp_halfclose_timer(self) -> pulumi.Output[int]:
        """
        Wait time to close a TCP session waiting for an unanswered FIN packet (1 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_halfclose_timer")

    @property
    @pulumi.getter(name="tcpHalfopenTimer")
    def tcp_halfopen_timer(self) -> pulumi.Output[int]:
        """
        Wait time to close a TCP session waiting for an unanswered open session packet (1 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_halfopen_timer")

    @property
    @pulumi.getter(name="tcpPortrange")
    def tcp_portrange(self) -> pulumi.Output[str]:
        """
        Multiple TCP port ranges.
        """
        return pulumi.get(self, "tcp_portrange")

    @property
    @pulumi.getter(name="tcpRstTimer")
    def tcp_rst_timer(self) -> pulumi.Output[int]:
        """
        Set the length of the TCP CLOSE state in seconds (5 - 300 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_rst_timer")

    @property
    @pulumi.getter(name="tcpTimewaitTimer")
    def tcp_timewait_timer(self) -> pulumi.Output[int]:
        """
        Set the length of the TCP TIME-WAIT state in seconds (1 - 300 sec, 0 = default).
        """
        return pulumi.get(self, "tcp_timewait_timer")

    @property
    @pulumi.getter(name="udpIdleTimer")
    def udp_idle_timer(self) -> pulumi.Output[int]:
        """
        Number of seconds before an idle UDP connection times out (0 - 86400 sec, 0 = default).
        """
        return pulumi.get(self, "udp_idle_timer")

    @property
    @pulumi.getter(name="udpPortrange")
    def udp_portrange(self) -> pulumi.Output[str]:
        """
        Multiple UDP port ranges.
        """
        return pulumi.get(self, "udp_portrange")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[str]:
        """
        Enable/disable the visibility of the service on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "visibility")

