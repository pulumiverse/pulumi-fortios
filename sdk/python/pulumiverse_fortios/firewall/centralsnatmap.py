# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CentralsnatmapArgs', 'Centralsnatmap']

@pulumi.input_type
class CentralsnatmapArgs:
    def __init__(__self__, *,
                 dst_addrs: pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddrArgs']]],
                 dstintfs: pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstintfArgs']]],
                 nat: pulumi.Input[str],
                 orig_addrs: pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddrArgs']]],
                 orig_port: pulumi.Input[str],
                 protocol: pulumi.Input[int],
                 srcintfs: pulumi.Input[Sequence[pulumi.Input['CentralsnatmapSrcintfArgs']]],
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddr6Args']]]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat_ippool6s: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppool6Args']]]] = None,
                 nat_ippools: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppoolArgs']]]] = None,
                 nat_port: Optional[pulumi.Input[str]] = None,
                 orig_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddr6Args']]]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Centralsnatmap resource.
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddrArgs']]] dst_addrs: Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstintfArgs']]] dstintfs: Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddrArgs']]] orig_addrs: Original address. The structure of `orig_addr` block is documented below.
        :param pulumi.Input[str] orig_port: Original TCP port (1 to 65535, 0 means any port).
        :param pulumi.Input[int] protocol: Integer value for the protocol type (0 - 255).
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapSrcintfArgs']]] srcintfs: Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddr6Args']]] dst_addr6s: IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        :param pulumi.Input[str] dst_port: Destination port or port range (1 to 65535, 0 means any port).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] nat46: Enable/disable NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64: Enable/disable NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppool6Args']]] nat_ippool6s: IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppoolArgs']]] nat_ippools: Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        :param pulumi.Input[str] nat_port: Translated port or port range (0 to 65535, 0 means any port).
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddr6Args']]] orig_addr6s: IPv6 Original address. The structure of `orig_addr6` block is documented below.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[str] status: Enable/disable the active status of this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: IPv4/IPv6 source NAT. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "dst_addrs", dst_addrs)
        pulumi.set(__self__, "dstintfs", dstintfs)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "orig_addrs", orig_addrs)
        pulumi.set(__self__, "orig_port", orig_port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "srcintfs", srcintfs)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dst_addr6s is not None:
            pulumi.set(__self__, "dst_addr6s", dst_addr6s)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if nat46 is not None:
            pulumi.set(__self__, "nat46", nat46)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if nat_ippool6s is not None:
            pulumi.set(__self__, "nat_ippool6s", nat_ippool6s)
        if nat_ippools is not None:
            pulumi.set(__self__, "nat_ippools", nat_ippools)
        if nat_port is not None:
            pulumi.set(__self__, "nat_port", nat_port)
        if orig_addr6s is not None:
            pulumi.set(__self__, "orig_addr6s", orig_addr6s)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dstAddrs")
    def dst_addrs(self) -> pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddrArgs']]]:
        """
        Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        """
        return pulumi.get(self, "dst_addrs")

    @dst_addrs.setter
    def dst_addrs(self, value: pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddrArgs']]]):
        pulumi.set(self, "dst_addrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstintfArgs']]]:
        """
        Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstintfArgs']]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def nat(self) -> pulumi.Input[str]:
        """
        Enable/disable source NAT. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: pulumi.Input[str]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter(name="origAddrs")
    def orig_addrs(self) -> pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddrArgs']]]:
        """
        Original address. The structure of `orig_addr` block is documented below.
        """
        return pulumi.get(self, "orig_addrs")

    @orig_addrs.setter
    def orig_addrs(self, value: pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddrArgs']]]):
        pulumi.set(self, "orig_addrs", value)

    @property
    @pulumi.getter(name="origPort")
    def orig_port(self) -> pulumi.Input[str]:
        """
        Original TCP port (1 to 65535, 0 means any port).
        """
        return pulumi.get(self, "orig_port")

    @orig_port.setter
    def orig_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "orig_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[int]:
        """
        Integer value for the protocol type (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[int]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Input[Sequence[pulumi.Input['CentralsnatmapSrcintfArgs']]]:
        """
        Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: pulumi.Input[Sequence[pulumi.Input['CentralsnatmapSrcintfArgs']]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dstAddr6s")
    def dst_addr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddr6Args']]]]:
        """
        IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        """
        return pulumi.get(self, "dst_addr6s")

    @dst_addr6s.setter
    def dst_addr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddr6Args']]]]):
        pulumi.set(self, "dst_addr6s", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[str]]:
        """
        Destination port or port range (1 to 65535, 0 means any port).
        """
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def nat46(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT46. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46")

    @nat46.setter
    def nat46(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46", value)

    @property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT64. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64", value)

    @property
    @pulumi.getter(name="natIppool6s")
    def nat_ippool6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppool6Args']]]]:
        """
        IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        """
        return pulumi.get(self, "nat_ippool6s")

    @nat_ippool6s.setter
    def nat_ippool6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppool6Args']]]]):
        pulumi.set(self, "nat_ippool6s", value)

    @property
    @pulumi.getter(name="natIppools")
    def nat_ippools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppoolArgs']]]]:
        """
        Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        """
        return pulumi.get(self, "nat_ippools")

    @nat_ippools.setter
    def nat_ippools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppoolArgs']]]]):
        pulumi.set(self, "nat_ippools", value)

    @property
    @pulumi.getter(name="natPort")
    def nat_port(self) -> Optional[pulumi.Input[str]]:
        """
        Translated port or port range (0 to 65535, 0 means any port).
        """
        return pulumi.get(self, "nat_port")

    @nat_port.setter
    def nat_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_port", value)

    @property
    @pulumi.getter(name="origAddr6s")
    def orig_addr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddr6Args']]]]:
        """
        IPv6 Original address. The structure of `orig_addr6` block is documented below.
        """
        return pulumi.get(self, "orig_addr6s")

    @orig_addr6s.setter
    def orig_addr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddr6Args']]]]):
        pulumi.set(self, "orig_addr6s", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4/IPv6 source NAT. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _CentralsnatmapState:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddr6Args']]]] = None,
                 dst_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddrArgs']]]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstintfArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat_ippool6s: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppool6Args']]]] = None,
                 nat_ippools: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppoolArgs']]]] = None,
                 nat_port: Optional[pulumi.Input[str]] = None,
                 orig_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddr6Args']]]] = None,
                 orig_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddrArgs']]]] = None,
                 orig_port: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapSrcintfArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Centralsnatmap resources.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddr6Args']]] dst_addr6s: IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddrArgs']]] dst_addrs: Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        :param pulumi.Input[str] dst_port: Destination port or port range (1 to 65535, 0 means any port).
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstintfArgs']]] dstintfs: Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nat46: Enable/disable NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64: Enable/disable NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppool6Args']]] nat_ippool6s: IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppoolArgs']]] nat_ippools: Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        :param pulumi.Input[str] nat_port: Translated port or port range (0 to 65535, 0 means any port).
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddr6Args']]] orig_addr6s: IPv6 Original address. The structure of `orig_addr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddrArgs']]] orig_addrs: Original address. The structure of `orig_addr` block is documented below.
        :param pulumi.Input[str] orig_port: Original TCP port (1 to 65535, 0 means any port).
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[int] protocol: Integer value for the protocol type (0 - 255).
        :param pulumi.Input[Sequence[pulumi.Input['CentralsnatmapSrcintfArgs']]] srcintfs: Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] status: Enable/disable the active status of this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: IPv4/IPv6 source NAT. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dst_addr6s is not None:
            pulumi.set(__self__, "dst_addr6s", dst_addr6s)
        if dst_addrs is not None:
            pulumi.set(__self__, "dst_addrs", dst_addrs)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat46 is not None:
            pulumi.set(__self__, "nat46", nat46)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if nat_ippool6s is not None:
            pulumi.set(__self__, "nat_ippool6s", nat_ippool6s)
        if nat_ippools is not None:
            pulumi.set(__self__, "nat_ippools", nat_ippools)
        if nat_port is not None:
            pulumi.set(__self__, "nat_port", nat_port)
        if orig_addr6s is not None:
            pulumi.set(__self__, "orig_addr6s", orig_addr6s)
        if orig_addrs is not None:
            pulumi.set(__self__, "orig_addrs", orig_addrs)
        if orig_port is not None:
            pulumi.set(__self__, "orig_port", orig_port)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dstAddr6s")
    def dst_addr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddr6Args']]]]:
        """
        IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        """
        return pulumi.get(self, "dst_addr6s")

    @dst_addr6s.setter
    def dst_addr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddr6Args']]]]):
        pulumi.set(self, "dst_addr6s", value)

    @property
    @pulumi.getter(name="dstAddrs")
    def dst_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddrArgs']]]]:
        """
        Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        """
        return pulumi.get(self, "dst_addrs")

    @dst_addrs.setter
    def dst_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstAddrArgs']]]]):
        pulumi.set(self, "dst_addrs", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[str]]:
        """
        Destination port or port range (1 to 65535, 0 means any port).
        """
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstintfArgs']]]]:
        """
        Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapDstintfArgs']]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source NAT. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter
    def nat46(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT46. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46")

    @nat46.setter
    def nat46(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46", value)

    @property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT64. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64", value)

    @property
    @pulumi.getter(name="natIppool6s")
    def nat_ippool6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppool6Args']]]]:
        """
        IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        """
        return pulumi.get(self, "nat_ippool6s")

    @nat_ippool6s.setter
    def nat_ippool6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppool6Args']]]]):
        pulumi.set(self, "nat_ippool6s", value)

    @property
    @pulumi.getter(name="natIppools")
    def nat_ippools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppoolArgs']]]]:
        """
        Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        """
        return pulumi.get(self, "nat_ippools")

    @nat_ippools.setter
    def nat_ippools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapNatIppoolArgs']]]]):
        pulumi.set(self, "nat_ippools", value)

    @property
    @pulumi.getter(name="natPort")
    def nat_port(self) -> Optional[pulumi.Input[str]]:
        """
        Translated port or port range (0 to 65535, 0 means any port).
        """
        return pulumi.get(self, "nat_port")

    @nat_port.setter
    def nat_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_port", value)

    @property
    @pulumi.getter(name="origAddr6s")
    def orig_addr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddr6Args']]]]:
        """
        IPv6 Original address. The structure of `orig_addr6` block is documented below.
        """
        return pulumi.get(self, "orig_addr6s")

    @orig_addr6s.setter
    def orig_addr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddr6Args']]]]):
        pulumi.set(self, "orig_addr6s", value)

    @property
    @pulumi.getter(name="origAddrs")
    def orig_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddrArgs']]]]:
        """
        Original address. The structure of `orig_addr` block is documented below.
        """
        return pulumi.get(self, "orig_addrs")

    @orig_addrs.setter
    def orig_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapOrigAddrArgs']]]]):
        pulumi.set(self, "orig_addrs", value)

    @property
    @pulumi.getter(name="origPort")
    def orig_port(self) -> Optional[pulumi.Input[str]]:
        """
        Original TCP port (1 to 65535, 0 means any port).
        """
        return pulumi.get(self, "orig_port")

    @orig_port.setter
    def orig_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "orig_port", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the protocol type (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapSrcintfArgs']]]]:
        """
        Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralsnatmapSrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the active status of this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4/IPv6 source NAT. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Centralsnatmap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstAddr6Args']]]]] = None,
                 dst_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstAddrArgs']]]]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstintfArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat_ippool6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapNatIppool6Args']]]]] = None,
                 nat_ippools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapNatIppoolArgs']]]]] = None,
                 nat_port: Optional[pulumi.Input[str]] = None,
                 orig_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapOrigAddr6Args']]]]] = None,
                 orig_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapOrigAddrArgs']]]]] = None,
                 orig_port: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapSrcintfArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure central SNAT policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Centralsnatmap("trname",
            dst_addrs=[fortios.firewall.CentralsnatmapDstAddrArgs(
                name="all",
            )],
            dstintfs=[fortios.firewall.CentralsnatmapDstintfArgs(
                name="port3",
            )],
            nat="enable",
            nat_port="0",
            orig_addrs=[fortios.firewall.CentralsnatmapOrigAddrArgs(
                name="all",
            )],
            orig_port="0",
            policyid=1,
            protocol=33,
            srcintfs=[fortios.firewall.CentralsnatmapSrcintfArgs(
                name="port1",
            )],
            status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall CentralSnatMap can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/centralsnatmap:Centralsnatmap labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/centralsnatmap:Centralsnatmap labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstAddr6Args']]]] dst_addr6s: IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstAddrArgs']]]] dst_addrs: Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        :param pulumi.Input[str] dst_port: Destination port or port range (1 to 65535, 0 means any port).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstintfArgs']]]] dstintfs: Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nat46: Enable/disable NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64: Enable/disable NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapNatIppool6Args']]]] nat_ippool6s: IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapNatIppoolArgs']]]] nat_ippools: Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        :param pulumi.Input[str] nat_port: Translated port or port range (0 to 65535, 0 means any port).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapOrigAddr6Args']]]] orig_addr6s: IPv6 Original address. The structure of `orig_addr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapOrigAddrArgs']]]] orig_addrs: Original address. The structure of `orig_addr` block is documented below.
        :param pulumi.Input[str] orig_port: Original TCP port (1 to 65535, 0 means any port).
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[int] protocol: Integer value for the protocol type (0 - 255).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapSrcintfArgs']]]] srcintfs: Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] status: Enable/disable the active status of this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: IPv4/IPv6 source NAT. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CentralsnatmapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure central SNAT policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Centralsnatmap("trname",
            dst_addrs=[fortios.firewall.CentralsnatmapDstAddrArgs(
                name="all",
            )],
            dstintfs=[fortios.firewall.CentralsnatmapDstintfArgs(
                name="port3",
            )],
            nat="enable",
            nat_port="0",
            orig_addrs=[fortios.firewall.CentralsnatmapOrigAddrArgs(
                name="all",
            )],
            orig_port="0",
            policyid=1,
            protocol=33,
            srcintfs=[fortios.firewall.CentralsnatmapSrcintfArgs(
                name="port1",
            )],
            status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall CentralSnatMap can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/centralsnatmap:Centralsnatmap labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/centralsnatmap:Centralsnatmap labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param CentralsnatmapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CentralsnatmapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstAddr6Args']]]]] = None,
                 dst_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstAddrArgs']]]]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstintfArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat_ippool6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapNatIppool6Args']]]]] = None,
                 nat_ippools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapNatIppoolArgs']]]]] = None,
                 nat_port: Optional[pulumi.Input[str]] = None,
                 orig_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapOrigAddr6Args']]]]] = None,
                 orig_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapOrigAddrArgs']]]]] = None,
                 orig_port: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapSrcintfArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CentralsnatmapArgs.__new__(CentralsnatmapArgs)

            __props__.__dict__["comments"] = comments
            __props__.__dict__["dst_addr6s"] = dst_addr6s
            if dst_addrs is None and not opts.urn:
                raise TypeError("Missing required property 'dst_addrs'")
            __props__.__dict__["dst_addrs"] = dst_addrs
            __props__.__dict__["dst_port"] = dst_port
            if dstintfs is None and not opts.urn:
                raise TypeError("Missing required property 'dstintfs'")
            __props__.__dict__["dstintfs"] = dstintfs
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            if nat is None and not opts.urn:
                raise TypeError("Missing required property 'nat'")
            __props__.__dict__["nat"] = nat
            __props__.__dict__["nat46"] = nat46
            __props__.__dict__["nat64"] = nat64
            __props__.__dict__["nat_ippool6s"] = nat_ippool6s
            __props__.__dict__["nat_ippools"] = nat_ippools
            __props__.__dict__["nat_port"] = nat_port
            __props__.__dict__["orig_addr6s"] = orig_addr6s
            if orig_addrs is None and not opts.urn:
                raise TypeError("Missing required property 'orig_addrs'")
            __props__.__dict__["orig_addrs"] = orig_addrs
            if orig_port is None and not opts.urn:
                raise TypeError("Missing required property 'orig_port'")
            __props__.__dict__["orig_port"] = orig_port
            __props__.__dict__["policyid"] = policyid
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if srcintfs is None and not opts.urn:
                raise TypeError("Missing required property 'srcintfs'")
            __props__.__dict__["srcintfs"] = srcintfs
            __props__.__dict__["status"] = status
            __props__.__dict__["type"] = type
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
        super(Centralsnatmap, __self__).__init__(
            'fortios:firewall/centralsnatmap:Centralsnatmap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dst_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstAddr6Args']]]]] = None,
            dst_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstAddrArgs']]]]] = None,
            dst_port: Optional[pulumi.Input[str]] = None,
            dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstintfArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            nat: Optional[pulumi.Input[str]] = None,
            nat46: Optional[pulumi.Input[str]] = None,
            nat64: Optional[pulumi.Input[str]] = None,
            nat_ippool6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapNatIppool6Args']]]]] = None,
            nat_ippools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapNatIppoolArgs']]]]] = None,
            nat_port: Optional[pulumi.Input[str]] = None,
            orig_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapOrigAddr6Args']]]]] = None,
            orig_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapOrigAddrArgs']]]]] = None,
            orig_port: Optional[pulumi.Input[str]] = None,
            policyid: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[int]] = None,
            srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapSrcintfArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Centralsnatmap':
        """
        Get an existing Centralsnatmap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstAddr6Args']]]] dst_addr6s: IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstAddrArgs']]]] dst_addrs: Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        :param pulumi.Input[str] dst_port: Destination port or port range (1 to 65535, 0 means any port).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapDstintfArgs']]]] dstintfs: Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nat46: Enable/disable NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64: Enable/disable NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapNatIppool6Args']]]] nat_ippool6s: IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapNatIppoolArgs']]]] nat_ippools: Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        :param pulumi.Input[str] nat_port: Translated port or port range (0 to 65535, 0 means any port).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapOrigAddr6Args']]]] orig_addr6s: IPv6 Original address. The structure of `orig_addr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapOrigAddrArgs']]]] orig_addrs: Original address. The structure of `orig_addr` block is documented below.
        :param pulumi.Input[str] orig_port: Original TCP port (1 to 65535, 0 means any port).
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[int] protocol: Integer value for the protocol type (0 - 255).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralsnatmapSrcintfArgs']]]] srcintfs: Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] status: Enable/disable the active status of this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: IPv4/IPv6 source NAT. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CentralsnatmapState.__new__(_CentralsnatmapState)

        __props__.__dict__["comments"] = comments
        __props__.__dict__["dst_addr6s"] = dst_addr6s
        __props__.__dict__["dst_addrs"] = dst_addrs
        __props__.__dict__["dst_port"] = dst_port
        __props__.__dict__["dstintfs"] = dstintfs
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["nat"] = nat
        __props__.__dict__["nat46"] = nat46
        __props__.__dict__["nat64"] = nat64
        __props__.__dict__["nat_ippool6s"] = nat_ippool6s
        __props__.__dict__["nat_ippools"] = nat_ippools
        __props__.__dict__["nat_port"] = nat_port
        __props__.__dict__["orig_addr6s"] = orig_addr6s
        __props__.__dict__["orig_addrs"] = orig_addrs
        __props__.__dict__["orig_port"] = orig_port
        __props__.__dict__["policyid"] = policyid
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["srcintfs"] = srcintfs
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        return Centralsnatmap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dstAddr6s")
    def dst_addr6s(self) -> pulumi.Output[Optional[Sequence['outputs.CentralsnatmapDstAddr6']]]:
        """
        IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        """
        return pulumi.get(self, "dst_addr6s")

    @property
    @pulumi.getter(name="dstAddrs")
    def dst_addrs(self) -> pulumi.Output[Sequence['outputs.CentralsnatmapDstAddr']]:
        """
        Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        """
        return pulumi.get(self, "dst_addrs")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> pulumi.Output[str]:
        """
        Destination port or port range (1 to 65535, 0 means any port).
        """
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Output[Sequence['outputs.CentralsnatmapDstintf']]:
        """
        Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def nat(self) -> pulumi.Output[str]:
        """
        Enable/disable source NAT. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter
    def nat46(self) -> pulumi.Output[str]:
        """
        Enable/disable NAT46. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46")

    @property
    @pulumi.getter
    def nat64(self) -> pulumi.Output[str]:
        """
        Enable/disable NAT64. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat64")

    @property
    @pulumi.getter(name="natIppool6s")
    def nat_ippool6s(self) -> pulumi.Output[Optional[Sequence['outputs.CentralsnatmapNatIppool6']]]:
        """
        IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        """
        return pulumi.get(self, "nat_ippool6s")

    @property
    @pulumi.getter(name="natIppools")
    def nat_ippools(self) -> pulumi.Output[Optional[Sequence['outputs.CentralsnatmapNatIppool']]]:
        """
        Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        """
        return pulumi.get(self, "nat_ippools")

    @property
    @pulumi.getter(name="natPort")
    def nat_port(self) -> pulumi.Output[str]:
        """
        Translated port or port range (0 to 65535, 0 means any port).
        """
        return pulumi.get(self, "nat_port")

    @property
    @pulumi.getter(name="origAddr6s")
    def orig_addr6s(self) -> pulumi.Output[Optional[Sequence['outputs.CentralsnatmapOrigAddr6']]]:
        """
        IPv6 Original address. The structure of `orig_addr6` block is documented below.
        """
        return pulumi.get(self, "orig_addr6s")

    @property
    @pulumi.getter(name="origAddrs")
    def orig_addrs(self) -> pulumi.Output[Sequence['outputs.CentralsnatmapOrigAddr']]:
        """
        Original address. The structure of `orig_addr` block is documented below.
        """
        return pulumi.get(self, "orig_addrs")

    @property
    @pulumi.getter(name="origPort")
    def orig_port(self) -> pulumi.Output[str]:
        """
        Original TCP port (1 to 65535, 0 means any port).
        """
        return pulumi.get(self, "orig_port")

    @property
    @pulumi.getter
    def policyid(self) -> pulumi.Output[int]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[int]:
        """
        Integer value for the protocol type (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Output[Sequence['outputs.CentralsnatmapSrcintf']]:
        """
        Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable the active status of this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        IPv4/IPv6 source NAT. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

