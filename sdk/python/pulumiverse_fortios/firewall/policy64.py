# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Policy64Args', 'Policy64']

@pulumi.input_type
class Policy64Args:
    def __init__(__self__, *,
                 dstaddrs: pulumi.Input[Sequence[pulumi.Input['Policy64DstaddrArgs']]],
                 dstintf: pulumi.Input[str],
                 schedule: pulumi.Input[str],
                 srcaddrs: pulumi.Input[Sequence[pulumi.Input['Policy64SrcaddrArgs']]],
                 srcintf: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64PoolnameArgs']]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64ServiceArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Policy64 resource.
        :param pulumi.Input[Sequence[pulumi.Input['Policy64DstaddrArgs']]] dstaddrs: Destination address name. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dstintf: Destination interface name.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input['Policy64SrcaddrArgs']]] srcaddrs: Source address name. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] srcintf: Source interface name.
        :param pulumi.Input[str] action: Policy action. Valid values: `accept`, `deny`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fixedport: Enable/disable policy fixed port. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ippool: Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Enable/disable policy log traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts and ends. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[str] permit_any_host: Enable/disable permit any host in. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input['Policy64PoolnameArgs']]] poolnames: Policy IP pool names. The structure of `poolname` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Policy64ServiceArgs']]] services: Service name. The structure of `service` block is documented below.
        :param pulumi.Input[str] status: Enable/disable policy status. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: TCP MSS value of receiver.
        :param pulumi.Input[int] tcp_mss_sender: TCP MSS value of sender.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "dstaddrs", dstaddrs)
        pulumi.set(__self__, "dstintf", dstintf)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "srcaddrs", srcaddrs)
        pulumi.set(__self__, "srcintf", srcintf)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fixedport is not None:
            pulumi.set(__self__, "fixedport", fixedport)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if permit_any_host is not None:
            pulumi.set(__self__, "permit_any_host", permit_any_host)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_mss_receiver is not None:
            pulumi.set(__self__, "tcp_mss_receiver", tcp_mss_receiver)
        if tcp_mss_sender is not None:
            pulumi.set(__self__, "tcp_mss_sender", tcp_mss_sender)
        if traffic_shaper is not None:
            pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse is not None:
            pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Input[Sequence[pulumi.Input['Policy64DstaddrArgs']]]:
        """
        Destination address name. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: pulumi.Input[Sequence[pulumi.Input['Policy64DstaddrArgs']]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintf(self) -> pulumi.Input[str]:
        """
        Destination interface name.
        """
        return pulumi.get(self, "dstintf")

    @dstintf.setter
    def dstintf(self, value: pulumi.Input[str]):
        pulumi.set(self, "dstintf", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[str]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Input[Sequence[pulumi.Input['Policy64SrcaddrArgs']]]:
        """
        Source address name. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: pulumi.Input[Sequence[pulumi.Input['Policy64SrcaddrArgs']]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintf(self) -> pulumi.Input[str]:
        """
        Source interface name.
        """
        return pulumi.get(self, "srcintf")

    @srcintf.setter
    def srcintf(self, value: pulumi.Input[str]):
        pulumi.set(self, "srcintf", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action. Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fixedport(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy fixed port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fixedport")

    @fixedport.setter
    def fixedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixedport", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy log traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        """
        Record logs when a session starts and ends. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter(name="permitAnyHost")
    def permit_any_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permit any host in. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_any_host")

    @permit_any_host.setter
    def permit_any_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_any_host", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy64PoolnameArgs']]]]:
        """
        Policy IP pool names. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64PoolnameArgs']]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy64ServiceArgs']]]]:
        """
        Service name. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64ServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> Optional[pulumi.Input[int]]:
        """
        TCP MSS value of receiver.
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @tcp_mss_receiver.setter
    def tcp_mss_receiver(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_receiver", value)

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> Optional[pulumi.Input[int]]:
        """
        TCP MSS value of sender.
        """
        return pulumi.get(self, "tcp_mss_sender")

    @tcp_mss_sender.setter
    def tcp_mss_sender(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_sender", value)

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @traffic_shaper.setter
    def traffic_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper", value)

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @traffic_shaper_reverse.setter
    def traffic_shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper_reverse", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _Policy64State:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64DstaddrArgs']]]] = None,
                 dstintf: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64PoolnameArgs']]]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64ServiceArgs']]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64SrcaddrArgs']]]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Policy64 resources.
        :param pulumi.Input[str] action: Policy action. Valid values: `accept`, `deny`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[Sequence[pulumi.Input['Policy64DstaddrArgs']]] dstaddrs: Destination address name. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dstintf: Destination interface name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fixedport: Enable/disable policy fixed port. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ippool: Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Enable/disable policy log traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts and ends. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[str] permit_any_host: Enable/disable permit any host in. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input['Policy64PoolnameArgs']]] poolnames: Policy IP pool names. The structure of `poolname` block is documented below.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input['Policy64ServiceArgs']]] services: Service name. The structure of `service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Policy64SrcaddrArgs']]] srcaddrs: Source address name. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] srcintf: Source interface name.
        :param pulumi.Input[str] status: Enable/disable policy status. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: TCP MSS value of receiver.
        :param pulumi.Input[int] tcp_mss_sender: TCP MSS value of sender.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintf is not None:
            pulumi.set(__self__, "dstintf", dstintf)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fixedport is not None:
            pulumi.set(__self__, "fixedport", fixedport)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if permit_any_host is not None:
            pulumi.set(__self__, "permit_any_host", permit_any_host)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_mss_receiver is not None:
            pulumi.set(__self__, "tcp_mss_receiver", tcp_mss_receiver)
        if tcp_mss_sender is not None:
            pulumi.set(__self__, "tcp_mss_sender", tcp_mss_sender)
        if traffic_shaper is not None:
            pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse is not None:
            pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action. Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy64DstaddrArgs']]]]:
        """
        Destination address name. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64DstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintf(self) -> Optional[pulumi.Input[str]]:
        """
        Destination interface name.
        """
        return pulumi.get(self, "dstintf")

    @dstintf.setter
    def dstintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstintf", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fixedport(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy fixed port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fixedport")

    @fixedport.setter
    def fixedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixedport", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy log traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        """
        Record logs when a session starts and ends. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter(name="permitAnyHost")
    def permit_any_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permit any host in. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_any_host")

    @permit_any_host.setter
    def permit_any_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_any_host", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy64PoolnameArgs']]]]:
        """
        Policy IP pool names. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64PoolnameArgs']]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy64ServiceArgs']]]]:
        """
        Service name. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64ServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy64SrcaddrArgs']]]]:
        """
        Source address name. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy64SrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[pulumi.Input[str]]:
        """
        Source interface name.
        """
        return pulumi.get(self, "srcintf")

    @srcintf.setter
    def srcintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcintf", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> Optional[pulumi.Input[int]]:
        """
        TCP MSS value of receiver.
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @tcp_mss_receiver.setter
    def tcp_mss_receiver(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_receiver", value)

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> Optional[pulumi.Input[int]]:
        """
        TCP MSS value of sender.
        """
        return pulumi.get(self, "tcp_mss_sender")

    @tcp_mss_sender.setter
    def tcp_mss_sender(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_sender", value)

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @traffic_shaper.setter
    def traffic_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper", value)

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @traffic_shaper_reverse.setter
    def traffic_shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper_reverse", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Policy64(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64DstaddrArgs']]]]] = None,
                 dstintf: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64PoolnameArgs']]]]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64ServiceArgs']]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64SrcaddrArgs']]]]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IPv6 to IPv4 policies. Applies to FortiOS Version `<= 7.0.0`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Policy64("trname",
            action="accept",
            dstaddrs=[fortios.firewall.Policy64DstaddrArgs(
                name="all",
            )],
            dstintf="port4",
            fixedport="disable",
            ippool="disable",
            logtraffic="disable",
            permit_any_host="disable",
            policyid=1,
            schedule="always",
            services=[fortios.firewall.Policy64ServiceArgs(
                name="ALL",
            )],
            srcaddrs=[fortios.firewall.Policy64SrcaddrArgs(
                name="all",
            )],
            srcintf="port3",
            status="enable",
            tcp_mss_receiver=0,
            tcp_mss_sender=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Policy64 can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/policy64:Policy64 labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/policy64:Policy64 labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Policy action. Valid values: `accept`, `deny`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64DstaddrArgs']]]] dstaddrs: Destination address name. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dstintf: Destination interface name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fixedport: Enable/disable policy fixed port. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ippool: Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Enable/disable policy log traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts and ends. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[str] permit_any_host: Enable/disable permit any host in. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64PoolnameArgs']]]] poolnames: Policy IP pool names. The structure of `poolname` block is documented below.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64ServiceArgs']]]] services: Service name. The structure of `service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64SrcaddrArgs']]]] srcaddrs: Source address name. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] srcintf: Source interface name.
        :param pulumi.Input[str] status: Enable/disable policy status. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: TCP MSS value of receiver.
        :param pulumi.Input[int] tcp_mss_sender: TCP MSS value of sender.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Policy64Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IPv6 to IPv4 policies. Applies to FortiOS Version `<= 7.0.0`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Policy64("trname",
            action="accept",
            dstaddrs=[fortios.firewall.Policy64DstaddrArgs(
                name="all",
            )],
            dstintf="port4",
            fixedport="disable",
            ippool="disable",
            logtraffic="disable",
            permit_any_host="disable",
            policyid=1,
            schedule="always",
            services=[fortios.firewall.Policy64ServiceArgs(
                name="ALL",
            )],
            srcaddrs=[fortios.firewall.Policy64SrcaddrArgs(
                name="all",
            )],
            srcintf="port3",
            status="enable",
            tcp_mss_receiver=0,
            tcp_mss_sender=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Policy64 can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/policy64:Policy64 labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/policy64:Policy64 labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param Policy64Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Policy64Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64DstaddrArgs']]]]] = None,
                 dstintf: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64PoolnameArgs']]]]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64ServiceArgs']]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64SrcaddrArgs']]]]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Policy64Args.__new__(Policy64Args)

            __props__.__dict__["action"] = action
            __props__.__dict__["comments"] = comments
            if dstaddrs is None and not opts.urn:
                raise TypeError("Missing required property 'dstaddrs'")
            __props__.__dict__["dstaddrs"] = dstaddrs
            if dstintf is None and not opts.urn:
                raise TypeError("Missing required property 'dstintf'")
            __props__.__dict__["dstintf"] = dstintf
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fixedport"] = fixedport
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ippool"] = ippool
            __props__.__dict__["logtraffic"] = logtraffic
            __props__.__dict__["logtraffic_start"] = logtraffic_start
            __props__.__dict__["name"] = name
            __props__.__dict__["per_ip_shaper"] = per_ip_shaper
            __props__.__dict__["permit_any_host"] = permit_any_host
            __props__.__dict__["policyid"] = policyid
            __props__.__dict__["poolnames"] = poolnames
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["services"] = services
            if srcaddrs is None and not opts.urn:
                raise TypeError("Missing required property 'srcaddrs'")
            __props__.__dict__["srcaddrs"] = srcaddrs
            if srcintf is None and not opts.urn:
                raise TypeError("Missing required property 'srcintf'")
            __props__.__dict__["srcintf"] = srcintf
            __props__.__dict__["status"] = status
            __props__.__dict__["tcp_mss_receiver"] = tcp_mss_receiver
            __props__.__dict__["tcp_mss_sender"] = tcp_mss_sender
            __props__.__dict__["traffic_shaper"] = traffic_shaper
            __props__.__dict__["traffic_shaper_reverse"] = traffic_shaper_reverse
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
        super(Policy64, __self__).__init__(
            'fortios:firewall/policy64:Policy64',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64DstaddrArgs']]]]] = None,
            dstintf: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fixedport: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ippool: Optional[pulumi.Input[str]] = None,
            logtraffic: Optional[pulumi.Input[str]] = None,
            logtraffic_start: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            per_ip_shaper: Optional[pulumi.Input[str]] = None,
            permit_any_host: Optional[pulumi.Input[str]] = None,
            policyid: Optional[pulumi.Input[int]] = None,
            poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64PoolnameArgs']]]]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64ServiceArgs']]]]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64SrcaddrArgs']]]]] = None,
            srcintf: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
            tcp_mss_sender: Optional[pulumi.Input[int]] = None,
            traffic_shaper: Optional[pulumi.Input[str]] = None,
            traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Policy64':
        """
        Get an existing Policy64 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Policy action. Valid values: `accept`, `deny`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64DstaddrArgs']]]] dstaddrs: Destination address name. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dstintf: Destination interface name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fixedport: Enable/disable policy fixed port. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ippool: Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Enable/disable policy log traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts and ends. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[str] permit_any_host: Enable/disable permit any host in. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64PoolnameArgs']]]] poolnames: Policy IP pool names. The structure of `poolname` block is documented below.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64ServiceArgs']]]] services: Service name. The structure of `service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy64SrcaddrArgs']]]] srcaddrs: Source address name. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] srcintf: Source interface name.
        :param pulumi.Input[str] status: Enable/disable policy status. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: TCP MSS value of receiver.
        :param pulumi.Input[int] tcp_mss_sender: TCP MSS value of sender.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Policy64State.__new__(_Policy64State)

        __props__.__dict__["action"] = action
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dstintf"] = dstintf
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fixedport"] = fixedport
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ippool"] = ippool
        __props__.__dict__["logtraffic"] = logtraffic
        __props__.__dict__["logtraffic_start"] = logtraffic_start
        __props__.__dict__["name"] = name
        __props__.__dict__["per_ip_shaper"] = per_ip_shaper
        __props__.__dict__["permit_any_host"] = permit_any_host
        __props__.__dict__["policyid"] = policyid
        __props__.__dict__["poolnames"] = poolnames
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["services"] = services
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["srcintf"] = srcintf
        __props__.__dict__["status"] = status
        __props__.__dict__["tcp_mss_receiver"] = tcp_mss_receiver
        __props__.__dict__["tcp_mss_sender"] = tcp_mss_sender
        __props__.__dict__["traffic_shaper"] = traffic_shaper
        __props__.__dict__["traffic_shaper_reverse"] = traffic_shaper_reverse
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        return Policy64(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Policy action. Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Sequence['outputs.Policy64Dstaddr']]:
        """
        Destination address name. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintf(self) -> pulumi.Output[str]:
        """
        Destination interface name.
        """
        return pulumi.get(self, "dstintf")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def fixedport(self) -> pulumi.Output[str]:
        """
        Enable/disable policy fixed port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fixedport")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def ippool(self) -> pulumi.Output[str]:
        """
        Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ippool")

    @property
    @pulumi.getter
    def logtraffic(self) -> pulumi.Output[str]:
        """
        Enable/disable policy log traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> pulumi.Output[str]:
        """
        Record logs when a session starts and ends. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> pulumi.Output[str]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @property
    @pulumi.getter(name="permitAnyHost")
    def permit_any_host(self) -> pulumi.Output[str]:
        """
        Enable/disable permit any host in. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_any_host")

    @property
    @pulumi.getter
    def policyid(self) -> pulumi.Output[int]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def poolnames(self) -> pulumi.Output[Optional[Sequence['outputs.Policy64Poolname']]]:
        """
        Policy IP pool names. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[str]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Optional[Sequence['outputs.Policy64Service']]]:
        """
        Service name. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Sequence['outputs.Policy64Srcaddr']]:
        """
        Source address name. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintf(self) -> pulumi.Output[str]:
        """
        Source interface name.
        """
        return pulumi.get(self, "srcintf")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable policy status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> pulumi.Output[int]:
        """
        TCP MSS value of receiver.
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> pulumi.Output[int]:
        """
        TCP MSS value of sender.
        """
        return pulumi.get(self, "tcp_mss_sender")

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> pulumi.Output[str]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> pulumi.Output[str]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

