# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LocalinpolicyArgs', 'Localinpolicy']

@pulumi.input_type
class LocalinpolicyArgs:
    def __init__(__self__, *,
                 dstaddrs: pulumi.Input[Sequence[pulumi.Input['LocalinpolicyDstaddrArgs']]],
                 schedule: pulumi.Input[str],
                 srcaddrs: pulumi.Input[Sequence[pulumi.Input['LocalinpolicySrcaddrArgs']]],
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_mgmt_intf_only: Optional[pulumi.Input[str]] = None,
                 intf: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicyServiceArgs']]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_patch: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Localinpolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input['LocalinpolicyDstaddrArgs']]] dstaddrs: Destination address object from available options. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] schedule: Schedule object from available options.
        :param pulumi.Input[Sequence[pulumi.Input['LocalinpolicySrcaddrArgs']]] srcaddrs: Source address object from available options. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] action: Action performed on traffic matching the policy (default = deny). Valid values: `accept`, `deny`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_mgmt_intf_only: Enable/disable dedicating the HA management interface only for local-in policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] intf: Incoming interface name from available options.
        :param pulumi.Input[int] policyid: User defined local in policy ID.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['LocalinpolicyServiceArgs']]] services: Service object from available options. The structure of `service` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable this local-in policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_patch: Enable/disable virtual patching. Valid values: `enable`, `disable`.
        """
        pulumi.set(__self__, "dstaddrs", dstaddrs)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "srcaddrs", srcaddrs)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dstaddr_negate is not None:
            pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_mgmt_intf_only is not None:
            pulumi.set(__self__, "ha_mgmt_intf_only", ha_mgmt_intf_only)
        if intf is not None:
            pulumi.set(__self__, "intf", intf)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if service_negate is not None:
            pulumi.set(__self__, "service_negate", service_negate)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddr_negate is not None:
            pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if virtual_patch is not None:
            pulumi.set(__self__, "virtual_patch", virtual_patch)

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Input[Sequence[pulumi.Input['LocalinpolicyDstaddrArgs']]]:
        """
        Destination address object from available options. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: pulumi.Input[Sequence[pulumi.Input['LocalinpolicyDstaddrArgs']]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[str]:
        """
        Schedule object from available options.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Input[Sequence[pulumi.Input['LocalinpolicySrcaddrArgs']]]:
        """
        Source address object from available options. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: pulumi.Input[Sequence[pulumi.Input['LocalinpolicySrcaddrArgs']]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action performed on traffic matching the policy (default = deny). Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @dstaddr_negate.setter
    def dstaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr_negate", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haMgmtIntfOnly")
    def ha_mgmt_intf_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dedicating the HA management interface only for local-in policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_mgmt_intf_only")

    @ha_mgmt_intf_only.setter
    def ha_mgmt_intf_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_mgmt_intf_only", value)

    @property
    @pulumi.getter
    def intf(self) -> Optional[pulumi.Input[str]]:
        """
        Incoming interface name from available options.
        """
        return pulumi.get(self, "intf")

    @intf.setter
    def intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intf", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        User defined local in policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @service_negate.setter
    def service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_negate", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicyServiceArgs']]]]:
        """
        Service object from available options. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @srcaddr_negate.setter
    def srcaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr_negate", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this local-in policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="virtualPatch")
    def virtual_patch(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable virtual patching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "virtual_patch")

    @virtual_patch.setter
    def virtual_patch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_patch", value)


@pulumi.input_type
class _LocalinpolicyState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicyDstaddrArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_mgmt_intf_only: Optional[pulumi.Input[str]] = None,
                 intf: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicyServiceArgs']]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicySrcaddrArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_patch: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Localinpolicy resources.
        :param pulumi.Input[str] action: Action performed on traffic matching the policy (default = deny). Valid values: `accept`, `deny`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['LocalinpolicyDstaddrArgs']]] dstaddrs: Destination address object from available options. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_mgmt_intf_only: Enable/disable dedicating the HA management interface only for local-in policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] intf: Incoming interface name from available options.
        :param pulumi.Input[int] policyid: User defined local in policy ID.
        :param pulumi.Input[str] schedule: Schedule object from available options.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['LocalinpolicyServiceArgs']]] services: Service object from available options. The structure of `service` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['LocalinpolicySrcaddrArgs']]] srcaddrs: Source address object from available options. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] status: Enable/disable this local-in policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_patch: Enable/disable virtual patching. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dstaddr_negate is not None:
            pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_mgmt_intf_only is not None:
            pulumi.set(__self__, "ha_mgmt_intf_only", ha_mgmt_intf_only)
        if intf is not None:
            pulumi.set(__self__, "intf", intf)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if service_negate is not None:
            pulumi.set(__self__, "service_negate", service_negate)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddr_negate is not None:
            pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if virtual_patch is not None:
            pulumi.set(__self__, "virtual_patch", virtual_patch)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action performed on traffic matching the policy (default = deny). Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @dstaddr_negate.setter
    def dstaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr_negate", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicyDstaddrArgs']]]]:
        """
        Destination address object from available options. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haMgmtIntfOnly")
    def ha_mgmt_intf_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dedicating the HA management interface only for local-in policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_mgmt_intf_only")

    @ha_mgmt_intf_only.setter
    def ha_mgmt_intf_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_mgmt_intf_only", value)

    @property
    @pulumi.getter
    def intf(self) -> Optional[pulumi.Input[str]]:
        """
        Incoming interface name from available options.
        """
        return pulumi.get(self, "intf")

    @intf.setter
    def intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intf", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        User defined local in policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule object from available options.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @service_negate.setter
    def service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_negate", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicyServiceArgs']]]]:
        """
        Service object from available options. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @srcaddr_negate.setter
    def srcaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr_negate", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicySrcaddrArgs']]]]:
        """
        Source address object from available options. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LocalinpolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this local-in policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="virtualPatch")
    def virtual_patch(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable virtual patching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "virtual_patch")

    @virtual_patch.setter
    def virtual_patch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_patch", value)


class Localinpolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicyDstaddrArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_mgmt_intf_only: Optional[pulumi.Input[str]] = None,
                 intf: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicyServiceArgs']]]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicySrcaddrArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_patch: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure user defined IPv4 local-in policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Localinpolicy("trname",
            action="accept",
            dstaddrs=[fortios.firewall.LocalinpolicyDstaddrArgs(
                name="all",
            )],
            ha_mgmt_intf_only="disable",
            intf="port4",
            policyid=1,
            schedule="always",
            services=[fortios.firewall.LocalinpolicyServiceArgs(
                name="ALL",
            )],
            srcaddrs=[fortios.firewall.LocalinpolicySrcaddrArgs(
                name="all",
            )],
            status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall LocalInPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/localinpolicy:Localinpolicy labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/localinpolicy:Localinpolicy labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Action performed on traffic matching the policy (default = deny). Valid values: `accept`, `deny`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicyDstaddrArgs']]]] dstaddrs: Destination address object from available options. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_mgmt_intf_only: Enable/disable dedicating the HA management interface only for local-in policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] intf: Incoming interface name from available options.
        :param pulumi.Input[int] policyid: User defined local in policy ID.
        :param pulumi.Input[str] schedule: Schedule object from available options.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicyServiceArgs']]]] services: Service object from available options. The structure of `service` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicySrcaddrArgs']]]] srcaddrs: Source address object from available options. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] status: Enable/disable this local-in policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_patch: Enable/disable virtual patching. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LocalinpolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure user defined IPv4 local-in policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Localinpolicy("trname",
            action="accept",
            dstaddrs=[fortios.firewall.LocalinpolicyDstaddrArgs(
                name="all",
            )],
            ha_mgmt_intf_only="disable",
            intf="port4",
            policyid=1,
            schedule="always",
            services=[fortios.firewall.LocalinpolicyServiceArgs(
                name="ALL",
            )],
            srcaddrs=[fortios.firewall.LocalinpolicySrcaddrArgs(
                name="all",
            )],
            status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall LocalInPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/localinpolicy:Localinpolicy labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/localinpolicy:Localinpolicy labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param LocalinpolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LocalinpolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicyDstaddrArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_mgmt_intf_only: Optional[pulumi.Input[str]] = None,
                 intf: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicyServiceArgs']]]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicySrcaddrArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_patch: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LocalinpolicyArgs.__new__(LocalinpolicyArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["comments"] = comments
            __props__.__dict__["dstaddr_negate"] = dstaddr_negate
            if dstaddrs is None and not opts.urn:
                raise TypeError("Missing required property 'dstaddrs'")
            __props__.__dict__["dstaddrs"] = dstaddrs
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ha_mgmt_intf_only"] = ha_mgmt_intf_only
            __props__.__dict__["intf"] = intf
            __props__.__dict__["policyid"] = policyid
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["service_negate"] = service_negate
            __props__.__dict__["services"] = services
            __props__.__dict__["srcaddr_negate"] = srcaddr_negate
            if srcaddrs is None and not opts.urn:
                raise TypeError("Missing required property 'srcaddrs'")
            __props__.__dict__["srcaddrs"] = srcaddrs
            __props__.__dict__["status"] = status
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["virtual_patch"] = virtual_patch
        super(Localinpolicy, __self__).__init__(
            'fortios:firewall/localinpolicy:Localinpolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dstaddr_negate: Optional[pulumi.Input[str]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicyDstaddrArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ha_mgmt_intf_only: Optional[pulumi.Input[str]] = None,
            intf: Optional[pulumi.Input[str]] = None,
            policyid: Optional[pulumi.Input[int]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            service_negate: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicyServiceArgs']]]]] = None,
            srcaddr_negate: Optional[pulumi.Input[str]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicySrcaddrArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            virtual_patch: Optional[pulumi.Input[str]] = None) -> 'Localinpolicy':
        """
        Get an existing Localinpolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Action performed on traffic matching the policy (default = deny). Valid values: `accept`, `deny`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicyDstaddrArgs']]]] dstaddrs: Destination address object from available options. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_mgmt_intf_only: Enable/disable dedicating the HA management interface only for local-in policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] intf: Incoming interface name from available options.
        :param pulumi.Input[int] policyid: User defined local in policy ID.
        :param pulumi.Input[str] schedule: Schedule object from available options.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicyServiceArgs']]]] services: Service object from available options. The structure of `service` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocalinpolicySrcaddrArgs']]]] srcaddrs: Source address object from available options. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] status: Enable/disable this local-in policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_patch: Enable/disable virtual patching. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LocalinpolicyState.__new__(_LocalinpolicyState)

        __props__.__dict__["action"] = action
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dstaddr_negate"] = dstaddr_negate
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ha_mgmt_intf_only"] = ha_mgmt_intf_only
        __props__.__dict__["intf"] = intf
        __props__.__dict__["policyid"] = policyid
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["service_negate"] = service_negate
        __props__.__dict__["services"] = services
        __props__.__dict__["srcaddr_negate"] = srcaddr_negate
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["status"] = status
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["virtual_patch"] = virtual_patch
        return Localinpolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Action performed on traffic matching the policy (default = deny). Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> pulumi.Output[str]:
        """
        When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Sequence['outputs.LocalinpolicyDstaddr']]:
        """
        Destination address object from available options. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="haMgmtIntfOnly")
    def ha_mgmt_intf_only(self) -> pulumi.Output[str]:
        """
        Enable/disable dedicating the HA management interface only for local-in policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_mgmt_intf_only")

    @property
    @pulumi.getter
    def intf(self) -> pulumi.Output[str]:
        """
        Incoming interface name from available options.
        """
        return pulumi.get(self, "intf")

    @property
    @pulumi.getter
    def policyid(self) -> pulumi.Output[int]:
        """
        User defined local in policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[str]:
        """
        Schedule object from available options.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> pulumi.Output[str]:
        """
        When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Optional[Sequence['outputs.LocalinpolicyService']]]:
        """
        Service object from available options. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> pulumi.Output[str]:
        """
        When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Sequence['outputs.LocalinpolicySrcaddr']]:
        """
        Source address object from available options. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this local-in policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="virtualPatch")
    def virtual_patch(self) -> pulumi.Output[str]:
        """
        Enable/disable virtual patching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "virtual_patch")

