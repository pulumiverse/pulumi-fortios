# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyArgs', 'Policy']

@pulumi.input_type
class PolicyArgs:
    def __init__(__self__, *,
                 dstintfs: pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]],
                 srcintfs: pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]],
                 action: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_path: Optional[pulumi.Input[str]] = None,
                 auth_redirect_addr: Optional[pulumi.Input[str]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCustomLogFieldArgs']]]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 delay_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDeviceArgs']]]] = None,
                 diameter_filter_profile: Optional[pulumi.Input[str]] = None,
                 diffserv_copy: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddr6_negate: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddrArgs']]]] = None,
                 dynamic_shaping: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_collect: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fec: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 fsso_agent_for_ntlm: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]] = None,
                 geoip_anycast: Optional[pulumi.Input[str]] = None,
                 geoip_match: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 identity_based_route: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomGroupArgs']]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomArgs']]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6GroupArgs']]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6NameArgs']]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service6_src: Optional[pulumi.Input[str]] = None,
                 internet_service6_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomGroupArgs']]]] = None,
                 internet_service6_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomArgs']]]] = None,
                 internet_service6_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcGroupArgs']]]] = None,
                 internet_service6_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcNameArgs']]]] = None,
                 internet_service6_src_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 learning_mode: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 match_vip: Optional[pulumi.Input[str]] = None,
                 match_vip_only: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 natinbound: Optional[pulumi.Input[str]] = None,
                 natip: Optional[pulumi.Input[str]] = None,
                 natoutbound: Optional[pulumi.Input[str]] = None,
                 network_service_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceDynamicArgs']]]] = None,
                 network_service_src_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceSrcDynamicArgs']]]] = None,
                 np_acceleration: Optional[pulumi.Input[str]] = None,
                 ntlm: Optional[pulumi.Input[str]] = None,
                 ntlm_enabled_browsers: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNtlmEnabledBrowserArgs']]]] = None,
                 ntlm_guest: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 passive_wan_health_measurement: Optional[pulumi.Input[str]] = None,
                 pcp_inbound: Optional[pulumi.Input[str]] = None,
                 pcp_outbound: Optional[pulumi.Input[str]] = None,
                 pcp_poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPcpPoolnameArgs']]]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 permit_stun_host: Optional[pulumi.Input[str]] = None,
                 policy_expiry: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date_utc: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolnameArgs']]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 reputation_direction: Optional[pulumi.Input[str]] = None,
                 reputation_direction6: Optional[pulumi.Input[str]] = None,
                 reputation_minimum: Optional[pulumi.Input[int]] = None,
                 reputation_minimum6: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rtp_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyRtpAddrArgs']]]] = None,
                 rtp_nat: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 schedule_timeout: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 send_deny_packet: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 sgt_check: Optional[pulumi.Input[str]] = None,
                 sgts: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySgtArgs']]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 src_vendor_macs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcVendorMacArgs']]]] = None,
                 srcaddr6_negate: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddrArgs']]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_mirror: Optional[pulumi.Input[str]] = None,
                 ssl_mirror_intfs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySslMirrorIntfArgs']]]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 timeout_send_rst: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 vlan_cos_fwd: Optional[pulumi.Input[int]] = None,
                 vlan_cos_rev: Optional[pulumi.Input[int]] = None,
                 vlan_filter: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 wsso: Optional[pulumi.Input[str]] = None,
                 ztna_device_ownership: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tag_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagSecondaryArgs']]]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagArgs']]]] = None,
                 ztna_geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaGeoTagArgs']]]] = None,
                 ztna_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ztna_status: Optional[pulumi.Input[str]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Policy resource.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]] dstintfs: Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]] srcintfs: Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] action: Policy action. On FortiOS versions 6.2.0-6.4.0: allow/deny/ipsec. On FortiOS versions >= 6.4.1: accept/deny/ipsec. Valid values: `accept`, `deny`, `ipsec`.
        :param pulumi.Input[str] anti_replay: Enable/disable anti-replay check. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]] app_categories: Application category ID list. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]] app_groups: Application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]] applications: Application ID list. The structure of `application` block is documented below.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate for policy authentication.
        :param pulumi.Input[str] auth_path: Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_redirect_addr: HTTP-to-HTTPS redirect address for firewall authentication.
        :param pulumi.Input[str] auto_asic_offload: Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] block_notification: Enable/disable block notification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] captive_portal_exempt: Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capture_packet: Enable/disable capture packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyCustomLogFieldArgs']]] custom_log_fields: Custom fields to append to log messages for this policy. The structure of `custom_log_fields` block is documented below.
        :param pulumi.Input[str] decrypted_traffic_mirror: Decrypted traffic mirror.
        :param pulumi.Input[str] delay_tcp_npu_session: Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDeviceArgs']]] devices: Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
        :param pulumi.Input[str] diameter_filter_profile: Name of an existing Diameter filter profile.
        :param pulumi.Input[str] diffserv_copy: Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[str] disclaimer: Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dnsfilter_profile: Name of an existing DNS filter profile.
        :param pulumi.Input[str] dsri: Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dstaddr6_negate: When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]] dstaddr6s: Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstaddrArgs']]] dstaddrs: Destination address and address group names. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_shaping: Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_collect: Enable/disable email collection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] fec: Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] firewall_session_dirty: How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
        :param pulumi.Input[str] fixedport: Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso: Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso_agent_for_ntlm: FSSO agent to use for NTLM authentication.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]] fsso_groups: Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        :param pulumi.Input[str] geoip_anycast: Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] geoip_match: Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] global_label: Label for the policy that appears when the GUI is in Global View mode.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]] groups: Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_policy_redirect: Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] identity_based_route: Name of identity-based routing rule.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6: Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomGroupArgs']]] internet_service6_custom_groups: Custom Internet Service6 group name. The structure of `internet_service6_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomArgs']]] internet_service6_customs: Custom IPv6 Internet Service name. The structure of `internet_service6_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6GroupArgs']]] internet_service6_groups: Internet Service group name. The structure of `internet_service6_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6NameArgs']]] internet_service6_names: IPv6 Internet Service name. The structure of `internet_service6_name` block is documented below.
        :param pulumi.Input[str] internet_service6_negate: When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6_src: Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomGroupArgs']]] internet_service6_src_custom_groups: Custom Internet Service6 source group name. The structure of `internet_service6_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomArgs']]] internet_service6_src_customs: Custom IPv6 Internet Service source name. The structure of `internet_service6_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcGroupArgs']]] internet_service6_src_groups: Internet Service6 source group name. The structure of `internet_service6_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcNameArgs']]] internet_service6_src_names: IPv6 Internet Service source name. The structure of `internet_service6_src_name` block is documented below.
        :param pulumi.Input[str] internet_service6_src_negate: When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] internet_service_src_negate: When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ippool: Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_voip_filter: Name of an existing VoIP (ips) profile.
        :param pulumi.Input[str] label: Label for the policy that appears when the GUI is in Section View mode.
        :param pulumi.Input[str] learning_mode: Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] match_vip: Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] match_vip_only: Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46: Enable/disable NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64: Enable/disable NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] natinbound: Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] natip: Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
        :param pulumi.Input[str] natoutbound: Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceDynamicArgs']]] network_service_dynamics: Dynamic Network Service name. The structure of `network_service_dynamic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceSrcDynamicArgs']]] network_service_src_dynamics: Dynamic Network Service source name. The structure of `network_service_src_dynamic` block is documented below.
        :param pulumi.Input[str] np_acceleration: Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ntlm: Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyNtlmEnabledBrowserArgs']]] ntlm_enabled_browsers: HTTP-User-Agent value of supported browsers. The structure of `ntlm_enabled_browsers` block is documented below.
        :param pulumi.Input[str] ntlm_guest: Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outbound: Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive_wan_health_measurement: Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pcp_inbound: Enable/disable PCP inbound DNAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pcp_outbound: Enable/disable PCP outbound SNAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyPcpPoolnameArgs']]] pcp_poolnames: PCP pool names. The structure of `pcp_poolname` block is documented below.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[str] permit_any_host: Accept UDP packets from any host. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_stun_host: Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] policy_expiry: Enable/disable policy expiry. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] policy_expiry_date: Policy expiry date (YYYY-MM-DD HH:MM:SS).
        :param pulumi.Input[str] policy_expiry_date_utc: Policy expiry date and time, in epoch format.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]] poolname6s: IPv6 pool names. The structure of `poolname6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyPoolnameArgs']]] poolnames: IP Pool names. The structure of `poolname` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] radius_mac_auth_bypass: Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redirect_url: URL users are directed to after seeing and accepting the disclaimer or authenticating.
        :param pulumi.Input[str] replacemsg_override_group: Override the default replacement message group for this policy.
        :param pulumi.Input[str] reputation_direction: Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
        :param pulumi.Input[str] reputation_direction6: Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
        :param pulumi.Input[int] reputation_minimum: Minimum Reputation to take action.
        :param pulumi.Input[int] reputation_minimum6: IPv6 Minimum Reputation to take action.
        :param pulumi.Input[str] rsso: Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyRtpAddrArgs']]] rtp_addrs: Address names if this is an RTP NAT policy. The structure of `rtp_addr` block is documented below.
        :param pulumi.Input[str] rtp_nat: Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] scan_botnet_connections: Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] schedule: Schedule name.(Default is `always`)
        :param pulumi.Input[str] schedule_timeout: Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sctp_filter_profile: Name of an existing SCTP filter profile.
        :param pulumi.Input[str] send_deny_packet: Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] sgt_check: Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySgtArgs']]] sgts: Security group tags. The structure of `sgt` block is documented below.
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcVendorMacArgs']]] src_vendor_macs: Vendor MAC source ID. The structure of `src_vendor_mac` block is documented below.
        :param pulumi.Input[str] srcaddr6_negate: When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]] srcaddr6s: Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcaddrArgs']]] srcaddrs: Source address and address group names. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_mirror: Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySslMirrorIntfArgs']]] ssl_mirror_intfs: SSL mirror interface name. The structure of `ssl_mirror_intf` block is documented below.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable or disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: Receiver TCP maximum segment size (MSS).
        :param pulumi.Input[int] tcp_mss_sender: Sender TCP maximum segment size (MSS).
        :param pulumi.Input[str] tcp_session_without_syn: Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
        :param pulumi.Input[str] timeout_send_rst: Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: ToS (Type of Service) value used for comparison.
        :param pulumi.Input[str] tos_mask: Non-zero bit positions are used for comparison while zero bit positions are ignored.
        :param pulumi.Input[str] tos_negate: Enable negated TOS match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]] url_categories: URL category ID list. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]] users: Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] videofilter_profile: Name of an existing VideoFilter profile.
        :param pulumi.Input[str] virtual_patch_profile: Name of an existing virtual-patch profile.
        :param pulumi.Input[int] vlan_cos_fwd: VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
        :param pulumi.Input[int] vlan_cos_rev: VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
        :param pulumi.Input[str] vlan_filter: Set VLAN filters.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP (voipd) profile.
        :param pulumi.Input[str] vpntunnel: Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] wanopt: Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wanopt_detection: WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        :param pulumi.Input[str] wanopt_passive_opt: WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
        :param pulumi.Input[str] wanopt_peer: WAN optimization peer.
        :param pulumi.Input[str] wanopt_profile: WAN optimization profile.
        :param pulumi.Input[str] wccp: Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache: Enable/disable web cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Web proxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Webproxy profile name.
        :param pulumi.Input[str] wsso: Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_device_ownership: Enable/disable zero trust device ownership. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagSecondaryArgs']]] ztna_ems_tag_secondaries: Source ztna-ems-tag-secondary names. The structure of `ztna_ems_tag_secondary` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagArgs']]] ztna_ems_tags: Source ztna-ems-tag names. The structure of `ztna_ems_tag` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyZtnaGeoTagArgs']]] ztna_geo_tags: Source ztna-geo-tag names. The structure of `ztna_geo_tag` block is documented below.
        :param pulumi.Input[str] ztna_policy_redirect: Redirect ZTNA traffic to matching Access-Proxy proxy-policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_status: Enable/disable zero trust access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_tags_match_logic: ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        pulumi.set(__self__, "dstintfs", dstintfs)
        pulumi.set(__self__, "srcintfs", srcintfs)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if anti_replay is not None:
            pulumi.set(__self__, "anti_replay", anti_replay)
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_groups is not None:
            pulumi.set(__self__, "app_groups", app_groups)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_path is not None:
            pulumi.set(__self__, "auth_path", auth_path)
        if auth_redirect_addr is not None:
            pulumi.set(__self__, "auth_redirect_addr", auth_redirect_addr)
        if auto_asic_offload is not None:
            pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if block_notification is not None:
            pulumi.set(__self__, "block_notification", block_notification)
        if captive_portal_exempt is not None:
            pulumi.set(__self__, "captive_portal_exempt", captive_portal_exempt)
        if capture_packet is not None:
            pulumi.set(__self__, "capture_packet", capture_packet)
        if casb_profile is not None:
            pulumi.set(__self__, "casb_profile", casb_profile)
        if cifs_profile is not None:
            pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_log_fields is not None:
            pulumi.set(__self__, "custom_log_fields", custom_log_fields)
        if decrypted_traffic_mirror is not None:
            pulumi.set(__self__, "decrypted_traffic_mirror", decrypted_traffic_mirror)
        if delay_tcp_npu_session is not None:
            pulumi.set(__self__, "delay_tcp_npu_session", delay_tcp_npu_session)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if diameter_filter_profile is not None:
            pulumi.set(__self__, "diameter_filter_profile", diameter_filter_profile)
        if diffserv_copy is not None:
            pulumi.set(__self__, "diffserv_copy", diffserv_copy)
        if diffserv_forward is not None:
            pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse is not None:
            pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward is not None:
            pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev is not None:
            pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if disclaimer is not None:
            pulumi.set(__self__, "disclaimer", disclaimer)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dnsfilter_profile is not None:
            pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if dsri is not None:
            pulumi.set(__self__, "dsri", dsri)
        if dstaddr6_negate is not None:
            pulumi.set(__self__, "dstaddr6_negate", dstaddr6_negate)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddr_negate is not None:
            pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dynamic_shaping is not None:
            pulumi.set(__self__, "dynamic_shaping", dynamic_shaping)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_collect is not None:
            pulumi.set(__self__, "email_collect", email_collect)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if fec is not None:
            pulumi.set(__self__, "fec", fec)
        if file_filter_profile is not None:
            pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if firewall_session_dirty is not None:
            pulumi.set(__self__, "firewall_session_dirty", firewall_session_dirty)
        if fixedport is not None:
            pulumi.set(__self__, "fixedport", fixedport)
        if fsso is not None:
            pulumi.set(__self__, "fsso", fsso)
        if fsso_agent_for_ntlm is not None:
            pulumi.set(__self__, "fsso_agent_for_ntlm", fsso_agent_for_ntlm)
        if fsso_groups is not None:
            pulumi.set(__self__, "fsso_groups", fsso_groups)
        if geoip_anycast is not None:
            pulumi.set(__self__, "geoip_anycast", geoip_anycast)
        if geoip_match is not None:
            pulumi.set(__self__, "geoip_match", geoip_match)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if global_label is not None:
            pulumi.set(__self__, "global_label", global_label)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if http_policy_redirect is not None:
            pulumi.set(__self__, "http_policy_redirect", http_policy_redirect)
        if icap_profile is not None:
            pulumi.set(__self__, "icap_profile", icap_profile)
        if identity_based_route is not None:
            pulumi.set(__self__, "identity_based_route", identity_based_route)
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service6 is not None:
            pulumi.set(__self__, "internet_service6", internet_service6)
        if internet_service6_custom_groups is not None:
            pulumi.set(__self__, "internet_service6_custom_groups", internet_service6_custom_groups)
        if internet_service6_customs is not None:
            pulumi.set(__self__, "internet_service6_customs", internet_service6_customs)
        if internet_service6_groups is not None:
            pulumi.set(__self__, "internet_service6_groups", internet_service6_groups)
        if internet_service6_names is not None:
            pulumi.set(__self__, "internet_service6_names", internet_service6_names)
        if internet_service6_negate is not None:
            pulumi.set(__self__, "internet_service6_negate", internet_service6_negate)
        if internet_service6_src is not None:
            pulumi.set(__self__, "internet_service6_src", internet_service6_src)
        if internet_service6_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service6_src_custom_groups", internet_service6_src_custom_groups)
        if internet_service6_src_customs is not None:
            pulumi.set(__self__, "internet_service6_src_customs", internet_service6_src_customs)
        if internet_service6_src_groups is not None:
            pulumi.set(__self__, "internet_service6_src_groups", internet_service6_src_groups)
        if internet_service6_src_names is not None:
            pulumi.set(__self__, "internet_service6_src_names", internet_service6_src_names)
        if internet_service6_src_negate is not None:
            pulumi.set(__self__, "internet_service6_src_negate", internet_service6_src_negate)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_negate is not None:
            pulumi.set(__self__, "internet_service_negate", internet_service_negate)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service_src_custom_groups", internet_service_src_custom_groups)
        if internet_service_src_customs is not None:
            pulumi.set(__self__, "internet_service_src_customs", internet_service_src_customs)
        if internet_service_src_groups is not None:
            pulumi.set(__self__, "internet_service_src_groups", internet_service_src_groups)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names is not None:
            pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if internet_service_src_negate is not None:
            pulumi.set(__self__, "internet_service_src_negate", internet_service_src_negate)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_voip_filter is not None:
            pulumi.set(__self__, "ips_voip_filter", ips_voip_filter)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if learning_mode is not None:
            pulumi.set(__self__, "learning_mode", learning_mode)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if match_vip is not None:
            pulumi.set(__self__, "match_vip", match_vip)
        if match_vip_only is not None:
            pulumi.set(__self__, "match_vip_only", match_vip_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat46 is not None:
            pulumi.set(__self__, "nat46", nat46)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if natinbound is not None:
            pulumi.set(__self__, "natinbound", natinbound)
        if natip is not None:
            pulumi.set(__self__, "natip", natip)
        if natoutbound is not None:
            pulumi.set(__self__, "natoutbound", natoutbound)
        if network_service_dynamics is not None:
            pulumi.set(__self__, "network_service_dynamics", network_service_dynamics)
        if network_service_src_dynamics is not None:
            pulumi.set(__self__, "network_service_src_dynamics", network_service_src_dynamics)
        if np_acceleration is not None:
            pulumi.set(__self__, "np_acceleration", np_acceleration)
        if ntlm is not None:
            pulumi.set(__self__, "ntlm", ntlm)
        if ntlm_enabled_browsers is not None:
            pulumi.set(__self__, "ntlm_enabled_browsers", ntlm_enabled_browsers)
        if ntlm_guest is not None:
            pulumi.set(__self__, "ntlm_guest", ntlm_guest)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)
        if passive_wan_health_measurement is not None:
            pulumi.set(__self__, "passive_wan_health_measurement", passive_wan_health_measurement)
        if pcp_inbound is not None:
            pulumi.set(__self__, "pcp_inbound", pcp_inbound)
        if pcp_outbound is not None:
            pulumi.set(__self__, "pcp_outbound", pcp_outbound)
        if pcp_poolnames is not None:
            pulumi.set(__self__, "pcp_poolnames", pcp_poolnames)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if permit_any_host is not None:
            pulumi.set(__self__, "permit_any_host", permit_any_host)
        if permit_stun_host is not None:
            pulumi.set(__self__, "permit_stun_host", permit_stun_host)
        if policy_expiry is not None:
            pulumi.set(__self__, "policy_expiry", policy_expiry)
        if policy_expiry_date is not None:
            pulumi.set(__self__, "policy_expiry_date", policy_expiry_date)
        if policy_expiry_date_utc is not None:
            pulumi.set(__self__, "policy_expiry_date_utc", policy_expiry_date_utc)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if poolname6s is not None:
            pulumi.set(__self__, "poolname6s", poolname6s)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if profile_group is not None:
            pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if radius_mac_auth_bypass is not None:
            pulumi.set(__self__, "radius_mac_auth_bypass", radius_mac_auth_bypass)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if replacemsg_override_group is not None:
            pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if reputation_direction is not None:
            pulumi.set(__self__, "reputation_direction", reputation_direction)
        if reputation_direction6 is not None:
            pulumi.set(__self__, "reputation_direction6", reputation_direction6)
        if reputation_minimum is not None:
            pulumi.set(__self__, "reputation_minimum", reputation_minimum)
        if reputation_minimum6 is not None:
            pulumi.set(__self__, "reputation_minimum6", reputation_minimum6)
        if rsso is not None:
            pulumi.set(__self__, "rsso", rsso)
        if rtp_addrs is not None:
            pulumi.set(__self__, "rtp_addrs", rtp_addrs)
        if rtp_nat is not None:
            pulumi.set(__self__, "rtp_nat", rtp_nat)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if schedule_timeout is not None:
            pulumi.set(__self__, "schedule_timeout", schedule_timeout)
        if sctp_filter_profile is not None:
            pulumi.set(__self__, "sctp_filter_profile", sctp_filter_profile)
        if send_deny_packet is not None:
            pulumi.set(__self__, "send_deny_packet", send_deny_packet)
        if service_negate is not None:
            pulumi.set(__self__, "service_negate", service_negate)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if sgt_check is not None:
            pulumi.set(__self__, "sgt_check", sgt_check)
        if sgts is not None:
            pulumi.set(__self__, "sgts", sgts)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if src_vendor_macs is not None:
            pulumi.set(__self__, "src_vendor_macs", src_vendor_macs)
        if srcaddr6_negate is not None:
            pulumi.set(__self__, "srcaddr6_negate", srcaddr6_negate)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddr_negate is not None:
            pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if ssh_filter_profile is not None:
            pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect is not None:
            pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_mirror is not None:
            pulumi.set(__self__, "ssl_mirror", ssl_mirror)
        if ssl_mirror_intfs is not None:
            pulumi.set(__self__, "ssl_mirror_intfs", ssl_mirror_intfs)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_mss_receiver is not None:
            pulumi.set(__self__, "tcp_mss_receiver", tcp_mss_receiver)
        if tcp_mss_sender is not None:
            pulumi.set(__self__, "tcp_mss_sender", tcp_mss_sender)
        if tcp_session_without_syn is not None:
            pulumi.set(__self__, "tcp_session_without_syn", tcp_session_without_syn)
        if timeout_send_rst is not None:
            pulumi.set(__self__, "timeout_send_rst", timeout_send_rst)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if tos_negate is not None:
            pulumi.set(__self__, "tos_negate", tos_negate)
        if traffic_shaper is not None:
            pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse is not None:
            pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_profile is not None:
            pulumi.set(__self__, "videofilter_profile", videofilter_profile)
        if virtual_patch_profile is not None:
            pulumi.set(__self__, "virtual_patch_profile", virtual_patch_profile)
        if vlan_cos_fwd is not None:
            pulumi.set(__self__, "vlan_cos_fwd", vlan_cos_fwd)
        if vlan_cos_rev is not None:
            pulumi.set(__self__, "vlan_cos_rev", vlan_cos_rev)
        if vlan_filter is not None:
            pulumi.set(__self__, "vlan_filter", vlan_filter)
        if voip_profile is not None:
            pulumi.set(__self__, "voip_profile", voip_profile)
        if vpntunnel is not None:
            pulumi.set(__self__, "vpntunnel", vpntunnel)
        if waf_profile is not None:
            pulumi.set(__self__, "waf_profile", waf_profile)
        if wanopt is not None:
            pulumi.set(__self__, "wanopt", wanopt)
        if wanopt_detection is not None:
            pulumi.set(__self__, "wanopt_detection", wanopt_detection)
        if wanopt_passive_opt is not None:
            pulumi.set(__self__, "wanopt_passive_opt", wanopt_passive_opt)
        if wanopt_peer is not None:
            pulumi.set(__self__, "wanopt_peer", wanopt_peer)
        if wanopt_profile is not None:
            pulumi.set(__self__, "wanopt_profile", wanopt_profile)
        if wccp is not None:
            pulumi.set(__self__, "wccp", wccp)
        if webcache is not None:
            pulumi.set(__self__, "webcache", webcache)
        if webcache_https is not None:
            pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server is not None:
            pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile is not None:
            pulumi.set(__self__, "webproxy_profile", webproxy_profile)
        if wsso is not None:
            pulumi.set(__self__, "wsso", wsso)
        if ztna_device_ownership is not None:
            pulumi.set(__self__, "ztna_device_ownership", ztna_device_ownership)
        if ztna_ems_tag_secondaries is not None:
            pulumi.set(__self__, "ztna_ems_tag_secondaries", ztna_ems_tag_secondaries)
        if ztna_ems_tags is not None:
            pulumi.set(__self__, "ztna_ems_tags", ztna_ems_tags)
        if ztna_geo_tags is not None:
            pulumi.set(__self__, "ztna_geo_tags", ztna_geo_tags)
        if ztna_policy_redirect is not None:
            pulumi.set(__self__, "ztna_policy_redirect", ztna_policy_redirect)
        if ztna_status is not None:
            pulumi.set(__self__, "ztna_status", ztna_status)
        if ztna_tags_match_logic is not None:
            pulumi.set(__self__, "ztna_tags_match_logic", ztna_tags_match_logic)

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]]:
        """
        Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]]:
        """
        Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action. On FortiOS versions 6.2.0-6.4.0: allow/deny/ipsec. On FortiOS versions >= 6.4.1: accept/deny/ipsec. Valid values: `accept`, `deny`, `ipsec`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable anti-replay check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "anti_replay")

    @anti_replay.setter
    def anti_replay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anti_replay", value)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]]:
        """
        Application category ID list. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]]:
        """
        Application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @app_groups.setter
    def app_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]]):
        pulumi.set(self, "app_groups", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]]:
        """
        Application ID list. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        """
        HTTPS server certificate for policy authentication.
        """
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authPath")
    def auth_path(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_path")

    @auth_path.setter
    def auth_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_path", value)

    @property
    @pulumi.getter(name="authRedirectAddr")
    def auth_redirect_addr(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP-to-HTTPS redirect address for firewall authentication.
        """
        return pulumi.get(self, "auth_redirect_addr")

    @auth_redirect_addr.setter
    def auth_redirect_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_redirect_addr", value)

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_asic_offload")

    @auto_asic_offload.setter
    def auto_asic_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_asic_offload", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="blockNotification")
    def block_notification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block notification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "block_notification")

    @block_notification.setter
    def block_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_notification", value)

    @property
    @pulumi.getter(name="captivePortalExempt")
    def captive_portal_exempt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "captive_portal_exempt")

    @captive_portal_exempt.setter
    def captive_portal_exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_exempt", value)

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable capture packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capture_packet")

    @capture_packet.setter
    def capture_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capture_packet", value)

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @casb_profile.setter
    def casb_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile", value)

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @cifs_profile.setter
    def cifs_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cifs_profile", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCustomLogFieldArgs']]]]:
        """
        Custom fields to append to log messages for this policy. The structure of `custom_log_fields` block is documented below.
        """
        return pulumi.get(self, "custom_log_fields")

    @custom_log_fields.setter
    def custom_log_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCustomLogFieldArgs']]]]):
        pulumi.set(self, "custom_log_fields", value)

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> Optional[pulumi.Input[str]]:
        """
        Decrypted traffic mirror.
        """
        return pulumi.get(self, "decrypted_traffic_mirror")

    @decrypted_traffic_mirror.setter
    def decrypted_traffic_mirror(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decrypted_traffic_mirror", value)

    @property
    @pulumi.getter(name="delayTcpNpuSession")
    def delay_tcp_npu_session(self) -> Optional[pulumi.Input[str]]:
        """
        Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "delay_tcp_npu_session")

    @delay_tcp_npu_session.setter
    def delay_tcp_npu_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delay_tcp_npu_session", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDeviceArgs']]]]:
        """
        Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="diameterFilterProfile")
    def diameter_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Diameter filter profile.
        """
        return pulumi.get(self, "diameter_filter_profile")

    @diameter_filter_profile.setter
    def diameter_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diameter_filter_profile", value)

    @property
    @pulumi.getter(name="diffservCopy")
    def diffserv_copy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_copy")

    @diffserv_copy.setter
    def diffserv_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_copy", value)

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_forward")

    @diffserv_forward.setter
    def diffserv_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_forward", value)

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_reverse")

    @diffserv_reverse.setter
    def diffserv_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_reverse", value)

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @diffservcode_forward.setter
    def diffservcode_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_forward", value)

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @diffservcode_rev.setter
    def diffservcode_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_rev", value)

    @property
    @pulumi.getter
    def disclaimer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "disclaimer")

    @disclaimer.setter
    def disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disclaimer", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP profile.
        """
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profile")

    @dnsfilter_profile.setter
    def dnsfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter_profile", value)

    @property
    @pulumi.getter
    def dsri(self) -> Optional[pulumi.Input[str]]:
        """
        Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dsri")

    @dsri.setter
    def dsri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsri", value)

    @property
    @pulumi.getter(name="dstaddr6Negate")
    def dstaddr6_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr6_negate")

    @dstaddr6_negate.setter
    def dstaddr6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr6_negate", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]]:
        """
        Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @dstaddr_negate.setter
    def dstaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr_negate", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddrArgs']]]]:
        """
        Destination address and address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="dynamicShaping")
    def dynamic_shaping(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dynamic_shaping")

    @dynamic_shaping.setter
    def dynamic_shaping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_shaping", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailCollect")
    def email_collect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable email collection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "email_collect")

    @email_collect.setter
    def email_collect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_collect", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter
    def fec(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fec")

    @fec.setter
    def fec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec", value)

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing file-filter profile.
        """
        return pulumi.get(self, "file_filter_profile")

    @file_filter_profile.setter
    def file_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile", value)

    @property
    @pulumi.getter(name="firewallSessionDirty")
    def firewall_session_dirty(self) -> Optional[pulumi.Input[str]]:
        """
        How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
        """
        return pulumi.get(self, "firewall_session_dirty")

    @firewall_session_dirty.setter
    def firewall_session_dirty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_session_dirty", value)

    @property
    @pulumi.getter
    def fixedport(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fixedport")

    @fixedport.setter
    def fixedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixedport", value)

    @property
    @pulumi.getter
    def fsso(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fsso")

    @fsso.setter
    def fsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso", value)

    @property
    @pulumi.getter(name="fssoAgentForNtlm")
    def fsso_agent_for_ntlm(self) -> Optional[pulumi.Input[str]]:
        """
        FSSO agent to use for NTLM authentication.
        """
        return pulumi.get(self, "fsso_agent_for_ntlm")

    @fsso_agent_for_ntlm.setter
    def fsso_agent_for_ntlm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso_agent_for_ntlm", value)

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]]:
        """
        Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @fsso_groups.setter
    def fsso_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]]):
        pulumi.set(self, "fsso_groups", value)

    @property
    @pulumi.getter(name="geoipAnycast")
    def geoip_anycast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "geoip_anycast")

    @geoip_anycast.setter
    def geoip_anycast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geoip_anycast", value)

    @property
    @pulumi.getter(name="geoipMatch")
    def geoip_match(self) -> Optional[pulumi.Input[str]]:
        """
        Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
        """
        return pulumi.get(self, "geoip_match")

    @geoip_match.setter
    def geoip_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geoip_match", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the policy that appears when the GUI is in Global View mode.
        """
        return pulumi.get(self, "global_label")

    @global_label.setter
    def global_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_label", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]]:
        """
        Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_policy_redirect")

    @http_policy_redirect.setter
    def http_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_policy_redirect", value)

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @icap_profile.setter
    def icap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_profile", value)

    @property
    @pulumi.getter(name="identityBasedRoute")
    def identity_based_route(self) -> Optional[pulumi.Input[str]]:
        """
        Name of identity-based routing rule.
        """
        return pulumi.get(self, "identity_based_route")

    @identity_based_route.setter
    def identity_based_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_based_route", value)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        """
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetService6")
    def internet_service6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6")

    @internet_service6.setter
    def internet_service6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6", value)

    @property
    @pulumi.getter(name="internetService6CustomGroups")
    def internet_service6_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomGroupArgs']]]]:
        """
        Custom Internet Service6 group name. The structure of `internet_service6_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_custom_groups")

    @internet_service6_custom_groups.setter
    def internet_service6_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomGroupArgs']]]]):
        pulumi.set(self, "internet_service6_custom_groups", value)

    @property
    @pulumi.getter(name="internetService6Customs")
    def internet_service6_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomArgs']]]]:
        """
        Custom IPv6 Internet Service name. The structure of `internet_service6_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_customs")

    @internet_service6_customs.setter
    def internet_service6_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomArgs']]]]):
        pulumi.set(self, "internet_service6_customs", value)

    @property
    @pulumi.getter(name="internetService6Groups")
    def internet_service6_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6GroupArgs']]]]:
        """
        Internet Service group name. The structure of `internet_service6_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_groups")

    @internet_service6_groups.setter
    def internet_service6_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6GroupArgs']]]]):
        pulumi.set(self, "internet_service6_groups", value)

    @property
    @pulumi.getter(name="internetService6Names")
    def internet_service6_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6NameArgs']]]]:
        """
        IPv6 Internet Service name. The structure of `internet_service6_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_names")

    @internet_service6_names.setter
    def internet_service6_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6NameArgs']]]]):
        pulumi.set(self, "internet_service6_names", value)

    @property
    @pulumi.getter(name="internetService6Negate")
    def internet_service6_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_negate")

    @internet_service6_negate.setter
    def internet_service6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_negate", value)

    @property
    @pulumi.getter(name="internetService6Src")
    def internet_service6_src(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_src")

    @internet_service6_src.setter
    def internet_service6_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_src", value)

    @property
    @pulumi.getter(name="internetService6SrcCustomGroups")
    def internet_service6_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomGroupArgs']]]]:
        """
        Custom Internet Service6 source group name. The structure of `internet_service6_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_custom_groups")

    @internet_service6_src_custom_groups.setter
    def internet_service6_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service6_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetService6SrcCustoms")
    def internet_service6_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomArgs']]]]:
        """
        Custom IPv6 Internet Service source name. The structure of `internet_service6_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_customs")

    @internet_service6_src_customs.setter
    def internet_service6_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomArgs']]]]):
        pulumi.set(self, "internet_service6_src_customs", value)

    @property
    @pulumi.getter(name="internetService6SrcGroups")
    def internet_service6_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcGroupArgs']]]]:
        """
        Internet Service6 source group name. The structure of `internet_service6_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_groups")

    @internet_service6_src_groups.setter
    def internet_service6_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcGroupArgs']]]]):
        pulumi.set(self, "internet_service6_src_groups", value)

    @property
    @pulumi.getter(name="internetService6SrcNames")
    def internet_service6_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcNameArgs']]]]:
        """
        IPv6 Internet Service source name. The structure of `internet_service6_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_names")

    @internet_service6_src_names.setter
    def internet_service6_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcNameArgs']]]]):
        pulumi.set(self, "internet_service6_src_names", value)

    @property
    @pulumi.getter(name="internetService6SrcNegate")
    def internet_service6_src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_src_negate")

    @internet_service6_src_negate.setter
    def internet_service6_src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_src_negate", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]]:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_negate")

    @internet_service_negate.setter
    def internet_service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_negate", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]]:
        """
        Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_custom_groups")

    @internet_service_src_custom_groups.setter
    def internet_service_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]]:
        """
        Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_customs")

    @internet_service_src_customs.setter
    def internet_service_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]]):
        pulumi.set(self, "internet_service_src_customs", value)

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]]:
        """
        Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_groups")

    @internet_service_src_groups.setter
    def internet_service_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]]:
        """
        Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]]:
        """
        Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_names")

    @internet_service_src_names.setter
    def internet_service_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]]):
        pulumi.set(self, "internet_service_src_names", value)

    @property
    @pulumi.getter(name="internetServiceSrcNegate")
    def internet_service_src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src_negate")

    @internet_service_src_negate.setter
    def internet_service_src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src_negate", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VoIP (ips) profile.
        """
        return pulumi.get(self, "ips_voip_filter")

    @ips_voip_filter.setter
    def ips_voip_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_voip_filter", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the policy that appears when the GUI is in Section View mode.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="learningMode")
    def learning_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "learning_mode")

    @learning_mode.setter
    def learning_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learning_mode", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        """
        Record logs when a session starts. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter(name="matchVip")
    def match_vip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "match_vip")

    @match_vip.setter
    def match_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_vip", value)

    @property
    @pulumi.getter(name="matchVipOnly")
    def match_vip_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "match_vip_only")

    @match_vip_only.setter
    def match_vip_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_vip_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter
    def nat46(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT46. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46")

    @nat46.setter
    def nat46(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46", value)

    @property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT64. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64", value)

    @property
    @pulumi.getter
    def natinbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "natinbound")

    @natinbound.setter
    def natinbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natinbound", value)

    @property
    @pulumi.getter
    def natip(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
        """
        return pulumi.get(self, "natip")

    @natip.setter
    def natip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natip", value)

    @property
    @pulumi.getter
    def natoutbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "natoutbound")

    @natoutbound.setter
    def natoutbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natoutbound", value)

    @property
    @pulumi.getter(name="networkServiceDynamics")
    def network_service_dynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceDynamicArgs']]]]:
        """
        Dynamic Network Service name. The structure of `network_service_dynamic` block is documented below.
        """
        return pulumi.get(self, "network_service_dynamics")

    @network_service_dynamics.setter
    def network_service_dynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceDynamicArgs']]]]):
        pulumi.set(self, "network_service_dynamics", value)

    @property
    @pulumi.getter(name="networkServiceSrcDynamics")
    def network_service_src_dynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceSrcDynamicArgs']]]]:
        """
        Dynamic Network Service source name. The structure of `network_service_src_dynamic` block is documented below.
        """
        return pulumi.get(self, "network_service_src_dynamics")

    @network_service_src_dynamics.setter
    def network_service_src_dynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceSrcDynamicArgs']]]]):
        pulumi.set(self, "network_service_src_dynamics", value)

    @property
    @pulumi.getter(name="npAcceleration")
    def np_acceleration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "np_acceleration")

    @np_acceleration.setter
    def np_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "np_acceleration", value)

    @property
    @pulumi.getter
    def ntlm(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntlm")

    @ntlm.setter
    def ntlm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm", value)

    @property
    @pulumi.getter(name="ntlmEnabledBrowsers")
    def ntlm_enabled_browsers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNtlmEnabledBrowserArgs']]]]:
        """
        HTTP-User-Agent value of supported browsers. The structure of `ntlm_enabled_browsers` block is documented below.
        """
        return pulumi.get(self, "ntlm_enabled_browsers")

    @ntlm_enabled_browsers.setter
    def ntlm_enabled_browsers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNtlmEnabledBrowserArgs']]]]):
        pulumi.set(self, "ntlm_enabled_browsers", value)

    @property
    @pulumi.getter(name="ntlmGuest")
    def ntlm_guest(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntlm_guest")

    @ntlm_guest.setter
    def ntlm_guest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_guest", value)

    @property
    @pulumi.getter
    def outbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbound")

    @outbound.setter
    def outbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound", value)

    @property
    @pulumi.getter(name="passiveWanHealthMeasurement")
    def passive_wan_health_measurement(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive_wan_health_measurement")

    @passive_wan_health_measurement.setter
    def passive_wan_health_measurement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive_wan_health_measurement", value)

    @property
    @pulumi.getter(name="pcpInbound")
    def pcp_inbound(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PCP inbound DNAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pcp_inbound")

    @pcp_inbound.setter
    def pcp_inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pcp_inbound", value)

    @property
    @pulumi.getter(name="pcpOutbound")
    def pcp_outbound(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PCP outbound SNAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pcp_outbound")

    @pcp_outbound.setter
    def pcp_outbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pcp_outbound", value)

    @property
    @pulumi.getter(name="pcpPoolnames")
    def pcp_poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPcpPoolnameArgs']]]]:
        """
        PCP pool names. The structure of `pcp_poolname` block is documented below.
        """
        return pulumi.get(self, "pcp_poolnames")

    @pcp_poolnames.setter
    def pcp_poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPcpPoolnameArgs']]]]):
        pulumi.set(self, "pcp_poolnames", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter(name="permitAnyHost")
    def permit_any_host(self) -> Optional[pulumi.Input[str]]:
        """
        Accept UDP packets from any host. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_any_host")

    @permit_any_host.setter
    def permit_any_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_any_host", value)

    @property
    @pulumi.getter(name="permitStunHost")
    def permit_stun_host(self) -> Optional[pulumi.Input[str]]:
        """
        Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_stun_host")

    @permit_stun_host.setter
    def permit_stun_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_stun_host", value)

    @property
    @pulumi.getter(name="policyExpiry")
    def policy_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy expiry. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "policy_expiry")

    @policy_expiry.setter
    def policy_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry", value)

    @property
    @pulumi.getter(name="policyExpiryDate")
    def policy_expiry_date(self) -> Optional[pulumi.Input[str]]:
        """
        Policy expiry date (YYYY-MM-DD HH:MM:SS).
        """
        return pulumi.get(self, "policy_expiry_date")

    @policy_expiry_date.setter
    def policy_expiry_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry_date", value)

    @property
    @pulumi.getter(name="policyExpiryDateUtc")
    def policy_expiry_date_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Policy expiry date and time, in epoch format.
        """
        return pulumi.get(self, "policy_expiry_date_utc")

    @policy_expiry_date_utc.setter
    def policy_expiry_date_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry_date_utc", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def poolname6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]]:
        """
        IPv6 pool names. The structure of `poolname6` block is documented below.
        """
        return pulumi.get(self, "poolname6s")

    @poolname6s.setter
    def poolname6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]]):
        pulumi.set(self, "poolname6s", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolnameArgs']]]]:
        """
        IP Pool names. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolnameArgs']]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @profile_group.setter
    def profile_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_group", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter(name="radiusMacAuthBypass")
    def radius_mac_auth_bypass(self) -> Optional[pulumi.Input[str]]:
        """
        Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "radius_mac_auth_bypass")

    @radius_mac_auth_bypass.setter
    def radius_mac_auth_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_mac_auth_bypass", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL users are directed to after seeing and accepting the disclaimer or authenticating.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> Optional[pulumi.Input[str]]:
        """
        Override the default replacement message group for this policy.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @replacemsg_override_group.setter
    def replacemsg_override_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_override_group", value)

    @property
    @pulumi.getter(name="reputationDirection")
    def reputation_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
        """
        return pulumi.get(self, "reputation_direction")

    @reputation_direction.setter
    def reputation_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reputation_direction", value)

    @property
    @pulumi.getter(name="reputationDirection6")
    def reputation_direction6(self) -> Optional[pulumi.Input[str]]:
        """
        Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
        """
        return pulumi.get(self, "reputation_direction6")

    @reputation_direction6.setter
    def reputation_direction6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reputation_direction6", value)

    @property
    @pulumi.getter(name="reputationMinimum")
    def reputation_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum Reputation to take action.
        """
        return pulumi.get(self, "reputation_minimum")

    @reputation_minimum.setter
    def reputation_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reputation_minimum", value)

    @property
    @pulumi.getter(name="reputationMinimum6")
    def reputation_minimum6(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 Minimum Reputation to take action.
        """
        return pulumi.get(self, "reputation_minimum6")

    @reputation_minimum6.setter
    def reputation_minimum6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reputation_minimum6", value)

    @property
    @pulumi.getter
    def rsso(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rsso")

    @rsso.setter
    def rsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso", value)

    @property
    @pulumi.getter(name="rtpAddrs")
    def rtp_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyRtpAddrArgs']]]]:
        """
        Address names if this is an RTP NAT policy. The structure of `rtp_addr` block is documented below.
        """
        return pulumi.get(self, "rtp_addrs")

    @rtp_addrs.setter
    def rtp_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyRtpAddrArgs']]]]):
        pulumi.set(self, "rtp_addrs", value)

    @property
    @pulumi.getter(name="rtpNat")
    def rtp_nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rtp_nat")

    @rtp_nat.setter
    def rtp_nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rtp_nat", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.(Default is `always`)
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="scheduleTimeout")
    def schedule_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "schedule_timeout")

    @schedule_timeout.setter
    def schedule_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_timeout", value)

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SCTP filter profile.
        """
        return pulumi.get(self, "sctp_filter_profile")

    @sctp_filter_profile.setter
    def sctp_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_filter_profile", value)

    @property
    @pulumi.getter(name="sendDenyPacket")
    def send_deny_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "send_deny_packet")

    @send_deny_packet.setter
    def send_deny_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_deny_packet", value)

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @service_negate.setter
    def service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_negate", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]]:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="sgtCheck")
    def sgt_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sgt_check")

    @sgt_check.setter
    def sgt_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sgt_check", value)

    @property
    @pulumi.getter
    def sgts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySgtArgs']]]]:
        """
        Security group tags. The structure of `sgt` block is documented below.
        """
        return pulumi.get(self, "sgts")

    @sgts.setter
    def sgts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySgtArgs']]]]):
        pulumi.set(self, "sgts", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="srcVendorMacs")
    def src_vendor_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcVendorMacArgs']]]]:
        """
        Vendor MAC source ID. The structure of `src_vendor_mac` block is documented below.
        """
        return pulumi.get(self, "src_vendor_macs")

    @src_vendor_macs.setter
    def src_vendor_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcVendorMacArgs']]]]):
        pulumi.set(self, "src_vendor_macs", value)

    @property
    @pulumi.getter(name="srcaddr6Negate")
    def srcaddr6_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr6_negate")

    @srcaddr6_negate.setter
    def srcaddr6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr6_negate", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]]:
        """
        Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @srcaddr_negate.setter
    def srcaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr_negate", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddrArgs']]]]:
        """
        Source address and address group names. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @ssh_filter_profile.setter
    def ssh_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_filter_profile", value)

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @ssh_policy_redirect.setter
    def ssh_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_policy_redirect", value)

    @property
    @pulumi.getter(name="sslMirror")
    def ssl_mirror(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_mirror")

    @ssl_mirror.setter
    def ssl_mirror(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mirror", value)

    @property
    @pulumi.getter(name="sslMirrorIntfs")
    def ssl_mirror_intfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySslMirrorIntfArgs']]]]:
        """
        SSL mirror interface name. The structure of `ssl_mirror_intf` block is documented below.
        """
        return pulumi.get(self, "ssl_mirror_intfs")

    @ssl_mirror_intfs.setter
    def ssl_mirror_intfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySslMirrorIntfArgs']]]]):
        pulumi.set(self, "ssl_mirror_intfs", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> Optional[pulumi.Input[int]]:
        """
        Receiver TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @tcp_mss_receiver.setter
    def tcp_mss_receiver(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_receiver", value)

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> Optional[pulumi.Input[int]]:
        """
        Sender TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_sender")

    @tcp_mss_sender.setter
    def tcp_mss_sender(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_sender", value)

    @property
    @pulumi.getter(name="tcpSessionWithoutSyn")
    def tcp_session_without_syn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
        """
        return pulumi.get(self, "tcp_session_without_syn")

    @tcp_session_without_syn.setter
    def tcp_session_without_syn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_session_without_syn", value)

    @property
    @pulumi.getter(name="timeoutSendRst")
    def timeout_send_rst(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "timeout_send_rst")

    @timeout_send_rst.setter
    def timeout_send_rst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout_send_rst", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        """
        ToS (Type of Service) value used for comparison.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Non-zero bit positions are used for comparison while zero bit positions are ignored.
        """
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter(name="tosNegate")
    def tos_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable negated TOS match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tos_negate")

    @tos_negate.setter
    def tos_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_negate", value)

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @traffic_shaper.setter
    def traffic_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper", value)

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @traffic_shaper_reverse.setter
    def traffic_shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper_reverse", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]]:
        """
        URL category ID list. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]]:
        """
        Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VideoFilter profile.
        """
        return pulumi.get(self, "videofilter_profile")

    @videofilter_profile.setter
    def videofilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "videofilter_profile", value)

    @property
    @pulumi.getter(name="virtualPatchProfile")
    def virtual_patch_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing virtual-patch profile.
        """
        return pulumi.get(self, "virtual_patch_profile")

    @virtual_patch_profile.setter
    def virtual_patch_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_patch_profile", value)

    @property
    @pulumi.getter(name="vlanCosFwd")
    def vlan_cos_fwd(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
        """
        return pulumi.get(self, "vlan_cos_fwd")

    @vlan_cos_fwd.setter
    def vlan_cos_fwd(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_cos_fwd", value)

    @property
    @pulumi.getter(name="vlanCosRev")
    def vlan_cos_rev(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
        """
        return pulumi.get(self, "vlan_cos_rev")

    @vlan_cos_rev.setter
    def vlan_cos_rev(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_cos_rev", value)

    @property
    @pulumi.getter(name="vlanFilter")
    def vlan_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Set VLAN filters.
        """
        return pulumi.get(self, "vlan_filter")

    @vlan_filter.setter
    def vlan_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_filter", value)

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VoIP (voipd) profile.
        """
        return pulumi.get(self, "voip_profile")

    @voip_profile.setter
    def voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_profile", value)

    @property
    @pulumi.getter
    def vpntunnel(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        """
        return pulumi.get(self, "vpntunnel")

    @vpntunnel.setter
    def vpntunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpntunnel", value)

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @waf_profile.setter
    def waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_profile", value)

    @property
    @pulumi.getter
    def wanopt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wanopt")

    @wanopt.setter
    def wanopt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt", value)

    @property
    @pulumi.getter(name="wanoptDetection")
    def wanopt_detection(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        """
        return pulumi.get(self, "wanopt_detection")

    @wanopt_detection.setter
    def wanopt_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_detection", value)

    @property
    @pulumi.getter(name="wanoptPassiveOpt")
    def wanopt_passive_opt(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
        """
        return pulumi.get(self, "wanopt_passive_opt")

    @wanopt_passive_opt.setter
    def wanopt_passive_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_passive_opt", value)

    @property
    @pulumi.getter(name="wanoptPeer")
    def wanopt_peer(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization peer.
        """
        return pulumi.get(self, "wanopt_peer")

    @wanopt_peer.setter
    def wanopt_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_peer", value)

    @property
    @pulumi.getter(name="wanoptProfile")
    def wanopt_profile(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization profile.
        """
        return pulumi.get(self, "wanopt_profile")

    @wanopt_profile.setter
    def wanopt_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_profile", value)

    @property
    @pulumi.getter
    def wccp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wccp")

    @wccp.setter
    def wccp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wccp", value)

    @property
    @pulumi.getter
    def webcache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webcache")

    @webcache.setter
    def webcache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache", value)

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "webcache_https")

    @webcache_https.setter
    def webcache_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache_https", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> Optional[pulumi.Input[str]]:
        """
        Web proxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @webproxy_forward_server.setter
    def webproxy_forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_forward_server", value)

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Webproxy profile name.
        """
        return pulumi.get(self, "webproxy_profile")

    @webproxy_profile.setter
    def webproxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_profile", value)

    @property
    @pulumi.getter
    def wsso(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wsso")

    @wsso.setter
    def wsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wsso", value)

    @property
    @pulumi.getter(name="ztnaDeviceOwnership")
    def ztna_device_ownership(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero trust device ownership. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_device_ownership")

    @ztna_device_ownership.setter
    def ztna_device_ownership(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_device_ownership", value)

    @property
    @pulumi.getter(name="ztnaEmsTagSecondaries")
    def ztna_ems_tag_secondaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagSecondaryArgs']]]]:
        """
        Source ztna-ems-tag-secondary names. The structure of `ztna_ems_tag_secondary` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tag_secondaries")

    @ztna_ems_tag_secondaries.setter
    def ztna_ems_tag_secondaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagSecondaryArgs']]]]):
        pulumi.set(self, "ztna_ems_tag_secondaries", value)

    @property
    @pulumi.getter(name="ztnaEmsTags")
    def ztna_ems_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagArgs']]]]:
        """
        Source ztna-ems-tag names. The structure of `ztna_ems_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tags")

    @ztna_ems_tags.setter
    def ztna_ems_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagArgs']]]]):
        pulumi.set(self, "ztna_ems_tags", value)

    @property
    @pulumi.getter(name="ztnaGeoTags")
    def ztna_geo_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaGeoTagArgs']]]]:
        """
        Source ztna-geo-tag names. The structure of `ztna_geo_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_geo_tags")

    @ztna_geo_tags.setter
    def ztna_geo_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaGeoTagArgs']]]]):
        pulumi.set(self, "ztna_geo_tags", value)

    @property
    @pulumi.getter(name="ztnaPolicyRedirect")
    def ztna_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect ZTNA traffic to matching Access-Proxy proxy-policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_policy_redirect")

    @ztna_policy_redirect.setter
    def ztna_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_policy_redirect", value)

    @property
    @pulumi.getter(name="ztnaStatus")
    def ztna_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero trust access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_status")

    @ztna_status.setter
    def ztna_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_status", value)

    @property
    @pulumi.getter(name="ztnaTagsMatchLogic")
    def ztna_tags_match_logic(self) -> Optional[pulumi.Input[str]]:
        """
        ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        return pulumi.get(self, "ztna_tags_match_logic")

    @ztna_tags_match_logic.setter
    def ztna_tags_match_logic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_tags_match_logic", value)


@pulumi.input_type
class _PolicyState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_path: Optional[pulumi.Input[str]] = None,
                 auth_redirect_addr: Optional[pulumi.Input[str]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCustomLogFieldArgs']]]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 delay_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDeviceArgs']]]] = None,
                 diameter_filter_profile: Optional[pulumi.Input[str]] = None,
                 diffserv_copy: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddr6_negate: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddrArgs']]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]]] = None,
                 dynamic_shaping: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_collect: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fec: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 fsso_agent_for_ntlm: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]] = None,
                 geoip_anycast: Optional[pulumi.Input[str]] = None,
                 geoip_match: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 identity_based_route: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomGroupArgs']]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomArgs']]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6GroupArgs']]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6NameArgs']]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service6_src: Optional[pulumi.Input[str]] = None,
                 internet_service6_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomGroupArgs']]]] = None,
                 internet_service6_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomArgs']]]] = None,
                 internet_service6_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcGroupArgs']]]] = None,
                 internet_service6_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcNameArgs']]]] = None,
                 internet_service6_src_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 learning_mode: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 match_vip: Optional[pulumi.Input[str]] = None,
                 match_vip_only: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 natinbound: Optional[pulumi.Input[str]] = None,
                 natip: Optional[pulumi.Input[str]] = None,
                 natoutbound: Optional[pulumi.Input[str]] = None,
                 network_service_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceDynamicArgs']]]] = None,
                 network_service_src_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceSrcDynamicArgs']]]] = None,
                 np_acceleration: Optional[pulumi.Input[str]] = None,
                 ntlm: Optional[pulumi.Input[str]] = None,
                 ntlm_enabled_browsers: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNtlmEnabledBrowserArgs']]]] = None,
                 ntlm_guest: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 passive_wan_health_measurement: Optional[pulumi.Input[str]] = None,
                 pcp_inbound: Optional[pulumi.Input[str]] = None,
                 pcp_outbound: Optional[pulumi.Input[str]] = None,
                 pcp_poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPcpPoolnameArgs']]]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 permit_stun_host: Optional[pulumi.Input[str]] = None,
                 policy_expiry: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date_utc: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolnameArgs']]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 reputation_direction: Optional[pulumi.Input[str]] = None,
                 reputation_direction6: Optional[pulumi.Input[str]] = None,
                 reputation_minimum: Optional[pulumi.Input[int]] = None,
                 reputation_minimum6: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rtp_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyRtpAddrArgs']]]] = None,
                 rtp_nat: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 schedule_timeout: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 send_deny_packet: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 sgt_check: Optional[pulumi.Input[str]] = None,
                 sgts: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySgtArgs']]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 src_vendor_macs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcVendorMacArgs']]]] = None,
                 srcaddr6_negate: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddrArgs']]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_mirror: Optional[pulumi.Input[str]] = None,
                 ssl_mirror_intfs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySslMirrorIntfArgs']]]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 timeout_send_rst: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 vlan_cos_fwd: Optional[pulumi.Input[int]] = None,
                 vlan_cos_rev: Optional[pulumi.Input[int]] = None,
                 vlan_filter: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 wsso: Optional[pulumi.Input[str]] = None,
                 ztna_device_ownership: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tag_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagSecondaryArgs']]]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagArgs']]]] = None,
                 ztna_geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaGeoTagArgs']]]] = None,
                 ztna_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ztna_status: Optional[pulumi.Input[str]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Policy resources.
        :param pulumi.Input[str] action: Policy action. On FortiOS versions 6.2.0-6.4.0: allow/deny/ipsec. On FortiOS versions >= 6.4.1: accept/deny/ipsec. Valid values: `accept`, `deny`, `ipsec`.
        :param pulumi.Input[str] anti_replay: Enable/disable anti-replay check. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]] app_categories: Application category ID list. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]] app_groups: Application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]] applications: Application ID list. The structure of `application` block is documented below.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate for policy authentication.
        :param pulumi.Input[str] auth_path: Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_redirect_addr: HTTP-to-HTTPS redirect address for firewall authentication.
        :param pulumi.Input[str] auto_asic_offload: Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] block_notification: Enable/disable block notification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] captive_portal_exempt: Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capture_packet: Enable/disable capture packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyCustomLogFieldArgs']]] custom_log_fields: Custom fields to append to log messages for this policy. The structure of `custom_log_fields` block is documented below.
        :param pulumi.Input[str] decrypted_traffic_mirror: Decrypted traffic mirror.
        :param pulumi.Input[str] delay_tcp_npu_session: Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDeviceArgs']]] devices: Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
        :param pulumi.Input[str] diameter_filter_profile: Name of an existing Diameter filter profile.
        :param pulumi.Input[str] diffserv_copy: Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[str] disclaimer: Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dnsfilter_profile: Name of an existing DNS filter profile.
        :param pulumi.Input[str] dsri: Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dstaddr6_negate: When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]] dstaddr6s: Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstaddrArgs']]] dstaddrs: Destination address and address group names. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]] dstintfs: Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_shaping: Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_collect: Enable/disable email collection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] fec: Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] firewall_session_dirty: How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
        :param pulumi.Input[str] fixedport: Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso: Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso_agent_for_ntlm: FSSO agent to use for NTLM authentication.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]] fsso_groups: Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        :param pulumi.Input[str] geoip_anycast: Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] geoip_match: Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] global_label: Label for the policy that appears when the GUI is in Global View mode.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]] groups: Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_policy_redirect: Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] identity_based_route: Name of identity-based routing rule.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6: Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomGroupArgs']]] internet_service6_custom_groups: Custom Internet Service6 group name. The structure of `internet_service6_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomArgs']]] internet_service6_customs: Custom IPv6 Internet Service name. The structure of `internet_service6_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6GroupArgs']]] internet_service6_groups: Internet Service group name. The structure of `internet_service6_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6NameArgs']]] internet_service6_names: IPv6 Internet Service name. The structure of `internet_service6_name` block is documented below.
        :param pulumi.Input[str] internet_service6_negate: When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6_src: Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomGroupArgs']]] internet_service6_src_custom_groups: Custom Internet Service6 source group name. The structure of `internet_service6_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomArgs']]] internet_service6_src_customs: Custom IPv6 Internet Service source name. The structure of `internet_service6_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcGroupArgs']]] internet_service6_src_groups: Internet Service6 source group name. The structure of `internet_service6_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcNameArgs']]] internet_service6_src_names: IPv6 Internet Service source name. The structure of `internet_service6_src_name` block is documented below.
        :param pulumi.Input[str] internet_service6_src_negate: When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] internet_service_src_negate: When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ippool: Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_voip_filter: Name of an existing VoIP (ips) profile.
        :param pulumi.Input[str] label: Label for the policy that appears when the GUI is in Section View mode.
        :param pulumi.Input[str] learning_mode: Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] match_vip: Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] match_vip_only: Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46: Enable/disable NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64: Enable/disable NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] natinbound: Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] natip: Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
        :param pulumi.Input[str] natoutbound: Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceDynamicArgs']]] network_service_dynamics: Dynamic Network Service name. The structure of `network_service_dynamic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceSrcDynamicArgs']]] network_service_src_dynamics: Dynamic Network Service source name. The structure of `network_service_src_dynamic` block is documented below.
        :param pulumi.Input[str] np_acceleration: Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ntlm: Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyNtlmEnabledBrowserArgs']]] ntlm_enabled_browsers: HTTP-User-Agent value of supported browsers. The structure of `ntlm_enabled_browsers` block is documented below.
        :param pulumi.Input[str] ntlm_guest: Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outbound: Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive_wan_health_measurement: Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pcp_inbound: Enable/disable PCP inbound DNAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pcp_outbound: Enable/disable PCP outbound SNAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyPcpPoolnameArgs']]] pcp_poolnames: PCP pool names. The structure of `pcp_poolname` block is documented below.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[str] permit_any_host: Accept UDP packets from any host. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_stun_host: Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] policy_expiry: Enable/disable policy expiry. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] policy_expiry_date: Policy expiry date (YYYY-MM-DD HH:MM:SS).
        :param pulumi.Input[str] policy_expiry_date_utc: Policy expiry date and time, in epoch format.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]] poolname6s: IPv6 pool names. The structure of `poolname6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyPoolnameArgs']]] poolnames: IP Pool names. The structure of `poolname` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] radius_mac_auth_bypass: Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redirect_url: URL users are directed to after seeing and accepting the disclaimer or authenticating.
        :param pulumi.Input[str] replacemsg_override_group: Override the default replacement message group for this policy.
        :param pulumi.Input[str] reputation_direction: Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
        :param pulumi.Input[str] reputation_direction6: Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
        :param pulumi.Input[int] reputation_minimum: Minimum Reputation to take action.
        :param pulumi.Input[int] reputation_minimum6: IPv6 Minimum Reputation to take action.
        :param pulumi.Input[str] rsso: Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyRtpAddrArgs']]] rtp_addrs: Address names if this is an RTP NAT policy. The structure of `rtp_addr` block is documented below.
        :param pulumi.Input[str] rtp_nat: Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] scan_botnet_connections: Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] schedule: Schedule name.(Default is `always`)
        :param pulumi.Input[str] schedule_timeout: Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sctp_filter_profile: Name of an existing SCTP filter profile.
        :param pulumi.Input[str] send_deny_packet: Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] sgt_check: Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySgtArgs']]] sgts: Security group tags. The structure of `sgt` block is documented below.
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcVendorMacArgs']]] src_vendor_macs: Vendor MAC source ID. The structure of `src_vendor_mac` block is documented below.
        :param pulumi.Input[str] srcaddr6_negate: When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]] srcaddr6s: Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcaddrArgs']]] srcaddrs: Source address and address group names. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]] srcintfs: Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_mirror: Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySslMirrorIntfArgs']]] ssl_mirror_intfs: SSL mirror interface name. The structure of `ssl_mirror_intf` block is documented below.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable or disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: Receiver TCP maximum segment size (MSS).
        :param pulumi.Input[int] tcp_mss_sender: Sender TCP maximum segment size (MSS).
        :param pulumi.Input[str] tcp_session_without_syn: Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
        :param pulumi.Input[str] timeout_send_rst: Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: ToS (Type of Service) value used for comparison.
        :param pulumi.Input[str] tos_mask: Non-zero bit positions are used for comparison while zero bit positions are ignored.
        :param pulumi.Input[str] tos_negate: Enable negated TOS match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]] url_categories: URL category ID list. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]] users: Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] videofilter_profile: Name of an existing VideoFilter profile.
        :param pulumi.Input[str] virtual_patch_profile: Name of an existing virtual-patch profile.
        :param pulumi.Input[int] vlan_cos_fwd: VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
        :param pulumi.Input[int] vlan_cos_rev: VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
        :param pulumi.Input[str] vlan_filter: Set VLAN filters.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP (voipd) profile.
        :param pulumi.Input[str] vpntunnel: Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] wanopt: Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wanopt_detection: WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        :param pulumi.Input[str] wanopt_passive_opt: WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
        :param pulumi.Input[str] wanopt_peer: WAN optimization peer.
        :param pulumi.Input[str] wanopt_profile: WAN optimization profile.
        :param pulumi.Input[str] wccp: Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache: Enable/disable web cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Web proxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Webproxy profile name.
        :param pulumi.Input[str] wsso: Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_device_ownership: Enable/disable zero trust device ownership. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagSecondaryArgs']]] ztna_ems_tag_secondaries: Source ztna-ems-tag-secondary names. The structure of `ztna_ems_tag_secondary` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagArgs']]] ztna_ems_tags: Source ztna-ems-tag names. The structure of `ztna_ems_tag` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyZtnaGeoTagArgs']]] ztna_geo_tags: Source ztna-geo-tag names. The structure of `ztna_geo_tag` block is documented below.
        :param pulumi.Input[str] ztna_policy_redirect: Redirect ZTNA traffic to matching Access-Proxy proxy-policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_status: Enable/disable zero trust access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_tags_match_logic: ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if anti_replay is not None:
            pulumi.set(__self__, "anti_replay", anti_replay)
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_groups is not None:
            pulumi.set(__self__, "app_groups", app_groups)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_path is not None:
            pulumi.set(__self__, "auth_path", auth_path)
        if auth_redirect_addr is not None:
            pulumi.set(__self__, "auth_redirect_addr", auth_redirect_addr)
        if auto_asic_offload is not None:
            pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if block_notification is not None:
            pulumi.set(__self__, "block_notification", block_notification)
        if captive_portal_exempt is not None:
            pulumi.set(__self__, "captive_portal_exempt", captive_portal_exempt)
        if capture_packet is not None:
            pulumi.set(__self__, "capture_packet", capture_packet)
        if casb_profile is not None:
            pulumi.set(__self__, "casb_profile", casb_profile)
        if cifs_profile is not None:
            pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_log_fields is not None:
            pulumi.set(__self__, "custom_log_fields", custom_log_fields)
        if decrypted_traffic_mirror is not None:
            pulumi.set(__self__, "decrypted_traffic_mirror", decrypted_traffic_mirror)
        if delay_tcp_npu_session is not None:
            pulumi.set(__self__, "delay_tcp_npu_session", delay_tcp_npu_session)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if diameter_filter_profile is not None:
            pulumi.set(__self__, "diameter_filter_profile", diameter_filter_profile)
        if diffserv_copy is not None:
            pulumi.set(__self__, "diffserv_copy", diffserv_copy)
        if diffserv_forward is not None:
            pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse is not None:
            pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward is not None:
            pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev is not None:
            pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if disclaimer is not None:
            pulumi.set(__self__, "disclaimer", disclaimer)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dnsfilter_profile is not None:
            pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if dsri is not None:
            pulumi.set(__self__, "dsri", dsri)
        if dstaddr6_negate is not None:
            pulumi.set(__self__, "dstaddr6_negate", dstaddr6_negate)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddr_negate is not None:
            pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if dynamic_shaping is not None:
            pulumi.set(__self__, "dynamic_shaping", dynamic_shaping)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_collect is not None:
            pulumi.set(__self__, "email_collect", email_collect)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if fec is not None:
            pulumi.set(__self__, "fec", fec)
        if file_filter_profile is not None:
            pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if firewall_session_dirty is not None:
            pulumi.set(__self__, "firewall_session_dirty", firewall_session_dirty)
        if fixedport is not None:
            pulumi.set(__self__, "fixedport", fixedport)
        if fsso is not None:
            pulumi.set(__self__, "fsso", fsso)
        if fsso_agent_for_ntlm is not None:
            pulumi.set(__self__, "fsso_agent_for_ntlm", fsso_agent_for_ntlm)
        if fsso_groups is not None:
            pulumi.set(__self__, "fsso_groups", fsso_groups)
        if geoip_anycast is not None:
            pulumi.set(__self__, "geoip_anycast", geoip_anycast)
        if geoip_match is not None:
            pulumi.set(__self__, "geoip_match", geoip_match)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if global_label is not None:
            pulumi.set(__self__, "global_label", global_label)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if http_policy_redirect is not None:
            pulumi.set(__self__, "http_policy_redirect", http_policy_redirect)
        if icap_profile is not None:
            pulumi.set(__self__, "icap_profile", icap_profile)
        if identity_based_route is not None:
            pulumi.set(__self__, "identity_based_route", identity_based_route)
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service6 is not None:
            pulumi.set(__self__, "internet_service6", internet_service6)
        if internet_service6_custom_groups is not None:
            pulumi.set(__self__, "internet_service6_custom_groups", internet_service6_custom_groups)
        if internet_service6_customs is not None:
            pulumi.set(__self__, "internet_service6_customs", internet_service6_customs)
        if internet_service6_groups is not None:
            pulumi.set(__self__, "internet_service6_groups", internet_service6_groups)
        if internet_service6_names is not None:
            pulumi.set(__self__, "internet_service6_names", internet_service6_names)
        if internet_service6_negate is not None:
            pulumi.set(__self__, "internet_service6_negate", internet_service6_negate)
        if internet_service6_src is not None:
            pulumi.set(__self__, "internet_service6_src", internet_service6_src)
        if internet_service6_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service6_src_custom_groups", internet_service6_src_custom_groups)
        if internet_service6_src_customs is not None:
            pulumi.set(__self__, "internet_service6_src_customs", internet_service6_src_customs)
        if internet_service6_src_groups is not None:
            pulumi.set(__self__, "internet_service6_src_groups", internet_service6_src_groups)
        if internet_service6_src_names is not None:
            pulumi.set(__self__, "internet_service6_src_names", internet_service6_src_names)
        if internet_service6_src_negate is not None:
            pulumi.set(__self__, "internet_service6_src_negate", internet_service6_src_negate)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_negate is not None:
            pulumi.set(__self__, "internet_service_negate", internet_service_negate)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service_src_custom_groups", internet_service_src_custom_groups)
        if internet_service_src_customs is not None:
            pulumi.set(__self__, "internet_service_src_customs", internet_service_src_customs)
        if internet_service_src_groups is not None:
            pulumi.set(__self__, "internet_service_src_groups", internet_service_src_groups)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names is not None:
            pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if internet_service_src_negate is not None:
            pulumi.set(__self__, "internet_service_src_negate", internet_service_src_negate)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_voip_filter is not None:
            pulumi.set(__self__, "ips_voip_filter", ips_voip_filter)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if learning_mode is not None:
            pulumi.set(__self__, "learning_mode", learning_mode)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if match_vip is not None:
            pulumi.set(__self__, "match_vip", match_vip)
        if match_vip_only is not None:
            pulumi.set(__self__, "match_vip_only", match_vip_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat46 is not None:
            pulumi.set(__self__, "nat46", nat46)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if natinbound is not None:
            pulumi.set(__self__, "natinbound", natinbound)
        if natip is not None:
            pulumi.set(__self__, "natip", natip)
        if natoutbound is not None:
            pulumi.set(__self__, "natoutbound", natoutbound)
        if network_service_dynamics is not None:
            pulumi.set(__self__, "network_service_dynamics", network_service_dynamics)
        if network_service_src_dynamics is not None:
            pulumi.set(__self__, "network_service_src_dynamics", network_service_src_dynamics)
        if np_acceleration is not None:
            pulumi.set(__self__, "np_acceleration", np_acceleration)
        if ntlm is not None:
            pulumi.set(__self__, "ntlm", ntlm)
        if ntlm_enabled_browsers is not None:
            pulumi.set(__self__, "ntlm_enabled_browsers", ntlm_enabled_browsers)
        if ntlm_guest is not None:
            pulumi.set(__self__, "ntlm_guest", ntlm_guest)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)
        if passive_wan_health_measurement is not None:
            pulumi.set(__self__, "passive_wan_health_measurement", passive_wan_health_measurement)
        if pcp_inbound is not None:
            pulumi.set(__self__, "pcp_inbound", pcp_inbound)
        if pcp_outbound is not None:
            pulumi.set(__self__, "pcp_outbound", pcp_outbound)
        if pcp_poolnames is not None:
            pulumi.set(__self__, "pcp_poolnames", pcp_poolnames)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if permit_any_host is not None:
            pulumi.set(__self__, "permit_any_host", permit_any_host)
        if permit_stun_host is not None:
            pulumi.set(__self__, "permit_stun_host", permit_stun_host)
        if policy_expiry is not None:
            pulumi.set(__self__, "policy_expiry", policy_expiry)
        if policy_expiry_date is not None:
            pulumi.set(__self__, "policy_expiry_date", policy_expiry_date)
        if policy_expiry_date_utc is not None:
            pulumi.set(__self__, "policy_expiry_date_utc", policy_expiry_date_utc)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if poolname6s is not None:
            pulumi.set(__self__, "poolname6s", poolname6s)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if profile_group is not None:
            pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if radius_mac_auth_bypass is not None:
            pulumi.set(__self__, "radius_mac_auth_bypass", radius_mac_auth_bypass)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if replacemsg_override_group is not None:
            pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if reputation_direction is not None:
            pulumi.set(__self__, "reputation_direction", reputation_direction)
        if reputation_direction6 is not None:
            pulumi.set(__self__, "reputation_direction6", reputation_direction6)
        if reputation_minimum is not None:
            pulumi.set(__self__, "reputation_minimum", reputation_minimum)
        if reputation_minimum6 is not None:
            pulumi.set(__self__, "reputation_minimum6", reputation_minimum6)
        if rsso is not None:
            pulumi.set(__self__, "rsso", rsso)
        if rtp_addrs is not None:
            pulumi.set(__self__, "rtp_addrs", rtp_addrs)
        if rtp_nat is not None:
            pulumi.set(__self__, "rtp_nat", rtp_nat)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if schedule_timeout is not None:
            pulumi.set(__self__, "schedule_timeout", schedule_timeout)
        if sctp_filter_profile is not None:
            pulumi.set(__self__, "sctp_filter_profile", sctp_filter_profile)
        if send_deny_packet is not None:
            pulumi.set(__self__, "send_deny_packet", send_deny_packet)
        if service_negate is not None:
            pulumi.set(__self__, "service_negate", service_negate)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if sgt_check is not None:
            pulumi.set(__self__, "sgt_check", sgt_check)
        if sgts is not None:
            pulumi.set(__self__, "sgts", sgts)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if src_vendor_macs is not None:
            pulumi.set(__self__, "src_vendor_macs", src_vendor_macs)
        if srcaddr6_negate is not None:
            pulumi.set(__self__, "srcaddr6_negate", srcaddr6_negate)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddr_negate is not None:
            pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if ssh_filter_profile is not None:
            pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect is not None:
            pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_mirror is not None:
            pulumi.set(__self__, "ssl_mirror", ssl_mirror)
        if ssl_mirror_intfs is not None:
            pulumi.set(__self__, "ssl_mirror_intfs", ssl_mirror_intfs)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_mss_receiver is not None:
            pulumi.set(__self__, "tcp_mss_receiver", tcp_mss_receiver)
        if tcp_mss_sender is not None:
            pulumi.set(__self__, "tcp_mss_sender", tcp_mss_sender)
        if tcp_session_without_syn is not None:
            pulumi.set(__self__, "tcp_session_without_syn", tcp_session_without_syn)
        if timeout_send_rst is not None:
            pulumi.set(__self__, "timeout_send_rst", timeout_send_rst)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if tos_negate is not None:
            pulumi.set(__self__, "tos_negate", tos_negate)
        if traffic_shaper is not None:
            pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse is not None:
            pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_profile is not None:
            pulumi.set(__self__, "videofilter_profile", videofilter_profile)
        if virtual_patch_profile is not None:
            pulumi.set(__self__, "virtual_patch_profile", virtual_patch_profile)
        if vlan_cos_fwd is not None:
            pulumi.set(__self__, "vlan_cos_fwd", vlan_cos_fwd)
        if vlan_cos_rev is not None:
            pulumi.set(__self__, "vlan_cos_rev", vlan_cos_rev)
        if vlan_filter is not None:
            pulumi.set(__self__, "vlan_filter", vlan_filter)
        if voip_profile is not None:
            pulumi.set(__self__, "voip_profile", voip_profile)
        if vpntunnel is not None:
            pulumi.set(__self__, "vpntunnel", vpntunnel)
        if waf_profile is not None:
            pulumi.set(__self__, "waf_profile", waf_profile)
        if wanopt is not None:
            pulumi.set(__self__, "wanopt", wanopt)
        if wanopt_detection is not None:
            pulumi.set(__self__, "wanopt_detection", wanopt_detection)
        if wanopt_passive_opt is not None:
            pulumi.set(__self__, "wanopt_passive_opt", wanopt_passive_opt)
        if wanopt_peer is not None:
            pulumi.set(__self__, "wanopt_peer", wanopt_peer)
        if wanopt_profile is not None:
            pulumi.set(__self__, "wanopt_profile", wanopt_profile)
        if wccp is not None:
            pulumi.set(__self__, "wccp", wccp)
        if webcache is not None:
            pulumi.set(__self__, "webcache", webcache)
        if webcache_https is not None:
            pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server is not None:
            pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile is not None:
            pulumi.set(__self__, "webproxy_profile", webproxy_profile)
        if wsso is not None:
            pulumi.set(__self__, "wsso", wsso)
        if ztna_device_ownership is not None:
            pulumi.set(__self__, "ztna_device_ownership", ztna_device_ownership)
        if ztna_ems_tag_secondaries is not None:
            pulumi.set(__self__, "ztna_ems_tag_secondaries", ztna_ems_tag_secondaries)
        if ztna_ems_tags is not None:
            pulumi.set(__self__, "ztna_ems_tags", ztna_ems_tags)
        if ztna_geo_tags is not None:
            pulumi.set(__self__, "ztna_geo_tags", ztna_geo_tags)
        if ztna_policy_redirect is not None:
            pulumi.set(__self__, "ztna_policy_redirect", ztna_policy_redirect)
        if ztna_status is not None:
            pulumi.set(__self__, "ztna_status", ztna_status)
        if ztna_tags_match_logic is not None:
            pulumi.set(__self__, "ztna_tags_match_logic", ztna_tags_match_logic)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action. On FortiOS versions 6.2.0-6.4.0: allow/deny/ipsec. On FortiOS versions >= 6.4.1: accept/deny/ipsec. Valid values: `accept`, `deny`, `ipsec`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable anti-replay check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "anti_replay")

    @anti_replay.setter
    def anti_replay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anti_replay", value)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]]:
        """
        Application category ID list. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]]:
        """
        Application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @app_groups.setter
    def app_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]]):
        pulumi.set(self, "app_groups", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]]:
        """
        Application ID list. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        """
        HTTPS server certificate for policy authentication.
        """
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authPath")
    def auth_path(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_path")

    @auth_path.setter
    def auth_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_path", value)

    @property
    @pulumi.getter(name="authRedirectAddr")
    def auth_redirect_addr(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP-to-HTTPS redirect address for firewall authentication.
        """
        return pulumi.get(self, "auth_redirect_addr")

    @auth_redirect_addr.setter
    def auth_redirect_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_redirect_addr", value)

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_asic_offload")

    @auto_asic_offload.setter
    def auto_asic_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_asic_offload", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="blockNotification")
    def block_notification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block notification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "block_notification")

    @block_notification.setter
    def block_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_notification", value)

    @property
    @pulumi.getter(name="captivePortalExempt")
    def captive_portal_exempt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "captive_portal_exempt")

    @captive_portal_exempt.setter
    def captive_portal_exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_exempt", value)

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable capture packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capture_packet")

    @capture_packet.setter
    def capture_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capture_packet", value)

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @casb_profile.setter
    def casb_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile", value)

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @cifs_profile.setter
    def cifs_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cifs_profile", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCustomLogFieldArgs']]]]:
        """
        Custom fields to append to log messages for this policy. The structure of `custom_log_fields` block is documented below.
        """
        return pulumi.get(self, "custom_log_fields")

    @custom_log_fields.setter
    def custom_log_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCustomLogFieldArgs']]]]):
        pulumi.set(self, "custom_log_fields", value)

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> Optional[pulumi.Input[str]]:
        """
        Decrypted traffic mirror.
        """
        return pulumi.get(self, "decrypted_traffic_mirror")

    @decrypted_traffic_mirror.setter
    def decrypted_traffic_mirror(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decrypted_traffic_mirror", value)

    @property
    @pulumi.getter(name="delayTcpNpuSession")
    def delay_tcp_npu_session(self) -> Optional[pulumi.Input[str]]:
        """
        Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "delay_tcp_npu_session")

    @delay_tcp_npu_session.setter
    def delay_tcp_npu_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delay_tcp_npu_session", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDeviceArgs']]]]:
        """
        Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="diameterFilterProfile")
    def diameter_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Diameter filter profile.
        """
        return pulumi.get(self, "diameter_filter_profile")

    @diameter_filter_profile.setter
    def diameter_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diameter_filter_profile", value)

    @property
    @pulumi.getter(name="diffservCopy")
    def diffserv_copy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_copy")

    @diffserv_copy.setter
    def diffserv_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_copy", value)

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_forward")

    @diffserv_forward.setter
    def diffserv_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_forward", value)

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_reverse")

    @diffserv_reverse.setter
    def diffserv_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_reverse", value)

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @diffservcode_forward.setter
    def diffservcode_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_forward", value)

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @diffservcode_rev.setter
    def diffservcode_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_rev", value)

    @property
    @pulumi.getter
    def disclaimer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "disclaimer")

    @disclaimer.setter
    def disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disclaimer", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP profile.
        """
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profile")

    @dnsfilter_profile.setter
    def dnsfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter_profile", value)

    @property
    @pulumi.getter
    def dsri(self) -> Optional[pulumi.Input[str]]:
        """
        Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dsri")

    @dsri.setter
    def dsri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsri", value)

    @property
    @pulumi.getter(name="dstaddr6Negate")
    def dstaddr6_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr6_negate")

    @dstaddr6_negate.setter
    def dstaddr6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr6_negate", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]]:
        """
        Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @dstaddr_negate.setter
    def dstaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr_negate", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddrArgs']]]]:
        """
        Destination address and address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]]]:
        """
        Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter(name="dynamicShaping")
    def dynamic_shaping(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dynamic_shaping")

    @dynamic_shaping.setter
    def dynamic_shaping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_shaping", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailCollect")
    def email_collect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable email collection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "email_collect")

    @email_collect.setter
    def email_collect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_collect", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter
    def fec(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fec")

    @fec.setter
    def fec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec", value)

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing file-filter profile.
        """
        return pulumi.get(self, "file_filter_profile")

    @file_filter_profile.setter
    def file_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile", value)

    @property
    @pulumi.getter(name="firewallSessionDirty")
    def firewall_session_dirty(self) -> Optional[pulumi.Input[str]]:
        """
        How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
        """
        return pulumi.get(self, "firewall_session_dirty")

    @firewall_session_dirty.setter
    def firewall_session_dirty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_session_dirty", value)

    @property
    @pulumi.getter
    def fixedport(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fixedport")

    @fixedport.setter
    def fixedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixedport", value)

    @property
    @pulumi.getter
    def fsso(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fsso")

    @fsso.setter
    def fsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso", value)

    @property
    @pulumi.getter(name="fssoAgentForNtlm")
    def fsso_agent_for_ntlm(self) -> Optional[pulumi.Input[str]]:
        """
        FSSO agent to use for NTLM authentication.
        """
        return pulumi.get(self, "fsso_agent_for_ntlm")

    @fsso_agent_for_ntlm.setter
    def fsso_agent_for_ntlm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso_agent_for_ntlm", value)

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]]:
        """
        Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @fsso_groups.setter
    def fsso_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]]):
        pulumi.set(self, "fsso_groups", value)

    @property
    @pulumi.getter(name="geoipAnycast")
    def geoip_anycast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "geoip_anycast")

    @geoip_anycast.setter
    def geoip_anycast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geoip_anycast", value)

    @property
    @pulumi.getter(name="geoipMatch")
    def geoip_match(self) -> Optional[pulumi.Input[str]]:
        """
        Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
        """
        return pulumi.get(self, "geoip_match")

    @geoip_match.setter
    def geoip_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geoip_match", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the policy that appears when the GUI is in Global View mode.
        """
        return pulumi.get(self, "global_label")

    @global_label.setter
    def global_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_label", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]]:
        """
        Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_policy_redirect")

    @http_policy_redirect.setter
    def http_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_policy_redirect", value)

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @icap_profile.setter
    def icap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_profile", value)

    @property
    @pulumi.getter(name="identityBasedRoute")
    def identity_based_route(self) -> Optional[pulumi.Input[str]]:
        """
        Name of identity-based routing rule.
        """
        return pulumi.get(self, "identity_based_route")

    @identity_based_route.setter
    def identity_based_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_based_route", value)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        """
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetService6")
    def internet_service6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6")

    @internet_service6.setter
    def internet_service6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6", value)

    @property
    @pulumi.getter(name="internetService6CustomGroups")
    def internet_service6_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomGroupArgs']]]]:
        """
        Custom Internet Service6 group name. The structure of `internet_service6_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_custom_groups")

    @internet_service6_custom_groups.setter
    def internet_service6_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomGroupArgs']]]]):
        pulumi.set(self, "internet_service6_custom_groups", value)

    @property
    @pulumi.getter(name="internetService6Customs")
    def internet_service6_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomArgs']]]]:
        """
        Custom IPv6 Internet Service name. The structure of `internet_service6_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_customs")

    @internet_service6_customs.setter
    def internet_service6_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6CustomArgs']]]]):
        pulumi.set(self, "internet_service6_customs", value)

    @property
    @pulumi.getter(name="internetService6Groups")
    def internet_service6_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6GroupArgs']]]]:
        """
        Internet Service group name. The structure of `internet_service6_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_groups")

    @internet_service6_groups.setter
    def internet_service6_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6GroupArgs']]]]):
        pulumi.set(self, "internet_service6_groups", value)

    @property
    @pulumi.getter(name="internetService6Names")
    def internet_service6_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6NameArgs']]]]:
        """
        IPv6 Internet Service name. The structure of `internet_service6_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_names")

    @internet_service6_names.setter
    def internet_service6_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6NameArgs']]]]):
        pulumi.set(self, "internet_service6_names", value)

    @property
    @pulumi.getter(name="internetService6Negate")
    def internet_service6_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_negate")

    @internet_service6_negate.setter
    def internet_service6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_negate", value)

    @property
    @pulumi.getter(name="internetService6Src")
    def internet_service6_src(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_src")

    @internet_service6_src.setter
    def internet_service6_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_src", value)

    @property
    @pulumi.getter(name="internetService6SrcCustomGroups")
    def internet_service6_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomGroupArgs']]]]:
        """
        Custom Internet Service6 source group name. The structure of `internet_service6_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_custom_groups")

    @internet_service6_src_custom_groups.setter
    def internet_service6_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service6_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetService6SrcCustoms")
    def internet_service6_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomArgs']]]]:
        """
        Custom IPv6 Internet Service source name. The structure of `internet_service6_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_customs")

    @internet_service6_src_customs.setter
    def internet_service6_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcCustomArgs']]]]):
        pulumi.set(self, "internet_service6_src_customs", value)

    @property
    @pulumi.getter(name="internetService6SrcGroups")
    def internet_service6_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcGroupArgs']]]]:
        """
        Internet Service6 source group name. The structure of `internet_service6_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_groups")

    @internet_service6_src_groups.setter
    def internet_service6_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcGroupArgs']]]]):
        pulumi.set(self, "internet_service6_src_groups", value)

    @property
    @pulumi.getter(name="internetService6SrcNames")
    def internet_service6_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcNameArgs']]]]:
        """
        IPv6 Internet Service source name. The structure of `internet_service6_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_names")

    @internet_service6_src_names.setter
    def internet_service6_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetService6SrcNameArgs']]]]):
        pulumi.set(self, "internet_service6_src_names", value)

    @property
    @pulumi.getter(name="internetService6SrcNegate")
    def internet_service6_src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_src_negate")

    @internet_service6_src_negate.setter
    def internet_service6_src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_src_negate", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]]:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_negate")

    @internet_service_negate.setter
    def internet_service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_negate", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]]:
        """
        Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_custom_groups")

    @internet_service_src_custom_groups.setter
    def internet_service_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]]:
        """
        Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_customs")

    @internet_service_src_customs.setter
    def internet_service_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]]):
        pulumi.set(self, "internet_service_src_customs", value)

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]]:
        """
        Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_groups")

    @internet_service_src_groups.setter
    def internet_service_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]]:
        """
        Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]]:
        """
        Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_names")

    @internet_service_src_names.setter
    def internet_service_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]]):
        pulumi.set(self, "internet_service_src_names", value)

    @property
    @pulumi.getter(name="internetServiceSrcNegate")
    def internet_service_src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src_negate")

    @internet_service_src_negate.setter
    def internet_service_src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src_negate", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VoIP (ips) profile.
        """
        return pulumi.get(self, "ips_voip_filter")

    @ips_voip_filter.setter
    def ips_voip_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_voip_filter", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the policy that appears when the GUI is in Section View mode.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="learningMode")
    def learning_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "learning_mode")

    @learning_mode.setter
    def learning_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learning_mode", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        """
        Record logs when a session starts. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter(name="matchVip")
    def match_vip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "match_vip")

    @match_vip.setter
    def match_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_vip", value)

    @property
    @pulumi.getter(name="matchVipOnly")
    def match_vip_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "match_vip_only")

    @match_vip_only.setter
    def match_vip_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_vip_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter
    def nat46(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT46. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46")

    @nat46.setter
    def nat46(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46", value)

    @property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT64. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64", value)

    @property
    @pulumi.getter
    def natinbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "natinbound")

    @natinbound.setter
    def natinbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natinbound", value)

    @property
    @pulumi.getter
    def natip(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
        """
        return pulumi.get(self, "natip")

    @natip.setter
    def natip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natip", value)

    @property
    @pulumi.getter
    def natoutbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "natoutbound")

    @natoutbound.setter
    def natoutbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natoutbound", value)

    @property
    @pulumi.getter(name="networkServiceDynamics")
    def network_service_dynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceDynamicArgs']]]]:
        """
        Dynamic Network Service name. The structure of `network_service_dynamic` block is documented below.
        """
        return pulumi.get(self, "network_service_dynamics")

    @network_service_dynamics.setter
    def network_service_dynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceDynamicArgs']]]]):
        pulumi.set(self, "network_service_dynamics", value)

    @property
    @pulumi.getter(name="networkServiceSrcDynamics")
    def network_service_src_dynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceSrcDynamicArgs']]]]:
        """
        Dynamic Network Service source name. The structure of `network_service_src_dynamic` block is documented below.
        """
        return pulumi.get(self, "network_service_src_dynamics")

    @network_service_src_dynamics.setter
    def network_service_src_dynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNetworkServiceSrcDynamicArgs']]]]):
        pulumi.set(self, "network_service_src_dynamics", value)

    @property
    @pulumi.getter(name="npAcceleration")
    def np_acceleration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "np_acceleration")

    @np_acceleration.setter
    def np_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "np_acceleration", value)

    @property
    @pulumi.getter
    def ntlm(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntlm")

    @ntlm.setter
    def ntlm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm", value)

    @property
    @pulumi.getter(name="ntlmEnabledBrowsers")
    def ntlm_enabled_browsers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNtlmEnabledBrowserArgs']]]]:
        """
        HTTP-User-Agent value of supported browsers. The structure of `ntlm_enabled_browsers` block is documented below.
        """
        return pulumi.get(self, "ntlm_enabled_browsers")

    @ntlm_enabled_browsers.setter
    def ntlm_enabled_browsers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyNtlmEnabledBrowserArgs']]]]):
        pulumi.set(self, "ntlm_enabled_browsers", value)

    @property
    @pulumi.getter(name="ntlmGuest")
    def ntlm_guest(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntlm_guest")

    @ntlm_guest.setter
    def ntlm_guest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_guest", value)

    @property
    @pulumi.getter
    def outbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbound")

    @outbound.setter
    def outbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound", value)

    @property
    @pulumi.getter(name="passiveWanHealthMeasurement")
    def passive_wan_health_measurement(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive_wan_health_measurement")

    @passive_wan_health_measurement.setter
    def passive_wan_health_measurement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive_wan_health_measurement", value)

    @property
    @pulumi.getter(name="pcpInbound")
    def pcp_inbound(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PCP inbound DNAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pcp_inbound")

    @pcp_inbound.setter
    def pcp_inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pcp_inbound", value)

    @property
    @pulumi.getter(name="pcpOutbound")
    def pcp_outbound(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PCP outbound SNAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pcp_outbound")

    @pcp_outbound.setter
    def pcp_outbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pcp_outbound", value)

    @property
    @pulumi.getter(name="pcpPoolnames")
    def pcp_poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPcpPoolnameArgs']]]]:
        """
        PCP pool names. The structure of `pcp_poolname` block is documented below.
        """
        return pulumi.get(self, "pcp_poolnames")

    @pcp_poolnames.setter
    def pcp_poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPcpPoolnameArgs']]]]):
        pulumi.set(self, "pcp_poolnames", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter(name="permitAnyHost")
    def permit_any_host(self) -> Optional[pulumi.Input[str]]:
        """
        Accept UDP packets from any host. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_any_host")

    @permit_any_host.setter
    def permit_any_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_any_host", value)

    @property
    @pulumi.getter(name="permitStunHost")
    def permit_stun_host(self) -> Optional[pulumi.Input[str]]:
        """
        Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_stun_host")

    @permit_stun_host.setter
    def permit_stun_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_stun_host", value)

    @property
    @pulumi.getter(name="policyExpiry")
    def policy_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy expiry. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "policy_expiry")

    @policy_expiry.setter
    def policy_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry", value)

    @property
    @pulumi.getter(name="policyExpiryDate")
    def policy_expiry_date(self) -> Optional[pulumi.Input[str]]:
        """
        Policy expiry date (YYYY-MM-DD HH:MM:SS).
        """
        return pulumi.get(self, "policy_expiry_date")

    @policy_expiry_date.setter
    def policy_expiry_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry_date", value)

    @property
    @pulumi.getter(name="policyExpiryDateUtc")
    def policy_expiry_date_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Policy expiry date and time, in epoch format.
        """
        return pulumi.get(self, "policy_expiry_date_utc")

    @policy_expiry_date_utc.setter
    def policy_expiry_date_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry_date_utc", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def poolname6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]]:
        """
        IPv6 pool names. The structure of `poolname6` block is documented below.
        """
        return pulumi.get(self, "poolname6s")

    @poolname6s.setter
    def poolname6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]]):
        pulumi.set(self, "poolname6s", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolnameArgs']]]]:
        """
        IP Pool names. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolnameArgs']]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @profile_group.setter
    def profile_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_group", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter(name="radiusMacAuthBypass")
    def radius_mac_auth_bypass(self) -> Optional[pulumi.Input[str]]:
        """
        Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "radius_mac_auth_bypass")

    @radius_mac_auth_bypass.setter
    def radius_mac_auth_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_mac_auth_bypass", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL users are directed to after seeing and accepting the disclaimer or authenticating.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> Optional[pulumi.Input[str]]:
        """
        Override the default replacement message group for this policy.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @replacemsg_override_group.setter
    def replacemsg_override_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_override_group", value)

    @property
    @pulumi.getter(name="reputationDirection")
    def reputation_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
        """
        return pulumi.get(self, "reputation_direction")

    @reputation_direction.setter
    def reputation_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reputation_direction", value)

    @property
    @pulumi.getter(name="reputationDirection6")
    def reputation_direction6(self) -> Optional[pulumi.Input[str]]:
        """
        Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
        """
        return pulumi.get(self, "reputation_direction6")

    @reputation_direction6.setter
    def reputation_direction6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reputation_direction6", value)

    @property
    @pulumi.getter(name="reputationMinimum")
    def reputation_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum Reputation to take action.
        """
        return pulumi.get(self, "reputation_minimum")

    @reputation_minimum.setter
    def reputation_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reputation_minimum", value)

    @property
    @pulumi.getter(name="reputationMinimum6")
    def reputation_minimum6(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 Minimum Reputation to take action.
        """
        return pulumi.get(self, "reputation_minimum6")

    @reputation_minimum6.setter
    def reputation_minimum6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reputation_minimum6", value)

    @property
    @pulumi.getter
    def rsso(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rsso")

    @rsso.setter
    def rsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso", value)

    @property
    @pulumi.getter(name="rtpAddrs")
    def rtp_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyRtpAddrArgs']]]]:
        """
        Address names if this is an RTP NAT policy. The structure of `rtp_addr` block is documented below.
        """
        return pulumi.get(self, "rtp_addrs")

    @rtp_addrs.setter
    def rtp_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyRtpAddrArgs']]]]):
        pulumi.set(self, "rtp_addrs", value)

    @property
    @pulumi.getter(name="rtpNat")
    def rtp_nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rtp_nat")

    @rtp_nat.setter
    def rtp_nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rtp_nat", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.(Default is `always`)
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="scheduleTimeout")
    def schedule_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "schedule_timeout")

    @schedule_timeout.setter
    def schedule_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_timeout", value)

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SCTP filter profile.
        """
        return pulumi.get(self, "sctp_filter_profile")

    @sctp_filter_profile.setter
    def sctp_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_filter_profile", value)

    @property
    @pulumi.getter(name="sendDenyPacket")
    def send_deny_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "send_deny_packet")

    @send_deny_packet.setter
    def send_deny_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_deny_packet", value)

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @service_negate.setter
    def service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_negate", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]]:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="sgtCheck")
    def sgt_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sgt_check")

    @sgt_check.setter
    def sgt_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sgt_check", value)

    @property
    @pulumi.getter
    def sgts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySgtArgs']]]]:
        """
        Security group tags. The structure of `sgt` block is documented below.
        """
        return pulumi.get(self, "sgts")

    @sgts.setter
    def sgts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySgtArgs']]]]):
        pulumi.set(self, "sgts", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="srcVendorMacs")
    def src_vendor_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcVendorMacArgs']]]]:
        """
        Vendor MAC source ID. The structure of `src_vendor_mac` block is documented below.
        """
        return pulumi.get(self, "src_vendor_macs")

    @src_vendor_macs.setter
    def src_vendor_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcVendorMacArgs']]]]):
        pulumi.set(self, "src_vendor_macs", value)

    @property
    @pulumi.getter(name="srcaddr6Negate")
    def srcaddr6_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr6_negate")

    @srcaddr6_negate.setter
    def srcaddr6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr6_negate", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]]:
        """
        Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @srcaddr_negate.setter
    def srcaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr_negate", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddrArgs']]]]:
        """
        Source address and address group names. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]]]:
        """
        Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @ssh_filter_profile.setter
    def ssh_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_filter_profile", value)

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @ssh_policy_redirect.setter
    def ssh_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_policy_redirect", value)

    @property
    @pulumi.getter(name="sslMirror")
    def ssl_mirror(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_mirror")

    @ssl_mirror.setter
    def ssl_mirror(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mirror", value)

    @property
    @pulumi.getter(name="sslMirrorIntfs")
    def ssl_mirror_intfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySslMirrorIntfArgs']]]]:
        """
        SSL mirror interface name. The structure of `ssl_mirror_intf` block is documented below.
        """
        return pulumi.get(self, "ssl_mirror_intfs")

    @ssl_mirror_intfs.setter
    def ssl_mirror_intfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySslMirrorIntfArgs']]]]):
        pulumi.set(self, "ssl_mirror_intfs", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> Optional[pulumi.Input[int]]:
        """
        Receiver TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @tcp_mss_receiver.setter
    def tcp_mss_receiver(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_receiver", value)

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> Optional[pulumi.Input[int]]:
        """
        Sender TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_sender")

    @tcp_mss_sender.setter
    def tcp_mss_sender(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_sender", value)

    @property
    @pulumi.getter(name="tcpSessionWithoutSyn")
    def tcp_session_without_syn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
        """
        return pulumi.get(self, "tcp_session_without_syn")

    @tcp_session_without_syn.setter
    def tcp_session_without_syn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_session_without_syn", value)

    @property
    @pulumi.getter(name="timeoutSendRst")
    def timeout_send_rst(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "timeout_send_rst")

    @timeout_send_rst.setter
    def timeout_send_rst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout_send_rst", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        """
        ToS (Type of Service) value used for comparison.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Non-zero bit positions are used for comparison while zero bit positions are ignored.
        """
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter(name="tosNegate")
    def tos_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable negated TOS match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tos_negate")

    @tos_negate.setter
    def tos_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_negate", value)

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @traffic_shaper.setter
    def traffic_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper", value)

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @traffic_shaper_reverse.setter
    def traffic_shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper_reverse", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]]:
        """
        URL category ID list. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]]:
        """
        Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VideoFilter profile.
        """
        return pulumi.get(self, "videofilter_profile")

    @videofilter_profile.setter
    def videofilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "videofilter_profile", value)

    @property
    @pulumi.getter(name="virtualPatchProfile")
    def virtual_patch_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing virtual-patch profile.
        """
        return pulumi.get(self, "virtual_patch_profile")

    @virtual_patch_profile.setter
    def virtual_patch_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_patch_profile", value)

    @property
    @pulumi.getter(name="vlanCosFwd")
    def vlan_cos_fwd(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
        """
        return pulumi.get(self, "vlan_cos_fwd")

    @vlan_cos_fwd.setter
    def vlan_cos_fwd(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_cos_fwd", value)

    @property
    @pulumi.getter(name="vlanCosRev")
    def vlan_cos_rev(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
        """
        return pulumi.get(self, "vlan_cos_rev")

    @vlan_cos_rev.setter
    def vlan_cos_rev(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_cos_rev", value)

    @property
    @pulumi.getter(name="vlanFilter")
    def vlan_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Set VLAN filters.
        """
        return pulumi.get(self, "vlan_filter")

    @vlan_filter.setter
    def vlan_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_filter", value)

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VoIP (voipd) profile.
        """
        return pulumi.get(self, "voip_profile")

    @voip_profile.setter
    def voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_profile", value)

    @property
    @pulumi.getter
    def vpntunnel(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        """
        return pulumi.get(self, "vpntunnel")

    @vpntunnel.setter
    def vpntunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpntunnel", value)

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @waf_profile.setter
    def waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_profile", value)

    @property
    @pulumi.getter
    def wanopt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wanopt")

    @wanopt.setter
    def wanopt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt", value)

    @property
    @pulumi.getter(name="wanoptDetection")
    def wanopt_detection(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        """
        return pulumi.get(self, "wanopt_detection")

    @wanopt_detection.setter
    def wanopt_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_detection", value)

    @property
    @pulumi.getter(name="wanoptPassiveOpt")
    def wanopt_passive_opt(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
        """
        return pulumi.get(self, "wanopt_passive_opt")

    @wanopt_passive_opt.setter
    def wanopt_passive_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_passive_opt", value)

    @property
    @pulumi.getter(name="wanoptPeer")
    def wanopt_peer(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization peer.
        """
        return pulumi.get(self, "wanopt_peer")

    @wanopt_peer.setter
    def wanopt_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_peer", value)

    @property
    @pulumi.getter(name="wanoptProfile")
    def wanopt_profile(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization profile.
        """
        return pulumi.get(self, "wanopt_profile")

    @wanopt_profile.setter
    def wanopt_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_profile", value)

    @property
    @pulumi.getter
    def wccp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wccp")

    @wccp.setter
    def wccp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wccp", value)

    @property
    @pulumi.getter
    def webcache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webcache")

    @webcache.setter
    def webcache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache", value)

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "webcache_https")

    @webcache_https.setter
    def webcache_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache_https", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> Optional[pulumi.Input[str]]:
        """
        Web proxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @webproxy_forward_server.setter
    def webproxy_forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_forward_server", value)

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Webproxy profile name.
        """
        return pulumi.get(self, "webproxy_profile")

    @webproxy_profile.setter
    def webproxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_profile", value)

    @property
    @pulumi.getter
    def wsso(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wsso")

    @wsso.setter
    def wsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wsso", value)

    @property
    @pulumi.getter(name="ztnaDeviceOwnership")
    def ztna_device_ownership(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero trust device ownership. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_device_ownership")

    @ztna_device_ownership.setter
    def ztna_device_ownership(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_device_ownership", value)

    @property
    @pulumi.getter(name="ztnaEmsTagSecondaries")
    def ztna_ems_tag_secondaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagSecondaryArgs']]]]:
        """
        Source ztna-ems-tag-secondary names. The structure of `ztna_ems_tag_secondary` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tag_secondaries")

    @ztna_ems_tag_secondaries.setter
    def ztna_ems_tag_secondaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagSecondaryArgs']]]]):
        pulumi.set(self, "ztna_ems_tag_secondaries", value)

    @property
    @pulumi.getter(name="ztnaEmsTags")
    def ztna_ems_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagArgs']]]]:
        """
        Source ztna-ems-tag names. The structure of `ztna_ems_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tags")

    @ztna_ems_tags.setter
    def ztna_ems_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaEmsTagArgs']]]]):
        pulumi.set(self, "ztna_ems_tags", value)

    @property
    @pulumi.getter(name="ztnaGeoTags")
    def ztna_geo_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaGeoTagArgs']]]]:
        """
        Source ztna-geo-tag names. The structure of `ztna_geo_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_geo_tags")

    @ztna_geo_tags.setter
    def ztna_geo_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyZtnaGeoTagArgs']]]]):
        pulumi.set(self, "ztna_geo_tags", value)

    @property
    @pulumi.getter(name="ztnaPolicyRedirect")
    def ztna_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect ZTNA traffic to matching Access-Proxy proxy-policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_policy_redirect")

    @ztna_policy_redirect.setter
    def ztna_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_policy_redirect", value)

    @property
    @pulumi.getter(name="ztnaStatus")
    def ztna_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero trust access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_status")

    @ztna_status.setter
    def ztna_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_status", value)

    @property
    @pulumi.getter(name="ztnaTagsMatchLogic")
    def ztna_tags_match_logic(self) -> Optional[pulumi.Input[str]]:
        """
        ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        return pulumi.get(self, "ztna_tags_match_logic")

    @ztna_tags_match_logic.setter
    def ztna_tags_match_logic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_tags_match_logic", value)


class Policy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppCategoryArgs']]]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppGroupArgs']]]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyApplicationArgs']]]]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_path: Optional[pulumi.Input[str]] = None,
                 auth_redirect_addr: Optional[pulumi.Input[str]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyCustomLogFieldArgs']]]]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 delay_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDeviceArgs']]]]] = None,
                 diameter_filter_profile: Optional[pulumi.Input[str]] = None,
                 diffserv_copy: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddr6_negate: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr6Args']]]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddrArgs']]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstintfArgs']]]]] = None,
                 dynamic_shaping: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_collect: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fec: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 fsso_agent_for_ntlm: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyFssoGroupArgs']]]]] = None,
                 geoip_anycast: Optional[pulumi.Input[str]] = None,
                 geoip_match: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupArgs']]]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 identity_based_route: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6CustomGroupArgs']]]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6CustomArgs']]]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6GroupArgs']]]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6NameArgs']]]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service6_src: Optional[pulumi.Input[str]] = None,
                 internet_service6_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcCustomGroupArgs']]]]] = None,
                 internet_service6_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcCustomArgs']]]]] = None,
                 internet_service6_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcGroupArgs']]]]] = None,
                 internet_service6_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcNameArgs']]]]] = None,
                 internet_service6_src_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomGroupArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceGroupArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceIdArgs']]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceNameArgs']]]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomArgs']]]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcGroupArgs']]]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcIdArgs']]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcNameArgs']]]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 learning_mode: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 match_vip: Optional[pulumi.Input[str]] = None,
                 match_vip_only: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 natinbound: Optional[pulumi.Input[str]] = None,
                 natip: Optional[pulumi.Input[str]] = None,
                 natoutbound: Optional[pulumi.Input[str]] = None,
                 network_service_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNetworkServiceDynamicArgs']]]]] = None,
                 network_service_src_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNetworkServiceSrcDynamicArgs']]]]] = None,
                 np_acceleration: Optional[pulumi.Input[str]] = None,
                 ntlm: Optional[pulumi.Input[str]] = None,
                 ntlm_enabled_browsers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNtlmEnabledBrowserArgs']]]]] = None,
                 ntlm_guest: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 passive_wan_health_measurement: Optional[pulumi.Input[str]] = None,
                 pcp_inbound: Optional[pulumi.Input[str]] = None,
                 pcp_outbound: Optional[pulumi.Input[str]] = None,
                 pcp_poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPcpPoolnameArgs']]]]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 permit_stun_host: Optional[pulumi.Input[str]] = None,
                 policy_expiry: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date_utc: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname6Args']]]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolnameArgs']]]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 reputation_direction: Optional[pulumi.Input[str]] = None,
                 reputation_direction6: Optional[pulumi.Input[str]] = None,
                 reputation_minimum: Optional[pulumi.Input[int]] = None,
                 reputation_minimum6: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rtp_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyRtpAddrArgs']]]]] = None,
                 rtp_nat: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 schedule_timeout: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 send_deny_packet: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyServiceArgs']]]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 sgt_check: Optional[pulumi.Input[str]] = None,
                 sgts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySgtArgs']]]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 src_vendor_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcVendorMacArgs']]]]] = None,
                 srcaddr6_negate: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr6Args']]]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddrArgs']]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcintfArgs']]]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_mirror: Optional[pulumi.Input[str]] = None,
                 ssl_mirror_intfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySslMirrorIntfArgs']]]]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 timeout_send_rst: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUrlCategoryArgs']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUserArgs']]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 vlan_cos_fwd: Optional[pulumi.Input[int]] = None,
                 vlan_cos_rev: Optional[pulumi.Input[int]] = None,
                 vlan_filter: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 wsso: Optional[pulumi.Input[str]] = None,
                 ztna_device_ownership: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tag_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaEmsTagSecondaryArgs']]]]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaEmsTagArgs']]]]] = None,
                 ztna_geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaGeoTagArgs']]]]] = None,
                 ztna_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ztna_status: Optional[pulumi.Input[str]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IPv4 policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Policy("trname",
            action="accept",
            dstaddrs=[fortios.firewall.PolicyDstaddrArgs(
                name="all",
            )],
            dstintfs=[fortios.firewall.PolicyDstintfArgs(
                name="port4",
            )],
            logtraffic="utm",
            policyid=1,
            schedule="always",
            services=[fortios.firewall.PolicyServiceArgs(
                name="HTTP",
            )],
            srcaddrs=[fortios.firewall.PolicySrcaddrArgs(
                name="all",
            )],
            srcintfs=[fortios.firewall.PolicySrcintfArgs(
                name="port3",
            )],
            wanopt="disable",
            wanopt_detection="active",
            wanopt_passive_opt="default",
            wccp="disable",
            webcache="disable",
            webcache_https="disable",
            wsso="enable")
        myrule = fortios.firewall.Policy("myrule",
            action="accept",
            anti_replay="enable",
            auth_path="disable",
            auto_asic_offload="enable",
            av_profile="wifi-default",
            dstintfs=[fortios.firewall.PolicyDstintfArgs(
                name="port1",
            )],
            inspection_mode="flow",
            internet_service="enable",
            internet_service_names=[
                fortios.firewall.PolicyInternetServiceNameArgs(
                    name="Amazon-AWS",
                ),
                fortios.firewall.PolicyInternetServiceNameArgs(
                    name="GitHub-GitHub",
                ),
            ],
            ips_sensor="protect_email_server",
            logtraffic="utm",
            policyid=2,
            schedule="always",
            srcaddrs=[fortios.firewall.PolicySrcaddrArgs(
                name="FABRIC_DEVICE",
            )],
            srcintfs=[fortios.firewall.PolicySrcintfArgs(
                name="port2",
            )],
            ssl_ssh_profile="certificate-inspection",
            status="enable",
            utm_status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Policy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/policy:Policy labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/policy:Policy labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Policy action. On FortiOS versions 6.2.0-6.4.0: allow/deny/ipsec. On FortiOS versions >= 6.4.1: accept/deny/ipsec. Valid values: `accept`, `deny`, `ipsec`.
        :param pulumi.Input[str] anti_replay: Enable/disable anti-replay check. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppCategoryArgs']]]] app_categories: Application category ID list. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppGroupArgs']]]] app_groups: Application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyApplicationArgs']]]] applications: Application ID list. The structure of `application` block is documented below.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate for policy authentication.
        :param pulumi.Input[str] auth_path: Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_redirect_addr: HTTP-to-HTTPS redirect address for firewall authentication.
        :param pulumi.Input[str] auto_asic_offload: Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] block_notification: Enable/disable block notification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] captive_portal_exempt: Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capture_packet: Enable/disable capture packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyCustomLogFieldArgs']]]] custom_log_fields: Custom fields to append to log messages for this policy. The structure of `custom_log_fields` block is documented below.
        :param pulumi.Input[str] decrypted_traffic_mirror: Decrypted traffic mirror.
        :param pulumi.Input[str] delay_tcp_npu_session: Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDeviceArgs']]]] devices: Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
        :param pulumi.Input[str] diameter_filter_profile: Name of an existing Diameter filter profile.
        :param pulumi.Input[str] diffserv_copy: Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[str] disclaimer: Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dnsfilter_profile: Name of an existing DNS filter profile.
        :param pulumi.Input[str] dsri: Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dstaddr6_negate: When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr6Args']]]] dstaddr6s: Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddrArgs']]]] dstaddrs: Destination address and address group names. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstintfArgs']]]] dstintfs: Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_shaping: Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_collect: Enable/disable email collection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] fec: Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] firewall_session_dirty: How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
        :param pulumi.Input[str] fixedport: Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso: Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso_agent_for_ntlm: FSSO agent to use for NTLM authentication.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyFssoGroupArgs']]]] fsso_groups: Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        :param pulumi.Input[str] geoip_anycast: Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] geoip_match: Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] global_label: Label for the policy that appears when the GUI is in Global View mode.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupArgs']]]] groups: Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_policy_redirect: Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] identity_based_route: Name of identity-based routing rule.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6: Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6CustomGroupArgs']]]] internet_service6_custom_groups: Custom Internet Service6 group name. The structure of `internet_service6_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6CustomArgs']]]] internet_service6_customs: Custom IPv6 Internet Service name. The structure of `internet_service6_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6GroupArgs']]]] internet_service6_groups: Internet Service group name. The structure of `internet_service6_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6NameArgs']]]] internet_service6_names: IPv6 Internet Service name. The structure of `internet_service6_name` block is documented below.
        :param pulumi.Input[str] internet_service6_negate: When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6_src: Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcCustomGroupArgs']]]] internet_service6_src_custom_groups: Custom Internet Service6 source group name. The structure of `internet_service6_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcCustomArgs']]]] internet_service6_src_customs: Custom IPv6 Internet Service source name. The structure of `internet_service6_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcGroupArgs']]]] internet_service6_src_groups: Internet Service6 source group name. The structure of `internet_service6_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcNameArgs']]]] internet_service6_src_names: IPv6 Internet Service source name. The structure of `internet_service6_src_name` block is documented below.
        :param pulumi.Input[str] internet_service6_src_negate: When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomGroupArgs']]]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomArgs']]]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceGroupArgs']]]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceIdArgs']]]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceNameArgs']]]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomGroupArgs']]]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomArgs']]]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcGroupArgs']]]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcIdArgs']]]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcNameArgs']]]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] internet_service_src_negate: When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ippool: Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_voip_filter: Name of an existing VoIP (ips) profile.
        :param pulumi.Input[str] label: Label for the policy that appears when the GUI is in Section View mode.
        :param pulumi.Input[str] learning_mode: Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] match_vip: Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] match_vip_only: Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46: Enable/disable NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64: Enable/disable NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] natinbound: Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] natip: Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
        :param pulumi.Input[str] natoutbound: Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNetworkServiceDynamicArgs']]]] network_service_dynamics: Dynamic Network Service name. The structure of `network_service_dynamic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNetworkServiceSrcDynamicArgs']]]] network_service_src_dynamics: Dynamic Network Service source name. The structure of `network_service_src_dynamic` block is documented below.
        :param pulumi.Input[str] np_acceleration: Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ntlm: Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNtlmEnabledBrowserArgs']]]] ntlm_enabled_browsers: HTTP-User-Agent value of supported browsers. The structure of `ntlm_enabled_browsers` block is documented below.
        :param pulumi.Input[str] ntlm_guest: Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outbound: Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive_wan_health_measurement: Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pcp_inbound: Enable/disable PCP inbound DNAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pcp_outbound: Enable/disable PCP outbound SNAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPcpPoolnameArgs']]]] pcp_poolnames: PCP pool names. The structure of `pcp_poolname` block is documented below.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[str] permit_any_host: Accept UDP packets from any host. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_stun_host: Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] policy_expiry: Enable/disable policy expiry. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] policy_expiry_date: Policy expiry date (YYYY-MM-DD HH:MM:SS).
        :param pulumi.Input[str] policy_expiry_date_utc: Policy expiry date and time, in epoch format.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname6Args']]]] poolname6s: IPv6 pool names. The structure of `poolname6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolnameArgs']]]] poolnames: IP Pool names. The structure of `poolname` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] radius_mac_auth_bypass: Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redirect_url: URL users are directed to after seeing and accepting the disclaimer or authenticating.
        :param pulumi.Input[str] replacemsg_override_group: Override the default replacement message group for this policy.
        :param pulumi.Input[str] reputation_direction: Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
        :param pulumi.Input[str] reputation_direction6: Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
        :param pulumi.Input[int] reputation_minimum: Minimum Reputation to take action.
        :param pulumi.Input[int] reputation_minimum6: IPv6 Minimum Reputation to take action.
        :param pulumi.Input[str] rsso: Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyRtpAddrArgs']]]] rtp_addrs: Address names if this is an RTP NAT policy. The structure of `rtp_addr` block is documented below.
        :param pulumi.Input[str] rtp_nat: Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] scan_botnet_connections: Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] schedule: Schedule name.(Default is `always`)
        :param pulumi.Input[str] schedule_timeout: Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sctp_filter_profile: Name of an existing SCTP filter profile.
        :param pulumi.Input[str] send_deny_packet: Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyServiceArgs']]]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] sgt_check: Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySgtArgs']]]] sgts: Security group tags. The structure of `sgt` block is documented below.
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcVendorMacArgs']]]] src_vendor_macs: Vendor MAC source ID. The structure of `src_vendor_mac` block is documented below.
        :param pulumi.Input[str] srcaddr6_negate: When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr6Args']]]] srcaddr6s: Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddrArgs']]]] srcaddrs: Source address and address group names. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcintfArgs']]]] srcintfs: Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_mirror: Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySslMirrorIntfArgs']]]] ssl_mirror_intfs: SSL mirror interface name. The structure of `ssl_mirror_intf` block is documented below.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable or disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: Receiver TCP maximum segment size (MSS).
        :param pulumi.Input[int] tcp_mss_sender: Sender TCP maximum segment size (MSS).
        :param pulumi.Input[str] tcp_session_without_syn: Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
        :param pulumi.Input[str] timeout_send_rst: Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: ToS (Type of Service) value used for comparison.
        :param pulumi.Input[str] tos_mask: Non-zero bit positions are used for comparison while zero bit positions are ignored.
        :param pulumi.Input[str] tos_negate: Enable negated TOS match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUrlCategoryArgs']]]] url_categories: URL category ID list. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUserArgs']]]] users: Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] videofilter_profile: Name of an existing VideoFilter profile.
        :param pulumi.Input[str] virtual_patch_profile: Name of an existing virtual-patch profile.
        :param pulumi.Input[int] vlan_cos_fwd: VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
        :param pulumi.Input[int] vlan_cos_rev: VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
        :param pulumi.Input[str] vlan_filter: Set VLAN filters.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP (voipd) profile.
        :param pulumi.Input[str] vpntunnel: Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] wanopt: Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wanopt_detection: WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        :param pulumi.Input[str] wanopt_passive_opt: WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
        :param pulumi.Input[str] wanopt_peer: WAN optimization peer.
        :param pulumi.Input[str] wanopt_profile: WAN optimization profile.
        :param pulumi.Input[str] wccp: Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache: Enable/disable web cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Web proxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Webproxy profile name.
        :param pulumi.Input[str] wsso: Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_device_ownership: Enable/disable zero trust device ownership. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaEmsTagSecondaryArgs']]]] ztna_ems_tag_secondaries: Source ztna-ems-tag-secondary names. The structure of `ztna_ems_tag_secondary` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaEmsTagArgs']]]] ztna_ems_tags: Source ztna-ems-tag names. The structure of `ztna_ems_tag` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaGeoTagArgs']]]] ztna_geo_tags: Source ztna-geo-tag names. The structure of `ztna_geo_tag` block is documented below.
        :param pulumi.Input[str] ztna_policy_redirect: Redirect ZTNA traffic to matching Access-Proxy proxy-policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_status: Enable/disable zero trust access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_tags_match_logic: ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IPv4 policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Policy("trname",
            action="accept",
            dstaddrs=[fortios.firewall.PolicyDstaddrArgs(
                name="all",
            )],
            dstintfs=[fortios.firewall.PolicyDstintfArgs(
                name="port4",
            )],
            logtraffic="utm",
            policyid=1,
            schedule="always",
            services=[fortios.firewall.PolicyServiceArgs(
                name="HTTP",
            )],
            srcaddrs=[fortios.firewall.PolicySrcaddrArgs(
                name="all",
            )],
            srcintfs=[fortios.firewall.PolicySrcintfArgs(
                name="port3",
            )],
            wanopt="disable",
            wanopt_detection="active",
            wanopt_passive_opt="default",
            wccp="disable",
            webcache="disable",
            webcache_https="disable",
            wsso="enable")
        myrule = fortios.firewall.Policy("myrule",
            action="accept",
            anti_replay="enable",
            auth_path="disable",
            auto_asic_offload="enable",
            av_profile="wifi-default",
            dstintfs=[fortios.firewall.PolicyDstintfArgs(
                name="port1",
            )],
            inspection_mode="flow",
            internet_service="enable",
            internet_service_names=[
                fortios.firewall.PolicyInternetServiceNameArgs(
                    name="Amazon-AWS",
                ),
                fortios.firewall.PolicyInternetServiceNameArgs(
                    name="GitHub-GitHub",
                ),
            ],
            ips_sensor="protect_email_server",
            logtraffic="utm",
            policyid=2,
            schedule="always",
            srcaddrs=[fortios.firewall.PolicySrcaddrArgs(
                name="FABRIC_DEVICE",
            )],
            srcintfs=[fortios.firewall.PolicySrcintfArgs(
                name="port2",
            )],
            ssl_ssh_profile="certificate-inspection",
            status="enable",
            utm_status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Policy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/policy:Policy labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/policy:Policy labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param PolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppCategoryArgs']]]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppGroupArgs']]]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyApplicationArgs']]]]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_path: Optional[pulumi.Input[str]] = None,
                 auth_redirect_addr: Optional[pulumi.Input[str]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyCustomLogFieldArgs']]]]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 delay_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDeviceArgs']]]]] = None,
                 diameter_filter_profile: Optional[pulumi.Input[str]] = None,
                 diffserv_copy: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddr6_negate: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr6Args']]]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddrArgs']]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstintfArgs']]]]] = None,
                 dynamic_shaping: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_collect: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fec: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 fsso_agent_for_ntlm: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyFssoGroupArgs']]]]] = None,
                 geoip_anycast: Optional[pulumi.Input[str]] = None,
                 geoip_match: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupArgs']]]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 identity_based_route: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6CustomGroupArgs']]]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6CustomArgs']]]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6GroupArgs']]]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6NameArgs']]]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service6_src: Optional[pulumi.Input[str]] = None,
                 internet_service6_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcCustomGroupArgs']]]]] = None,
                 internet_service6_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcCustomArgs']]]]] = None,
                 internet_service6_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcGroupArgs']]]]] = None,
                 internet_service6_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcNameArgs']]]]] = None,
                 internet_service6_src_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomGroupArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceGroupArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceIdArgs']]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceNameArgs']]]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomArgs']]]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcGroupArgs']]]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcIdArgs']]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcNameArgs']]]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 learning_mode: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 match_vip: Optional[pulumi.Input[str]] = None,
                 match_vip_only: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 natinbound: Optional[pulumi.Input[str]] = None,
                 natip: Optional[pulumi.Input[str]] = None,
                 natoutbound: Optional[pulumi.Input[str]] = None,
                 network_service_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNetworkServiceDynamicArgs']]]]] = None,
                 network_service_src_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNetworkServiceSrcDynamicArgs']]]]] = None,
                 np_acceleration: Optional[pulumi.Input[str]] = None,
                 ntlm: Optional[pulumi.Input[str]] = None,
                 ntlm_enabled_browsers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNtlmEnabledBrowserArgs']]]]] = None,
                 ntlm_guest: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 passive_wan_health_measurement: Optional[pulumi.Input[str]] = None,
                 pcp_inbound: Optional[pulumi.Input[str]] = None,
                 pcp_outbound: Optional[pulumi.Input[str]] = None,
                 pcp_poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPcpPoolnameArgs']]]]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 permit_stun_host: Optional[pulumi.Input[str]] = None,
                 policy_expiry: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date_utc: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname6Args']]]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolnameArgs']]]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 reputation_direction: Optional[pulumi.Input[str]] = None,
                 reputation_direction6: Optional[pulumi.Input[str]] = None,
                 reputation_minimum: Optional[pulumi.Input[int]] = None,
                 reputation_minimum6: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rtp_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyRtpAddrArgs']]]]] = None,
                 rtp_nat: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 schedule_timeout: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 send_deny_packet: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyServiceArgs']]]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 sgt_check: Optional[pulumi.Input[str]] = None,
                 sgts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySgtArgs']]]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 src_vendor_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcVendorMacArgs']]]]] = None,
                 srcaddr6_negate: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr6Args']]]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddrArgs']]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcintfArgs']]]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_mirror: Optional[pulumi.Input[str]] = None,
                 ssl_mirror_intfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySslMirrorIntfArgs']]]]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 timeout_send_rst: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUrlCategoryArgs']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUserArgs']]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 vlan_cos_fwd: Optional[pulumi.Input[int]] = None,
                 vlan_cos_rev: Optional[pulumi.Input[int]] = None,
                 vlan_filter: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 wsso: Optional[pulumi.Input[str]] = None,
                 ztna_device_ownership: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tag_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaEmsTagSecondaryArgs']]]]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaEmsTagArgs']]]]] = None,
                 ztna_geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaGeoTagArgs']]]]] = None,
                 ztna_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ztna_status: Optional[pulumi.Input[str]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyArgs.__new__(PolicyArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["anti_replay"] = anti_replay
            __props__.__dict__["app_categories"] = app_categories
            __props__.__dict__["app_groups"] = app_groups
            __props__.__dict__["application_list"] = application_list
            __props__.__dict__["applications"] = applications
            __props__.__dict__["auth_cert"] = auth_cert
            __props__.__dict__["auth_path"] = auth_path
            __props__.__dict__["auth_redirect_addr"] = auth_redirect_addr
            __props__.__dict__["auto_asic_offload"] = auto_asic_offload
            __props__.__dict__["av_profile"] = av_profile
            __props__.__dict__["block_notification"] = block_notification
            __props__.__dict__["captive_portal_exempt"] = captive_portal_exempt
            __props__.__dict__["capture_packet"] = capture_packet
            __props__.__dict__["casb_profile"] = casb_profile
            __props__.__dict__["cifs_profile"] = cifs_profile
            __props__.__dict__["comments"] = comments
            __props__.__dict__["custom_log_fields"] = custom_log_fields
            __props__.__dict__["decrypted_traffic_mirror"] = decrypted_traffic_mirror
            __props__.__dict__["delay_tcp_npu_session"] = delay_tcp_npu_session
            __props__.__dict__["devices"] = devices
            __props__.__dict__["diameter_filter_profile"] = diameter_filter_profile
            __props__.__dict__["diffserv_copy"] = diffserv_copy
            __props__.__dict__["diffserv_forward"] = diffserv_forward
            __props__.__dict__["diffserv_reverse"] = diffserv_reverse
            __props__.__dict__["diffservcode_forward"] = diffservcode_forward
            __props__.__dict__["diffservcode_rev"] = diffservcode_rev
            __props__.__dict__["disclaimer"] = disclaimer
            __props__.__dict__["dlp_profile"] = dlp_profile
            __props__.__dict__["dlp_sensor"] = dlp_sensor
            __props__.__dict__["dnsfilter_profile"] = dnsfilter_profile
            __props__.__dict__["dsri"] = dsri
            __props__.__dict__["dstaddr6_negate"] = dstaddr6_negate
            __props__.__dict__["dstaddr6s"] = dstaddr6s
            __props__.__dict__["dstaddr_negate"] = dstaddr_negate
            __props__.__dict__["dstaddrs"] = dstaddrs
            if dstintfs is None and not opts.urn:
                raise TypeError("Missing required property 'dstintfs'")
            __props__.__dict__["dstintfs"] = dstintfs
            __props__.__dict__["dynamic_shaping"] = dynamic_shaping
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["email_collect"] = email_collect
            __props__.__dict__["emailfilter_profile"] = emailfilter_profile
            __props__.__dict__["fec"] = fec
            __props__.__dict__["file_filter_profile"] = file_filter_profile
            __props__.__dict__["firewall_session_dirty"] = firewall_session_dirty
            __props__.__dict__["fixedport"] = fixedport
            __props__.__dict__["fsso"] = fsso
            __props__.__dict__["fsso_agent_for_ntlm"] = fsso_agent_for_ntlm
            __props__.__dict__["fsso_groups"] = fsso_groups
            __props__.__dict__["geoip_anycast"] = geoip_anycast
            __props__.__dict__["geoip_match"] = geoip_match
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["global_label"] = global_label
            __props__.__dict__["groups"] = groups
            __props__.__dict__["http_policy_redirect"] = http_policy_redirect
            __props__.__dict__["icap_profile"] = icap_profile
            __props__.__dict__["identity_based_route"] = identity_based_route
            __props__.__dict__["inbound"] = inbound
            __props__.__dict__["inspection_mode"] = inspection_mode
            __props__.__dict__["internet_service"] = internet_service
            __props__.__dict__["internet_service6"] = internet_service6
            __props__.__dict__["internet_service6_custom_groups"] = internet_service6_custom_groups
            __props__.__dict__["internet_service6_customs"] = internet_service6_customs
            __props__.__dict__["internet_service6_groups"] = internet_service6_groups
            __props__.__dict__["internet_service6_names"] = internet_service6_names
            __props__.__dict__["internet_service6_negate"] = internet_service6_negate
            __props__.__dict__["internet_service6_src"] = internet_service6_src
            __props__.__dict__["internet_service6_src_custom_groups"] = internet_service6_src_custom_groups
            __props__.__dict__["internet_service6_src_customs"] = internet_service6_src_customs
            __props__.__dict__["internet_service6_src_groups"] = internet_service6_src_groups
            __props__.__dict__["internet_service6_src_names"] = internet_service6_src_names
            __props__.__dict__["internet_service6_src_negate"] = internet_service6_src_negate
            __props__.__dict__["internet_service_custom_groups"] = internet_service_custom_groups
            __props__.__dict__["internet_service_customs"] = internet_service_customs
            __props__.__dict__["internet_service_groups"] = internet_service_groups
            __props__.__dict__["internet_service_ids"] = internet_service_ids
            __props__.__dict__["internet_service_names"] = internet_service_names
            __props__.__dict__["internet_service_negate"] = internet_service_negate
            __props__.__dict__["internet_service_src"] = internet_service_src
            __props__.__dict__["internet_service_src_custom_groups"] = internet_service_src_custom_groups
            __props__.__dict__["internet_service_src_customs"] = internet_service_src_customs
            __props__.__dict__["internet_service_src_groups"] = internet_service_src_groups
            __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
            __props__.__dict__["internet_service_src_names"] = internet_service_src_names
            __props__.__dict__["internet_service_src_negate"] = internet_service_src_negate
            __props__.__dict__["ippool"] = ippool
            __props__.__dict__["ips_sensor"] = ips_sensor
            __props__.__dict__["ips_voip_filter"] = ips_voip_filter
            __props__.__dict__["label"] = label
            __props__.__dict__["learning_mode"] = learning_mode
            __props__.__dict__["logtraffic"] = logtraffic
            __props__.__dict__["logtraffic_start"] = logtraffic_start
            __props__.__dict__["match_vip"] = match_vip
            __props__.__dict__["match_vip_only"] = match_vip_only
            __props__.__dict__["name"] = name
            __props__.__dict__["nat"] = nat
            __props__.__dict__["nat46"] = nat46
            __props__.__dict__["nat64"] = nat64
            __props__.__dict__["natinbound"] = natinbound
            __props__.__dict__["natip"] = natip
            __props__.__dict__["natoutbound"] = natoutbound
            __props__.__dict__["network_service_dynamics"] = network_service_dynamics
            __props__.__dict__["network_service_src_dynamics"] = network_service_src_dynamics
            __props__.__dict__["np_acceleration"] = np_acceleration
            __props__.__dict__["ntlm"] = ntlm
            __props__.__dict__["ntlm_enabled_browsers"] = ntlm_enabled_browsers
            __props__.__dict__["ntlm_guest"] = ntlm_guest
            __props__.__dict__["outbound"] = outbound
            __props__.__dict__["passive_wan_health_measurement"] = passive_wan_health_measurement
            __props__.__dict__["pcp_inbound"] = pcp_inbound
            __props__.__dict__["pcp_outbound"] = pcp_outbound
            __props__.__dict__["pcp_poolnames"] = pcp_poolnames
            __props__.__dict__["per_ip_shaper"] = per_ip_shaper
            __props__.__dict__["permit_any_host"] = permit_any_host
            __props__.__dict__["permit_stun_host"] = permit_stun_host
            __props__.__dict__["policy_expiry"] = policy_expiry
            __props__.__dict__["policy_expiry_date"] = policy_expiry_date
            __props__.__dict__["policy_expiry_date_utc"] = policy_expiry_date_utc
            __props__.__dict__["policyid"] = policyid
            __props__.__dict__["poolname6s"] = poolname6s
            __props__.__dict__["poolnames"] = poolnames
            __props__.__dict__["profile_group"] = profile_group
            __props__.__dict__["profile_protocol_options"] = profile_protocol_options
            __props__.__dict__["profile_type"] = profile_type
            __props__.__dict__["radius_mac_auth_bypass"] = radius_mac_auth_bypass
            __props__.__dict__["redirect_url"] = redirect_url
            __props__.__dict__["replacemsg_override_group"] = replacemsg_override_group
            __props__.__dict__["reputation_direction"] = reputation_direction
            __props__.__dict__["reputation_direction6"] = reputation_direction6
            __props__.__dict__["reputation_minimum"] = reputation_minimum
            __props__.__dict__["reputation_minimum6"] = reputation_minimum6
            __props__.__dict__["rsso"] = rsso
            __props__.__dict__["rtp_addrs"] = rtp_addrs
            __props__.__dict__["rtp_nat"] = rtp_nat
            __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["schedule_timeout"] = schedule_timeout
            __props__.__dict__["sctp_filter_profile"] = sctp_filter_profile
            __props__.__dict__["send_deny_packet"] = send_deny_packet
            __props__.__dict__["service_negate"] = service_negate
            __props__.__dict__["services"] = services
            __props__.__dict__["session_ttl"] = session_ttl
            __props__.__dict__["sgt_check"] = sgt_check
            __props__.__dict__["sgts"] = sgts
            __props__.__dict__["spamfilter_profile"] = spamfilter_profile
            __props__.__dict__["src_vendor_macs"] = src_vendor_macs
            __props__.__dict__["srcaddr6_negate"] = srcaddr6_negate
            __props__.__dict__["srcaddr6s"] = srcaddr6s
            __props__.__dict__["srcaddr_negate"] = srcaddr_negate
            __props__.__dict__["srcaddrs"] = srcaddrs
            if srcintfs is None and not opts.urn:
                raise TypeError("Missing required property 'srcintfs'")
            __props__.__dict__["srcintfs"] = srcintfs
            __props__.__dict__["ssh_filter_profile"] = ssh_filter_profile
            __props__.__dict__["ssh_policy_redirect"] = ssh_policy_redirect
            __props__.__dict__["ssl_mirror"] = ssl_mirror
            __props__.__dict__["ssl_mirror_intfs"] = ssl_mirror_intfs
            __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
            __props__.__dict__["status"] = status
            __props__.__dict__["tcp_mss_receiver"] = tcp_mss_receiver
            __props__.__dict__["tcp_mss_sender"] = tcp_mss_sender
            __props__.__dict__["tcp_session_without_syn"] = tcp_session_without_syn
            __props__.__dict__["timeout_send_rst"] = timeout_send_rst
            __props__.__dict__["tos"] = tos
            __props__.__dict__["tos_mask"] = tos_mask
            __props__.__dict__["tos_negate"] = tos_negate
            __props__.__dict__["traffic_shaper"] = traffic_shaper
            __props__.__dict__["traffic_shaper_reverse"] = traffic_shaper_reverse
            __props__.__dict__["url_categories"] = url_categories
            __props__.__dict__["users"] = users
            __props__.__dict__["utm_status"] = utm_status
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["videofilter_profile"] = videofilter_profile
            __props__.__dict__["virtual_patch_profile"] = virtual_patch_profile
            __props__.__dict__["vlan_cos_fwd"] = vlan_cos_fwd
            __props__.__dict__["vlan_cos_rev"] = vlan_cos_rev
            __props__.__dict__["vlan_filter"] = vlan_filter
            __props__.__dict__["voip_profile"] = voip_profile
            __props__.__dict__["vpntunnel"] = vpntunnel
            __props__.__dict__["waf_profile"] = waf_profile
            __props__.__dict__["wanopt"] = wanopt
            __props__.__dict__["wanopt_detection"] = wanopt_detection
            __props__.__dict__["wanopt_passive_opt"] = wanopt_passive_opt
            __props__.__dict__["wanopt_peer"] = wanopt_peer
            __props__.__dict__["wanopt_profile"] = wanopt_profile
            __props__.__dict__["wccp"] = wccp
            __props__.__dict__["webcache"] = webcache
            __props__.__dict__["webcache_https"] = webcache_https
            __props__.__dict__["webfilter_profile"] = webfilter_profile
            __props__.__dict__["webproxy_forward_server"] = webproxy_forward_server
            __props__.__dict__["webproxy_profile"] = webproxy_profile
            __props__.__dict__["wsso"] = wsso
            __props__.__dict__["ztna_device_ownership"] = ztna_device_ownership
            __props__.__dict__["ztna_ems_tag_secondaries"] = ztna_ems_tag_secondaries
            __props__.__dict__["ztna_ems_tags"] = ztna_ems_tags
            __props__.__dict__["ztna_geo_tags"] = ztna_geo_tags
            __props__.__dict__["ztna_policy_redirect"] = ztna_policy_redirect
            __props__.__dict__["ztna_status"] = ztna_status
            __props__.__dict__["ztna_tags_match_logic"] = ztna_tags_match_logic
        super(Policy, __self__).__init__(
            'fortios:firewall/policy:Policy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            anti_replay: Optional[pulumi.Input[str]] = None,
            app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppCategoryArgs']]]]] = None,
            app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppGroupArgs']]]]] = None,
            application_list: Optional[pulumi.Input[str]] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyApplicationArgs']]]]] = None,
            auth_cert: Optional[pulumi.Input[str]] = None,
            auth_path: Optional[pulumi.Input[str]] = None,
            auth_redirect_addr: Optional[pulumi.Input[str]] = None,
            auto_asic_offload: Optional[pulumi.Input[str]] = None,
            av_profile: Optional[pulumi.Input[str]] = None,
            block_notification: Optional[pulumi.Input[str]] = None,
            captive_portal_exempt: Optional[pulumi.Input[str]] = None,
            capture_packet: Optional[pulumi.Input[str]] = None,
            casb_profile: Optional[pulumi.Input[str]] = None,
            cifs_profile: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyCustomLogFieldArgs']]]]] = None,
            decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
            delay_tcp_npu_session: Optional[pulumi.Input[str]] = None,
            devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDeviceArgs']]]]] = None,
            diameter_filter_profile: Optional[pulumi.Input[str]] = None,
            diffserv_copy: Optional[pulumi.Input[str]] = None,
            diffserv_forward: Optional[pulumi.Input[str]] = None,
            diffserv_reverse: Optional[pulumi.Input[str]] = None,
            diffservcode_forward: Optional[pulumi.Input[str]] = None,
            diffservcode_rev: Optional[pulumi.Input[str]] = None,
            disclaimer: Optional[pulumi.Input[str]] = None,
            dlp_profile: Optional[pulumi.Input[str]] = None,
            dlp_sensor: Optional[pulumi.Input[str]] = None,
            dnsfilter_profile: Optional[pulumi.Input[str]] = None,
            dsri: Optional[pulumi.Input[str]] = None,
            dstaddr6_negate: Optional[pulumi.Input[str]] = None,
            dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr6Args']]]]] = None,
            dstaddr_negate: Optional[pulumi.Input[str]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddrArgs']]]]] = None,
            dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstintfArgs']]]]] = None,
            dynamic_shaping: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            email_collect: Optional[pulumi.Input[str]] = None,
            emailfilter_profile: Optional[pulumi.Input[str]] = None,
            fec: Optional[pulumi.Input[str]] = None,
            file_filter_profile: Optional[pulumi.Input[str]] = None,
            firewall_session_dirty: Optional[pulumi.Input[str]] = None,
            fixedport: Optional[pulumi.Input[str]] = None,
            fsso: Optional[pulumi.Input[str]] = None,
            fsso_agent_for_ntlm: Optional[pulumi.Input[str]] = None,
            fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyFssoGroupArgs']]]]] = None,
            geoip_anycast: Optional[pulumi.Input[str]] = None,
            geoip_match: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            global_label: Optional[pulumi.Input[str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupArgs']]]]] = None,
            http_policy_redirect: Optional[pulumi.Input[str]] = None,
            icap_profile: Optional[pulumi.Input[str]] = None,
            identity_based_route: Optional[pulumi.Input[str]] = None,
            inbound: Optional[pulumi.Input[str]] = None,
            inspection_mode: Optional[pulumi.Input[str]] = None,
            internet_service: Optional[pulumi.Input[str]] = None,
            internet_service6: Optional[pulumi.Input[str]] = None,
            internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6CustomGroupArgs']]]]] = None,
            internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6CustomArgs']]]]] = None,
            internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6GroupArgs']]]]] = None,
            internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6NameArgs']]]]] = None,
            internet_service6_negate: Optional[pulumi.Input[str]] = None,
            internet_service6_src: Optional[pulumi.Input[str]] = None,
            internet_service6_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcCustomGroupArgs']]]]] = None,
            internet_service6_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcCustomArgs']]]]] = None,
            internet_service6_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcGroupArgs']]]]] = None,
            internet_service6_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcNameArgs']]]]] = None,
            internet_service6_src_negate: Optional[pulumi.Input[str]] = None,
            internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomGroupArgs']]]]] = None,
            internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomArgs']]]]] = None,
            internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceGroupArgs']]]]] = None,
            internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceIdArgs']]]]] = None,
            internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceNameArgs']]]]] = None,
            internet_service_negate: Optional[pulumi.Input[str]] = None,
            internet_service_src: Optional[pulumi.Input[str]] = None,
            internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
            internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomArgs']]]]] = None,
            internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcGroupArgs']]]]] = None,
            internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcIdArgs']]]]] = None,
            internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcNameArgs']]]]] = None,
            internet_service_src_negate: Optional[pulumi.Input[str]] = None,
            ippool: Optional[pulumi.Input[str]] = None,
            ips_sensor: Optional[pulumi.Input[str]] = None,
            ips_voip_filter: Optional[pulumi.Input[str]] = None,
            label: Optional[pulumi.Input[str]] = None,
            learning_mode: Optional[pulumi.Input[str]] = None,
            logtraffic: Optional[pulumi.Input[str]] = None,
            logtraffic_start: Optional[pulumi.Input[str]] = None,
            match_vip: Optional[pulumi.Input[str]] = None,
            match_vip_only: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nat: Optional[pulumi.Input[str]] = None,
            nat46: Optional[pulumi.Input[str]] = None,
            nat64: Optional[pulumi.Input[str]] = None,
            natinbound: Optional[pulumi.Input[str]] = None,
            natip: Optional[pulumi.Input[str]] = None,
            natoutbound: Optional[pulumi.Input[str]] = None,
            network_service_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNetworkServiceDynamicArgs']]]]] = None,
            network_service_src_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNetworkServiceSrcDynamicArgs']]]]] = None,
            np_acceleration: Optional[pulumi.Input[str]] = None,
            ntlm: Optional[pulumi.Input[str]] = None,
            ntlm_enabled_browsers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNtlmEnabledBrowserArgs']]]]] = None,
            ntlm_guest: Optional[pulumi.Input[str]] = None,
            outbound: Optional[pulumi.Input[str]] = None,
            passive_wan_health_measurement: Optional[pulumi.Input[str]] = None,
            pcp_inbound: Optional[pulumi.Input[str]] = None,
            pcp_outbound: Optional[pulumi.Input[str]] = None,
            pcp_poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPcpPoolnameArgs']]]]] = None,
            per_ip_shaper: Optional[pulumi.Input[str]] = None,
            permit_any_host: Optional[pulumi.Input[str]] = None,
            permit_stun_host: Optional[pulumi.Input[str]] = None,
            policy_expiry: Optional[pulumi.Input[str]] = None,
            policy_expiry_date: Optional[pulumi.Input[str]] = None,
            policy_expiry_date_utc: Optional[pulumi.Input[str]] = None,
            policyid: Optional[pulumi.Input[int]] = None,
            poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname6Args']]]]] = None,
            poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolnameArgs']]]]] = None,
            profile_group: Optional[pulumi.Input[str]] = None,
            profile_protocol_options: Optional[pulumi.Input[str]] = None,
            profile_type: Optional[pulumi.Input[str]] = None,
            radius_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
            redirect_url: Optional[pulumi.Input[str]] = None,
            replacemsg_override_group: Optional[pulumi.Input[str]] = None,
            reputation_direction: Optional[pulumi.Input[str]] = None,
            reputation_direction6: Optional[pulumi.Input[str]] = None,
            reputation_minimum: Optional[pulumi.Input[int]] = None,
            reputation_minimum6: Optional[pulumi.Input[int]] = None,
            rsso: Optional[pulumi.Input[str]] = None,
            rtp_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyRtpAddrArgs']]]]] = None,
            rtp_nat: Optional[pulumi.Input[str]] = None,
            scan_botnet_connections: Optional[pulumi.Input[str]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            schedule_timeout: Optional[pulumi.Input[str]] = None,
            sctp_filter_profile: Optional[pulumi.Input[str]] = None,
            send_deny_packet: Optional[pulumi.Input[str]] = None,
            service_negate: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyServiceArgs']]]]] = None,
            session_ttl: Optional[pulumi.Input[int]] = None,
            sgt_check: Optional[pulumi.Input[str]] = None,
            sgts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySgtArgs']]]]] = None,
            spamfilter_profile: Optional[pulumi.Input[str]] = None,
            src_vendor_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcVendorMacArgs']]]]] = None,
            srcaddr6_negate: Optional[pulumi.Input[str]] = None,
            srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr6Args']]]]] = None,
            srcaddr_negate: Optional[pulumi.Input[str]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddrArgs']]]]] = None,
            srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcintfArgs']]]]] = None,
            ssh_filter_profile: Optional[pulumi.Input[str]] = None,
            ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
            ssl_mirror: Optional[pulumi.Input[str]] = None,
            ssl_mirror_intfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySslMirrorIntfArgs']]]]] = None,
            ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
            tcp_mss_sender: Optional[pulumi.Input[int]] = None,
            tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
            timeout_send_rst: Optional[pulumi.Input[str]] = None,
            tos: Optional[pulumi.Input[str]] = None,
            tos_mask: Optional[pulumi.Input[str]] = None,
            tos_negate: Optional[pulumi.Input[str]] = None,
            traffic_shaper: Optional[pulumi.Input[str]] = None,
            traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
            url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUrlCategoryArgs']]]]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUserArgs']]]]] = None,
            utm_status: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            videofilter_profile: Optional[pulumi.Input[str]] = None,
            virtual_patch_profile: Optional[pulumi.Input[str]] = None,
            vlan_cos_fwd: Optional[pulumi.Input[int]] = None,
            vlan_cos_rev: Optional[pulumi.Input[int]] = None,
            vlan_filter: Optional[pulumi.Input[str]] = None,
            voip_profile: Optional[pulumi.Input[str]] = None,
            vpntunnel: Optional[pulumi.Input[str]] = None,
            waf_profile: Optional[pulumi.Input[str]] = None,
            wanopt: Optional[pulumi.Input[str]] = None,
            wanopt_detection: Optional[pulumi.Input[str]] = None,
            wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
            wanopt_peer: Optional[pulumi.Input[str]] = None,
            wanopt_profile: Optional[pulumi.Input[str]] = None,
            wccp: Optional[pulumi.Input[str]] = None,
            webcache: Optional[pulumi.Input[str]] = None,
            webcache_https: Optional[pulumi.Input[str]] = None,
            webfilter_profile: Optional[pulumi.Input[str]] = None,
            webproxy_forward_server: Optional[pulumi.Input[str]] = None,
            webproxy_profile: Optional[pulumi.Input[str]] = None,
            wsso: Optional[pulumi.Input[str]] = None,
            ztna_device_ownership: Optional[pulumi.Input[str]] = None,
            ztna_ems_tag_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaEmsTagSecondaryArgs']]]]] = None,
            ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaEmsTagArgs']]]]] = None,
            ztna_geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaGeoTagArgs']]]]] = None,
            ztna_policy_redirect: Optional[pulumi.Input[str]] = None,
            ztna_status: Optional[pulumi.Input[str]] = None,
            ztna_tags_match_logic: Optional[pulumi.Input[str]] = None) -> 'Policy':
        """
        Get an existing Policy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Policy action. On FortiOS versions 6.2.0-6.4.0: allow/deny/ipsec. On FortiOS versions >= 6.4.1: accept/deny/ipsec. Valid values: `accept`, `deny`, `ipsec`.
        :param pulumi.Input[str] anti_replay: Enable/disable anti-replay check. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppCategoryArgs']]]] app_categories: Application category ID list. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppGroupArgs']]]] app_groups: Application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyApplicationArgs']]]] applications: Application ID list. The structure of `application` block is documented below.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate for policy authentication.
        :param pulumi.Input[str] auth_path: Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_redirect_addr: HTTP-to-HTTPS redirect address for firewall authentication.
        :param pulumi.Input[str] auto_asic_offload: Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] block_notification: Enable/disable block notification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] captive_portal_exempt: Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capture_packet: Enable/disable capture packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: Name of an existing CASB profile.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyCustomLogFieldArgs']]]] custom_log_fields: Custom fields to append to log messages for this policy. The structure of `custom_log_fields` block is documented below.
        :param pulumi.Input[str] decrypted_traffic_mirror: Decrypted traffic mirror.
        :param pulumi.Input[str] delay_tcp_npu_session: Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDeviceArgs']]]] devices: Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
        :param pulumi.Input[str] diameter_filter_profile: Name of an existing Diameter filter profile.
        :param pulumi.Input[str] diffserv_copy: Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[str] disclaimer: Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_profile: Name of an existing DLP profile.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dnsfilter_profile: Name of an existing DNS filter profile.
        :param pulumi.Input[str] dsri: Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dstaddr6_negate: When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr6Args']]]] dstaddr6s: Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddrArgs']]]] dstaddrs: Destination address and address group names. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstintfArgs']]]] dstintfs: Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_shaping: Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_collect: Enable/disable email collection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] fec: Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] file_filter_profile: Name of an existing file-filter profile.
        :param pulumi.Input[str] firewall_session_dirty: How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
        :param pulumi.Input[str] fixedport: Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso: Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso_agent_for_ntlm: FSSO agent to use for NTLM authentication.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyFssoGroupArgs']]]] fsso_groups: Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        :param pulumi.Input[str] geoip_anycast: Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] geoip_match: Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] global_label: Label for the policy that appears when the GUI is in Global View mode.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupArgs']]]] groups: Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_policy_redirect: Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] identity_based_route: Name of identity-based routing rule.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6: Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6CustomGroupArgs']]]] internet_service6_custom_groups: Custom Internet Service6 group name. The structure of `internet_service6_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6CustomArgs']]]] internet_service6_customs: Custom IPv6 Internet Service name. The structure of `internet_service6_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6GroupArgs']]]] internet_service6_groups: Internet Service group name. The structure of `internet_service6_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6NameArgs']]]] internet_service6_names: IPv6 Internet Service name. The structure of `internet_service6_name` block is documented below.
        :param pulumi.Input[str] internet_service6_negate: When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service6_src: Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcCustomGroupArgs']]]] internet_service6_src_custom_groups: Custom Internet Service6 source group name. The structure of `internet_service6_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcCustomArgs']]]] internet_service6_src_customs: Custom IPv6 Internet Service source name. The structure of `internet_service6_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcGroupArgs']]]] internet_service6_src_groups: Internet Service6 source group name. The structure of `internet_service6_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetService6SrcNameArgs']]]] internet_service6_src_names: IPv6 Internet Service source name. The structure of `internet_service6_src_name` block is documented below.
        :param pulumi.Input[str] internet_service6_src_negate: When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomGroupArgs']]]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomArgs']]]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceGroupArgs']]]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceIdArgs']]]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceNameArgs']]]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomGroupArgs']]]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomArgs']]]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcGroupArgs']]]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcIdArgs']]]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcNameArgs']]]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] internet_service_src_negate: When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ippool: Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] ips_voip_filter: Name of an existing VoIP (ips) profile.
        :param pulumi.Input[str] label: Label for the policy that appears when the GUI is in Section View mode.
        :param pulumi.Input[str] learning_mode: Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] match_vip: Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] match_vip_only: Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46: Enable/disable NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64: Enable/disable NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] natinbound: Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] natip: Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
        :param pulumi.Input[str] natoutbound: Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNetworkServiceDynamicArgs']]]] network_service_dynamics: Dynamic Network Service name. The structure of `network_service_dynamic` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNetworkServiceSrcDynamicArgs']]]] network_service_src_dynamics: Dynamic Network Service source name. The structure of `network_service_src_dynamic` block is documented below.
        :param pulumi.Input[str] np_acceleration: Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ntlm: Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyNtlmEnabledBrowserArgs']]]] ntlm_enabled_browsers: HTTP-User-Agent value of supported browsers. The structure of `ntlm_enabled_browsers` block is documented below.
        :param pulumi.Input[str] ntlm_guest: Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outbound: Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive_wan_health_measurement: Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pcp_inbound: Enable/disable PCP inbound DNAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pcp_outbound: Enable/disable PCP outbound SNAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPcpPoolnameArgs']]]] pcp_poolnames: PCP pool names. The structure of `pcp_poolname` block is documented below.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[str] permit_any_host: Accept UDP packets from any host. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] permit_stun_host: Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] policy_expiry: Enable/disable policy expiry. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] policy_expiry_date: Policy expiry date (YYYY-MM-DD HH:MM:SS).
        :param pulumi.Input[str] policy_expiry_date_utc: Policy expiry date and time, in epoch format.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname6Args']]]] poolname6s: IPv6 pool names. The structure of `poolname6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolnameArgs']]]] poolnames: IP Pool names. The structure of `poolname` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] radius_mac_auth_bypass: Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redirect_url: URL users are directed to after seeing and accepting the disclaimer or authenticating.
        :param pulumi.Input[str] replacemsg_override_group: Override the default replacement message group for this policy.
        :param pulumi.Input[str] reputation_direction: Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
        :param pulumi.Input[str] reputation_direction6: Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
        :param pulumi.Input[int] reputation_minimum: Minimum Reputation to take action.
        :param pulumi.Input[int] reputation_minimum6: IPv6 Minimum Reputation to take action.
        :param pulumi.Input[str] rsso: Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyRtpAddrArgs']]]] rtp_addrs: Address names if this is an RTP NAT policy. The structure of `rtp_addr` block is documented below.
        :param pulumi.Input[str] rtp_nat: Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] scan_botnet_connections: Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] schedule: Schedule name.(Default is `always`)
        :param pulumi.Input[str] schedule_timeout: Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sctp_filter_profile: Name of an existing SCTP filter profile.
        :param pulumi.Input[str] send_deny_packet: Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyServiceArgs']]]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] sgt_check: Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySgtArgs']]]] sgts: Security group tags. The structure of `sgt` block is documented below.
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcVendorMacArgs']]]] src_vendor_macs: Vendor MAC source ID. The structure of `src_vendor_mac` block is documented below.
        :param pulumi.Input[str] srcaddr6_negate: When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr6Args']]]] srcaddr6s: Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddrArgs']]]] srcaddrs: Source address and address group names. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcintfArgs']]]] srcintfs: Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_mirror: Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySslMirrorIntfArgs']]]] ssl_mirror_intfs: SSL mirror interface name. The structure of `ssl_mirror_intf` block is documented below.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable or disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: Receiver TCP maximum segment size (MSS).
        :param pulumi.Input[int] tcp_mss_sender: Sender TCP maximum segment size (MSS).
        :param pulumi.Input[str] tcp_session_without_syn: Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
        :param pulumi.Input[str] timeout_send_rst: Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: ToS (Type of Service) value used for comparison.
        :param pulumi.Input[str] tos_mask: Non-zero bit positions are used for comparison while zero bit positions are ignored.
        :param pulumi.Input[str] tos_negate: Enable negated TOS match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUrlCategoryArgs']]]] url_categories: URL category ID list. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUserArgs']]]] users: Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] videofilter_profile: Name of an existing VideoFilter profile.
        :param pulumi.Input[str] virtual_patch_profile: Name of an existing virtual-patch profile.
        :param pulumi.Input[int] vlan_cos_fwd: VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
        :param pulumi.Input[int] vlan_cos_rev: VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
        :param pulumi.Input[str] vlan_filter: Set VLAN filters.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP (voipd) profile.
        :param pulumi.Input[str] vpntunnel: Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] wanopt: Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wanopt_detection: WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        :param pulumi.Input[str] wanopt_passive_opt: WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
        :param pulumi.Input[str] wanopt_peer: WAN optimization peer.
        :param pulumi.Input[str] wanopt_profile: WAN optimization profile.
        :param pulumi.Input[str] wccp: Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache: Enable/disable web cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Web proxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Webproxy profile name.
        :param pulumi.Input[str] wsso: Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_device_ownership: Enable/disable zero trust device ownership. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaEmsTagSecondaryArgs']]]] ztna_ems_tag_secondaries: Source ztna-ems-tag-secondary names. The structure of `ztna_ems_tag_secondary` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaEmsTagArgs']]]] ztna_ems_tags: Source ztna-ems-tag names. The structure of `ztna_ems_tag` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyZtnaGeoTagArgs']]]] ztna_geo_tags: Source ztna-geo-tag names. The structure of `ztna_geo_tag` block is documented below.
        :param pulumi.Input[str] ztna_policy_redirect: Redirect ZTNA traffic to matching Access-Proxy proxy-policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_status: Enable/disable zero trust access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_tags_match_logic: ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyState.__new__(_PolicyState)

        __props__.__dict__["action"] = action
        __props__.__dict__["anti_replay"] = anti_replay
        __props__.__dict__["app_categories"] = app_categories
        __props__.__dict__["app_groups"] = app_groups
        __props__.__dict__["application_list"] = application_list
        __props__.__dict__["applications"] = applications
        __props__.__dict__["auth_cert"] = auth_cert
        __props__.__dict__["auth_path"] = auth_path
        __props__.__dict__["auth_redirect_addr"] = auth_redirect_addr
        __props__.__dict__["auto_asic_offload"] = auto_asic_offload
        __props__.__dict__["av_profile"] = av_profile
        __props__.__dict__["block_notification"] = block_notification
        __props__.__dict__["captive_portal_exempt"] = captive_portal_exempt
        __props__.__dict__["capture_packet"] = capture_packet
        __props__.__dict__["casb_profile"] = casb_profile
        __props__.__dict__["cifs_profile"] = cifs_profile
        __props__.__dict__["comments"] = comments
        __props__.__dict__["custom_log_fields"] = custom_log_fields
        __props__.__dict__["decrypted_traffic_mirror"] = decrypted_traffic_mirror
        __props__.__dict__["delay_tcp_npu_session"] = delay_tcp_npu_session
        __props__.__dict__["devices"] = devices
        __props__.__dict__["diameter_filter_profile"] = diameter_filter_profile
        __props__.__dict__["diffserv_copy"] = diffserv_copy
        __props__.__dict__["diffserv_forward"] = diffserv_forward
        __props__.__dict__["diffserv_reverse"] = diffserv_reverse
        __props__.__dict__["diffservcode_forward"] = diffservcode_forward
        __props__.__dict__["diffservcode_rev"] = diffservcode_rev
        __props__.__dict__["disclaimer"] = disclaimer
        __props__.__dict__["dlp_profile"] = dlp_profile
        __props__.__dict__["dlp_sensor"] = dlp_sensor
        __props__.__dict__["dnsfilter_profile"] = dnsfilter_profile
        __props__.__dict__["dsri"] = dsri
        __props__.__dict__["dstaddr6_negate"] = dstaddr6_negate
        __props__.__dict__["dstaddr6s"] = dstaddr6s
        __props__.__dict__["dstaddr_negate"] = dstaddr_negate
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dstintfs"] = dstintfs
        __props__.__dict__["dynamic_shaping"] = dynamic_shaping
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["email_collect"] = email_collect
        __props__.__dict__["emailfilter_profile"] = emailfilter_profile
        __props__.__dict__["fec"] = fec
        __props__.__dict__["file_filter_profile"] = file_filter_profile
        __props__.__dict__["firewall_session_dirty"] = firewall_session_dirty
        __props__.__dict__["fixedport"] = fixedport
        __props__.__dict__["fsso"] = fsso
        __props__.__dict__["fsso_agent_for_ntlm"] = fsso_agent_for_ntlm
        __props__.__dict__["fsso_groups"] = fsso_groups
        __props__.__dict__["geoip_anycast"] = geoip_anycast
        __props__.__dict__["geoip_match"] = geoip_match
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["global_label"] = global_label
        __props__.__dict__["groups"] = groups
        __props__.__dict__["http_policy_redirect"] = http_policy_redirect
        __props__.__dict__["icap_profile"] = icap_profile
        __props__.__dict__["identity_based_route"] = identity_based_route
        __props__.__dict__["inbound"] = inbound
        __props__.__dict__["inspection_mode"] = inspection_mode
        __props__.__dict__["internet_service"] = internet_service
        __props__.__dict__["internet_service6"] = internet_service6
        __props__.__dict__["internet_service6_custom_groups"] = internet_service6_custom_groups
        __props__.__dict__["internet_service6_customs"] = internet_service6_customs
        __props__.__dict__["internet_service6_groups"] = internet_service6_groups
        __props__.__dict__["internet_service6_names"] = internet_service6_names
        __props__.__dict__["internet_service6_negate"] = internet_service6_negate
        __props__.__dict__["internet_service6_src"] = internet_service6_src
        __props__.__dict__["internet_service6_src_custom_groups"] = internet_service6_src_custom_groups
        __props__.__dict__["internet_service6_src_customs"] = internet_service6_src_customs
        __props__.__dict__["internet_service6_src_groups"] = internet_service6_src_groups
        __props__.__dict__["internet_service6_src_names"] = internet_service6_src_names
        __props__.__dict__["internet_service6_src_negate"] = internet_service6_src_negate
        __props__.__dict__["internet_service_custom_groups"] = internet_service_custom_groups
        __props__.__dict__["internet_service_customs"] = internet_service_customs
        __props__.__dict__["internet_service_groups"] = internet_service_groups
        __props__.__dict__["internet_service_ids"] = internet_service_ids
        __props__.__dict__["internet_service_names"] = internet_service_names
        __props__.__dict__["internet_service_negate"] = internet_service_negate
        __props__.__dict__["internet_service_src"] = internet_service_src
        __props__.__dict__["internet_service_src_custom_groups"] = internet_service_src_custom_groups
        __props__.__dict__["internet_service_src_customs"] = internet_service_src_customs
        __props__.__dict__["internet_service_src_groups"] = internet_service_src_groups
        __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
        __props__.__dict__["internet_service_src_names"] = internet_service_src_names
        __props__.__dict__["internet_service_src_negate"] = internet_service_src_negate
        __props__.__dict__["ippool"] = ippool
        __props__.__dict__["ips_sensor"] = ips_sensor
        __props__.__dict__["ips_voip_filter"] = ips_voip_filter
        __props__.__dict__["label"] = label
        __props__.__dict__["learning_mode"] = learning_mode
        __props__.__dict__["logtraffic"] = logtraffic
        __props__.__dict__["logtraffic_start"] = logtraffic_start
        __props__.__dict__["match_vip"] = match_vip
        __props__.__dict__["match_vip_only"] = match_vip_only
        __props__.__dict__["name"] = name
        __props__.__dict__["nat"] = nat
        __props__.__dict__["nat46"] = nat46
        __props__.__dict__["nat64"] = nat64
        __props__.__dict__["natinbound"] = natinbound
        __props__.__dict__["natip"] = natip
        __props__.__dict__["natoutbound"] = natoutbound
        __props__.__dict__["network_service_dynamics"] = network_service_dynamics
        __props__.__dict__["network_service_src_dynamics"] = network_service_src_dynamics
        __props__.__dict__["np_acceleration"] = np_acceleration
        __props__.__dict__["ntlm"] = ntlm
        __props__.__dict__["ntlm_enabled_browsers"] = ntlm_enabled_browsers
        __props__.__dict__["ntlm_guest"] = ntlm_guest
        __props__.__dict__["outbound"] = outbound
        __props__.__dict__["passive_wan_health_measurement"] = passive_wan_health_measurement
        __props__.__dict__["pcp_inbound"] = pcp_inbound
        __props__.__dict__["pcp_outbound"] = pcp_outbound
        __props__.__dict__["pcp_poolnames"] = pcp_poolnames
        __props__.__dict__["per_ip_shaper"] = per_ip_shaper
        __props__.__dict__["permit_any_host"] = permit_any_host
        __props__.__dict__["permit_stun_host"] = permit_stun_host
        __props__.__dict__["policy_expiry"] = policy_expiry
        __props__.__dict__["policy_expiry_date"] = policy_expiry_date
        __props__.__dict__["policy_expiry_date_utc"] = policy_expiry_date_utc
        __props__.__dict__["policyid"] = policyid
        __props__.__dict__["poolname6s"] = poolname6s
        __props__.__dict__["poolnames"] = poolnames
        __props__.__dict__["profile_group"] = profile_group
        __props__.__dict__["profile_protocol_options"] = profile_protocol_options
        __props__.__dict__["profile_type"] = profile_type
        __props__.__dict__["radius_mac_auth_bypass"] = radius_mac_auth_bypass
        __props__.__dict__["redirect_url"] = redirect_url
        __props__.__dict__["replacemsg_override_group"] = replacemsg_override_group
        __props__.__dict__["reputation_direction"] = reputation_direction
        __props__.__dict__["reputation_direction6"] = reputation_direction6
        __props__.__dict__["reputation_minimum"] = reputation_minimum
        __props__.__dict__["reputation_minimum6"] = reputation_minimum6
        __props__.__dict__["rsso"] = rsso
        __props__.__dict__["rtp_addrs"] = rtp_addrs
        __props__.__dict__["rtp_nat"] = rtp_nat
        __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["schedule_timeout"] = schedule_timeout
        __props__.__dict__["sctp_filter_profile"] = sctp_filter_profile
        __props__.__dict__["send_deny_packet"] = send_deny_packet
        __props__.__dict__["service_negate"] = service_negate
        __props__.__dict__["services"] = services
        __props__.__dict__["session_ttl"] = session_ttl
        __props__.__dict__["sgt_check"] = sgt_check
        __props__.__dict__["sgts"] = sgts
        __props__.__dict__["spamfilter_profile"] = spamfilter_profile
        __props__.__dict__["src_vendor_macs"] = src_vendor_macs
        __props__.__dict__["srcaddr6_negate"] = srcaddr6_negate
        __props__.__dict__["srcaddr6s"] = srcaddr6s
        __props__.__dict__["srcaddr_negate"] = srcaddr_negate
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["srcintfs"] = srcintfs
        __props__.__dict__["ssh_filter_profile"] = ssh_filter_profile
        __props__.__dict__["ssh_policy_redirect"] = ssh_policy_redirect
        __props__.__dict__["ssl_mirror"] = ssl_mirror
        __props__.__dict__["ssl_mirror_intfs"] = ssl_mirror_intfs
        __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
        __props__.__dict__["status"] = status
        __props__.__dict__["tcp_mss_receiver"] = tcp_mss_receiver
        __props__.__dict__["tcp_mss_sender"] = tcp_mss_sender
        __props__.__dict__["tcp_session_without_syn"] = tcp_session_without_syn
        __props__.__dict__["timeout_send_rst"] = timeout_send_rst
        __props__.__dict__["tos"] = tos
        __props__.__dict__["tos_mask"] = tos_mask
        __props__.__dict__["tos_negate"] = tos_negate
        __props__.__dict__["traffic_shaper"] = traffic_shaper
        __props__.__dict__["traffic_shaper_reverse"] = traffic_shaper_reverse
        __props__.__dict__["url_categories"] = url_categories
        __props__.__dict__["users"] = users
        __props__.__dict__["utm_status"] = utm_status
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["videofilter_profile"] = videofilter_profile
        __props__.__dict__["virtual_patch_profile"] = virtual_patch_profile
        __props__.__dict__["vlan_cos_fwd"] = vlan_cos_fwd
        __props__.__dict__["vlan_cos_rev"] = vlan_cos_rev
        __props__.__dict__["vlan_filter"] = vlan_filter
        __props__.__dict__["voip_profile"] = voip_profile
        __props__.__dict__["vpntunnel"] = vpntunnel
        __props__.__dict__["waf_profile"] = waf_profile
        __props__.__dict__["wanopt"] = wanopt
        __props__.__dict__["wanopt_detection"] = wanopt_detection
        __props__.__dict__["wanopt_passive_opt"] = wanopt_passive_opt
        __props__.__dict__["wanopt_peer"] = wanopt_peer
        __props__.__dict__["wanopt_profile"] = wanopt_profile
        __props__.__dict__["wccp"] = wccp
        __props__.__dict__["webcache"] = webcache
        __props__.__dict__["webcache_https"] = webcache_https
        __props__.__dict__["webfilter_profile"] = webfilter_profile
        __props__.__dict__["webproxy_forward_server"] = webproxy_forward_server
        __props__.__dict__["webproxy_profile"] = webproxy_profile
        __props__.__dict__["wsso"] = wsso
        __props__.__dict__["ztna_device_ownership"] = ztna_device_ownership
        __props__.__dict__["ztna_ems_tag_secondaries"] = ztna_ems_tag_secondaries
        __props__.__dict__["ztna_ems_tags"] = ztna_ems_tags
        __props__.__dict__["ztna_geo_tags"] = ztna_geo_tags
        __props__.__dict__["ztna_policy_redirect"] = ztna_policy_redirect
        __props__.__dict__["ztna_status"] = ztna_status
        __props__.__dict__["ztna_tags_match_logic"] = ztna_tags_match_logic
        return Policy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Policy action. On FortiOS versions 6.2.0-6.4.0: allow/deny/ipsec. On FortiOS versions >= 6.4.1: accept/deny/ipsec. Valid values: `accept`, `deny`, `ipsec`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> pulumi.Output[str]:
        """
        Enable/disable anti-replay check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "anti_replay")

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyAppCategory']]]:
        """
        Application category ID list. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyAppGroup']]]:
        """
        Application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyApplication']]]:
        """
        Application ID list. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> pulumi.Output[Optional[str]]:
        """
        HTTPS server certificate for policy authentication.
        """
        return pulumi.get(self, "auth_cert")

    @property
    @pulumi.getter(name="authPath")
    def auth_path(self) -> pulumi.Output[str]:
        """
        Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_path")

    @property
    @pulumi.getter(name="authRedirectAddr")
    def auth_redirect_addr(self) -> pulumi.Output[Optional[str]]:
        """
        HTTP-to-HTTPS redirect address for firewall authentication.
        """
        return pulumi.get(self, "auth_redirect_addr")

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> pulumi.Output[str]:
        """
        Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_asic_offload")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="blockNotification")
    def block_notification(self) -> pulumi.Output[str]:
        """
        Enable/disable block notification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "block_notification")

    @property
    @pulumi.getter(name="captivePortalExempt")
    def captive_portal_exempt(self) -> pulumi.Output[str]:
        """
        Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "captive_portal_exempt")

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> pulumi.Output[str]:
        """
        Enable/disable capture packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capture_packet")

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyCustomLogField']]]:
        """
        Custom fields to append to log messages for this policy. The structure of `custom_log_fields` block is documented below.
        """
        return pulumi.get(self, "custom_log_fields")

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> pulumi.Output[Optional[str]]:
        """
        Decrypted traffic mirror.
        """
        return pulumi.get(self, "decrypted_traffic_mirror")

    @property
    @pulumi.getter(name="delayTcpNpuSession")
    def delay_tcp_npu_session(self) -> pulumi.Output[str]:
        """
        Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "delay_tcp_npu_session")

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyDevice']]]:
        """
        Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="diameterFilterProfile")
    def diameter_filter_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing Diameter filter profile.
        """
        return pulumi.get(self, "diameter_filter_profile")

    @property
    @pulumi.getter(name="diffservCopy")
    def diffserv_copy(self) -> pulumi.Output[str]:
        """
        Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_copy")

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> pulumi.Output[str]:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_forward")

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> pulumi.Output[str]:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_reverse")

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> pulumi.Output[str]:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> pulumi.Output[str]:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @property
    @pulumi.getter
    def disclaimer(self) -> pulumi.Output[str]:
        """
        Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "disclaimer")

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing DLP profile.
        """
        return pulumi.get(self, "dlp_profile")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profile")

    @property
    @pulumi.getter
    def dsri(self) -> pulumi.Output[str]:
        """
        Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dsri")

    @property
    @pulumi.getter(name="dstaddr6Negate")
    def dstaddr6_negate(self) -> pulumi.Output[str]:
        """
        When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr6_negate")

    @property
    @pulumi.getter
    def dstaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyDstaddr6']]]:
        """
        Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> pulumi.Output[str]:
        """
        When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyDstaddr']]]:
        """
        Destination address and address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Output[Sequence['outputs.PolicyDstintf']]:
        """
        Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter(name="dynamicShaping")
    def dynamic_shaping(self) -> pulumi.Output[str]:
        """
        Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dynamic_shaping")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emailCollect")
    def email_collect(self) -> pulumi.Output[str]:
        """
        Enable/disable email collection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "email_collect")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter
    def fec(self) -> pulumi.Output[str]:
        """
        Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fec")

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing file-filter profile.
        """
        return pulumi.get(self, "file_filter_profile")

    @property
    @pulumi.getter(name="firewallSessionDirty")
    def firewall_session_dirty(self) -> pulumi.Output[str]:
        """
        How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
        """
        return pulumi.get(self, "firewall_session_dirty")

    @property
    @pulumi.getter
    def fixedport(self) -> pulumi.Output[str]:
        """
        Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fixedport")

    @property
    @pulumi.getter
    def fsso(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fsso")

    @property
    @pulumi.getter(name="fssoAgentForNtlm")
    def fsso_agent_for_ntlm(self) -> pulumi.Output[Optional[str]]:
        """
        FSSO agent to use for NTLM authentication.
        """
        return pulumi.get(self, "fsso_agent_for_ntlm")

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyFssoGroup']]]:
        """
        Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @property
    @pulumi.getter(name="geoipAnycast")
    def geoip_anycast(self) -> pulumi.Output[str]:
        """
        Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "geoip_anycast")

    @property
    @pulumi.getter(name="geoipMatch")
    def geoip_match(self) -> pulumi.Output[str]:
        """
        Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
        """
        return pulumi.get(self, "geoip_match")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> pulumi.Output[Optional[str]]:
        """
        Label for the policy that appears when the GUI is in Global View mode.
        """
        return pulumi.get(self, "global_label")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyGroup']]]:
        """
        Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> pulumi.Output[str]:
        """
        Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_policy_redirect")

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @property
    @pulumi.getter(name="identityBasedRoute")
    def identity_based_route(self) -> pulumi.Output[Optional[str]]:
        """
        Name of identity-based routing rule.
        """
        return pulumi.get(self, "identity_based_route")

    @property
    @pulumi.getter
    def inbound(self) -> pulumi.Output[str]:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inbound")

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> pulumi.Output[str]:
        """
        Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        """
        return pulumi.get(self, "inspection_mode")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> pulumi.Output[str]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetService6")
    def internet_service6(self) -> pulumi.Output[str]:
        """
        Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6")

    @property
    @pulumi.getter(name="internetService6CustomGroups")
    def internet_service6_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetService6CustomGroup']]]:
        """
        Custom Internet Service6 group name. The structure of `internet_service6_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_custom_groups")

    @property
    @pulumi.getter(name="internetService6Customs")
    def internet_service6_customs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetService6Custom']]]:
        """
        Custom IPv6 Internet Service name. The structure of `internet_service6_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_customs")

    @property
    @pulumi.getter(name="internetService6Groups")
    def internet_service6_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetService6Group']]]:
        """
        Internet Service group name. The structure of `internet_service6_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_groups")

    @property
    @pulumi.getter(name="internetService6Names")
    def internet_service6_names(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetService6Name']]]:
        """
        IPv6 Internet Service name. The structure of `internet_service6_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_names")

    @property
    @pulumi.getter(name="internetService6Negate")
    def internet_service6_negate(self) -> pulumi.Output[str]:
        """
        When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_negate")

    @property
    @pulumi.getter(name="internetService6Src")
    def internet_service6_src(self) -> pulumi.Output[str]:
        """
        Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_src")

    @property
    @pulumi.getter(name="internetService6SrcCustomGroups")
    def internet_service6_src_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetService6SrcCustomGroup']]]:
        """
        Custom Internet Service6 source group name. The structure of `internet_service6_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_custom_groups")

    @property
    @pulumi.getter(name="internetService6SrcCustoms")
    def internet_service6_src_customs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetService6SrcCustom']]]:
        """
        Custom IPv6 Internet Service source name. The structure of `internet_service6_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_customs")

    @property
    @pulumi.getter(name="internetService6SrcGroups")
    def internet_service6_src_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetService6SrcGroup']]]:
        """
        Internet Service6 source group name. The structure of `internet_service6_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_groups")

    @property
    @pulumi.getter(name="internetService6SrcNames")
    def internet_service6_src_names(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetService6SrcName']]]:
        """
        IPv6 Internet Service source name. The structure of `internet_service6_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_src_names")

    @property
    @pulumi.getter(name="internetService6SrcNegate")
    def internet_service6_src_negate(self) -> pulumi.Output[str]:
        """
        When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service6_src_negate")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceCustomGroup']]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceCustom']]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceGroup']]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceId']]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceName']]]:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> pulumi.Output[str]:
        """
        When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_negate")

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> pulumi.Output[str]:
        """
        Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src")

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceSrcCustomGroup']]]:
        """
        Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_custom_groups")

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceSrcCustom']]]:
        """
        Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_customs")

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceSrcGroup']]]:
        """
        Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_groups")

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceSrcId']]]:
        """
        Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceSrcName']]]:
        """
        Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_names")

    @property
    @pulumi.getter(name="internetServiceSrcNegate")
    def internet_service_src_negate(self) -> pulumi.Output[str]:
        """
        When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src_negate")

    @property
    @pulumi.getter
    def ippool(self) -> pulumi.Output[str]:
        """
        Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ippool")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing VoIP (ips) profile.
        """
        return pulumi.get(self, "ips_voip_filter")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[Optional[str]]:
        """
        Label for the policy that appears when the GUI is in Section View mode.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="learningMode")
    def learning_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "learning_mode")

    @property
    @pulumi.getter
    def logtraffic(self) -> pulumi.Output[str]:
        """
        Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> pulumi.Output[str]:
        """
        Record logs when a session starts. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @property
    @pulumi.getter(name="matchVip")
    def match_vip(self) -> pulumi.Output[str]:
        """
        Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "match_vip")

    @property
    @pulumi.getter(name="matchVipOnly")
    def match_vip_only(self) -> pulumi.Output[str]:
        """
        Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "match_vip_only")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat(self) -> pulumi.Output[str]:
        """
        Enable/disable source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter
    def nat46(self) -> pulumi.Output[str]:
        """
        Enable/disable NAT46. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46")

    @property
    @pulumi.getter
    def nat64(self) -> pulumi.Output[str]:
        """
        Enable/disable NAT64. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat64")

    @property
    @pulumi.getter
    def natinbound(self) -> pulumi.Output[str]:
        """
        Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "natinbound")

    @property
    @pulumi.getter
    def natip(self) -> pulumi.Output[str]:
        """
        Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
        """
        return pulumi.get(self, "natip")

    @property
    @pulumi.getter
    def natoutbound(self) -> pulumi.Output[str]:
        """
        Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "natoutbound")

    @property
    @pulumi.getter(name="networkServiceDynamics")
    def network_service_dynamics(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyNetworkServiceDynamic']]]:
        """
        Dynamic Network Service name. The structure of `network_service_dynamic` block is documented below.
        """
        return pulumi.get(self, "network_service_dynamics")

    @property
    @pulumi.getter(name="networkServiceSrcDynamics")
    def network_service_src_dynamics(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyNetworkServiceSrcDynamic']]]:
        """
        Dynamic Network Service source name. The structure of `network_service_src_dynamic` block is documented below.
        """
        return pulumi.get(self, "network_service_src_dynamics")

    @property
    @pulumi.getter(name="npAcceleration")
    def np_acceleration(self) -> pulumi.Output[str]:
        """
        Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "np_acceleration")

    @property
    @pulumi.getter
    def ntlm(self) -> pulumi.Output[str]:
        """
        Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntlm")

    @property
    @pulumi.getter(name="ntlmEnabledBrowsers")
    def ntlm_enabled_browsers(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyNtlmEnabledBrowser']]]:
        """
        HTTP-User-Agent value of supported browsers. The structure of `ntlm_enabled_browsers` block is documented below.
        """
        return pulumi.get(self, "ntlm_enabled_browsers")

    @property
    @pulumi.getter(name="ntlmGuest")
    def ntlm_guest(self) -> pulumi.Output[str]:
        """
        Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntlm_guest")

    @property
    @pulumi.getter
    def outbound(self) -> pulumi.Output[str]:
        """
        Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbound")

    @property
    @pulumi.getter(name="passiveWanHealthMeasurement")
    def passive_wan_health_measurement(self) -> pulumi.Output[str]:
        """
        Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive_wan_health_measurement")

    @property
    @pulumi.getter(name="pcpInbound")
    def pcp_inbound(self) -> pulumi.Output[str]:
        """
        Enable/disable PCP inbound DNAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pcp_inbound")

    @property
    @pulumi.getter(name="pcpOutbound")
    def pcp_outbound(self) -> pulumi.Output[str]:
        """
        Enable/disable PCP outbound SNAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pcp_outbound")

    @property
    @pulumi.getter(name="pcpPoolnames")
    def pcp_poolnames(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyPcpPoolname']]]:
        """
        PCP pool names. The structure of `pcp_poolname` block is documented below.
        """
        return pulumi.get(self, "pcp_poolnames")

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> pulumi.Output[Optional[str]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @property
    @pulumi.getter(name="permitAnyHost")
    def permit_any_host(self) -> pulumi.Output[str]:
        """
        Accept UDP packets from any host. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_any_host")

    @property
    @pulumi.getter(name="permitStunHost")
    def permit_stun_host(self) -> pulumi.Output[str]:
        """
        Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "permit_stun_host")

    @property
    @pulumi.getter(name="policyExpiry")
    def policy_expiry(self) -> pulumi.Output[str]:
        """
        Enable/disable policy expiry. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "policy_expiry")

    @property
    @pulumi.getter(name="policyExpiryDate")
    def policy_expiry_date(self) -> pulumi.Output[str]:
        """
        Policy expiry date (YYYY-MM-DD HH:MM:SS).
        """
        return pulumi.get(self, "policy_expiry_date")

    @property
    @pulumi.getter(name="policyExpiryDateUtc")
    def policy_expiry_date_utc(self) -> pulumi.Output[Optional[str]]:
        """
        Policy expiry date and time, in epoch format.
        """
        return pulumi.get(self, "policy_expiry_date_utc")

    @property
    @pulumi.getter
    def policyid(self) -> pulumi.Output[int]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def poolname6s(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyPoolname6']]]:
        """
        IPv6 pool names. The structure of `poolname6` block is documented below.
        """
        return pulumi.get(self, "poolname6s")

    @property
    @pulumi.getter
    def poolnames(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyPoolname']]]:
        """
        IP Pool names. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> pulumi.Output[Optional[str]]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> pulumi.Output[str]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> pulumi.Output[str]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter(name="radiusMacAuthBypass")
    def radius_mac_auth_bypass(self) -> pulumi.Output[str]:
        """
        Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "radius_mac_auth_bypass")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Output[Optional[str]]:
        """
        URL users are directed to after seeing and accepting the disclaimer or authenticating.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> pulumi.Output[Optional[str]]:
        """
        Override the default replacement message group for this policy.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @property
    @pulumi.getter(name="reputationDirection")
    def reputation_direction(self) -> pulumi.Output[str]:
        """
        Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
        """
        return pulumi.get(self, "reputation_direction")

    @property
    @pulumi.getter(name="reputationDirection6")
    def reputation_direction6(self) -> pulumi.Output[str]:
        """
        Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
        """
        return pulumi.get(self, "reputation_direction6")

    @property
    @pulumi.getter(name="reputationMinimum")
    def reputation_minimum(self) -> pulumi.Output[Optional[int]]:
        """
        Minimum Reputation to take action.
        """
        return pulumi.get(self, "reputation_minimum")

    @property
    @pulumi.getter(name="reputationMinimum6")
    def reputation_minimum6(self) -> pulumi.Output[Optional[int]]:
        """
        IPv6 Minimum Reputation to take action.
        """
        return pulumi.get(self, "reputation_minimum6")

    @property
    @pulumi.getter
    def rsso(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rsso")

    @property
    @pulumi.getter(name="rtpAddrs")
    def rtp_addrs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyRtpAddr']]]:
        """
        Address names if this is an RTP NAT policy. The structure of `rtp_addr` block is documented below.
        """
        return pulumi.get(self, "rtp_addrs")

    @property
    @pulumi.getter(name="rtpNat")
    def rtp_nat(self) -> pulumi.Output[str]:
        """
        Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rtp_nat")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> pulumi.Output[Optional[str]]:
        """
        Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[Optional[str]]:
        """
        Schedule name.(Default is `always`)
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="scheduleTimeout")
    def schedule_timeout(self) -> pulumi.Output[str]:
        """
        Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "schedule_timeout")

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing SCTP filter profile.
        """
        return pulumi.get(self, "sctp_filter_profile")

    @property
    @pulumi.getter(name="sendDenyPacket")
    def send_deny_packet(self) -> pulumi.Output[str]:
        """
        Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "send_deny_packet")

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> pulumi.Output[str]:
        """
        When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyService']]]:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> pulumi.Output[Optional[int]]:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="sgtCheck")
    def sgt_check(self) -> pulumi.Output[str]:
        """
        Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sgt_check")

    @property
    @pulumi.getter
    def sgts(self) -> pulumi.Output[Optional[Sequence['outputs.PolicySgt']]]:
        """
        Security group tags. The structure of `sgt` block is documented below.
        """
        return pulumi.get(self, "sgts")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter(name="srcVendorMacs")
    def src_vendor_macs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicySrcVendorMac']]]:
        """
        Vendor MAC source ID. The structure of `src_vendor_mac` block is documented below.
        """
        return pulumi.get(self, "src_vendor_macs")

    @property
    @pulumi.getter(name="srcaddr6Negate")
    def srcaddr6_negate(self) -> pulumi.Output[str]:
        """
        When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr6_negate")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.PolicySrcaddr6']]]:
        """
        Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> pulumi.Output[str]:
        """
        When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicySrcaddr']]]:
        """
        Source address and address group names. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Output[Sequence['outputs.PolicySrcintf']]:
        """
        Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> pulumi.Output[str]:
        """
        Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @property
    @pulumi.getter(name="sslMirror")
    def ssl_mirror(self) -> pulumi.Output[Optional[str]]:
        """
        Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_mirror")

    @property
    @pulumi.getter(name="sslMirrorIntfs")
    def ssl_mirror_intfs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicySslMirrorIntf']]]:
        """
        SSL mirror interface name. The structure of `ssl_mirror_intf` block is documented below.
        """
        return pulumi.get(self, "ssl_mirror_intfs")

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable or disable this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> pulumi.Output[Optional[int]]:
        """
        Receiver TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> pulumi.Output[Optional[int]]:
        """
        Sender TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_sender")

    @property
    @pulumi.getter(name="tcpSessionWithoutSyn")
    def tcp_session_without_syn(self) -> pulumi.Output[str]:
        """
        Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
        """
        return pulumi.get(self, "tcp_session_without_syn")

    @property
    @pulumi.getter(name="timeoutSendRst")
    def timeout_send_rst(self) -> pulumi.Output[str]:
        """
        Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "timeout_send_rst")

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Output[str]:
        """
        ToS (Type of Service) value used for comparison.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> pulumi.Output[str]:
        """
        Non-zero bit positions are used for comparison while zero bit positions are ignored.
        """
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter(name="tosNegate")
    def tos_negate(self) -> pulumi.Output[str]:
        """
        Enable negated TOS match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tos_negate")

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> pulumi.Output[Optional[str]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> pulumi.Output[Optional[str]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyUrlCategory']]]:
        """
        URL category ID list. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyUser']]]:
        """
        Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> pulumi.Output[str]:
        """
        Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_status")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing VideoFilter profile.
        """
        return pulumi.get(self, "videofilter_profile")

    @property
    @pulumi.getter(name="virtualPatchProfile")
    def virtual_patch_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing virtual-patch profile.
        """
        return pulumi.get(self, "virtual_patch_profile")

    @property
    @pulumi.getter(name="vlanCosFwd")
    def vlan_cos_fwd(self) -> pulumi.Output[int]:
        """
        VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
        """
        return pulumi.get(self, "vlan_cos_fwd")

    @property
    @pulumi.getter(name="vlanCosRev")
    def vlan_cos_rev(self) -> pulumi.Output[int]:
        """
        VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
        """
        return pulumi.get(self, "vlan_cos_rev")

    @property
    @pulumi.getter(name="vlanFilter")
    def vlan_filter(self) -> pulumi.Output[Optional[str]]:
        """
        Set VLAN filters.
        """
        return pulumi.get(self, "vlan_filter")

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing VoIP (voipd) profile.
        """
        return pulumi.get(self, "voip_profile")

    @property
    @pulumi.getter
    def vpntunnel(self) -> pulumi.Output[Optional[str]]:
        """
        Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        """
        return pulumi.get(self, "vpntunnel")

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @property
    @pulumi.getter
    def wanopt(self) -> pulumi.Output[str]:
        """
        Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wanopt")

    @property
    @pulumi.getter(name="wanoptDetection")
    def wanopt_detection(self) -> pulumi.Output[str]:
        """
        WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        """
        return pulumi.get(self, "wanopt_detection")

    @property
    @pulumi.getter(name="wanoptPassiveOpt")
    def wanopt_passive_opt(self) -> pulumi.Output[str]:
        """
        WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
        """
        return pulumi.get(self, "wanopt_passive_opt")

    @property
    @pulumi.getter(name="wanoptPeer")
    def wanopt_peer(self) -> pulumi.Output[Optional[str]]:
        """
        WAN optimization peer.
        """
        return pulumi.get(self, "wanopt_peer")

    @property
    @pulumi.getter(name="wanoptProfile")
    def wanopt_profile(self) -> pulumi.Output[Optional[str]]:
        """
        WAN optimization profile.
        """
        return pulumi.get(self, "wanopt_profile")

    @property
    @pulumi.getter
    def wccp(self) -> pulumi.Output[str]:
        """
        Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wccp")

    @property
    @pulumi.getter
    def webcache(self) -> pulumi.Output[str]:
        """
        Enable/disable web cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webcache")

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> pulumi.Output[str]:
        """
        Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "webcache_https")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> pulumi.Output[Optional[str]]:
        """
        Web proxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Webproxy profile name.
        """
        return pulumi.get(self, "webproxy_profile")

    @property
    @pulumi.getter
    def wsso(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wsso")

    @property
    @pulumi.getter(name="ztnaDeviceOwnership")
    def ztna_device_ownership(self) -> pulumi.Output[str]:
        """
        Enable/disable zero trust device ownership. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_device_ownership")

    @property
    @pulumi.getter(name="ztnaEmsTagSecondaries")
    def ztna_ems_tag_secondaries(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyZtnaEmsTagSecondary']]]:
        """
        Source ztna-ems-tag-secondary names. The structure of `ztna_ems_tag_secondary` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tag_secondaries")

    @property
    @pulumi.getter(name="ztnaEmsTags")
    def ztna_ems_tags(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyZtnaEmsTag']]]:
        """
        Source ztna-ems-tag names. The structure of `ztna_ems_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tags")

    @property
    @pulumi.getter(name="ztnaGeoTags")
    def ztna_geo_tags(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyZtnaGeoTag']]]:
        """
        Source ztna-geo-tag names. The structure of `ztna_geo_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_geo_tags")

    @property
    @pulumi.getter(name="ztnaPolicyRedirect")
    def ztna_policy_redirect(self) -> pulumi.Output[str]:
        """
        Redirect ZTNA traffic to matching Access-Proxy proxy-policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_policy_redirect")

    @property
    @pulumi.getter(name="ztnaStatus")
    def ztna_status(self) -> pulumi.Output[str]:
        """
        Enable/disable zero trust access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_status")

    @property
    @pulumi.getter(name="ztnaTagsMatchLogic")
    def ztna_tags_match_logic(self) -> pulumi.Output[str]:
        """
        ZTNA tag matching logic. Valid values: `or`, `and`.
        """
        return pulumi.get(self, "ztna_tags_match_logic")

