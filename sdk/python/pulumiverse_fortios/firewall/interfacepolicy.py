# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InterfacepolicyArgs', 'Interfacepolicy']

@pulumi.input_type
class InterfacepolicyArgs:
    def __init__(__self__, *,
                 dstaddrs: pulumi.Input[Sequence[pulumi.Input['InterfacepolicyDstaddrArgs']]],
                 interface: pulumi.Input[str],
                 services: pulumi.Input[Sequence[pulumi.Input['InterfacepolicyServiceArgs']]],
                 srcaddrs: pulumi.Input[Sequence[pulumi.Input['InterfacepolicySrcaddrArgs']]],
                 address_type: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 casb_profile_status: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Interfacepolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input['InterfacepolicyDstaddrArgs']]] dstaddrs: Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] interface: Monitored interface name from available interfaces.
        :param pulumi.Input[Sequence[pulumi.Input['InterfacepolicyServiceArgs']]] services: Service object from available options. The structure of `service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['InterfacepolicySrcaddrArgs']]] srcaddrs: Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] address_type: Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] application_list: Application list name.
        :param pulumi.Input[str] application_list_status: Enable/disable application control. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Antivirus profile.
        :param pulumi.Input[str] av_profile_status: Enable/disable antivirus. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: CASB profile.
        :param pulumi.Input[str] casb_profile_status: Enable/disable CASB. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[str] dlp_profile: DLP profile name.
        :param pulumi.Input[str] dlp_profile_status: Enable/disable DLP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_sensor: DLP sensor name.
        :param pulumi.Input[str] dlp_sensor_status: Enable/disable DLP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dsri: Enable/disable DSRI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Email filter profile.
        :param pulumi.Input[str] emailfilter_profile_status: Enable/disable email filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ips_sensor: IPS sensor name.
        :param pulumi.Input[str] ips_sensor_status: Enable/disable IPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] label: Label.
        :param pulumi.Input[str] logtraffic: Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] spamfilter_profile: Antispam profile.
        :param pulumi.Input[str] spamfilter_profile_status: Enable/disable antispam. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webfilter_profile: Web filter profile.
        :param pulumi.Input[str] webfilter_profile_status: Enable/disable web filtering. Valid values: `enable`, `disable`.
        """
        pulumi.set(__self__, "dstaddrs", dstaddrs)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "srcaddrs", srcaddrs)
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if application_list_status is not None:
            pulumi.set(__self__, "application_list_status", application_list_status)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if av_profile_status is not None:
            pulumi.set(__self__, "av_profile_status", av_profile_status)
        if casb_profile is not None:
            pulumi.set(__self__, "casb_profile", casb_profile)
        if casb_profile_status is not None:
            pulumi.set(__self__, "casb_profile_status", casb_profile_status)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_profile_status is not None:
            pulumi.set(__self__, "dlp_profile_status", dlp_profile_status)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dlp_sensor_status is not None:
            pulumi.set(__self__, "dlp_sensor_status", dlp_sensor_status)
        if dsri is not None:
            pulumi.set(__self__, "dsri", dsri)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if emailfilter_profile_status is not None:
            pulumi.set(__self__, "emailfilter_profile_status", emailfilter_profile_status)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_sensor_status is not None:
            pulumi.set(__self__, "ips_sensor_status", ips_sensor_status)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if spamfilter_profile_status is not None:
            pulumi.set(__self__, "spamfilter_profile_status", spamfilter_profile_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webfilter_profile_status is not None:
            pulumi.set(__self__, "webfilter_profile_status", webfilter_profile_status)

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Input[Sequence[pulumi.Input['InterfacepolicyDstaddrArgs']]]:
        """
        Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: pulumi.Input[Sequence[pulumi.Input['InterfacepolicyDstaddrArgs']]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        Monitored interface name from available interfaces.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def services(self) -> pulumi.Input[Sequence[pulumi.Input['InterfacepolicyServiceArgs']]]:
        """
        Service object from available options. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: pulumi.Input[Sequence[pulumi.Input['InterfacepolicyServiceArgs']]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Input[Sequence[pulumi.Input['InterfacepolicySrcaddrArgs']]]:
        """
        Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: pulumi.Input[Sequence[pulumi.Input['InterfacepolicySrcaddrArgs']]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[pulumi.Input[str]]:
        """
        Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "address_type")

    @address_type.setter
    def address_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_type", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Application list name.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="applicationListStatus")
    def application_list_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable application control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "application_list_status")

    @application_list_status.setter
    def application_list_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list_status", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="avProfileStatus")
    def av_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable antivirus. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_profile_status")

    @av_profile_status.setter
    def av_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile_status", value)

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> Optional[pulumi.Input[str]]:
        """
        CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @casb_profile.setter
    def casb_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile", value)

    @property
    @pulumi.getter(name="casbProfileStatus")
    def casb_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable CASB. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "casb_profile_status")

    @casb_profile_status.setter
    def casb_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile_status", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        DLP profile name.
        """
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpProfileStatus")
    def dlp_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_profile_status")

    @dlp_profile_status.setter
    def dlp_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile_status", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        DLP sensor name.
        """
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dlpSensorStatus")
    def dlp_sensor_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_sensor_status")

    @dlp_sensor_status.setter
    def dlp_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor_status", value)

    @property
    @pulumi.getter
    def dsri(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DSRI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dsri")

    @dsri.setter
    def dsri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsri", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter(name="emailfilterProfileStatus")
    def emailfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable email filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emailfilter_profile_status")

    @emailfilter_profile_status.setter
    def emailfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile_status", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        IPS sensor name.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsSensorStatus")
    def ips_sensor_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_sensor_status")

    @ips_sensor_status.setter
    def ips_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor_status", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Antispam profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="spamfilterProfileStatus")
    def spamfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable antispam. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spamfilter_profile_status")

    @spamfilter_profile_status.setter
    def spamfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webfilterProfileStatus")
    def webfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_profile_status")

    @webfilter_profile_status.setter
    def webfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile_status", value)


@pulumi.input_type
class _InterfacepolicyState:
    def __init__(__self__, *,
                 address_type: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 casb_profile_status: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['InterfacepolicyDstaddrArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['InterfacepolicyServiceArgs']]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['InterfacepolicySrcaddrArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Interfacepolicy resources.
        :param pulumi.Input[str] address_type: Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] application_list: Application list name.
        :param pulumi.Input[str] application_list_status: Enable/disable application control. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Antivirus profile.
        :param pulumi.Input[str] av_profile_status: Enable/disable antivirus. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: CASB profile.
        :param pulumi.Input[str] casb_profile_status: Enable/disable CASB. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[str] dlp_profile: DLP profile name.
        :param pulumi.Input[str] dlp_profile_status: Enable/disable DLP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_sensor: DLP sensor name.
        :param pulumi.Input[str] dlp_sensor_status: Enable/disable DLP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dsri: Enable/disable DSRI. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfacepolicyDstaddrArgs']]] dstaddrs: Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Email filter profile.
        :param pulumi.Input[str] emailfilter_profile_status: Enable/disable email filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Monitored interface name from available interfaces.
        :param pulumi.Input[str] ips_sensor: IPS sensor name.
        :param pulumi.Input[str] ips_sensor_status: Enable/disable IPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] label: Label.
        :param pulumi.Input[str] logtraffic: Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfacepolicyServiceArgs']]] services: Service object from available options. The structure of `service` block is documented below.
        :param pulumi.Input[str] spamfilter_profile: Antispam profile.
        :param pulumi.Input[str] spamfilter_profile_status: Enable/disable antispam. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfacepolicySrcaddrArgs']]] srcaddrs: Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] status: Enable/disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webfilter_profile: Web filter profile.
        :param pulumi.Input[str] webfilter_profile_status: Enable/disable web filtering. Valid values: `enable`, `disable`.
        """
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if application_list_status is not None:
            pulumi.set(__self__, "application_list_status", application_list_status)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if av_profile_status is not None:
            pulumi.set(__self__, "av_profile_status", av_profile_status)
        if casb_profile is not None:
            pulumi.set(__self__, "casb_profile", casb_profile)
        if casb_profile_status is not None:
            pulumi.set(__self__, "casb_profile_status", casb_profile_status)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_profile_status is not None:
            pulumi.set(__self__, "dlp_profile_status", dlp_profile_status)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dlp_sensor_status is not None:
            pulumi.set(__self__, "dlp_sensor_status", dlp_sensor_status)
        if dsri is not None:
            pulumi.set(__self__, "dsri", dsri)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if emailfilter_profile_status is not None:
            pulumi.set(__self__, "emailfilter_profile_status", emailfilter_profile_status)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_sensor_status is not None:
            pulumi.set(__self__, "ips_sensor_status", ips_sensor_status)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if spamfilter_profile_status is not None:
            pulumi.set(__self__, "spamfilter_profile_status", spamfilter_profile_status)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webfilter_profile_status is not None:
            pulumi.set(__self__, "webfilter_profile_status", webfilter_profile_status)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[pulumi.Input[str]]:
        """
        Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "address_type")

    @address_type.setter
    def address_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_type", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Application list name.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="applicationListStatus")
    def application_list_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable application control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "application_list_status")

    @application_list_status.setter
    def application_list_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list_status", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="avProfileStatus")
    def av_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable antivirus. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_profile_status")

    @av_profile_status.setter
    def av_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile_status", value)

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> Optional[pulumi.Input[str]]:
        """
        CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @casb_profile.setter
    def casb_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile", value)

    @property
    @pulumi.getter(name="casbProfileStatus")
    def casb_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable CASB. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "casb_profile_status")

    @casb_profile_status.setter
    def casb_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb_profile_status", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        DLP profile name.
        """
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpProfileStatus")
    def dlp_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_profile_status")

    @dlp_profile_status.setter
    def dlp_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile_status", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        DLP sensor name.
        """
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dlpSensorStatus")
    def dlp_sensor_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_sensor_status")

    @dlp_sensor_status.setter
    def dlp_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor_status", value)

    @property
    @pulumi.getter
    def dsri(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DSRI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dsri")

    @dsri.setter
    def dsri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsri", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfacepolicyDstaddrArgs']]]]:
        """
        Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfacepolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter(name="emailfilterProfileStatus")
    def emailfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable email filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emailfilter_profile_status")

    @emailfilter_profile_status.setter
    def emailfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile_status", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Monitored interface name from available interfaces.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        IPS sensor name.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsSensorStatus")
    def ips_sensor_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_sensor_status")

    @ips_sensor_status.setter
    def ips_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor_status", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfacepolicyServiceArgs']]]]:
        """
        Service object from available options. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfacepolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Antispam profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="spamfilterProfileStatus")
    def spamfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable antispam. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spamfilter_profile_status")

    @spamfilter_profile_status.setter
    def spamfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile_status", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfacepolicySrcaddrArgs']]]]:
        """
        Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfacepolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webfilterProfileStatus")
    def webfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_profile_status")

    @webfilter_profile_status.setter
    def webfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile_status", value)


class Interfacepolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_type: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 casb_profile_status: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicyDstaddrArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicyServiceArgs']]]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicySrcaddrArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IPv4 interface policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Interfacepolicy("trname",
            address_type="ipv4",
            application_list_status="disable",
            av_profile_status="disable",
            dlp_sensor_status="disable",
            dsri="disable",
            dstaddrs=[fortios.firewall.InterfacepolicyDstaddrArgs(
                name="all",
            )],
            interface="port4",
            ips_sensor_status="disable",
            logtraffic="all",
            policyid=1,
            scan_botnet_connections="block",
            services=[fortios.firewall.InterfacepolicyServiceArgs(
                name="ALL",
            )],
            spamfilter_profile_status="disable",
            srcaddrs=[fortios.firewall.InterfacepolicySrcaddrArgs(
                name="all",
            )],
            status="enable",
            webfilter_profile_status="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall InterfacePolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/interfacepolicy:Interfacepolicy labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/interfacepolicy:Interfacepolicy labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address_type: Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] application_list: Application list name.
        :param pulumi.Input[str] application_list_status: Enable/disable application control. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Antivirus profile.
        :param pulumi.Input[str] av_profile_status: Enable/disable antivirus. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: CASB profile.
        :param pulumi.Input[str] casb_profile_status: Enable/disable CASB. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[str] dlp_profile: DLP profile name.
        :param pulumi.Input[str] dlp_profile_status: Enable/disable DLP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_sensor: DLP sensor name.
        :param pulumi.Input[str] dlp_sensor_status: Enable/disable DLP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dsri: Enable/disable DSRI. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicyDstaddrArgs']]]] dstaddrs: Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Email filter profile.
        :param pulumi.Input[str] emailfilter_profile_status: Enable/disable email filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Monitored interface name from available interfaces.
        :param pulumi.Input[str] ips_sensor: IPS sensor name.
        :param pulumi.Input[str] ips_sensor_status: Enable/disable IPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] label: Label.
        :param pulumi.Input[str] logtraffic: Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicyServiceArgs']]]] services: Service object from available options. The structure of `service` block is documented below.
        :param pulumi.Input[str] spamfilter_profile: Antispam profile.
        :param pulumi.Input[str] spamfilter_profile_status: Enable/disable antispam. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicySrcaddrArgs']]]] srcaddrs: Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] status: Enable/disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webfilter_profile: Web filter profile.
        :param pulumi.Input[str] webfilter_profile_status: Enable/disable web filtering. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InterfacepolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IPv4 interface policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Interfacepolicy("trname",
            address_type="ipv4",
            application_list_status="disable",
            av_profile_status="disable",
            dlp_sensor_status="disable",
            dsri="disable",
            dstaddrs=[fortios.firewall.InterfacepolicyDstaddrArgs(
                name="all",
            )],
            interface="port4",
            ips_sensor_status="disable",
            logtraffic="all",
            policyid=1,
            scan_botnet_connections="block",
            services=[fortios.firewall.InterfacepolicyServiceArgs(
                name="ALL",
            )],
            spamfilter_profile_status="disable",
            srcaddrs=[fortios.firewall.InterfacepolicySrcaddrArgs(
                name="all",
            )],
            status="enable",
            webfilter_profile_status="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall InterfacePolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/interfacepolicy:Interfacepolicy labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/interfacepolicy:Interfacepolicy labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param InterfacepolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InterfacepolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_type: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 casb_profile: Optional[pulumi.Input[str]] = None,
                 casb_profile_status: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicyDstaddrArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicyServiceArgs']]]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicySrcaddrArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InterfacepolicyArgs.__new__(InterfacepolicyArgs)

            __props__.__dict__["address_type"] = address_type
            __props__.__dict__["application_list"] = application_list
            __props__.__dict__["application_list_status"] = application_list_status
            __props__.__dict__["av_profile"] = av_profile
            __props__.__dict__["av_profile_status"] = av_profile_status
            __props__.__dict__["casb_profile"] = casb_profile
            __props__.__dict__["casb_profile_status"] = casb_profile_status
            __props__.__dict__["comments"] = comments
            __props__.__dict__["dlp_profile"] = dlp_profile
            __props__.__dict__["dlp_profile_status"] = dlp_profile_status
            __props__.__dict__["dlp_sensor"] = dlp_sensor
            __props__.__dict__["dlp_sensor_status"] = dlp_sensor_status
            __props__.__dict__["dsri"] = dsri
            if dstaddrs is None and not opts.urn:
                raise TypeError("Missing required property 'dstaddrs'")
            __props__.__dict__["dstaddrs"] = dstaddrs
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["emailfilter_profile"] = emailfilter_profile
            __props__.__dict__["emailfilter_profile_status"] = emailfilter_profile_status
            __props__.__dict__["get_all_tables"] = get_all_tables
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ips_sensor"] = ips_sensor
            __props__.__dict__["ips_sensor_status"] = ips_sensor_status
            __props__.__dict__["label"] = label
            __props__.__dict__["logtraffic"] = logtraffic
            __props__.__dict__["policyid"] = policyid
            __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
            if services is None and not opts.urn:
                raise TypeError("Missing required property 'services'")
            __props__.__dict__["services"] = services
            __props__.__dict__["spamfilter_profile"] = spamfilter_profile
            __props__.__dict__["spamfilter_profile_status"] = spamfilter_profile_status
            if srcaddrs is None and not opts.urn:
                raise TypeError("Missing required property 'srcaddrs'")
            __props__.__dict__["srcaddrs"] = srcaddrs
            __props__.__dict__["status"] = status
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["webfilter_profile"] = webfilter_profile
            __props__.__dict__["webfilter_profile_status"] = webfilter_profile_status
        super(Interfacepolicy, __self__).__init__(
            'fortios:firewall/interfacepolicy:Interfacepolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_type: Optional[pulumi.Input[str]] = None,
            application_list: Optional[pulumi.Input[str]] = None,
            application_list_status: Optional[pulumi.Input[str]] = None,
            av_profile: Optional[pulumi.Input[str]] = None,
            av_profile_status: Optional[pulumi.Input[str]] = None,
            casb_profile: Optional[pulumi.Input[str]] = None,
            casb_profile_status: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dlp_profile: Optional[pulumi.Input[str]] = None,
            dlp_profile_status: Optional[pulumi.Input[str]] = None,
            dlp_sensor: Optional[pulumi.Input[str]] = None,
            dlp_sensor_status: Optional[pulumi.Input[str]] = None,
            dsri: Optional[pulumi.Input[str]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicyDstaddrArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            emailfilter_profile: Optional[pulumi.Input[str]] = None,
            emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ips_sensor: Optional[pulumi.Input[str]] = None,
            ips_sensor_status: Optional[pulumi.Input[str]] = None,
            label: Optional[pulumi.Input[str]] = None,
            logtraffic: Optional[pulumi.Input[str]] = None,
            policyid: Optional[pulumi.Input[int]] = None,
            scan_botnet_connections: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicyServiceArgs']]]]] = None,
            spamfilter_profile: Optional[pulumi.Input[str]] = None,
            spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicySrcaddrArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            webfilter_profile: Optional[pulumi.Input[str]] = None,
            webfilter_profile_status: Optional[pulumi.Input[str]] = None) -> 'Interfacepolicy':
        """
        Get an existing Interfacepolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address_type: Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] application_list: Application list name.
        :param pulumi.Input[str] application_list_status: Enable/disable application control. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Antivirus profile.
        :param pulumi.Input[str] av_profile_status: Enable/disable antivirus. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] casb_profile: CASB profile.
        :param pulumi.Input[str] casb_profile_status: Enable/disable CASB. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[str] dlp_profile: DLP profile name.
        :param pulumi.Input[str] dlp_profile_status: Enable/disable DLP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dlp_sensor: DLP sensor name.
        :param pulumi.Input[str] dlp_sensor_status: Enable/disable DLP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dsri: Enable/disable DSRI. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicyDstaddrArgs']]]] dstaddrs: Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Email filter profile.
        :param pulumi.Input[str] emailfilter_profile_status: Enable/disable email filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Monitored interface name from available interfaces.
        :param pulumi.Input[str] ips_sensor: IPS sensor name.
        :param pulumi.Input[str] ips_sensor_status: Enable/disable IPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] label: Label.
        :param pulumi.Input[str] logtraffic: Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[str] scan_botnet_connections: Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicyServiceArgs']]]] services: Service object from available options. The structure of `service` block is documented below.
        :param pulumi.Input[str] spamfilter_profile: Antispam profile.
        :param pulumi.Input[str] spamfilter_profile_status: Enable/disable antispam. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfacepolicySrcaddrArgs']]]] srcaddrs: Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] status: Enable/disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webfilter_profile: Web filter profile.
        :param pulumi.Input[str] webfilter_profile_status: Enable/disable web filtering. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InterfacepolicyState.__new__(_InterfacepolicyState)

        __props__.__dict__["address_type"] = address_type
        __props__.__dict__["application_list"] = application_list
        __props__.__dict__["application_list_status"] = application_list_status
        __props__.__dict__["av_profile"] = av_profile
        __props__.__dict__["av_profile_status"] = av_profile_status
        __props__.__dict__["casb_profile"] = casb_profile
        __props__.__dict__["casb_profile_status"] = casb_profile_status
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dlp_profile"] = dlp_profile
        __props__.__dict__["dlp_profile_status"] = dlp_profile_status
        __props__.__dict__["dlp_sensor"] = dlp_sensor
        __props__.__dict__["dlp_sensor_status"] = dlp_sensor_status
        __props__.__dict__["dsri"] = dsri
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["emailfilter_profile"] = emailfilter_profile
        __props__.__dict__["emailfilter_profile_status"] = emailfilter_profile_status
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ips_sensor"] = ips_sensor
        __props__.__dict__["ips_sensor_status"] = ips_sensor_status
        __props__.__dict__["label"] = label
        __props__.__dict__["logtraffic"] = logtraffic
        __props__.__dict__["policyid"] = policyid
        __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
        __props__.__dict__["services"] = services
        __props__.__dict__["spamfilter_profile"] = spamfilter_profile
        __props__.__dict__["spamfilter_profile_status"] = spamfilter_profile_status
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["status"] = status
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["webfilter_profile"] = webfilter_profile
        __props__.__dict__["webfilter_profile_status"] = webfilter_profile_status
        return Interfacepolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> pulumi.Output[str]:
        """
        Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> pulumi.Output[str]:
        """
        Application list name.
        """
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter(name="applicationListStatus")
    def application_list_status(self) -> pulumi.Output[str]:
        """
        Enable/disable application control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "application_list_status")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> pulumi.Output[str]:
        """
        Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="avProfileStatus")
    def av_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable antivirus. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_profile_status")

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> pulumi.Output[str]:
        """
        CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @property
    @pulumi.getter(name="casbProfileStatus")
    def casb_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable CASB. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "casb_profile_status")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> pulumi.Output[str]:
        """
        DLP profile name.
        """
        return pulumi.get(self, "dlp_profile")

    @property
    @pulumi.getter(name="dlpProfileStatus")
    def dlp_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable DLP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_profile_status")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> pulumi.Output[str]:
        """
        DLP sensor name.
        """
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter(name="dlpSensorStatus")
    def dlp_sensor_status(self) -> pulumi.Output[str]:
        """
        Enable/disable DLP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dlp_sensor_status")

    @property
    @pulumi.getter
    def dsri(self) -> pulumi.Output[str]:
        """
        Enable/disable DSRI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dsri")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Sequence['outputs.InterfacepolicyDstaddr']]:
        """
        Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> pulumi.Output[str]:
        """
        Email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter(name="emailfilterProfileStatus")
    def emailfilter_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable email filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emailfilter_profile_status")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Monitored interface name from available interfaces.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> pulumi.Output[str]:
        """
        IPS sensor name.
        """
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter(name="ipsSensorStatus")
    def ips_sensor_status(self) -> pulumi.Output[str]:
        """
        Enable/disable IPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_sensor_status")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[str]:
        """
        Label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def logtraffic(self) -> pulumi.Output[str]:
        """
        Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter
    def policyid(self) -> pulumi.Output[int]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> pulumi.Output[str]:
        """
        Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Sequence['outputs.InterfacepolicyService']]:
        """
        Service object from available options. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> pulumi.Output[str]:
        """
        Antispam profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter(name="spamfilterProfileStatus")
    def spamfilter_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable antispam. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spamfilter_profile_status")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Sequence['outputs.InterfacepolicySrcaddr']]:
        """
        Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> pulumi.Output[str]:
        """
        Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @property
    @pulumi.getter(name="webfilterProfileStatus")
    def webfilter_profile_status(self) -> pulumi.Output[str]:
        """
        Enable/disable web filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_profile_status")

