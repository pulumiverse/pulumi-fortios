# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Vip46Args', 'Vip46']

@pulumi.input_type
class Vip46Args:
    def __init__(__self__, *,
                 extip: pulumi.Input[str],
                 mappedip: pulumi.Input[str],
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46MonitorArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46RealserverArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcFilterArgs']]]] = None,
                 srcintf_filters: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcintfFilterArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vip46 resource.
        :param pulumi.Input[str] extip: Start-external-IP [-end-external-IP].
        :param pulumi.Input[str] mappedip: Start-mapped-IP [-end mapped-IP].
        :param pulumi.Input[str] arp_reply: Enable ARP reply. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] extport: External service port.
        :param pulumi.Input[int] fosid: Custom defined id.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ldb_method: Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
        :param pulumi.Input[str] mappedport: Mapped service port.
        :param pulumi.Input[Sequence[pulumi.Input['Vip46MonitorArgs']]] monitors: Health monitors. The structure of `monitor` block is documented below.
        :param pulumi.Input[str] name: VIP46 name.
        :param pulumi.Input[str] portforward: Enable port forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] protocol: Mapped port protocol. Valid values: `tcp`, `udp`.
        :param pulumi.Input[Sequence[pulumi.Input['Vip46RealserverArgs']]] realservers: Real servers. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] server_type: Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
        :param pulumi.Input[Sequence[pulumi.Input['Vip46SrcFilterArgs']]] src_filters: Source IP filter (x.x.x.x/x). The structure of `src_filter` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Vip46SrcintfFilterArgs']]] srcintf_filters: Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintf_filter` block is documented below.
        :param pulumi.Input[str] type: VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "extip", extip)
        pulumi.set(__self__, "mappedip", mappedip)
        if arp_reply is not None:
            pulumi.set(__self__, "arp_reply", arp_reply)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extport is not None:
            pulumi.set(__self__, "extport", extport)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if monitors is not None:
            pulumi.set(__self__, "monitors", monitors)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if portforward is not None:
            pulumi.set(__self__, "portforward", portforward)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if src_filters is not None:
            pulumi.set(__self__, "src_filters", src_filters)
        if srcintf_filters is not None:
            pulumi.set(__self__, "srcintf_filters", srcintf_filters)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def extip(self) -> pulumi.Input[str]:
        """
        Start-external-IP [-end-external-IP].
        """
        return pulumi.get(self, "extip")

    @extip.setter
    def extip(self, value: pulumi.Input[str]):
        pulumi.set(self, "extip", value)

    @property
    @pulumi.getter
    def mappedip(self) -> pulumi.Input[str]:
        """
        Start-mapped-IP [-end mapped-IP].
        """
        return pulumi.get(self, "mappedip")

    @mappedip.setter
    def mappedip(self, value: pulumi.Input[str]):
        pulumi.set(self, "mappedip", value)

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> Optional[pulumi.Input[str]]:
        """
        Enable ARP reply. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "arp_reply")

    @arp_reply.setter
    def arp_reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_reply", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def extport(self) -> Optional[pulumi.Input[str]]:
        """
        External service port.
        """
        return pulumi.get(self, "extport")

    @extport.setter
    def extport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extport", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Custom defined id.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped service port.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip46MonitorArgs']]]]:
        """
        Health monitors. The structure of `monitor` block is documented below.
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46MonitorArgs']]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VIP46 name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def portforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable port forwarding. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "portforward")

    @portforward.setter
    def portforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portforward", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped port protocol. Valid values: `tcp`, `udp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip46RealserverArgs']]]]:
        """
        Real servers. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46RealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="srcFilters")
    def src_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcFilterArgs']]]]:
        """
        Source IP filter (x.x.x.x/x). The structure of `src_filter` block is documented below.
        """
        return pulumi.get(self, "src_filters")

    @src_filters.setter
    def src_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcFilterArgs']]]]):
        pulumi.set(self, "src_filters", value)

    @property
    @pulumi.getter(name="srcintfFilters")
    def srcintf_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcintfFilterArgs']]]]:
        """
        Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintf_filter` block is documented below.
        """
        return pulumi.get(self, "srcintf_filters")

    @srcintf_filters.setter
    def srcintf_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcintfFilterArgs']]]]):
        pulumi.set(self, "srcintf_filters", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _Vip46State:
    def __init__(__self__, *,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mappedip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46MonitorArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46RealserverArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcFilterArgs']]]] = None,
                 srcintf_filters: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcintfFilterArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Vip46 resources.
        :param pulumi.Input[str] arp_reply: Enable ARP reply. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] extip: Start-external-IP [-end-external-IP].
        :param pulumi.Input[str] extport: External service port.
        :param pulumi.Input[int] fosid: Custom defined id.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ldb_method: Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
        :param pulumi.Input[str] mappedip: Start-mapped-IP [-end mapped-IP].
        :param pulumi.Input[str] mappedport: Mapped service port.
        :param pulumi.Input[Sequence[pulumi.Input['Vip46MonitorArgs']]] monitors: Health monitors. The structure of `monitor` block is documented below.
        :param pulumi.Input[str] name: VIP46 name.
        :param pulumi.Input[str] portforward: Enable port forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] protocol: Mapped port protocol. Valid values: `tcp`, `udp`.
        :param pulumi.Input[Sequence[pulumi.Input['Vip46RealserverArgs']]] realservers: Real servers. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] server_type: Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
        :param pulumi.Input[Sequence[pulumi.Input['Vip46SrcFilterArgs']]] src_filters: Source IP filter (x.x.x.x/x). The structure of `src_filter` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Vip46SrcintfFilterArgs']]] srcintf_filters: Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintf_filter` block is documented below.
        :param pulumi.Input[str] type: VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if arp_reply is not None:
            pulumi.set(__self__, "arp_reply", arp_reply)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extip is not None:
            pulumi.set(__self__, "extip", extip)
        if extport is not None:
            pulumi.set(__self__, "extport", extport)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if mappedip is not None:
            pulumi.set(__self__, "mappedip", mappedip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if monitors is not None:
            pulumi.set(__self__, "monitors", monitors)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if portforward is not None:
            pulumi.set(__self__, "portforward", portforward)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if src_filters is not None:
            pulumi.set(__self__, "src_filters", src_filters)
        if srcintf_filters is not None:
            pulumi.set(__self__, "srcintf_filters", srcintf_filters)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> Optional[pulumi.Input[str]]:
        """
        Enable ARP reply. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "arp_reply")

    @arp_reply.setter
    def arp_reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_reply", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def extip(self) -> Optional[pulumi.Input[str]]:
        """
        Start-external-IP [-end-external-IP].
        """
        return pulumi.get(self, "extip")

    @extip.setter
    def extip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extip", value)

    @property
    @pulumi.getter
    def extport(self) -> Optional[pulumi.Input[str]]:
        """
        External service port.
        """
        return pulumi.get(self, "extport")

    @extport.setter
    def extport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extport", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Custom defined id.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def mappedip(self) -> Optional[pulumi.Input[str]]:
        """
        Start-mapped-IP [-end mapped-IP].
        """
        return pulumi.get(self, "mappedip")

    @mappedip.setter
    def mappedip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped service port.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip46MonitorArgs']]]]:
        """
        Health monitors. The structure of `monitor` block is documented below.
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46MonitorArgs']]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VIP46 name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def portforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable port forwarding. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "portforward")

    @portforward.setter
    def portforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portforward", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped port protocol. Valid values: `tcp`, `udp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip46RealserverArgs']]]]:
        """
        Real servers. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46RealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="srcFilters")
    def src_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcFilterArgs']]]]:
        """
        Source IP filter (x.x.x.x/x). The structure of `src_filter` block is documented below.
        """
        return pulumi.get(self, "src_filters")

    @src_filters.setter
    def src_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcFilterArgs']]]]):
        pulumi.set(self, "src_filters", value)

    @property
    @pulumi.getter(name="srcintfFilters")
    def srcintf_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcintfFilterArgs']]]]:
        """
        Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintf_filter` block is documented below.
        """
        return pulumi.get(self, "srcintf_filters")

    @srcintf_filters.setter
    def srcintf_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Vip46SrcintfFilterArgs']]]]):
        pulumi.set(self, "srcintf_filters", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Vip46(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mappedip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46MonitorArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46RealserverArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46SrcFilterArgs']]]]] = None,
                 srcintf_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46SrcintfFilterArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IPv4 to IPv6 virtual IPs. Applies to FortiOS Version `<= 7.0.0`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Vip46("trname",
            arp_reply="enable",
            color=0,
            extip="10.202.1.200",
            extport="0-65535",
            fosid=0,
            ldb_method="static",
            mappedip="2001:1:1:2::200",
            mappedport="0-65535",
            portforward="disable",
            protocol="tcp",
            type="static-nat")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Vip46 can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/vip46:Vip46 labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/vip46:Vip46 labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arp_reply: Enable ARP reply. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] extip: Start-external-IP [-end-external-IP].
        :param pulumi.Input[str] extport: External service port.
        :param pulumi.Input[int] fosid: Custom defined id.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ldb_method: Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
        :param pulumi.Input[str] mappedip: Start-mapped-IP [-end mapped-IP].
        :param pulumi.Input[str] mappedport: Mapped service port.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46MonitorArgs']]]] monitors: Health monitors. The structure of `monitor` block is documented below.
        :param pulumi.Input[str] name: VIP46 name.
        :param pulumi.Input[str] portforward: Enable port forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] protocol: Mapped port protocol. Valid values: `tcp`, `udp`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46RealserverArgs']]]] realservers: Real servers. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] server_type: Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46SrcFilterArgs']]]] src_filters: Source IP filter (x.x.x.x/x). The structure of `src_filter` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46SrcintfFilterArgs']]]] srcintf_filters: Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintf_filter` block is documented below.
        :param pulumi.Input[str] type: VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Vip46Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IPv4 to IPv6 virtual IPs. Applies to FortiOS Version `<= 7.0.0`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.Vip46("trname",
            arp_reply="enable",
            color=0,
            extip="10.202.1.200",
            extport="0-65535",
            fosid=0,
            ldb_method="static",
            mappedip="2001:1:1:2::200",
            mappedport="0-65535",
            portforward="disable",
            protocol="tcp",
            type="static-nat")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Firewall Vip46 can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/vip46:Vip46 labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/vip46:Vip46 labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param Vip46Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Vip46Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mappedip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46MonitorArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46RealserverArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46SrcFilterArgs']]]]] = None,
                 srcintf_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46SrcintfFilterArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Vip46Args.__new__(Vip46Args)

            __props__.__dict__["arp_reply"] = arp_reply
            __props__.__dict__["color"] = color
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            if extip is None and not opts.urn:
                raise TypeError("Missing required property 'extip'")
            __props__.__dict__["extip"] = extip
            __props__.__dict__["extport"] = extport
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ldb_method"] = ldb_method
            if mappedip is None and not opts.urn:
                raise TypeError("Missing required property 'mappedip'")
            __props__.__dict__["mappedip"] = mappedip
            __props__.__dict__["mappedport"] = mappedport
            __props__.__dict__["monitors"] = monitors
            __props__.__dict__["name"] = name
            __props__.__dict__["portforward"] = portforward
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["realservers"] = realservers
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["src_filters"] = src_filters
            __props__.__dict__["srcintf_filters"] = srcintf_filters
            __props__.__dict__["type"] = type
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
        super(Vip46, __self__).__init__(
            'fortios:firewall/vip46:Vip46',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arp_reply: Optional[pulumi.Input[str]] = None,
            color: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            extip: Optional[pulumi.Input[str]] = None,
            extport: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ldb_method: Optional[pulumi.Input[str]] = None,
            mappedip: Optional[pulumi.Input[str]] = None,
            mappedport: Optional[pulumi.Input[str]] = None,
            monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46MonitorArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            portforward: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            realservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46RealserverArgs']]]]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            src_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46SrcFilterArgs']]]]] = None,
            srcintf_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46SrcintfFilterArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Vip46':
        """
        Get an existing Vip46 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arp_reply: Enable ARP reply. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] extip: Start-external-IP [-end-external-IP].
        :param pulumi.Input[str] extport: External service port.
        :param pulumi.Input[int] fosid: Custom defined id.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ldb_method: Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
        :param pulumi.Input[str] mappedip: Start-mapped-IP [-end mapped-IP].
        :param pulumi.Input[str] mappedport: Mapped service port.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46MonitorArgs']]]] monitors: Health monitors. The structure of `monitor` block is documented below.
        :param pulumi.Input[str] name: VIP46 name.
        :param pulumi.Input[str] portforward: Enable port forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] protocol: Mapped port protocol. Valid values: `tcp`, `udp`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46RealserverArgs']]]] realservers: Real servers. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] server_type: Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46SrcFilterArgs']]]] src_filters: Source IP filter (x.x.x.x/x). The structure of `src_filter` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Vip46SrcintfFilterArgs']]]] srcintf_filters: Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintf_filter` block is documented below.
        :param pulumi.Input[str] type: VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Vip46State.__new__(_Vip46State)

        __props__.__dict__["arp_reply"] = arp_reply
        __props__.__dict__["color"] = color
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["extip"] = extip
        __props__.__dict__["extport"] = extport
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ldb_method"] = ldb_method
        __props__.__dict__["mappedip"] = mappedip
        __props__.__dict__["mappedport"] = mappedport
        __props__.__dict__["monitors"] = monitors
        __props__.__dict__["name"] = name
        __props__.__dict__["portforward"] = portforward
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["realservers"] = realservers
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["src_filters"] = src_filters
        __props__.__dict__["srcintf_filters"] = srcintf_filters
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        return Vip46(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> pulumi.Output[str]:
        """
        Enable ARP reply. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "arp_reply")

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[int]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def extip(self) -> pulumi.Output[str]:
        """
        Start-external-IP [-end-external-IP].
        """
        return pulumi.get(self, "extip")

    @property
    @pulumi.getter
    def extport(self) -> pulumi.Output[str]:
        """
        External service port.
        """
        return pulumi.get(self, "extport")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        Custom defined id.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> pulumi.Output[str]:
        """
        Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
        """
        return pulumi.get(self, "ldb_method")

    @property
    @pulumi.getter
    def mappedip(self) -> pulumi.Output[str]:
        """
        Start-mapped-IP [-end mapped-IP].
        """
        return pulumi.get(self, "mappedip")

    @property
    @pulumi.getter
    def mappedport(self) -> pulumi.Output[str]:
        """
        Mapped service port.
        """
        return pulumi.get(self, "mappedport")

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Output[Optional[Sequence['outputs.Vip46Monitor']]]:
        """
        Health monitors. The structure of `monitor` block is documented below.
        """
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        VIP46 name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def portforward(self) -> pulumi.Output[str]:
        """
        Enable port forwarding. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "portforward")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Mapped port protocol. Valid values: `tcp`, `udp`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def realservers(self) -> pulumi.Output[Optional[Sequence['outputs.Vip46Realserver']]]:
        """
        Real servers. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        """
        Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
        """
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter(name="srcFilters")
    def src_filters(self) -> pulumi.Output[Optional[Sequence['outputs.Vip46SrcFilter']]]:
        """
        Source IP filter (x.x.x.x/x). The structure of `src_filter` block is documented below.
        """
        return pulumi.get(self, "src_filters")

    @property
    @pulumi.getter(name="srcintfFilters")
    def srcintf_filters(self) -> pulumi.Output[Optional[Sequence['outputs.Vip46SrcintfFilter']]]:
        """
        Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintf_filter` block is documented below.
        """
        return pulumi.get(self, "srcintf_filters")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

