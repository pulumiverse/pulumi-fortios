# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCentralsnatmapResult',
    'AwaitableGetCentralsnatmapResult',
    'get_centralsnatmap',
    'get_centralsnatmap_output',
]

@pulumi.output_type
class GetCentralsnatmapResult:
    """
    A collection of values returned by getCentralsnatmap.
    """
    def __init__(__self__, comments=None, dst_addr6s=None, dst_addrs=None, dst_port=None, dstintfs=None, id=None, nat=None, nat46=None, nat64=None, nat_ippool6s=None, nat_ippools=None, nat_port=None, orig_addr6s=None, orig_addrs=None, orig_port=None, policyid=None, protocol=None, srcintfs=None, status=None, type=None, uuid=None, vdomparam=None):
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if dst_addr6s and not isinstance(dst_addr6s, list):
            raise TypeError("Expected argument 'dst_addr6s' to be a list")
        pulumi.set(__self__, "dst_addr6s", dst_addr6s)
        if dst_addrs and not isinstance(dst_addrs, list):
            raise TypeError("Expected argument 'dst_addrs' to be a list")
        pulumi.set(__self__, "dst_addrs", dst_addrs)
        if dst_port and not isinstance(dst_port, str):
            raise TypeError("Expected argument 'dst_port' to be a str")
        pulumi.set(__self__, "dst_port", dst_port)
        if dstintfs and not isinstance(dstintfs, list):
            raise TypeError("Expected argument 'dstintfs' to be a list")
        pulumi.set(__self__, "dstintfs", dstintfs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nat and not isinstance(nat, str):
            raise TypeError("Expected argument 'nat' to be a str")
        pulumi.set(__self__, "nat", nat)
        if nat46 and not isinstance(nat46, str):
            raise TypeError("Expected argument 'nat46' to be a str")
        pulumi.set(__self__, "nat46", nat46)
        if nat64 and not isinstance(nat64, str):
            raise TypeError("Expected argument 'nat64' to be a str")
        pulumi.set(__self__, "nat64", nat64)
        if nat_ippool6s and not isinstance(nat_ippool6s, list):
            raise TypeError("Expected argument 'nat_ippool6s' to be a list")
        pulumi.set(__self__, "nat_ippool6s", nat_ippool6s)
        if nat_ippools and not isinstance(nat_ippools, list):
            raise TypeError("Expected argument 'nat_ippools' to be a list")
        pulumi.set(__self__, "nat_ippools", nat_ippools)
        if nat_port and not isinstance(nat_port, str):
            raise TypeError("Expected argument 'nat_port' to be a str")
        pulumi.set(__self__, "nat_port", nat_port)
        if orig_addr6s and not isinstance(orig_addr6s, list):
            raise TypeError("Expected argument 'orig_addr6s' to be a list")
        pulumi.set(__self__, "orig_addr6s", orig_addr6s)
        if orig_addrs and not isinstance(orig_addrs, list):
            raise TypeError("Expected argument 'orig_addrs' to be a list")
        pulumi.set(__self__, "orig_addrs", orig_addrs)
        if orig_port and not isinstance(orig_port, str):
            raise TypeError("Expected argument 'orig_port' to be a str")
        pulumi.set(__self__, "orig_port", orig_port)
        if policyid and not isinstance(policyid, int):
            raise TypeError("Expected argument 'policyid' to be a int")
        pulumi.set(__self__, "policyid", policyid)
        if protocol and not isinstance(protocol, int):
            raise TypeError("Expected argument 'protocol' to be a int")
        pulumi.set(__self__, "protocol", protocol)
        if srcintfs and not isinstance(srcintfs, list):
            raise TypeError("Expected argument 'srcintfs' to be a list")
        pulumi.set(__self__, "srcintfs", srcintfs)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dstAddr6s")
    def dst_addr6s(self) -> Sequence['outputs.GetCentralsnatmapDstAddr6Result']:
        """
        IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        """
        return pulumi.get(self, "dst_addr6s")

    @property
    @pulumi.getter(name="dstAddrs")
    def dst_addrs(self) -> Sequence['outputs.GetCentralsnatmapDstAddrResult']:
        """
        Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        """
        return pulumi.get(self, "dst_addrs")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> str:
        """
        Destination port or port range (1 to 65535, 0 means any port).
        """
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def dstintfs(self) -> Sequence['outputs.GetCentralsnatmapDstintfResult']:
        """
        Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def nat(self) -> str:
        """
        Enable/disable source NAT.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter
    def nat46(self) -> str:
        """
        Enable/disable NAT46.
        """
        return pulumi.get(self, "nat46")

    @property
    @pulumi.getter
    def nat64(self) -> str:
        """
        Enable/disable NAT64.
        """
        return pulumi.get(self, "nat64")

    @property
    @pulumi.getter(name="natIppool6s")
    def nat_ippool6s(self) -> Sequence['outputs.GetCentralsnatmapNatIppool6Result']:
        """
        IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        """
        return pulumi.get(self, "nat_ippool6s")

    @property
    @pulumi.getter(name="natIppools")
    def nat_ippools(self) -> Sequence['outputs.GetCentralsnatmapNatIppoolResult']:
        """
        Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        """
        return pulumi.get(self, "nat_ippools")

    @property
    @pulumi.getter(name="natPort")
    def nat_port(self) -> str:
        """
        Translated port or port range (0 to 65535).
        """
        return pulumi.get(self, "nat_port")

    @property
    @pulumi.getter(name="origAddr6s")
    def orig_addr6s(self) -> Sequence['outputs.GetCentralsnatmapOrigAddr6Result']:
        """
        IPv6 Original address. The structure of `orig_addr6` block is documented below.
        """
        return pulumi.get(self, "orig_addr6s")

    @property
    @pulumi.getter(name="origAddrs")
    def orig_addrs(self) -> Sequence['outputs.GetCentralsnatmapOrigAddrResult']:
        """
        Original address. The structure of `orig_addr` block is documented below.
        """
        return pulumi.get(self, "orig_addrs")

    @property
    @pulumi.getter(name="origPort")
    def orig_port(self) -> str:
        """
        Original TCP port (0 to 65535).
        """
        return pulumi.get(self, "orig_port")

    @property
    @pulumi.getter
    def policyid(self) -> int:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        """
        Integer value for the protocol type (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def srcintfs(self) -> Sequence['outputs.GetCentralsnatmapSrcintfResult']:
        """
        Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable the active status of this policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        IPv4/IPv6 source NAT.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetCentralsnatmapResult(GetCentralsnatmapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCentralsnatmapResult(
            comments=self.comments,
            dst_addr6s=self.dst_addr6s,
            dst_addrs=self.dst_addrs,
            dst_port=self.dst_port,
            dstintfs=self.dstintfs,
            id=self.id,
            nat=self.nat,
            nat46=self.nat46,
            nat64=self.nat64,
            nat_ippool6s=self.nat_ippool6s,
            nat_ippools=self.nat_ippools,
            nat_port=self.nat_port,
            orig_addr6s=self.orig_addr6s,
            orig_addrs=self.orig_addrs,
            orig_port=self.orig_port,
            policyid=self.policyid,
            protocol=self.protocol,
            srcintfs=self.srcintfs,
            status=self.status,
            type=self.type,
            uuid=self.uuid,
            vdomparam=self.vdomparam)


def get_centralsnatmap(policyid: Optional[int] = None,
                       vdomparam: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCentralsnatmapResult:
    """
    Use this data source to get information on an fortios firewall centralsnatmap


    :param int policyid: Specify the policyid of the desired firewall centralsnatmap.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['policyid'] = policyid
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:firewall/getCentralsnatmap:getCentralsnatmap', __args__, opts=opts, typ=GetCentralsnatmapResult).value

    return AwaitableGetCentralsnatmapResult(
        comments=pulumi.get(__ret__, 'comments'),
        dst_addr6s=pulumi.get(__ret__, 'dst_addr6s'),
        dst_addrs=pulumi.get(__ret__, 'dst_addrs'),
        dst_port=pulumi.get(__ret__, 'dst_port'),
        dstintfs=pulumi.get(__ret__, 'dstintfs'),
        id=pulumi.get(__ret__, 'id'),
        nat=pulumi.get(__ret__, 'nat'),
        nat46=pulumi.get(__ret__, 'nat46'),
        nat64=pulumi.get(__ret__, 'nat64'),
        nat_ippool6s=pulumi.get(__ret__, 'nat_ippool6s'),
        nat_ippools=pulumi.get(__ret__, 'nat_ippools'),
        nat_port=pulumi.get(__ret__, 'nat_port'),
        orig_addr6s=pulumi.get(__ret__, 'orig_addr6s'),
        orig_addrs=pulumi.get(__ret__, 'orig_addrs'),
        orig_port=pulumi.get(__ret__, 'orig_port'),
        policyid=pulumi.get(__ret__, 'policyid'),
        protocol=pulumi.get(__ret__, 'protocol'),
        srcintfs=pulumi.get(__ret__, 'srcintfs'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_centralsnatmap)
def get_centralsnatmap_output(policyid: Optional[pulumi.Input[int]] = None,
                              vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCentralsnatmapResult]:
    """
    Use this data source to get information on an fortios firewall centralsnatmap


    :param int policyid: Specify the policyid of the desired firewall centralsnatmap.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
