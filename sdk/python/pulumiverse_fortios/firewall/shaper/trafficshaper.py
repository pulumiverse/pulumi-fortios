# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['TrafficshaperArgs', 'Trafficshaper']

@pulumi.input_type
class TrafficshaperArgs:
    def __init__(__self__, *,
                 bandwidth_unit: Optional[pulumi.Input[str]] = None,
                 cos: Optional[pulumi.Input[str]] = None,
                 cos_marking: Optional[pulumi.Input[str]] = None,
                 cos_marking_method: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_marking_method: Optional[pulumi.Input[str]] = None,
                 exceed_bandwidth: Optional[pulumi.Input[int]] = None,
                 exceed_class_id: Optional[pulumi.Input[int]] = None,
                 exceed_cos: Optional[pulumi.Input[str]] = None,
                 exceed_dscp: Optional[pulumi.Input[str]] = None,
                 guaranteed_bandwidth: Optional[pulumi.Input[int]] = None,
                 maximum_bandwidth: Optional[pulumi.Input[int]] = None,
                 maximum_cos: Optional[pulumi.Input[str]] = None,
                 maximum_dscp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overhead: Optional[pulumi.Input[int]] = None,
                 per_policy: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Trafficshaper resource.
        :param pulumi.Input[str] bandwidth_unit: Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
        :param pulumi.Input[str] cos: VLAN CoS mark.
        :param pulumi.Input[str] cos_marking: Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cos_marking_method: Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
        :param pulumi.Input[str] diffserv: Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode: DiffServ setting to be applied to traffic accepted by this shaper.
        :param pulumi.Input[str] dscp_marking_method: Select DSCP marking method. Valid values: `multi-stage`, `static`.
        :param pulumi.Input[int] exceed_bandwidth: Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
        :param pulumi.Input[int] exceed_class_id: Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] exceed_cos: VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        :param pulumi.Input[str] exceed_dscp: DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        :param pulumi.Input[int] guaranteed_bandwidth: Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        :param pulumi.Input[int] maximum_bandwidth: Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        :param pulumi.Input[str] maximum_cos: VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] maximum_dscp: DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] name: Traffic shaper name.
        :param pulumi.Input[int] overhead: Per-packet size overhead used in rate computations.
        :param pulumi.Input[str] per_policy: Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] priority: Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if bandwidth_unit is not None:
            pulumi.set(__self__, "bandwidth_unit", bandwidth_unit)
        if cos is not None:
            pulumi.set(__self__, "cos", cos)
        if cos_marking is not None:
            pulumi.set(__self__, "cos_marking", cos_marking)
        if cos_marking_method is not None:
            pulumi.set(__self__, "cos_marking_method", cos_marking_method)
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dscp_marking_method is not None:
            pulumi.set(__self__, "dscp_marking_method", dscp_marking_method)
        if exceed_bandwidth is not None:
            pulumi.set(__self__, "exceed_bandwidth", exceed_bandwidth)
        if exceed_class_id is not None:
            pulumi.set(__self__, "exceed_class_id", exceed_class_id)
        if exceed_cos is not None:
            pulumi.set(__self__, "exceed_cos", exceed_cos)
        if exceed_dscp is not None:
            pulumi.set(__self__, "exceed_dscp", exceed_dscp)
        if guaranteed_bandwidth is not None:
            pulumi.set(__self__, "guaranteed_bandwidth", guaranteed_bandwidth)
        if maximum_bandwidth is not None:
            pulumi.set(__self__, "maximum_bandwidth", maximum_bandwidth)
        if maximum_cos is not None:
            pulumi.set(__self__, "maximum_cos", maximum_cos)
        if maximum_dscp is not None:
            pulumi.set(__self__, "maximum_dscp", maximum_dscp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overhead is not None:
            pulumi.set(__self__, "overhead", overhead)
        if per_policy is not None:
            pulumi.set(__self__, "per_policy", per_policy)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bandwidthUnit")
    def bandwidth_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
        """
        return pulumi.get(self, "bandwidth_unit")

    @bandwidth_unit.setter
    def bandwidth_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_unit", value)

    @property
    @pulumi.getter
    def cos(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN CoS mark.
        """
        return pulumi.get(self, "cos")

    @cos.setter
    def cos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos", value)

    @property
    @pulumi.getter(name="cosMarking")
    def cos_marking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cos_marking")

    @cos_marking.setter
    def cos_marking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_marking", value)

    @property
    @pulumi.getter(name="cosMarkingMethod")
    def cos_marking_method(self) -> Optional[pulumi.Input[str]]:
        """
        Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
        """
        return pulumi.get(self, "cos_marking_method")

    @cos_marking_method.setter
    def cos_marking_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_marking_method", value)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        DiffServ setting to be applied to traffic accepted by this shaper.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dscpMarkingMethod")
    def dscp_marking_method(self) -> Optional[pulumi.Input[str]]:
        """
        Select DSCP marking method. Valid values: `multi-stage`, `static`.
        """
        return pulumi.get(self, "dscp_marking_method")

    @dscp_marking_method.setter
    def dscp_marking_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_marking_method", value)

    @property
    @pulumi.getter(name="exceedBandwidth")
    def exceed_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
        """
        return pulumi.get(self, "exceed_bandwidth")

    @exceed_bandwidth.setter
    def exceed_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exceed_bandwidth", value)

    @property
    @pulumi.getter(name="exceedClassId")
    def exceed_class_id(self) -> Optional[pulumi.Input[int]]:
        """
        Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
        """
        return pulumi.get(self, "exceed_class_id")

    @exceed_class_id.setter
    def exceed_class_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exceed_class_id", value)

    @property
    @pulumi.getter(name="exceedCos")
    def exceed_cos(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        """
        return pulumi.get(self, "exceed_cos")

    @exceed_cos.setter
    def exceed_cos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exceed_cos", value)

    @property
    @pulumi.getter(name="exceedDscp")
    def exceed_dscp(self) -> Optional[pulumi.Input[str]]:
        """
        DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        """
        return pulumi.get(self, "exceed_dscp")

    @exceed_dscp.setter
    def exceed_dscp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exceed_dscp", value)

    @property
    @pulumi.getter(name="guaranteedBandwidth")
    def guaranteed_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        """
        return pulumi.get(self, "guaranteed_bandwidth")

    @guaranteed_bandwidth.setter
    def guaranteed_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "guaranteed_bandwidth", value)

    @property
    @pulumi.getter(name="maximumBandwidth")
    def maximum_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        """
        return pulumi.get(self, "maximum_bandwidth")

    @maximum_bandwidth.setter
    def maximum_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bandwidth", value)

    @property
    @pulumi.getter(name="maximumCos")
    def maximum_cos(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        """
        return pulumi.get(self, "maximum_cos")

    @maximum_cos.setter
    def maximum_cos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_cos", value)

    @property
    @pulumi.getter(name="maximumDscp")
    def maximum_dscp(self) -> Optional[pulumi.Input[str]]:
        """
        DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        """
        return pulumi.get(self, "maximum_dscp")

    @maximum_dscp.setter
    def maximum_dscp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_dscp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def overhead(self) -> Optional[pulumi.Input[int]]:
        """
        Per-packet size overhead used in rate computations.
        """
        return pulumi.get(self, "overhead")

    @overhead.setter
    def overhead(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "overhead", value)

    @property
    @pulumi.getter(name="perPolicy")
    def per_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "per_policy")

    @per_policy.setter
    def per_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_policy", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _TrafficshaperState:
    def __init__(__self__, *,
                 bandwidth_unit: Optional[pulumi.Input[str]] = None,
                 cos: Optional[pulumi.Input[str]] = None,
                 cos_marking: Optional[pulumi.Input[str]] = None,
                 cos_marking_method: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_marking_method: Optional[pulumi.Input[str]] = None,
                 exceed_bandwidth: Optional[pulumi.Input[int]] = None,
                 exceed_class_id: Optional[pulumi.Input[int]] = None,
                 exceed_cos: Optional[pulumi.Input[str]] = None,
                 exceed_dscp: Optional[pulumi.Input[str]] = None,
                 guaranteed_bandwidth: Optional[pulumi.Input[int]] = None,
                 maximum_bandwidth: Optional[pulumi.Input[int]] = None,
                 maximum_cos: Optional[pulumi.Input[str]] = None,
                 maximum_dscp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overhead: Optional[pulumi.Input[int]] = None,
                 per_policy: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Trafficshaper resources.
        :param pulumi.Input[str] bandwidth_unit: Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
        :param pulumi.Input[str] cos: VLAN CoS mark.
        :param pulumi.Input[str] cos_marking: Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cos_marking_method: Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
        :param pulumi.Input[str] diffserv: Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode: DiffServ setting to be applied to traffic accepted by this shaper.
        :param pulumi.Input[str] dscp_marking_method: Select DSCP marking method. Valid values: `multi-stage`, `static`.
        :param pulumi.Input[int] exceed_bandwidth: Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
        :param pulumi.Input[int] exceed_class_id: Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] exceed_cos: VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        :param pulumi.Input[str] exceed_dscp: DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        :param pulumi.Input[int] guaranteed_bandwidth: Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        :param pulumi.Input[int] maximum_bandwidth: Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        :param pulumi.Input[str] maximum_cos: VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] maximum_dscp: DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] name: Traffic shaper name.
        :param pulumi.Input[int] overhead: Per-packet size overhead used in rate computations.
        :param pulumi.Input[str] per_policy: Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] priority: Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if bandwidth_unit is not None:
            pulumi.set(__self__, "bandwidth_unit", bandwidth_unit)
        if cos is not None:
            pulumi.set(__self__, "cos", cos)
        if cos_marking is not None:
            pulumi.set(__self__, "cos_marking", cos_marking)
        if cos_marking_method is not None:
            pulumi.set(__self__, "cos_marking_method", cos_marking_method)
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dscp_marking_method is not None:
            pulumi.set(__self__, "dscp_marking_method", dscp_marking_method)
        if exceed_bandwidth is not None:
            pulumi.set(__self__, "exceed_bandwidth", exceed_bandwidth)
        if exceed_class_id is not None:
            pulumi.set(__self__, "exceed_class_id", exceed_class_id)
        if exceed_cos is not None:
            pulumi.set(__self__, "exceed_cos", exceed_cos)
        if exceed_dscp is not None:
            pulumi.set(__self__, "exceed_dscp", exceed_dscp)
        if guaranteed_bandwidth is not None:
            pulumi.set(__self__, "guaranteed_bandwidth", guaranteed_bandwidth)
        if maximum_bandwidth is not None:
            pulumi.set(__self__, "maximum_bandwidth", maximum_bandwidth)
        if maximum_cos is not None:
            pulumi.set(__self__, "maximum_cos", maximum_cos)
        if maximum_dscp is not None:
            pulumi.set(__self__, "maximum_dscp", maximum_dscp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overhead is not None:
            pulumi.set(__self__, "overhead", overhead)
        if per_policy is not None:
            pulumi.set(__self__, "per_policy", per_policy)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bandwidthUnit")
    def bandwidth_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
        """
        return pulumi.get(self, "bandwidth_unit")

    @bandwidth_unit.setter
    def bandwidth_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_unit", value)

    @property
    @pulumi.getter
    def cos(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN CoS mark.
        """
        return pulumi.get(self, "cos")

    @cos.setter
    def cos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos", value)

    @property
    @pulumi.getter(name="cosMarking")
    def cos_marking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cos_marking")

    @cos_marking.setter
    def cos_marking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_marking", value)

    @property
    @pulumi.getter(name="cosMarkingMethod")
    def cos_marking_method(self) -> Optional[pulumi.Input[str]]:
        """
        Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
        """
        return pulumi.get(self, "cos_marking_method")

    @cos_marking_method.setter
    def cos_marking_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_marking_method", value)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        DiffServ setting to be applied to traffic accepted by this shaper.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dscpMarkingMethod")
    def dscp_marking_method(self) -> Optional[pulumi.Input[str]]:
        """
        Select DSCP marking method. Valid values: `multi-stage`, `static`.
        """
        return pulumi.get(self, "dscp_marking_method")

    @dscp_marking_method.setter
    def dscp_marking_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_marking_method", value)

    @property
    @pulumi.getter(name="exceedBandwidth")
    def exceed_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
        """
        return pulumi.get(self, "exceed_bandwidth")

    @exceed_bandwidth.setter
    def exceed_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exceed_bandwidth", value)

    @property
    @pulumi.getter(name="exceedClassId")
    def exceed_class_id(self) -> Optional[pulumi.Input[int]]:
        """
        Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
        """
        return pulumi.get(self, "exceed_class_id")

    @exceed_class_id.setter
    def exceed_class_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exceed_class_id", value)

    @property
    @pulumi.getter(name="exceedCos")
    def exceed_cos(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        """
        return pulumi.get(self, "exceed_cos")

    @exceed_cos.setter
    def exceed_cos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exceed_cos", value)

    @property
    @pulumi.getter(name="exceedDscp")
    def exceed_dscp(self) -> Optional[pulumi.Input[str]]:
        """
        DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        """
        return pulumi.get(self, "exceed_dscp")

    @exceed_dscp.setter
    def exceed_dscp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exceed_dscp", value)

    @property
    @pulumi.getter(name="guaranteedBandwidth")
    def guaranteed_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        """
        return pulumi.get(self, "guaranteed_bandwidth")

    @guaranteed_bandwidth.setter
    def guaranteed_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "guaranteed_bandwidth", value)

    @property
    @pulumi.getter(name="maximumBandwidth")
    def maximum_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        """
        return pulumi.get(self, "maximum_bandwidth")

    @maximum_bandwidth.setter
    def maximum_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bandwidth", value)

    @property
    @pulumi.getter(name="maximumCos")
    def maximum_cos(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        """
        return pulumi.get(self, "maximum_cos")

    @maximum_cos.setter
    def maximum_cos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_cos", value)

    @property
    @pulumi.getter(name="maximumDscp")
    def maximum_dscp(self) -> Optional[pulumi.Input[str]]:
        """
        DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        """
        return pulumi.get(self, "maximum_dscp")

    @maximum_dscp.setter
    def maximum_dscp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_dscp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def overhead(self) -> Optional[pulumi.Input[int]]:
        """
        Per-packet size overhead used in rate computations.
        """
        return pulumi.get(self, "overhead")

    @overhead.setter
    def overhead(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "overhead", value)

    @property
    @pulumi.getter(name="perPolicy")
    def per_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "per_policy")

    @per_policy.setter
    def per_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_policy", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Trafficshaper(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_unit: Optional[pulumi.Input[str]] = None,
                 cos: Optional[pulumi.Input[str]] = None,
                 cos_marking: Optional[pulumi.Input[str]] = None,
                 cos_marking_method: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_marking_method: Optional[pulumi.Input[str]] = None,
                 exceed_bandwidth: Optional[pulumi.Input[int]] = None,
                 exceed_class_id: Optional[pulumi.Input[int]] = None,
                 exceed_cos: Optional[pulumi.Input[str]] = None,
                 exceed_dscp: Optional[pulumi.Input[str]] = None,
                 guaranteed_bandwidth: Optional[pulumi.Input[int]] = None,
                 maximum_bandwidth: Optional[pulumi.Input[int]] = None,
                 maximum_cos: Optional[pulumi.Input[str]] = None,
                 maximum_dscp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overhead: Optional[pulumi.Input[int]] = None,
                 per_policy: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure shared traffic shaper.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.shaper.Trafficshaper("trname",
            bandwidth_unit="kbps",
            diffserv="disable",
            diffservcode="000000",
            guaranteed_bandwidth=0,
            maximum_bandwidth=1024,
            per_policy="disable",
            priority="low")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        FirewallShaper TrafficShaper can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/shaper/trafficshaper:Trafficshaper labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/shaper/trafficshaper:Trafficshaper labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bandwidth_unit: Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
        :param pulumi.Input[str] cos: VLAN CoS mark.
        :param pulumi.Input[str] cos_marking: Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cos_marking_method: Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
        :param pulumi.Input[str] diffserv: Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode: DiffServ setting to be applied to traffic accepted by this shaper.
        :param pulumi.Input[str] dscp_marking_method: Select DSCP marking method. Valid values: `multi-stage`, `static`.
        :param pulumi.Input[int] exceed_bandwidth: Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
        :param pulumi.Input[int] exceed_class_id: Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] exceed_cos: VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        :param pulumi.Input[str] exceed_dscp: DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        :param pulumi.Input[int] guaranteed_bandwidth: Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        :param pulumi.Input[int] maximum_bandwidth: Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        :param pulumi.Input[str] maximum_cos: VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] maximum_dscp: DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] name: Traffic shaper name.
        :param pulumi.Input[int] overhead: Per-packet size overhead used in rate computations.
        :param pulumi.Input[str] per_policy: Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] priority: Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TrafficshaperArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure shared traffic shaper.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.firewall.shaper.Trafficshaper("trname",
            bandwidth_unit="kbps",
            diffserv="disable",
            diffservcode="000000",
            guaranteed_bandwidth=0,
            maximum_bandwidth=1024,
            per_policy="disable",
            priority="low")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        FirewallShaper TrafficShaper can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/shaper/trafficshaper:Trafficshaper labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/shaper/trafficshaper:Trafficshaper labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param TrafficshaperArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrafficshaperArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_unit: Optional[pulumi.Input[str]] = None,
                 cos: Optional[pulumi.Input[str]] = None,
                 cos_marking: Optional[pulumi.Input[str]] = None,
                 cos_marking_method: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_marking_method: Optional[pulumi.Input[str]] = None,
                 exceed_bandwidth: Optional[pulumi.Input[int]] = None,
                 exceed_class_id: Optional[pulumi.Input[int]] = None,
                 exceed_cos: Optional[pulumi.Input[str]] = None,
                 exceed_dscp: Optional[pulumi.Input[str]] = None,
                 guaranteed_bandwidth: Optional[pulumi.Input[int]] = None,
                 maximum_bandwidth: Optional[pulumi.Input[int]] = None,
                 maximum_cos: Optional[pulumi.Input[str]] = None,
                 maximum_dscp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overhead: Optional[pulumi.Input[int]] = None,
                 per_policy: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrafficshaperArgs.__new__(TrafficshaperArgs)

            __props__.__dict__["bandwidth_unit"] = bandwidth_unit
            __props__.__dict__["cos"] = cos
            __props__.__dict__["cos_marking"] = cos_marking
            __props__.__dict__["cos_marking_method"] = cos_marking_method
            __props__.__dict__["diffserv"] = diffserv
            __props__.__dict__["diffservcode"] = diffservcode
            __props__.__dict__["dscp_marking_method"] = dscp_marking_method
            __props__.__dict__["exceed_bandwidth"] = exceed_bandwidth
            __props__.__dict__["exceed_class_id"] = exceed_class_id
            __props__.__dict__["exceed_cos"] = exceed_cos
            __props__.__dict__["exceed_dscp"] = exceed_dscp
            __props__.__dict__["guaranteed_bandwidth"] = guaranteed_bandwidth
            __props__.__dict__["maximum_bandwidth"] = maximum_bandwidth
            __props__.__dict__["maximum_cos"] = maximum_cos
            __props__.__dict__["maximum_dscp"] = maximum_dscp
            __props__.__dict__["name"] = name
            __props__.__dict__["overhead"] = overhead
            __props__.__dict__["per_policy"] = per_policy
            __props__.__dict__["priority"] = priority
            __props__.__dict__["vdomparam"] = vdomparam
        super(Trafficshaper, __self__).__init__(
            'fortios:firewall/shaper/trafficshaper:Trafficshaper',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth_unit: Optional[pulumi.Input[str]] = None,
            cos: Optional[pulumi.Input[str]] = None,
            cos_marking: Optional[pulumi.Input[str]] = None,
            cos_marking_method: Optional[pulumi.Input[str]] = None,
            diffserv: Optional[pulumi.Input[str]] = None,
            diffservcode: Optional[pulumi.Input[str]] = None,
            dscp_marking_method: Optional[pulumi.Input[str]] = None,
            exceed_bandwidth: Optional[pulumi.Input[int]] = None,
            exceed_class_id: Optional[pulumi.Input[int]] = None,
            exceed_cos: Optional[pulumi.Input[str]] = None,
            exceed_dscp: Optional[pulumi.Input[str]] = None,
            guaranteed_bandwidth: Optional[pulumi.Input[int]] = None,
            maximum_bandwidth: Optional[pulumi.Input[int]] = None,
            maximum_cos: Optional[pulumi.Input[str]] = None,
            maximum_dscp: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            overhead: Optional[pulumi.Input[int]] = None,
            per_policy: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Trafficshaper':
        """
        Get an existing Trafficshaper resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bandwidth_unit: Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
        :param pulumi.Input[str] cos: VLAN CoS mark.
        :param pulumi.Input[str] cos_marking: Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cos_marking_method: Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
        :param pulumi.Input[str] diffserv: Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode: DiffServ setting to be applied to traffic accepted by this shaper.
        :param pulumi.Input[str] dscp_marking_method: Select DSCP marking method. Valid values: `multi-stage`, `static`.
        :param pulumi.Input[int] exceed_bandwidth: Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
        :param pulumi.Input[int] exceed_class_id: Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] exceed_cos: VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        :param pulumi.Input[str] exceed_dscp: DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        :param pulumi.Input[int] guaranteed_bandwidth: Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        :param pulumi.Input[int] maximum_bandwidth: Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        :param pulumi.Input[str] maximum_cos: VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] maximum_dscp: DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        :param pulumi.Input[str] name: Traffic shaper name.
        :param pulumi.Input[int] overhead: Per-packet size overhead used in rate computations.
        :param pulumi.Input[str] per_policy: Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] priority: Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TrafficshaperState.__new__(_TrafficshaperState)

        __props__.__dict__["bandwidth_unit"] = bandwidth_unit
        __props__.__dict__["cos"] = cos
        __props__.__dict__["cos_marking"] = cos_marking
        __props__.__dict__["cos_marking_method"] = cos_marking_method
        __props__.__dict__["diffserv"] = diffserv
        __props__.__dict__["diffservcode"] = diffservcode
        __props__.__dict__["dscp_marking_method"] = dscp_marking_method
        __props__.__dict__["exceed_bandwidth"] = exceed_bandwidth
        __props__.__dict__["exceed_class_id"] = exceed_class_id
        __props__.__dict__["exceed_cos"] = exceed_cos
        __props__.__dict__["exceed_dscp"] = exceed_dscp
        __props__.__dict__["guaranteed_bandwidth"] = guaranteed_bandwidth
        __props__.__dict__["maximum_bandwidth"] = maximum_bandwidth
        __props__.__dict__["maximum_cos"] = maximum_cos
        __props__.__dict__["maximum_dscp"] = maximum_dscp
        __props__.__dict__["name"] = name
        __props__.__dict__["overhead"] = overhead
        __props__.__dict__["per_policy"] = per_policy
        __props__.__dict__["priority"] = priority
        __props__.__dict__["vdomparam"] = vdomparam
        return Trafficshaper(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bandwidthUnit")
    def bandwidth_unit(self) -> pulumi.Output[str]:
        """
        Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
        """
        return pulumi.get(self, "bandwidth_unit")

    @property
    @pulumi.getter
    def cos(self) -> pulumi.Output[str]:
        """
        VLAN CoS mark.
        """
        return pulumi.get(self, "cos")

    @property
    @pulumi.getter(name="cosMarking")
    def cos_marking(self) -> pulumi.Output[str]:
        """
        Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cos_marking")

    @property
    @pulumi.getter(name="cosMarkingMethod")
    def cos_marking_method(self) -> pulumi.Output[str]:
        """
        Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
        """
        return pulumi.get(self, "cos_marking_method")

    @property
    @pulumi.getter
    def diffserv(self) -> pulumi.Output[str]:
        """
        Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv")

    @property
    @pulumi.getter
    def diffservcode(self) -> pulumi.Output[str]:
        """
        DiffServ setting to be applied to traffic accepted by this shaper.
        """
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dscpMarkingMethod")
    def dscp_marking_method(self) -> pulumi.Output[str]:
        """
        Select DSCP marking method. Valid values: `multi-stage`, `static`.
        """
        return pulumi.get(self, "dscp_marking_method")

    @property
    @pulumi.getter(name="exceedBandwidth")
    def exceed_bandwidth(self) -> pulumi.Output[int]:
        """
        Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
        """
        return pulumi.get(self, "exceed_bandwidth")

    @property
    @pulumi.getter(name="exceedClassId")
    def exceed_class_id(self) -> pulumi.Output[int]:
        """
        Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
        """
        return pulumi.get(self, "exceed_class_id")

    @property
    @pulumi.getter(name="exceedCos")
    def exceed_cos(self) -> pulumi.Output[str]:
        """
        VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        """
        return pulumi.get(self, "exceed_cos")

    @property
    @pulumi.getter(name="exceedDscp")
    def exceed_dscp(self) -> pulumi.Output[str]:
        """
        DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
        """
        return pulumi.get(self, "exceed_dscp")

    @property
    @pulumi.getter(name="guaranteedBandwidth")
    def guaranteed_bandwidth(self) -> pulumi.Output[int]:
        """
        Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        """
        return pulumi.get(self, "guaranteed_bandwidth")

    @property
    @pulumi.getter(name="maximumBandwidth")
    def maximum_bandwidth(self) -> pulumi.Output[int]:
        """
        Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
        """
        return pulumi.get(self, "maximum_bandwidth")

    @property
    @pulumi.getter(name="maximumCos")
    def maximum_cos(self) -> pulumi.Output[str]:
        """
        VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        """
        return pulumi.get(self, "maximum_cos")

    @property
    @pulumi.getter(name="maximumDscp")
    def maximum_dscp(self) -> pulumi.Output[str]:
        """
        DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
        """
        return pulumi.get(self, "maximum_dscp")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Traffic shaper name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def overhead(self) -> pulumi.Output[int]:
        """
        Per-packet size overhead used in rate computations.
        """
        return pulumi.get(self, "overhead")

    @property
    @pulumi.getter(name="perPolicy")
    def per_policy(self) -> pulumi.Output[str]:
        """
        Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "per_policy")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[str]:
        """
        Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

