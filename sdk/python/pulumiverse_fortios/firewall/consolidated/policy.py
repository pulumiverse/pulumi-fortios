# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyArgs', 'Policy']

@pulumi.input_type
class PolicyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dstaddr4s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr4Args']]]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname4s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname4Args']]]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 srcaddr4s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr4Args']]]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Policy resource.
        :param pulumi.Input[str] action: Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]] app_categories: Application category ID list. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]] app_groups: Application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]] applications: Application ID list. The structure of `application` block is documented below.
        :param pulumi.Input[str] auto_asic_offload: Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] captive_portal_exempt: Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dnsfilter_profile: Name of an existing DNS filter profile.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr4Args']]] dstaddr4s: Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]] dstaddr6s: Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]] dstintfs: Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] fixedport: Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]] fsso_groups: Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]] groups: Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_policy_redirect: Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] internet_service_src_negate: When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ippool: Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outbound: Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyPoolname4Args']]] poolname4s: IPv4 pool names. The structure of `poolname4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]] poolname6s: IPv6 pool names. The structure of `poolname6` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr4Args']]] srcaddr4s: Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]] srcaddr6s: Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]] srcintfs: Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable or disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: Receiver TCP maximum segment size (MSS).
        :param pulumi.Input[int] tcp_mss_sender: Sender TCP maximum segment size (MSS).
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]] url_categories: URL category ID list. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]] users: Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP profile.
        :param pulumi.Input[str] vpntunnel: Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] wanopt: Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wanopt_detection: WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        :param pulumi.Input[str] wanopt_passive_opt: WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
        :param pulumi.Input[str] wanopt_peer: WAN optimization peer.
        :param pulumi.Input[str] wanopt_profile: WAN optimization profile.
        :param pulumi.Input[str] webcache: Enable/disable web cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Webproxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Webproxy profile name.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_groups is not None:
            pulumi.set(__self__, "app_groups", app_groups)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if auto_asic_offload is not None:
            pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if captive_portal_exempt is not None:
            pulumi.set(__self__, "captive_portal_exempt", captive_portal_exempt)
        if cifs_profile is not None:
            pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if diffserv_forward is not None:
            pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse is not None:
            pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward is not None:
            pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev is not None:
            pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dnsfilter_profile is not None:
            pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if dstaddr4s is not None:
            pulumi.set(__self__, "dstaddr4s", dstaddr4s)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddr_negate is not None:
            pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if fixedport is not None:
            pulumi.set(__self__, "fixedport", fixedport)
        if fsso_groups is not None:
            pulumi.set(__self__, "fsso_groups", fsso_groups)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if http_policy_redirect is not None:
            pulumi.set(__self__, "http_policy_redirect", http_policy_redirect)
        if icap_profile is not None:
            pulumi.set(__self__, "icap_profile", icap_profile)
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_negate is not None:
            pulumi.set(__self__, "internet_service_negate", internet_service_negate)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service_src_custom_groups", internet_service_src_custom_groups)
        if internet_service_src_customs is not None:
            pulumi.set(__self__, "internet_service_src_customs", internet_service_src_customs)
        if internet_service_src_groups is not None:
            pulumi.set(__self__, "internet_service_src_groups", internet_service_src_groups)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names is not None:
            pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if internet_service_src_negate is not None:
            pulumi.set(__self__, "internet_service_src_negate", internet_service_src_negate)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if poolname4s is not None:
            pulumi.set(__self__, "poolname4s", poolname4s)
        if poolname6s is not None:
            pulumi.set(__self__, "poolname6s", poolname6s)
        if profile_group is not None:
            pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if service_negate is not None:
            pulumi.set(__self__, "service_negate", service_negate)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if srcaddr4s is not None:
            pulumi.set(__self__, "srcaddr4s", srcaddr4s)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddr_negate is not None:
            pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if ssh_filter_profile is not None:
            pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect is not None:
            pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_mss_receiver is not None:
            pulumi.set(__self__, "tcp_mss_receiver", tcp_mss_receiver)
        if tcp_mss_sender is not None:
            pulumi.set(__self__, "tcp_mss_sender", tcp_mss_sender)
        if traffic_shaper is not None:
            pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse is not None:
            pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if voip_profile is not None:
            pulumi.set(__self__, "voip_profile", voip_profile)
        if vpntunnel is not None:
            pulumi.set(__self__, "vpntunnel", vpntunnel)
        if waf_profile is not None:
            pulumi.set(__self__, "waf_profile", waf_profile)
        if wanopt is not None:
            pulumi.set(__self__, "wanopt", wanopt)
        if wanopt_detection is not None:
            pulumi.set(__self__, "wanopt_detection", wanopt_detection)
        if wanopt_passive_opt is not None:
            pulumi.set(__self__, "wanopt_passive_opt", wanopt_passive_opt)
        if wanopt_peer is not None:
            pulumi.set(__self__, "wanopt_peer", wanopt_peer)
        if wanopt_profile is not None:
            pulumi.set(__self__, "wanopt_profile", wanopt_profile)
        if webcache is not None:
            pulumi.set(__self__, "webcache", webcache)
        if webcache_https is not None:
            pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server is not None:
            pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile is not None:
            pulumi.set(__self__, "webproxy_profile", webproxy_profile)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]]:
        """
        Application category ID list. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]]:
        """
        Application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @app_groups.setter
    def app_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]]):
        pulumi.set(self, "app_groups", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]]:
        """
        Application ID list. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_asic_offload")

    @auto_asic_offload.setter
    def auto_asic_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_asic_offload", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="captivePortalExempt")
    def captive_portal_exempt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "captive_portal_exempt")

    @captive_portal_exempt.setter
    def captive_portal_exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_exempt", value)

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @cifs_profile.setter
    def cifs_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cifs_profile", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_forward")

    @diffserv_forward.setter
    def diffserv_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_forward", value)

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_reverse")

    @diffserv_reverse.setter
    def diffserv_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_reverse", value)

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @diffservcode_forward.setter
    def diffservcode_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_forward", value)

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @diffservcode_rev.setter
    def diffservcode_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_rev", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profile")

    @dnsfilter_profile.setter
    def dnsfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter_profile", value)

    @property
    @pulumi.getter
    def dstaddr4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr4Args']]]]:
        """
        Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
        """
        return pulumi.get(self, "dstaddr4s")

    @dstaddr4s.setter
    def dstaddr4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr4Args']]]]):
        pulumi.set(self, "dstaddr4s", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]]:
        """
        Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @dstaddr_negate.setter
    def dstaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr_negate", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]]]:
        """
        Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter
    def fixedport(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fixedport")

    @fixedport.setter
    def fixedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixedport", value)

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]]:
        """
        Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @fsso_groups.setter
    def fsso_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]]):
        pulumi.set(self, "fsso_groups", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]]:
        """
        Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_policy_redirect")

    @http_policy_redirect.setter
    def http_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_policy_redirect", value)

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @icap_profile.setter
    def icap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_profile", value)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        """
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]]:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_negate")

    @internet_service_negate.setter
    def internet_service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_negate", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]]:
        """
        Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_custom_groups")

    @internet_service_src_custom_groups.setter
    def internet_service_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]]:
        """
        Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_customs")

    @internet_service_src_customs.setter
    def internet_service_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]]):
        pulumi.set(self, "internet_service_src_customs", value)

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]]:
        """
        Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_groups")

    @internet_service_src_groups.setter
    def internet_service_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]]:
        """
        Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]]:
        """
        Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_names")

    @internet_service_src_names.setter
    def internet_service_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]]):
        pulumi.set(self, "internet_service_src_names", value)

    @property
    @pulumi.getter(name="internetServiceSrcNegate")
    def internet_service_src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src_negate")

    @internet_service_src_negate.setter
    def internet_service_src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src_negate", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        """
        Record logs when a session starts. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter
    def outbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbound")

    @outbound.setter
    def outbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def poolname4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname4Args']]]]:
        """
        IPv4 pool names. The structure of `poolname4` block is documented below.
        """
        return pulumi.get(self, "poolname4s")

    @poolname4s.setter
    def poolname4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname4Args']]]]):
        pulumi.set(self, "poolname4s", value)

    @property
    @pulumi.getter
    def poolname6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]]:
        """
        IPv6 pool names. The structure of `poolname6` block is documented below.
        """
        return pulumi.get(self, "poolname6s")

    @poolname6s.setter
    def poolname6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]]):
        pulumi.set(self, "poolname6s", value)

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @profile_group.setter
    def profile_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_group", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @service_negate.setter
    def service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_negate", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]]:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter
    def srcaddr4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr4Args']]]]:
        """
        Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
        """
        return pulumi.get(self, "srcaddr4s")

    @srcaddr4s.setter
    def srcaddr4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr4Args']]]]):
        pulumi.set(self, "srcaddr4s", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]]:
        """
        Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @srcaddr_negate.setter
    def srcaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr_negate", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]]]:
        """
        Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @ssh_filter_profile.setter
    def ssh_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_filter_profile", value)

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @ssh_policy_redirect.setter
    def ssh_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_policy_redirect", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> Optional[pulumi.Input[int]]:
        """
        Receiver TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @tcp_mss_receiver.setter
    def tcp_mss_receiver(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_receiver", value)

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> Optional[pulumi.Input[int]]:
        """
        Sender TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_sender")

    @tcp_mss_sender.setter
    def tcp_mss_sender(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_sender", value)

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @traffic_shaper.setter
    def traffic_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper", value)

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @traffic_shaper_reverse.setter
    def traffic_shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper_reverse", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]]:
        """
        URL category ID list. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]]:
        """
        Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VoIP profile.
        """
        return pulumi.get(self, "voip_profile")

    @voip_profile.setter
    def voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_profile", value)

    @property
    @pulumi.getter
    def vpntunnel(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        """
        return pulumi.get(self, "vpntunnel")

    @vpntunnel.setter
    def vpntunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpntunnel", value)

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @waf_profile.setter
    def waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_profile", value)

    @property
    @pulumi.getter
    def wanopt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wanopt")

    @wanopt.setter
    def wanopt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt", value)

    @property
    @pulumi.getter(name="wanoptDetection")
    def wanopt_detection(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        """
        return pulumi.get(self, "wanopt_detection")

    @wanopt_detection.setter
    def wanopt_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_detection", value)

    @property
    @pulumi.getter(name="wanoptPassiveOpt")
    def wanopt_passive_opt(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
        """
        return pulumi.get(self, "wanopt_passive_opt")

    @wanopt_passive_opt.setter
    def wanopt_passive_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_passive_opt", value)

    @property
    @pulumi.getter(name="wanoptPeer")
    def wanopt_peer(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization peer.
        """
        return pulumi.get(self, "wanopt_peer")

    @wanopt_peer.setter
    def wanopt_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_peer", value)

    @property
    @pulumi.getter(name="wanoptProfile")
    def wanopt_profile(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization profile.
        """
        return pulumi.get(self, "wanopt_profile")

    @wanopt_profile.setter
    def wanopt_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_profile", value)

    @property
    @pulumi.getter
    def webcache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webcache")

    @webcache.setter
    def webcache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache", value)

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "webcache_https")

    @webcache_https.setter
    def webcache_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache_https", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> Optional[pulumi.Input[str]]:
        """
        Webproxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @webproxy_forward_server.setter
    def webproxy_forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_forward_server", value)

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Webproxy profile name.
        """
        return pulumi.get(self, "webproxy_profile")

    @webproxy_profile.setter
    def webproxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_profile", value)


@pulumi.input_type
class _PolicyState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dstaddr4s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr4Args']]]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname4s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname4Args']]]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 srcaddr4s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr4Args']]]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Policy resources.
        :param pulumi.Input[str] action: Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]] app_categories: Application category ID list. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]] app_groups: Application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]] applications: Application ID list. The structure of `application` block is documented below.
        :param pulumi.Input[str] auto_asic_offload: Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] captive_portal_exempt: Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dnsfilter_profile: Name of an existing DNS filter profile.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr4Args']]] dstaddr4s: Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]] dstaddr6s: Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]] dstintfs: Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] fixedport: Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]] fsso_groups: Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]] groups: Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_policy_redirect: Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] internet_service_src_negate: When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ippool: Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outbound: Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyPoolname4Args']]] poolname4s: IPv4 pool names. The structure of `poolname4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]] poolname6s: IPv6 pool names. The structure of `poolname6` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr4Args']]] srcaddr4s: Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]] srcaddr6s: Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]] srcintfs: Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable or disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: Receiver TCP maximum segment size (MSS).
        :param pulumi.Input[int] tcp_mss_sender: Sender TCP maximum segment size (MSS).
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]] url_categories: URL category ID list. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]] users: Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP profile.
        :param pulumi.Input[str] vpntunnel: Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] wanopt: Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wanopt_detection: WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        :param pulumi.Input[str] wanopt_passive_opt: WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
        :param pulumi.Input[str] wanopt_peer: WAN optimization peer.
        :param pulumi.Input[str] wanopt_profile: WAN optimization profile.
        :param pulumi.Input[str] webcache: Enable/disable web cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Webproxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Webproxy profile name.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_groups is not None:
            pulumi.set(__self__, "app_groups", app_groups)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if auto_asic_offload is not None:
            pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if captive_portal_exempt is not None:
            pulumi.set(__self__, "captive_portal_exempt", captive_portal_exempt)
        if cifs_profile is not None:
            pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if diffserv_forward is not None:
            pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse is not None:
            pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward is not None:
            pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev is not None:
            pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dnsfilter_profile is not None:
            pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if dstaddr4s is not None:
            pulumi.set(__self__, "dstaddr4s", dstaddr4s)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddr_negate is not None:
            pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if fixedport is not None:
            pulumi.set(__self__, "fixedport", fixedport)
        if fsso_groups is not None:
            pulumi.set(__self__, "fsso_groups", fsso_groups)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if http_policy_redirect is not None:
            pulumi.set(__self__, "http_policy_redirect", http_policy_redirect)
        if icap_profile is not None:
            pulumi.set(__self__, "icap_profile", icap_profile)
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_negate is not None:
            pulumi.set(__self__, "internet_service_negate", internet_service_negate)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service_src_custom_groups", internet_service_src_custom_groups)
        if internet_service_src_customs is not None:
            pulumi.set(__self__, "internet_service_src_customs", internet_service_src_customs)
        if internet_service_src_groups is not None:
            pulumi.set(__self__, "internet_service_src_groups", internet_service_src_groups)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names is not None:
            pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if internet_service_src_negate is not None:
            pulumi.set(__self__, "internet_service_src_negate", internet_service_src_negate)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if poolname4s is not None:
            pulumi.set(__self__, "poolname4s", poolname4s)
        if poolname6s is not None:
            pulumi.set(__self__, "poolname6s", poolname6s)
        if profile_group is not None:
            pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if service_negate is not None:
            pulumi.set(__self__, "service_negate", service_negate)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if srcaddr4s is not None:
            pulumi.set(__self__, "srcaddr4s", srcaddr4s)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddr_negate is not None:
            pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if ssh_filter_profile is not None:
            pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect is not None:
            pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_mss_receiver is not None:
            pulumi.set(__self__, "tcp_mss_receiver", tcp_mss_receiver)
        if tcp_mss_sender is not None:
            pulumi.set(__self__, "tcp_mss_sender", tcp_mss_sender)
        if traffic_shaper is not None:
            pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse is not None:
            pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if voip_profile is not None:
            pulumi.set(__self__, "voip_profile", voip_profile)
        if vpntunnel is not None:
            pulumi.set(__self__, "vpntunnel", vpntunnel)
        if waf_profile is not None:
            pulumi.set(__self__, "waf_profile", waf_profile)
        if wanopt is not None:
            pulumi.set(__self__, "wanopt", wanopt)
        if wanopt_detection is not None:
            pulumi.set(__self__, "wanopt_detection", wanopt_detection)
        if wanopt_passive_opt is not None:
            pulumi.set(__self__, "wanopt_passive_opt", wanopt_passive_opt)
        if wanopt_peer is not None:
            pulumi.set(__self__, "wanopt_peer", wanopt_peer)
        if wanopt_profile is not None:
            pulumi.set(__self__, "wanopt_profile", wanopt_profile)
        if webcache is not None:
            pulumi.set(__self__, "webcache", webcache)
        if webcache_https is not None:
            pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server is not None:
            pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile is not None:
            pulumi.set(__self__, "webproxy_profile", webproxy_profile)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]]:
        """
        Application category ID list. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]]:
        """
        Application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @app_groups.setter
    def app_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAppGroupArgs']]]]):
        pulumi.set(self, "app_groups", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]]:
        """
        Application ID list. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_asic_offload")

    @auto_asic_offload.setter
    def auto_asic_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_asic_offload", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="captivePortalExempt")
    def captive_portal_exempt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "captive_portal_exempt")

    @captive_portal_exempt.setter
    def captive_portal_exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_exempt", value)

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @cifs_profile.setter
    def cifs_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cifs_profile", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_forward")

    @diffserv_forward.setter
    def diffserv_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_forward", value)

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_reverse")

    @diffserv_reverse.setter
    def diffserv_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_reverse", value)

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @diffservcode_forward.setter
    def diffservcode_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_forward", value)

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> Optional[pulumi.Input[str]]:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @diffservcode_rev.setter
    def diffservcode_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_rev", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profile")

    @dnsfilter_profile.setter
    def dnsfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter_profile", value)

    @property
    @pulumi.getter
    def dstaddr4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr4Args']]]]:
        """
        Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
        """
        return pulumi.get(self, "dstaddr4s")

    @dstaddr4s.setter
    def dstaddr4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr4Args']]]]):
        pulumi.set(self, "dstaddr4s", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]]:
        """
        Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @dstaddr_negate.setter
    def dstaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr_negate", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]]]:
        """
        Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyDstintfArgs']]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter
    def fixedport(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fixedport")

    @fixedport.setter
    def fixedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixedport", value)

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]]:
        """
        Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @fsso_groups.setter
    def fsso_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyFssoGroupArgs']]]]):
        pulumi.set(self, "fsso_groups", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]]:
        """
        Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_policy_redirect")

    @http_policy_redirect.setter
    def http_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_policy_redirect", value)

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @icap_profile.setter
    def icap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_profile", value)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        """
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]]:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_negate")

    @internet_service_negate.setter
    def internet_service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_negate", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]]:
        """
        Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_custom_groups")

    @internet_service_src_custom_groups.setter
    def internet_service_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]]:
        """
        Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_customs")

    @internet_service_src_customs.setter
    def internet_service_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcCustomArgs']]]]):
        pulumi.set(self, "internet_service_src_customs", value)

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]]:
        """
        Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_groups")

    @internet_service_src_groups.setter
    def internet_service_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]]:
        """
        Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcIdArgs']]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]]:
        """
        Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_names")

    @internet_service_src_names.setter
    def internet_service_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInternetServiceSrcNameArgs']]]]):
        pulumi.set(self, "internet_service_src_names", value)

    @property
    @pulumi.getter(name="internetServiceSrcNegate")
    def internet_service_src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src_negate")

    @internet_service_src_negate.setter
    def internet_service_src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src_negate", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        """
        Record logs when a session starts. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter
    def outbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbound")

    @outbound.setter
    def outbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def poolname4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname4Args']]]]:
        """
        IPv4 pool names. The structure of `poolname4` block is documented below.
        """
        return pulumi.get(self, "poolname4s")

    @poolname4s.setter
    def poolname4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname4Args']]]]):
        pulumi.set(self, "poolname4s", value)

    @property
    @pulumi.getter
    def poolname6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]]:
        """
        IPv6 pool names. The structure of `poolname6` block is documented below.
        """
        return pulumi.get(self, "poolname6s")

    @poolname6s.setter
    def poolname6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyPoolname6Args']]]]):
        pulumi.set(self, "poolname6s", value)

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @profile_group.setter
    def profile_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_group", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @service_negate.setter
    def service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_negate", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]]:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter
    def srcaddr4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr4Args']]]]:
        """
        Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
        """
        return pulumi.get(self, "srcaddr4s")

    @srcaddr4s.setter
    def srcaddr4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr4Args']]]]):
        pulumi.set(self, "srcaddr4s", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]]:
        """
        Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @srcaddr_negate.setter
    def srcaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr_negate", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]]]:
        """
        Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @ssh_filter_profile.setter
    def ssh_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_filter_profile", value)

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @ssh_policy_redirect.setter
    def ssh_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_policy_redirect", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> Optional[pulumi.Input[int]]:
        """
        Receiver TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @tcp_mss_receiver.setter
    def tcp_mss_receiver(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_receiver", value)

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> Optional[pulumi.Input[int]]:
        """
        Sender TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_sender")

    @tcp_mss_sender.setter
    def tcp_mss_sender(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_sender", value)

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @traffic_shaper.setter
    def traffic_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper", value)

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @traffic_shaper_reverse.setter
    def traffic_shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper_reverse", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]]:
        """
        URL category ID list. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUrlCategoryArgs']]]]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]]:
        """
        Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing VoIP profile.
        """
        return pulumi.get(self, "voip_profile")

    @voip_profile.setter
    def voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_profile", value)

    @property
    @pulumi.getter
    def vpntunnel(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        """
        return pulumi.get(self, "vpntunnel")

    @vpntunnel.setter
    def vpntunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpntunnel", value)

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @waf_profile.setter
    def waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_profile", value)

    @property
    @pulumi.getter
    def wanopt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wanopt")

    @wanopt.setter
    def wanopt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt", value)

    @property
    @pulumi.getter(name="wanoptDetection")
    def wanopt_detection(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        """
        return pulumi.get(self, "wanopt_detection")

    @wanopt_detection.setter
    def wanopt_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_detection", value)

    @property
    @pulumi.getter(name="wanoptPassiveOpt")
    def wanopt_passive_opt(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
        """
        return pulumi.get(self, "wanopt_passive_opt")

    @wanopt_passive_opt.setter
    def wanopt_passive_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_passive_opt", value)

    @property
    @pulumi.getter(name="wanoptPeer")
    def wanopt_peer(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization peer.
        """
        return pulumi.get(self, "wanopt_peer")

    @wanopt_peer.setter
    def wanopt_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_peer", value)

    @property
    @pulumi.getter(name="wanoptProfile")
    def wanopt_profile(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization profile.
        """
        return pulumi.get(self, "wanopt_profile")

    @wanopt_profile.setter
    def wanopt_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_profile", value)

    @property
    @pulumi.getter
    def webcache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webcache")

    @webcache.setter
    def webcache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache", value)

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "webcache_https")

    @webcache_https.setter
    def webcache_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache_https", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> Optional[pulumi.Input[str]]:
        """
        Webproxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @webproxy_forward_server.setter
    def webproxy_forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_forward_server", value)

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Webproxy profile name.
        """
        return pulumi.get(self, "webproxy_profile")

    @webproxy_profile.setter
    def webproxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_profile", value)


class Policy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppCategoryArgs']]]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppGroupArgs']]]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyApplicationArgs']]]]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dstaddr4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr4Args']]]]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr6Args']]]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstintfArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyFssoGroupArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupArgs']]]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomGroupArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceGroupArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceIdArgs']]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceNameArgs']]]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomArgs']]]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcGroupArgs']]]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcIdArgs']]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcNameArgs']]]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname4Args']]]]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname6Args']]]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyServiceArgs']]]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 srcaddr4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr4Args']]]]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr6Args']]]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcintfArgs']]]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUrlCategoryArgs']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUserArgs']]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure consolidated IPv4/IPv6 policies. Applies to FortiOS Version `<= 6.4.0`.

        ## Import

        FirewallConsolidated Policy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/consolidated/policy:Policy labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/consolidated/policy:Policy labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppCategoryArgs']]]] app_categories: Application category ID list. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppGroupArgs']]]] app_groups: Application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyApplicationArgs']]]] applications: Application ID list. The structure of `application` block is documented below.
        :param pulumi.Input[str] auto_asic_offload: Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] captive_portal_exempt: Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dnsfilter_profile: Name of an existing DNS filter profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr4Args']]]] dstaddr4s: Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr6Args']]]] dstaddr6s: Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstintfArgs']]]] dstintfs: Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] fixedport: Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyFssoGroupArgs']]]] fsso_groups: Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupArgs']]]] groups: Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_policy_redirect: Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomGroupArgs']]]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomArgs']]]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceGroupArgs']]]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceIdArgs']]]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceNameArgs']]]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomGroupArgs']]]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomArgs']]]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcGroupArgs']]]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcIdArgs']]]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcNameArgs']]]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] internet_service_src_negate: When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ippool: Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outbound: Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname4Args']]]] poolname4s: IPv4 pool names. The structure of `poolname4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname6Args']]]] poolname6s: IPv6 pool names. The structure of `poolname6` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyServiceArgs']]]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr4Args']]]] srcaddr4s: Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr6Args']]]] srcaddr6s: Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcintfArgs']]]] srcintfs: Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable or disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: Receiver TCP maximum segment size (MSS).
        :param pulumi.Input[int] tcp_mss_sender: Sender TCP maximum segment size (MSS).
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUrlCategoryArgs']]]] url_categories: URL category ID list. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUserArgs']]]] users: Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP profile.
        :param pulumi.Input[str] vpntunnel: Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] wanopt: Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wanopt_detection: WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        :param pulumi.Input[str] wanopt_passive_opt: WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
        :param pulumi.Input[str] wanopt_peer: WAN optimization peer.
        :param pulumi.Input[str] wanopt_profile: WAN optimization profile.
        :param pulumi.Input[str] webcache: Enable/disable web cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Webproxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Webproxy profile name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure consolidated IPv4/IPv6 policies. Applies to FortiOS Version `<= 6.4.0`.

        ## Import

        FirewallConsolidated Policy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:firewall/consolidated/policy:Policy labelname {{policyid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:firewall/consolidated/policy:Policy labelname {{policyid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param PolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppCategoryArgs']]]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppGroupArgs']]]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyApplicationArgs']]]]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dstaddr4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr4Args']]]]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr6Args']]]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstintfArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyFssoGroupArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupArgs']]]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomGroupArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceGroupArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceIdArgs']]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceNameArgs']]]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomArgs']]]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcGroupArgs']]]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcIdArgs']]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcNameArgs']]]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname4Args']]]]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname6Args']]]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyServiceArgs']]]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 srcaddr4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr4Args']]]]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr6Args']]]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcintfArgs']]]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUrlCategoryArgs']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUserArgs']]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyArgs.__new__(PolicyArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["app_categories"] = app_categories
            __props__.__dict__["app_groups"] = app_groups
            __props__.__dict__["application_list"] = application_list
            __props__.__dict__["applications"] = applications
            __props__.__dict__["auto_asic_offload"] = auto_asic_offload
            __props__.__dict__["av_profile"] = av_profile
            __props__.__dict__["captive_portal_exempt"] = captive_portal_exempt
            __props__.__dict__["cifs_profile"] = cifs_profile
            __props__.__dict__["comments"] = comments
            __props__.__dict__["diffserv_forward"] = diffserv_forward
            __props__.__dict__["diffserv_reverse"] = diffserv_reverse
            __props__.__dict__["diffservcode_forward"] = diffservcode_forward
            __props__.__dict__["diffservcode_rev"] = diffservcode_rev
            __props__.__dict__["dlp_sensor"] = dlp_sensor
            __props__.__dict__["dnsfilter_profile"] = dnsfilter_profile
            __props__.__dict__["dstaddr4s"] = dstaddr4s
            __props__.__dict__["dstaddr6s"] = dstaddr6s
            __props__.__dict__["dstaddr_negate"] = dstaddr_negate
            __props__.__dict__["dstintfs"] = dstintfs
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["emailfilter_profile"] = emailfilter_profile
            __props__.__dict__["fixedport"] = fixedport
            __props__.__dict__["fsso_groups"] = fsso_groups
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["groups"] = groups
            __props__.__dict__["http_policy_redirect"] = http_policy_redirect
            __props__.__dict__["icap_profile"] = icap_profile
            __props__.__dict__["inbound"] = inbound
            __props__.__dict__["inspection_mode"] = inspection_mode
            __props__.__dict__["internet_service"] = internet_service
            __props__.__dict__["internet_service_custom_groups"] = internet_service_custom_groups
            __props__.__dict__["internet_service_customs"] = internet_service_customs
            __props__.__dict__["internet_service_groups"] = internet_service_groups
            __props__.__dict__["internet_service_ids"] = internet_service_ids
            __props__.__dict__["internet_service_names"] = internet_service_names
            __props__.__dict__["internet_service_negate"] = internet_service_negate
            __props__.__dict__["internet_service_src"] = internet_service_src
            __props__.__dict__["internet_service_src_custom_groups"] = internet_service_src_custom_groups
            __props__.__dict__["internet_service_src_customs"] = internet_service_src_customs
            __props__.__dict__["internet_service_src_groups"] = internet_service_src_groups
            __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
            __props__.__dict__["internet_service_src_names"] = internet_service_src_names
            __props__.__dict__["internet_service_src_negate"] = internet_service_src_negate
            __props__.__dict__["ippool"] = ippool
            __props__.__dict__["ips_sensor"] = ips_sensor
            __props__.__dict__["logtraffic"] = logtraffic
            __props__.__dict__["logtraffic_start"] = logtraffic_start
            __props__.__dict__["name"] = name
            __props__.__dict__["nat"] = nat
            __props__.__dict__["outbound"] = outbound
            __props__.__dict__["per_ip_shaper"] = per_ip_shaper
            __props__.__dict__["policyid"] = policyid
            __props__.__dict__["poolname4s"] = poolname4s
            __props__.__dict__["poolname6s"] = poolname6s
            __props__.__dict__["profile_group"] = profile_group
            __props__.__dict__["profile_protocol_options"] = profile_protocol_options
            __props__.__dict__["profile_type"] = profile_type
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["service_negate"] = service_negate
            __props__.__dict__["services"] = services
            __props__.__dict__["session_ttl"] = session_ttl
            __props__.__dict__["spamfilter_profile"] = spamfilter_profile
            __props__.__dict__["srcaddr4s"] = srcaddr4s
            __props__.__dict__["srcaddr6s"] = srcaddr6s
            __props__.__dict__["srcaddr_negate"] = srcaddr_negate
            __props__.__dict__["srcintfs"] = srcintfs
            __props__.__dict__["ssh_filter_profile"] = ssh_filter_profile
            __props__.__dict__["ssh_policy_redirect"] = ssh_policy_redirect
            __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
            __props__.__dict__["status"] = status
            __props__.__dict__["tcp_mss_receiver"] = tcp_mss_receiver
            __props__.__dict__["tcp_mss_sender"] = tcp_mss_sender
            __props__.__dict__["traffic_shaper"] = traffic_shaper
            __props__.__dict__["traffic_shaper_reverse"] = traffic_shaper_reverse
            __props__.__dict__["url_categories"] = url_categories
            __props__.__dict__["users"] = users
            __props__.__dict__["utm_status"] = utm_status
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["voip_profile"] = voip_profile
            __props__.__dict__["vpntunnel"] = vpntunnel
            __props__.__dict__["waf_profile"] = waf_profile
            __props__.__dict__["wanopt"] = wanopt
            __props__.__dict__["wanopt_detection"] = wanopt_detection
            __props__.__dict__["wanopt_passive_opt"] = wanopt_passive_opt
            __props__.__dict__["wanopt_peer"] = wanopt_peer
            __props__.__dict__["wanopt_profile"] = wanopt_profile
            __props__.__dict__["webcache"] = webcache
            __props__.__dict__["webcache_https"] = webcache_https
            __props__.__dict__["webfilter_profile"] = webfilter_profile
            __props__.__dict__["webproxy_forward_server"] = webproxy_forward_server
            __props__.__dict__["webproxy_profile"] = webproxy_profile
        super(Policy, __self__).__init__(
            'fortios:firewall/consolidated/policy:Policy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppCategoryArgs']]]]] = None,
            app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppGroupArgs']]]]] = None,
            application_list: Optional[pulumi.Input[str]] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyApplicationArgs']]]]] = None,
            auto_asic_offload: Optional[pulumi.Input[str]] = None,
            av_profile: Optional[pulumi.Input[str]] = None,
            captive_portal_exempt: Optional[pulumi.Input[str]] = None,
            cifs_profile: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            diffserv_forward: Optional[pulumi.Input[str]] = None,
            diffserv_reverse: Optional[pulumi.Input[str]] = None,
            diffservcode_forward: Optional[pulumi.Input[str]] = None,
            diffservcode_rev: Optional[pulumi.Input[str]] = None,
            dlp_sensor: Optional[pulumi.Input[str]] = None,
            dnsfilter_profile: Optional[pulumi.Input[str]] = None,
            dstaddr4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr4Args']]]]] = None,
            dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr6Args']]]]] = None,
            dstaddr_negate: Optional[pulumi.Input[str]] = None,
            dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstintfArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            emailfilter_profile: Optional[pulumi.Input[str]] = None,
            fixedport: Optional[pulumi.Input[str]] = None,
            fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyFssoGroupArgs']]]]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupArgs']]]]] = None,
            http_policy_redirect: Optional[pulumi.Input[str]] = None,
            icap_profile: Optional[pulumi.Input[str]] = None,
            inbound: Optional[pulumi.Input[str]] = None,
            inspection_mode: Optional[pulumi.Input[str]] = None,
            internet_service: Optional[pulumi.Input[str]] = None,
            internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomGroupArgs']]]]] = None,
            internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomArgs']]]]] = None,
            internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceGroupArgs']]]]] = None,
            internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceIdArgs']]]]] = None,
            internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceNameArgs']]]]] = None,
            internet_service_negate: Optional[pulumi.Input[str]] = None,
            internet_service_src: Optional[pulumi.Input[str]] = None,
            internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
            internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomArgs']]]]] = None,
            internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcGroupArgs']]]]] = None,
            internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcIdArgs']]]]] = None,
            internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcNameArgs']]]]] = None,
            internet_service_src_negate: Optional[pulumi.Input[str]] = None,
            ippool: Optional[pulumi.Input[str]] = None,
            ips_sensor: Optional[pulumi.Input[str]] = None,
            logtraffic: Optional[pulumi.Input[str]] = None,
            logtraffic_start: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nat: Optional[pulumi.Input[str]] = None,
            outbound: Optional[pulumi.Input[str]] = None,
            per_ip_shaper: Optional[pulumi.Input[str]] = None,
            policyid: Optional[pulumi.Input[int]] = None,
            poolname4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname4Args']]]]] = None,
            poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname6Args']]]]] = None,
            profile_group: Optional[pulumi.Input[str]] = None,
            profile_protocol_options: Optional[pulumi.Input[str]] = None,
            profile_type: Optional[pulumi.Input[str]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            service_negate: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyServiceArgs']]]]] = None,
            session_ttl: Optional[pulumi.Input[int]] = None,
            spamfilter_profile: Optional[pulumi.Input[str]] = None,
            srcaddr4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr4Args']]]]] = None,
            srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr6Args']]]]] = None,
            srcaddr_negate: Optional[pulumi.Input[str]] = None,
            srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcintfArgs']]]]] = None,
            ssh_filter_profile: Optional[pulumi.Input[str]] = None,
            ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
            ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
            tcp_mss_sender: Optional[pulumi.Input[int]] = None,
            traffic_shaper: Optional[pulumi.Input[str]] = None,
            traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
            url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUrlCategoryArgs']]]]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUserArgs']]]]] = None,
            utm_status: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            voip_profile: Optional[pulumi.Input[str]] = None,
            vpntunnel: Optional[pulumi.Input[str]] = None,
            waf_profile: Optional[pulumi.Input[str]] = None,
            wanopt: Optional[pulumi.Input[str]] = None,
            wanopt_detection: Optional[pulumi.Input[str]] = None,
            wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
            wanopt_peer: Optional[pulumi.Input[str]] = None,
            wanopt_profile: Optional[pulumi.Input[str]] = None,
            webcache: Optional[pulumi.Input[str]] = None,
            webcache_https: Optional[pulumi.Input[str]] = None,
            webfilter_profile: Optional[pulumi.Input[str]] = None,
            webproxy_forward_server: Optional[pulumi.Input[str]] = None,
            webproxy_profile: Optional[pulumi.Input[str]] = None) -> 'Policy':
        """
        Get an existing Policy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppCategoryArgs']]]] app_categories: Application category ID list. The structure of `app_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAppGroupArgs']]]] app_groups: Application group names. The structure of `app_group` block is documented below.
        :param pulumi.Input[str] application_list: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyApplicationArgs']]]] applications: Application ID list. The structure of `application` block is documented below.
        :param pulumi.Input[str] auto_asic_offload: Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_profile: Name of an existing Antivirus profile.
        :param pulumi.Input[str] captive_portal_exempt: Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cifs_profile: Name of an existing CIFS profile.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] diffserv_forward: Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffserv_reverse: Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode_forward: Change packet's DiffServ to this value.
        :param pulumi.Input[str] diffservcode_rev: Change packet's reverse (reply) DiffServ to this value.
        :param pulumi.Input[str] dlp_sensor: Name of an existing DLP sensor.
        :param pulumi.Input[str] dnsfilter_profile: Name of an existing DNS filter profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr4Args']]]] dstaddr4s: Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstaddr6Args']]]] dstaddr6s: Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[str] dstaddr_negate: When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyDstintfArgs']]]] dstintfs: Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] emailfilter_profile: Name of an existing email filter profile.
        :param pulumi.Input[str] fixedport: Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyFssoGroupArgs']]]] fsso_groups: Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupArgs']]]] groups: Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        :param pulumi.Input[str] http_policy_redirect: Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icap_profile: Name of an existing ICAP profile.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomGroupArgs']]]] internet_service_custom_groups: Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceCustomArgs']]]] internet_service_customs: Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceGroupArgs']]]] internet_service_groups: Internet Service group name. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceIdArgs']]]] internet_service_ids: Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceNameArgs']]]] internet_service_names: Internet Service name. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[str] internet_service_negate: When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomGroupArgs']]]] internet_service_src_custom_groups: Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcCustomArgs']]]] internet_service_src_customs: Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcGroupArgs']]]] internet_service_src_groups: Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcIdArgs']]]] internet_service_src_ids: Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyInternetServiceSrcNameArgs']]]] internet_service_src_names: Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        :param pulumi.Input[str] internet_service_src_negate: When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ippool: Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sensor: Name of an existing IPS sensor.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] outbound: Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname4Args']]]] poolname4s: IPv4 pool names. The structure of `poolname4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyPoolname6Args']]]] poolname6s: IPv6 pool names. The structure of `poolname6` block is documented below.
        :param pulumi.Input[str] profile_group: Name of profile group.
        :param pulumi.Input[str] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        :param pulumi.Input[str] schedule: Schedule name.
        :param pulumi.Input[str] service_negate: When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyServiceArgs']]]] services: Service and service group names. The structure of `service` block is documented below.
        :param pulumi.Input[int] session_ttl: TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        :param pulumi.Input[str] spamfilter_profile: Name of an existing Spam filter profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr4Args']]]] srcaddr4s: Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcaddr6Args']]]] srcaddr6s: Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[str] srcaddr_negate: When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicySrcintfArgs']]]] srcintfs: Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        :param pulumi.Input[str] ssh_filter_profile: Name of an existing SSH filter profile.
        :param pulumi.Input[str] ssh_policy_redirect: Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Name of an existing SSL SSH profile.
        :param pulumi.Input[str] status: Enable or disable this policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tcp_mss_receiver: Receiver TCP maximum segment size (MSS).
        :param pulumi.Input[int] tcp_mss_sender: Sender TCP maximum segment size (MSS).
        :param pulumi.Input[str] traffic_shaper: Traffic shaper.
        :param pulumi.Input[str] traffic_shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUrlCategoryArgs']]]] url_categories: URL category ID list. The structure of `url_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyUserArgs']]]] users: Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        :param pulumi.Input[str] utm_status: Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] uuid: Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] voip_profile: Name of an existing VoIP profile.
        :param pulumi.Input[str] vpntunnel: Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        :param pulumi.Input[str] waf_profile: Name of an existing Web application firewall profile.
        :param pulumi.Input[str] wanopt: Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wanopt_detection: WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        :param pulumi.Input[str] wanopt_passive_opt: WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
        :param pulumi.Input[str] wanopt_peer: WAN optimization peer.
        :param pulumi.Input[str] wanopt_profile: WAN optimization profile.
        :param pulumi.Input[str] webcache: Enable/disable web cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] webcache_https: Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] webfilter_profile: Name of an existing Web filter profile.
        :param pulumi.Input[str] webproxy_forward_server: Webproxy forward server name.
        :param pulumi.Input[str] webproxy_profile: Webproxy profile name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyState.__new__(_PolicyState)

        __props__.__dict__["action"] = action
        __props__.__dict__["app_categories"] = app_categories
        __props__.__dict__["app_groups"] = app_groups
        __props__.__dict__["application_list"] = application_list
        __props__.__dict__["applications"] = applications
        __props__.__dict__["auto_asic_offload"] = auto_asic_offload
        __props__.__dict__["av_profile"] = av_profile
        __props__.__dict__["captive_portal_exempt"] = captive_portal_exempt
        __props__.__dict__["cifs_profile"] = cifs_profile
        __props__.__dict__["comments"] = comments
        __props__.__dict__["diffserv_forward"] = diffserv_forward
        __props__.__dict__["diffserv_reverse"] = diffserv_reverse
        __props__.__dict__["diffservcode_forward"] = diffservcode_forward
        __props__.__dict__["diffservcode_rev"] = diffservcode_rev
        __props__.__dict__["dlp_sensor"] = dlp_sensor
        __props__.__dict__["dnsfilter_profile"] = dnsfilter_profile
        __props__.__dict__["dstaddr4s"] = dstaddr4s
        __props__.__dict__["dstaddr6s"] = dstaddr6s
        __props__.__dict__["dstaddr_negate"] = dstaddr_negate
        __props__.__dict__["dstintfs"] = dstintfs
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["emailfilter_profile"] = emailfilter_profile
        __props__.__dict__["fixedport"] = fixedport
        __props__.__dict__["fsso_groups"] = fsso_groups
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["groups"] = groups
        __props__.__dict__["http_policy_redirect"] = http_policy_redirect
        __props__.__dict__["icap_profile"] = icap_profile
        __props__.__dict__["inbound"] = inbound
        __props__.__dict__["inspection_mode"] = inspection_mode
        __props__.__dict__["internet_service"] = internet_service
        __props__.__dict__["internet_service_custom_groups"] = internet_service_custom_groups
        __props__.__dict__["internet_service_customs"] = internet_service_customs
        __props__.__dict__["internet_service_groups"] = internet_service_groups
        __props__.__dict__["internet_service_ids"] = internet_service_ids
        __props__.__dict__["internet_service_names"] = internet_service_names
        __props__.__dict__["internet_service_negate"] = internet_service_negate
        __props__.__dict__["internet_service_src"] = internet_service_src
        __props__.__dict__["internet_service_src_custom_groups"] = internet_service_src_custom_groups
        __props__.__dict__["internet_service_src_customs"] = internet_service_src_customs
        __props__.__dict__["internet_service_src_groups"] = internet_service_src_groups
        __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
        __props__.__dict__["internet_service_src_names"] = internet_service_src_names
        __props__.__dict__["internet_service_src_negate"] = internet_service_src_negate
        __props__.__dict__["ippool"] = ippool
        __props__.__dict__["ips_sensor"] = ips_sensor
        __props__.__dict__["logtraffic"] = logtraffic
        __props__.__dict__["logtraffic_start"] = logtraffic_start
        __props__.__dict__["name"] = name
        __props__.__dict__["nat"] = nat
        __props__.__dict__["outbound"] = outbound
        __props__.__dict__["per_ip_shaper"] = per_ip_shaper
        __props__.__dict__["policyid"] = policyid
        __props__.__dict__["poolname4s"] = poolname4s
        __props__.__dict__["poolname6s"] = poolname6s
        __props__.__dict__["profile_group"] = profile_group
        __props__.__dict__["profile_protocol_options"] = profile_protocol_options
        __props__.__dict__["profile_type"] = profile_type
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["service_negate"] = service_negate
        __props__.__dict__["services"] = services
        __props__.__dict__["session_ttl"] = session_ttl
        __props__.__dict__["spamfilter_profile"] = spamfilter_profile
        __props__.__dict__["srcaddr4s"] = srcaddr4s
        __props__.__dict__["srcaddr6s"] = srcaddr6s
        __props__.__dict__["srcaddr_negate"] = srcaddr_negate
        __props__.__dict__["srcintfs"] = srcintfs
        __props__.__dict__["ssh_filter_profile"] = ssh_filter_profile
        __props__.__dict__["ssh_policy_redirect"] = ssh_policy_redirect
        __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
        __props__.__dict__["status"] = status
        __props__.__dict__["tcp_mss_receiver"] = tcp_mss_receiver
        __props__.__dict__["tcp_mss_sender"] = tcp_mss_sender
        __props__.__dict__["traffic_shaper"] = traffic_shaper
        __props__.__dict__["traffic_shaper_reverse"] = traffic_shaper_reverse
        __props__.__dict__["url_categories"] = url_categories
        __props__.__dict__["users"] = users
        __props__.__dict__["utm_status"] = utm_status
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["voip_profile"] = voip_profile
        __props__.__dict__["vpntunnel"] = vpntunnel
        __props__.__dict__["waf_profile"] = waf_profile
        __props__.__dict__["wanopt"] = wanopt
        __props__.__dict__["wanopt_detection"] = wanopt_detection
        __props__.__dict__["wanopt_passive_opt"] = wanopt_passive_opt
        __props__.__dict__["wanopt_peer"] = wanopt_peer
        __props__.__dict__["wanopt_profile"] = wanopt_profile
        __props__.__dict__["webcache"] = webcache
        __props__.__dict__["webcache_https"] = webcache_https
        __props__.__dict__["webfilter_profile"] = webfilter_profile
        __props__.__dict__["webproxy_forward_server"] = webproxy_forward_server
        __props__.__dict__["webproxy_profile"] = webproxy_profile
        return Policy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyAppCategory']]]:
        """
        Application category ID list. The structure of `app_category` block is documented below.
        """
        return pulumi.get(self, "app_categories")

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyAppGroup']]]:
        """
        Application group names. The structure of `app_group` block is documented below.
        """
        return pulumi.get(self, "app_groups")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> pulumi.Output[str]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyApplication']]]:
        """
        Application ID list. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> pulumi.Output[str]:
        """
        Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_asic_offload")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="captivePortalExempt")
    def captive_portal_exempt(self) -> pulumi.Output[str]:
        """
        Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "captive_portal_exempt")

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> pulumi.Output[str]:
        """
        Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_forward")

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> pulumi.Output[str]:
        """
        Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv_reverse")

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> pulumi.Output[str]:
        """
        Change packet's DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_forward")

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> pulumi.Output[str]:
        """
        Change packet's reverse (reply) DiffServ to this value.
        """
        return pulumi.get(self, "diffservcode_rev")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> pulumi.Output[str]:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profile")

    @property
    @pulumi.getter
    def dstaddr4s(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyDstaddr4']]]:
        """
        Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
        """
        return pulumi.get(self, "dstaddr4s")

    @property
    @pulumi.getter
    def dstaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyDstaddr6']]]:
        """
        Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> pulumi.Output[str]:
        """
        When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dstaddr_negate")

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyDstintf']]]:
        """
        Outgoing (egress) interface. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter
    def fixedport(self) -> pulumi.Output[str]:
        """
        Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fixedport")

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyFssoGroup']]]:
        """
        Names of FSSO groups. The structure of `fsso_groups` block is documented below.
        """
        return pulumi.get(self, "fsso_groups")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyGroup']]]:
        """
        Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> pulumi.Output[str]:
        """
        Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_policy_redirect")

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @property
    @pulumi.getter
    def inbound(self) -> pulumi.Output[str]:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inbound")

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> pulumi.Output[str]:
        """
        Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
        """
        return pulumi.get(self, "inspection_mode")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> pulumi.Output[str]:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceCustomGroup']]]:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceCustom']]]:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceGroup']]]:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceId']]]:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceName']]]:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> pulumi.Output[str]:
        """
        When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_negate")

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> pulumi.Output[str]:
        """
        Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src")

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceSrcCustomGroup']]]:
        """
        Custom Internet Service source group name. The structure of `internet_service_src_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_custom_groups")

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceSrcCustom']]]:
        """
        Custom Internet Service source name. The structure of `internet_service_src_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_customs")

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceSrcGroup']]]:
        """
        Internet Service source group name. The structure of `internet_service_src_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_groups")

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceSrcId']]]:
        """
        Internet Service source ID. The structure of `internet_service_src_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyInternetServiceSrcName']]]:
        """
        Internet Service source name. The structure of `internet_service_src_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_src_names")

    @property
    @pulumi.getter(name="internetServiceSrcNegate")
    def internet_service_src_negate(self) -> pulumi.Output[str]:
        """
        When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service_src_negate")

    @property
    @pulumi.getter
    def ippool(self) -> pulumi.Output[str]:
        """
        Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ippool")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> pulumi.Output[str]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter
    def logtraffic(self) -> pulumi.Output[str]:
        """
        Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
        """
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> pulumi.Output[str]:
        """
        Record logs when a session starts. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logtraffic_start")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat(self) -> pulumi.Output[str]:
        """
        Enable/disable source NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter
    def outbound(self) -> pulumi.Output[str]:
        """
        Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbound")

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> pulumi.Output[str]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @property
    @pulumi.getter
    def policyid(self) -> pulumi.Output[int]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def poolname4s(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyPoolname4']]]:
        """
        IPv4 pool names. The structure of `poolname4` block is documented below.
        """
        return pulumi.get(self, "poolname4s")

    @property
    @pulumi.getter
    def poolname6s(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyPoolname6']]]:
        """
        IPv6 pool names. The structure of `poolname6` block is documented below.
        """
        return pulumi.get(self, "poolname6s")

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> pulumi.Output[str]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> pulumi.Output[str]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> pulumi.Output[str]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[str]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> pulumi.Output[str]:
        """
        When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_negate")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyService']]]:
        """
        Service and service group names. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> pulumi.Output[int]:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter
    def srcaddr4s(self) -> pulumi.Output[Optional[Sequence['outputs.PolicySrcaddr4']]]:
        """
        Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
        """
        return pulumi.get(self, "srcaddr4s")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.PolicySrcaddr6']]]:
        """
        Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> pulumi.Output[str]:
        """
        When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "srcaddr_negate")

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Output[Optional[Sequence['outputs.PolicySrcintf']]]:
        """
        Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> pulumi.Output[str]:
        """
        Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable or disable this policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> pulumi.Output[int]:
        """
        Receiver TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_receiver")

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> pulumi.Output[int]:
        """
        Sender TCP maximum segment size (MSS).
        """
        return pulumi.get(self, "tcp_mss_sender")

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> pulumi.Output[str]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper")

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> pulumi.Output[str]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverse")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyUrlCategory']]]:
        """
        URL category ID list. The structure of `url_category` block is documented below.
        """
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyUser']]]:
        """
        Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> pulumi.Output[str]:
        """
        Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_status")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing VoIP profile.
        """
        return pulumi.get(self, "voip_profile")

    @property
    @pulumi.getter
    def vpntunnel(self) -> pulumi.Output[str]:
        """
        Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
        """
        return pulumi.get(self, "vpntunnel")

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @property
    @pulumi.getter
    def wanopt(self) -> pulumi.Output[str]:
        """
        Enable/disable WAN optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wanopt")

    @property
    @pulumi.getter(name="wanoptDetection")
    def wanopt_detection(self) -> pulumi.Output[str]:
        """
        WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
        """
        return pulumi.get(self, "wanopt_detection")

    @property
    @pulumi.getter(name="wanoptPassiveOpt")
    def wanopt_passive_opt(self) -> pulumi.Output[str]:
        """
        WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
        """
        return pulumi.get(self, "wanopt_passive_opt")

    @property
    @pulumi.getter(name="wanoptPeer")
    def wanopt_peer(self) -> pulumi.Output[str]:
        """
        WAN optimization peer.
        """
        return pulumi.get(self, "wanopt_peer")

    @property
    @pulumi.getter(name="wanoptProfile")
    def wanopt_profile(self) -> pulumi.Output[str]:
        """
        WAN optimization profile.
        """
        return pulumi.get(self, "wanopt_profile")

    @property
    @pulumi.getter
    def webcache(self) -> pulumi.Output[str]:
        """
        Enable/disable web cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webcache")

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> pulumi.Output[str]:
        """
        Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "webcache_https")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> pulumi.Output[str]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> pulumi.Output[str]:
        """
        Webproxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> pulumi.Output[str]:
        """
        Webproxy profile name.
        """
        return pulumi.get(self, "webproxy_profile")

