# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetProxypolicyResult',
    'AwaitableGetProxypolicyResult',
    'get_proxypolicy',
    'get_proxypolicy_output',
]

@pulumi.output_type
class GetProxypolicyResult:
    """
    A collection of values returned by getProxypolicy.
    """
    def __init__(__self__, access_proxies=None, access_proxy6s=None, action=None, application_list=None, av_profile=None, block_notification=None, casb_profile=None, cifs_profile=None, comments=None, decrypted_traffic_mirror=None, detect_https_in_http_request=None, device_ownership=None, diameter_filter_profile=None, disclaimer=None, dlp_profile=None, dlp_sensor=None, dstaddr6s=None, dstaddr_negate=None, dstaddrs=None, dstintfs=None, emailfilter_profile=None, file_filter_profile=None, global_label=None, groups=None, http_tunnel_auth=None, icap_profile=None, id=None, internet_service=None, internet_service6=None, internet_service6_custom_groups=None, internet_service6_customs=None, internet_service6_groups=None, internet_service6_names=None, internet_service6_negate=None, internet_service_custom_groups=None, internet_service_customs=None, internet_service_groups=None, internet_service_ids=None, internet_service_names=None, internet_service_negate=None, ips_sensor=None, ips_voip_filter=None, label=None, logtraffic=None, logtraffic_start=None, name=None, policyid=None, poolnames=None, profile_group=None, profile_protocol_options=None, profile_type=None, proxy=None, redirect_url=None, replacemsg_override_group=None, scan_botnet_connections=None, schedule=None, sctp_filter_profile=None, service_negate=None, services=None, session_ttl=None, spamfilter_profile=None, srcaddr6s=None, srcaddr_negate=None, srcaddrs=None, srcintfs=None, ssh_filter_profile=None, ssh_policy_redirect=None, ssl_ssh_profile=None, status=None, transparent=None, users=None, utm_status=None, uuid=None, vdomparam=None, videofilter_profile=None, virtual_patch_profile=None, voip_profile=None, waf_profile=None, webcache=None, webcache_https=None, webfilter_profile=None, webproxy_forward_server=None, webproxy_profile=None, ztna_ems_tags=None, ztna_tags_match_logic=None):
        if access_proxies and not isinstance(access_proxies, list):
            raise TypeError("Expected argument 'access_proxies' to be a list")
        pulumi.set(__self__, "access_proxies", access_proxies)
        if access_proxy6s and not isinstance(access_proxy6s, list):
            raise TypeError("Expected argument 'access_proxy6s' to be a list")
        pulumi.set(__self__, "access_proxy6s", access_proxy6s)
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if application_list and not isinstance(application_list, str):
            raise TypeError("Expected argument 'application_list' to be a str")
        pulumi.set(__self__, "application_list", application_list)
        if av_profile and not isinstance(av_profile, str):
            raise TypeError("Expected argument 'av_profile' to be a str")
        pulumi.set(__self__, "av_profile", av_profile)
        if block_notification and not isinstance(block_notification, str):
            raise TypeError("Expected argument 'block_notification' to be a str")
        pulumi.set(__self__, "block_notification", block_notification)
        if casb_profile and not isinstance(casb_profile, str):
            raise TypeError("Expected argument 'casb_profile' to be a str")
        pulumi.set(__self__, "casb_profile", casb_profile)
        if cifs_profile and not isinstance(cifs_profile, str):
            raise TypeError("Expected argument 'cifs_profile' to be a str")
        pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if decrypted_traffic_mirror and not isinstance(decrypted_traffic_mirror, str):
            raise TypeError("Expected argument 'decrypted_traffic_mirror' to be a str")
        pulumi.set(__self__, "decrypted_traffic_mirror", decrypted_traffic_mirror)
        if detect_https_in_http_request and not isinstance(detect_https_in_http_request, str):
            raise TypeError("Expected argument 'detect_https_in_http_request' to be a str")
        pulumi.set(__self__, "detect_https_in_http_request", detect_https_in_http_request)
        if device_ownership and not isinstance(device_ownership, str):
            raise TypeError("Expected argument 'device_ownership' to be a str")
        pulumi.set(__self__, "device_ownership", device_ownership)
        if diameter_filter_profile and not isinstance(diameter_filter_profile, str):
            raise TypeError("Expected argument 'diameter_filter_profile' to be a str")
        pulumi.set(__self__, "diameter_filter_profile", diameter_filter_profile)
        if disclaimer and not isinstance(disclaimer, str):
            raise TypeError("Expected argument 'disclaimer' to be a str")
        pulumi.set(__self__, "disclaimer", disclaimer)
        if dlp_profile and not isinstance(dlp_profile, str):
            raise TypeError("Expected argument 'dlp_profile' to be a str")
        pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_sensor and not isinstance(dlp_sensor, str):
            raise TypeError("Expected argument 'dlp_sensor' to be a str")
        pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dstaddr6s and not isinstance(dstaddr6s, list):
            raise TypeError("Expected argument 'dstaddr6s' to be a list")
        pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddr_negate and not isinstance(dstaddr_negate, str):
            raise TypeError("Expected argument 'dstaddr_negate' to be a str")
        pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstaddrs and not isinstance(dstaddrs, list):
            raise TypeError("Expected argument 'dstaddrs' to be a list")
        pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs and not isinstance(dstintfs, list):
            raise TypeError("Expected argument 'dstintfs' to be a list")
        pulumi.set(__self__, "dstintfs", dstintfs)
        if emailfilter_profile and not isinstance(emailfilter_profile, str):
            raise TypeError("Expected argument 'emailfilter_profile' to be a str")
        pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if file_filter_profile and not isinstance(file_filter_profile, str):
            raise TypeError("Expected argument 'file_filter_profile' to be a str")
        pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if global_label and not isinstance(global_label, str):
            raise TypeError("Expected argument 'global_label' to be a str")
        pulumi.set(__self__, "global_label", global_label)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if http_tunnel_auth and not isinstance(http_tunnel_auth, str):
            raise TypeError("Expected argument 'http_tunnel_auth' to be a str")
        pulumi.set(__self__, "http_tunnel_auth", http_tunnel_auth)
        if icap_profile and not isinstance(icap_profile, str):
            raise TypeError("Expected argument 'icap_profile' to be a str")
        pulumi.set(__self__, "icap_profile", icap_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internet_service and not isinstance(internet_service, str):
            raise TypeError("Expected argument 'internet_service' to be a str")
        pulumi.set(__self__, "internet_service", internet_service)
        if internet_service6 and not isinstance(internet_service6, str):
            raise TypeError("Expected argument 'internet_service6' to be a str")
        pulumi.set(__self__, "internet_service6", internet_service6)
        if internet_service6_custom_groups and not isinstance(internet_service6_custom_groups, list):
            raise TypeError("Expected argument 'internet_service6_custom_groups' to be a list")
        pulumi.set(__self__, "internet_service6_custom_groups", internet_service6_custom_groups)
        if internet_service6_customs and not isinstance(internet_service6_customs, list):
            raise TypeError("Expected argument 'internet_service6_customs' to be a list")
        pulumi.set(__self__, "internet_service6_customs", internet_service6_customs)
        if internet_service6_groups and not isinstance(internet_service6_groups, list):
            raise TypeError("Expected argument 'internet_service6_groups' to be a list")
        pulumi.set(__self__, "internet_service6_groups", internet_service6_groups)
        if internet_service6_names and not isinstance(internet_service6_names, list):
            raise TypeError("Expected argument 'internet_service6_names' to be a list")
        pulumi.set(__self__, "internet_service6_names", internet_service6_names)
        if internet_service6_negate and not isinstance(internet_service6_negate, str):
            raise TypeError("Expected argument 'internet_service6_negate' to be a str")
        pulumi.set(__self__, "internet_service6_negate", internet_service6_negate)
        if internet_service_custom_groups and not isinstance(internet_service_custom_groups, list):
            raise TypeError("Expected argument 'internet_service_custom_groups' to be a list")
        pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs and not isinstance(internet_service_customs, list):
            raise TypeError("Expected argument 'internet_service_customs' to be a list")
        pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups and not isinstance(internet_service_groups, list):
            raise TypeError("Expected argument 'internet_service_groups' to be a list")
        pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids and not isinstance(internet_service_ids, list):
            raise TypeError("Expected argument 'internet_service_ids' to be a list")
        pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names and not isinstance(internet_service_names, list):
            raise TypeError("Expected argument 'internet_service_names' to be a list")
        pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_negate and not isinstance(internet_service_negate, str):
            raise TypeError("Expected argument 'internet_service_negate' to be a str")
        pulumi.set(__self__, "internet_service_negate", internet_service_negate)
        if ips_sensor and not isinstance(ips_sensor, str):
            raise TypeError("Expected argument 'ips_sensor' to be a str")
        pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_voip_filter and not isinstance(ips_voip_filter, str):
            raise TypeError("Expected argument 'ips_voip_filter' to be a str")
        pulumi.set(__self__, "ips_voip_filter", ips_voip_filter)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if logtraffic and not isinstance(logtraffic, str):
            raise TypeError("Expected argument 'logtraffic' to be a str")
        pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start and not isinstance(logtraffic_start, str):
            raise TypeError("Expected argument 'logtraffic_start' to be a str")
        pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policyid and not isinstance(policyid, int):
            raise TypeError("Expected argument 'policyid' to be a int")
        pulumi.set(__self__, "policyid", policyid)
        if poolnames and not isinstance(poolnames, list):
            raise TypeError("Expected argument 'poolnames' to be a list")
        pulumi.set(__self__, "poolnames", poolnames)
        if profile_group and not isinstance(profile_group, str):
            raise TypeError("Expected argument 'profile_group' to be a str")
        pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options and not isinstance(profile_protocol_options, str):
            raise TypeError("Expected argument 'profile_protocol_options' to be a str")
        pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type and not isinstance(profile_type, str):
            raise TypeError("Expected argument 'profile_type' to be a str")
        pulumi.set(__self__, "profile_type", profile_type)
        if proxy and not isinstance(proxy, str):
            raise TypeError("Expected argument 'proxy' to be a str")
        pulumi.set(__self__, "proxy", proxy)
        if redirect_url and not isinstance(redirect_url, str):
            raise TypeError("Expected argument 'redirect_url' to be a str")
        pulumi.set(__self__, "redirect_url", redirect_url)
        if replacemsg_override_group and not isinstance(replacemsg_override_group, str):
            raise TypeError("Expected argument 'replacemsg_override_group' to be a str")
        pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if scan_botnet_connections and not isinstance(scan_botnet_connections, str):
            raise TypeError("Expected argument 'scan_botnet_connections' to be a str")
        pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if schedule and not isinstance(schedule, str):
            raise TypeError("Expected argument 'schedule' to be a str")
        pulumi.set(__self__, "schedule", schedule)
        if sctp_filter_profile and not isinstance(sctp_filter_profile, str):
            raise TypeError("Expected argument 'sctp_filter_profile' to be a str")
        pulumi.set(__self__, "sctp_filter_profile", sctp_filter_profile)
        if service_negate and not isinstance(service_negate, str):
            raise TypeError("Expected argument 'service_negate' to be a str")
        pulumi.set(__self__, "service_negate", service_negate)
        if services and not isinstance(services, list):
            raise TypeError("Expected argument 'services' to be a list")
        pulumi.set(__self__, "services", services)
        if session_ttl and not isinstance(session_ttl, int):
            raise TypeError("Expected argument 'session_ttl' to be a int")
        pulumi.set(__self__, "session_ttl", session_ttl)
        if spamfilter_profile and not isinstance(spamfilter_profile, str):
            raise TypeError("Expected argument 'spamfilter_profile' to be a str")
        pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if srcaddr6s and not isinstance(srcaddr6s, list):
            raise TypeError("Expected argument 'srcaddr6s' to be a list")
        pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddr_negate and not isinstance(srcaddr_negate, str):
            raise TypeError("Expected argument 'srcaddr_negate' to be a str")
        pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcaddrs and not isinstance(srcaddrs, list):
            raise TypeError("Expected argument 'srcaddrs' to be a list")
        pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs and not isinstance(srcintfs, list):
            raise TypeError("Expected argument 'srcintfs' to be a list")
        pulumi.set(__self__, "srcintfs", srcintfs)
        if ssh_filter_profile and not isinstance(ssh_filter_profile, str):
            raise TypeError("Expected argument 'ssh_filter_profile' to be a str")
        pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect and not isinstance(ssh_policy_redirect, str):
            raise TypeError("Expected argument 'ssh_policy_redirect' to be a str")
        pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_ssh_profile and not isinstance(ssl_ssh_profile, str):
            raise TypeError("Expected argument 'ssl_ssh_profile' to be a str")
        pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if transparent and not isinstance(transparent, str):
            raise TypeError("Expected argument 'transparent' to be a str")
        pulumi.set(__self__, "transparent", transparent)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)
        if utm_status and not isinstance(utm_status, str):
            raise TypeError("Expected argument 'utm_status' to be a str")
        pulumi.set(__self__, "utm_status", utm_status)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_profile and not isinstance(videofilter_profile, str):
            raise TypeError("Expected argument 'videofilter_profile' to be a str")
        pulumi.set(__self__, "videofilter_profile", videofilter_profile)
        if virtual_patch_profile and not isinstance(virtual_patch_profile, str):
            raise TypeError("Expected argument 'virtual_patch_profile' to be a str")
        pulumi.set(__self__, "virtual_patch_profile", virtual_patch_profile)
        if voip_profile and not isinstance(voip_profile, str):
            raise TypeError("Expected argument 'voip_profile' to be a str")
        pulumi.set(__self__, "voip_profile", voip_profile)
        if waf_profile and not isinstance(waf_profile, str):
            raise TypeError("Expected argument 'waf_profile' to be a str")
        pulumi.set(__self__, "waf_profile", waf_profile)
        if webcache and not isinstance(webcache, str):
            raise TypeError("Expected argument 'webcache' to be a str")
        pulumi.set(__self__, "webcache", webcache)
        if webcache_https and not isinstance(webcache_https, str):
            raise TypeError("Expected argument 'webcache_https' to be a str")
        pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile and not isinstance(webfilter_profile, str):
            raise TypeError("Expected argument 'webfilter_profile' to be a str")
        pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server and not isinstance(webproxy_forward_server, str):
            raise TypeError("Expected argument 'webproxy_forward_server' to be a str")
        pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile and not isinstance(webproxy_profile, str):
            raise TypeError("Expected argument 'webproxy_profile' to be a str")
        pulumi.set(__self__, "webproxy_profile", webproxy_profile)
        if ztna_ems_tags and not isinstance(ztna_ems_tags, list):
            raise TypeError("Expected argument 'ztna_ems_tags' to be a list")
        pulumi.set(__self__, "ztna_ems_tags", ztna_ems_tags)
        if ztna_tags_match_logic and not isinstance(ztna_tags_match_logic, str):
            raise TypeError("Expected argument 'ztna_tags_match_logic' to be a str")
        pulumi.set(__self__, "ztna_tags_match_logic", ztna_tags_match_logic)

    @property
    @pulumi.getter(name="accessProxies")
    def access_proxies(self) -> Sequence['outputs.GetProxypolicyAccessProxyResult']:
        """
        IPv4 access proxy. The structure of `access_proxy` block is documented below.
        """
        return pulumi.get(self, "access_proxies")

    @property
    @pulumi.getter(name="accessProxy6s")
    def access_proxy6s(self) -> Sequence['outputs.GetProxypolicyAccessProxy6Result']:
        """
        IPv6 access proxy. The structure of `access_proxy6` block is documented below.
        """
        return pulumi.get(self, "access_proxy6s")

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Accept or deny traffic matching the policy parameters.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> str:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> str:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="blockNotification")
    def block_notification(self) -> str:
        """
        Enable/disable block notification.
        """
        return pulumi.get(self, "block_notification")

    @property
    @pulumi.getter(name="casbProfile")
    def casb_profile(self) -> str:
        """
        Name of an existing CASB profile.
        """
        return pulumi.get(self, "casb_profile")

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> str:
        """
        Name of an existing CIFS profile.
        """
        return pulumi.get(self, "cifs_profile")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Optional comments.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> str:
        """
        Decrypted traffic mirror.
        """
        return pulumi.get(self, "decrypted_traffic_mirror")

    @property
    @pulumi.getter(name="detectHttpsInHttpRequest")
    def detect_https_in_http_request(self) -> str:
        """
        Enable/disable detection of HTTPS in HTTP request.
        """
        return pulumi.get(self, "detect_https_in_http_request")

    @property
    @pulumi.getter(name="deviceOwnership")
    def device_ownership(self) -> str:
        """
        When enabled, the ownership enforcement will be done at policy level.
        """
        return pulumi.get(self, "device_ownership")

    @property
    @pulumi.getter(name="diameterFilterProfile")
    def diameter_filter_profile(self) -> str:
        """
        Name of an existing Diameter filter profile.
        """
        return pulumi.get(self, "diameter_filter_profile")

    @property
    @pulumi.getter
    def disclaimer(self) -> str:
        """
        Web proxy disclaimer setting: by domain, policy, or user.
        """
        return pulumi.get(self, "disclaimer")

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> str:
        """
        Name of an existing DLP profile.
        """
        return pulumi.get(self, "dlp_profile")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> str:
        """
        Name of an existing DLP sensor.
        """
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Sequence['outputs.GetProxypolicyDstaddr6Result']:
        """
        IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> str:
        """
        When enabled, destination addresses match against any address EXCEPT the specified destination addresses.
        """
        return pulumi.get(self, "dstaddr_negate")

    @property
    @pulumi.getter
    def dstaddrs(self) -> Sequence['outputs.GetProxypolicyDstaddrResult']:
        """
        Destination address objects. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintfs(self) -> Sequence['outputs.GetProxypolicyDstintfResult']:
        """
        Destination interface names. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> str:
        """
        Name of an existing email filter profile.
        """
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> str:
        """
        Name of an existing file-filter profile.
        """
        return pulumi.get(self, "file_filter_profile")

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> str:
        """
        Global web-based manager visible label.
        """
        return pulumi.get(self, "global_label")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetProxypolicyGroupResult']:
        """
        Names of group objects. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="httpTunnelAuth")
    def http_tunnel_auth(self) -> str:
        """
        Enable/disable HTTP tunnel authentication.
        """
        return pulumi.get(self, "http_tunnel_auth")

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> str:
        """
        Name of an existing ICAP profile.
        """
        return pulumi.get(self, "icap_profile")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> str:
        """
        Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetService6")
    def internet_service6(self) -> str:
        """
        Enable/disable use of Internet Services IPv6 for this policy. If enabled, destination IPv6 address and service are not used.
        """
        return pulumi.get(self, "internet_service6")

    @property
    @pulumi.getter(name="internetService6CustomGroups")
    def internet_service6_custom_groups(self) -> Sequence['outputs.GetProxypolicyInternetService6CustomGroupResult']:
        """
        Custom Internet Service IPv6 group name. The structure of `internet_service6_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_custom_groups")

    @property
    @pulumi.getter(name="internetService6Customs")
    def internet_service6_customs(self) -> Sequence['outputs.GetProxypolicyInternetService6CustomResult']:
        """
        Custom Internet Service IPv6 name. The structure of `internet_service6_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service6_customs")

    @property
    @pulumi.getter(name="internetService6Groups")
    def internet_service6_groups(self) -> Sequence['outputs.GetProxypolicyInternetService6GroupResult']:
        """
        Internet Service IPv6 group name. The structure of `internet_service6_group` block is documented below.
        """
        return pulumi.get(self, "internet_service6_groups")

    @property
    @pulumi.getter(name="internetService6Names")
    def internet_service6_names(self) -> Sequence['outputs.GetProxypolicyInternetService6NameResult']:
        """
        Internet Service IPv6 name. The structure of `internet_service6_name` block is documented below.
        """
        return pulumi.get(self, "internet_service6_names")

    @property
    @pulumi.getter(name="internetService6Negate")
    def internet_service6_negate(self) -> str:
        """
        When enabled, Internet Services match against any internet service IPv6 EXCEPT the selected Internet Service IPv6.
        """
        return pulumi.get(self, "internet_service6_negate")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Sequence['outputs.GetProxypolicyInternetServiceCustomGroupResult']:
        """
        Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Sequence['outputs.GetProxypolicyInternetServiceCustomResult']:
        """
        Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Sequence['outputs.GetProxypolicyInternetServiceGroupResult']:
        """
        Internet Service group name. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Sequence['outputs.GetProxypolicyInternetServiceIdResult']:
        """
        Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Sequence['outputs.GetProxypolicyInternetServiceNameResult']:
        """
        Internet Service name. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> str:
        """
        When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service.
        """
        return pulumi.get(self, "internet_service_negate")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> str:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> str:
        """
        Name of an existing VoIP (ips) profile.
        """
        return pulumi.get(self, "ips_voip_filter")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        VDOM-specific GUI visible label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def logtraffic(self) -> str:
        """
        Enable/disable logging traffic through the policy.
        """
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> str:
        """
        Enable/disable policy log traffic start.
        """
        return pulumi.get(self, "logtraffic_start")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policyid(self) -> int:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def poolnames(self) -> Sequence['outputs.GetProxypolicyPoolnameResult']:
        """
        Name of IP pool object. The structure of `poolname` block is documented below.
        """
        return pulumi.get(self, "poolnames")

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> str:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_group")

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> str:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> str:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only.
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter
    def proxy(self) -> str:
        """
        Type of explicit proxy.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        Redirect URL for further explicit web proxy processing.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> str:
        """
        Authentication replacement message override group.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> str:
        """
        Enable/disable scanning of connections to Botnet servers.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        """
        Name of schedule object.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> str:
        """
        Name of an existing SCTP filter profile.
        """
        return pulumi.get(self, "sctp_filter_profile")

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> str:
        """
        When enabled, services match against any service EXCEPT the specified destination services.
        """
        return pulumi.get(self, "service_negate")

    @property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetProxypolicyServiceResult']:
        """
        Name of service objects. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> int:
        """
        TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        """
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> str:
        """
        Name of an existing Spam filter profile.
        """
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Sequence['outputs.GetProxypolicySrcaddr6Result']:
        """
        IPv6 source address objects. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> str:
        """
        When enabled, source addresses match against any address EXCEPT the specified source addresses.
        """
        return pulumi.get(self, "srcaddr_negate")

    @property
    @pulumi.getter
    def srcaddrs(self) -> Sequence['outputs.GetProxypolicySrcaddrResult']:
        """
        Source address objects. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> Sequence['outputs.GetProxypolicySrcintfResult']:
        """
        Source interface names. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> str:
        """
        Name of an existing SSH filter profile.
        """
        return pulumi.get(self, "ssh_filter_profile")

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> str:
        """
        Redirect SSH traffic to matching transparent proxy policy.
        """
        return pulumi.get(self, "ssh_policy_redirect")

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> str:
        """
        Name of an existing SSL SSH profile.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable the active status of the policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def transparent(self) -> str:
        """
        Enable to use the IP address of the client to connect to the server.
        """
        return pulumi.get(self, "transparent")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetProxypolicyUserResult']:
        """
        Names of user objects. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> str:
        """
        Enable the use of UTM profiles/sensors/lists.
        """
        return pulumi.get(self, "utm_status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> str:
        """
        Name of an existing VideoFilter profile.
        """
        return pulumi.get(self, "videofilter_profile")

    @property
    @pulumi.getter(name="virtualPatchProfile")
    def virtual_patch_profile(self) -> str:
        """
        Name of an existing virtual-patch profile.
        """
        return pulumi.get(self, "virtual_patch_profile")

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> str:
        """
        Name of an existing VoIP profile.
        """
        return pulumi.get(self, "voip_profile")

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> str:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profile")

    @property
    @pulumi.getter
    def webcache(self) -> str:
        """
        Enable/disable web caching.
        """
        return pulumi.get(self, "webcache")

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> str:
        """
        Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile).
        """
        return pulumi.get(self, "webcache_https")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> str:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profile")

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> str:
        """
        Web proxy forward server name.
        """
        return pulumi.get(self, "webproxy_forward_server")

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> str:
        """
        Name of web proxy profile.
        """
        return pulumi.get(self, "webproxy_profile")

    @property
    @pulumi.getter(name="ztnaEmsTags")
    def ztna_ems_tags(self) -> Sequence['outputs.GetProxypolicyZtnaEmsTagResult']:
        """
        ZTNA EMS Tag names. The structure of `ztna_ems_tag` block is documented below.
        """
        return pulumi.get(self, "ztna_ems_tags")

    @property
    @pulumi.getter(name="ztnaTagsMatchLogic")
    def ztna_tags_match_logic(self) -> str:
        """
        ZTNA tag matching logic.
        """
        return pulumi.get(self, "ztna_tags_match_logic")


class AwaitableGetProxypolicyResult(GetProxypolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProxypolicyResult(
            access_proxies=self.access_proxies,
            access_proxy6s=self.access_proxy6s,
            action=self.action,
            application_list=self.application_list,
            av_profile=self.av_profile,
            block_notification=self.block_notification,
            casb_profile=self.casb_profile,
            cifs_profile=self.cifs_profile,
            comments=self.comments,
            decrypted_traffic_mirror=self.decrypted_traffic_mirror,
            detect_https_in_http_request=self.detect_https_in_http_request,
            device_ownership=self.device_ownership,
            diameter_filter_profile=self.diameter_filter_profile,
            disclaimer=self.disclaimer,
            dlp_profile=self.dlp_profile,
            dlp_sensor=self.dlp_sensor,
            dstaddr6s=self.dstaddr6s,
            dstaddr_negate=self.dstaddr_negate,
            dstaddrs=self.dstaddrs,
            dstintfs=self.dstintfs,
            emailfilter_profile=self.emailfilter_profile,
            file_filter_profile=self.file_filter_profile,
            global_label=self.global_label,
            groups=self.groups,
            http_tunnel_auth=self.http_tunnel_auth,
            icap_profile=self.icap_profile,
            id=self.id,
            internet_service=self.internet_service,
            internet_service6=self.internet_service6,
            internet_service6_custom_groups=self.internet_service6_custom_groups,
            internet_service6_customs=self.internet_service6_customs,
            internet_service6_groups=self.internet_service6_groups,
            internet_service6_names=self.internet_service6_names,
            internet_service6_negate=self.internet_service6_negate,
            internet_service_custom_groups=self.internet_service_custom_groups,
            internet_service_customs=self.internet_service_customs,
            internet_service_groups=self.internet_service_groups,
            internet_service_ids=self.internet_service_ids,
            internet_service_names=self.internet_service_names,
            internet_service_negate=self.internet_service_negate,
            ips_sensor=self.ips_sensor,
            ips_voip_filter=self.ips_voip_filter,
            label=self.label,
            logtraffic=self.logtraffic,
            logtraffic_start=self.logtraffic_start,
            name=self.name,
            policyid=self.policyid,
            poolnames=self.poolnames,
            profile_group=self.profile_group,
            profile_protocol_options=self.profile_protocol_options,
            profile_type=self.profile_type,
            proxy=self.proxy,
            redirect_url=self.redirect_url,
            replacemsg_override_group=self.replacemsg_override_group,
            scan_botnet_connections=self.scan_botnet_connections,
            schedule=self.schedule,
            sctp_filter_profile=self.sctp_filter_profile,
            service_negate=self.service_negate,
            services=self.services,
            session_ttl=self.session_ttl,
            spamfilter_profile=self.spamfilter_profile,
            srcaddr6s=self.srcaddr6s,
            srcaddr_negate=self.srcaddr_negate,
            srcaddrs=self.srcaddrs,
            srcintfs=self.srcintfs,
            ssh_filter_profile=self.ssh_filter_profile,
            ssh_policy_redirect=self.ssh_policy_redirect,
            ssl_ssh_profile=self.ssl_ssh_profile,
            status=self.status,
            transparent=self.transparent,
            users=self.users,
            utm_status=self.utm_status,
            uuid=self.uuid,
            vdomparam=self.vdomparam,
            videofilter_profile=self.videofilter_profile,
            virtual_patch_profile=self.virtual_patch_profile,
            voip_profile=self.voip_profile,
            waf_profile=self.waf_profile,
            webcache=self.webcache,
            webcache_https=self.webcache_https,
            webfilter_profile=self.webfilter_profile,
            webproxy_forward_server=self.webproxy_forward_server,
            webproxy_profile=self.webproxy_profile,
            ztna_ems_tags=self.ztna_ems_tags,
            ztna_tags_match_logic=self.ztna_tags_match_logic)


def get_proxypolicy(policyid: Optional[int] = None,
                    vdomparam: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProxypolicyResult:
    """
    Use this data source to get information on an fortios firewall proxypolicy


    :param int policyid: Specify the policyid of the desired firewall proxypolicy.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['policyid'] = policyid
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:firewall/getProxypolicy:getProxypolicy', __args__, opts=opts, typ=GetProxypolicyResult).value

    return AwaitableGetProxypolicyResult(
        access_proxies=pulumi.get(__ret__, 'access_proxies'),
        access_proxy6s=pulumi.get(__ret__, 'access_proxy6s'),
        action=pulumi.get(__ret__, 'action'),
        application_list=pulumi.get(__ret__, 'application_list'),
        av_profile=pulumi.get(__ret__, 'av_profile'),
        block_notification=pulumi.get(__ret__, 'block_notification'),
        casb_profile=pulumi.get(__ret__, 'casb_profile'),
        cifs_profile=pulumi.get(__ret__, 'cifs_profile'),
        comments=pulumi.get(__ret__, 'comments'),
        decrypted_traffic_mirror=pulumi.get(__ret__, 'decrypted_traffic_mirror'),
        detect_https_in_http_request=pulumi.get(__ret__, 'detect_https_in_http_request'),
        device_ownership=pulumi.get(__ret__, 'device_ownership'),
        diameter_filter_profile=pulumi.get(__ret__, 'diameter_filter_profile'),
        disclaimer=pulumi.get(__ret__, 'disclaimer'),
        dlp_profile=pulumi.get(__ret__, 'dlp_profile'),
        dlp_sensor=pulumi.get(__ret__, 'dlp_sensor'),
        dstaddr6s=pulumi.get(__ret__, 'dstaddr6s'),
        dstaddr_negate=pulumi.get(__ret__, 'dstaddr_negate'),
        dstaddrs=pulumi.get(__ret__, 'dstaddrs'),
        dstintfs=pulumi.get(__ret__, 'dstintfs'),
        emailfilter_profile=pulumi.get(__ret__, 'emailfilter_profile'),
        file_filter_profile=pulumi.get(__ret__, 'file_filter_profile'),
        global_label=pulumi.get(__ret__, 'global_label'),
        groups=pulumi.get(__ret__, 'groups'),
        http_tunnel_auth=pulumi.get(__ret__, 'http_tunnel_auth'),
        icap_profile=pulumi.get(__ret__, 'icap_profile'),
        id=pulumi.get(__ret__, 'id'),
        internet_service=pulumi.get(__ret__, 'internet_service'),
        internet_service6=pulumi.get(__ret__, 'internet_service6'),
        internet_service6_custom_groups=pulumi.get(__ret__, 'internet_service6_custom_groups'),
        internet_service6_customs=pulumi.get(__ret__, 'internet_service6_customs'),
        internet_service6_groups=pulumi.get(__ret__, 'internet_service6_groups'),
        internet_service6_names=pulumi.get(__ret__, 'internet_service6_names'),
        internet_service6_negate=pulumi.get(__ret__, 'internet_service6_negate'),
        internet_service_custom_groups=pulumi.get(__ret__, 'internet_service_custom_groups'),
        internet_service_customs=pulumi.get(__ret__, 'internet_service_customs'),
        internet_service_groups=pulumi.get(__ret__, 'internet_service_groups'),
        internet_service_ids=pulumi.get(__ret__, 'internet_service_ids'),
        internet_service_names=pulumi.get(__ret__, 'internet_service_names'),
        internet_service_negate=pulumi.get(__ret__, 'internet_service_negate'),
        ips_sensor=pulumi.get(__ret__, 'ips_sensor'),
        ips_voip_filter=pulumi.get(__ret__, 'ips_voip_filter'),
        label=pulumi.get(__ret__, 'label'),
        logtraffic=pulumi.get(__ret__, 'logtraffic'),
        logtraffic_start=pulumi.get(__ret__, 'logtraffic_start'),
        name=pulumi.get(__ret__, 'name'),
        policyid=pulumi.get(__ret__, 'policyid'),
        poolnames=pulumi.get(__ret__, 'poolnames'),
        profile_group=pulumi.get(__ret__, 'profile_group'),
        profile_protocol_options=pulumi.get(__ret__, 'profile_protocol_options'),
        profile_type=pulumi.get(__ret__, 'profile_type'),
        proxy=pulumi.get(__ret__, 'proxy'),
        redirect_url=pulumi.get(__ret__, 'redirect_url'),
        replacemsg_override_group=pulumi.get(__ret__, 'replacemsg_override_group'),
        scan_botnet_connections=pulumi.get(__ret__, 'scan_botnet_connections'),
        schedule=pulumi.get(__ret__, 'schedule'),
        sctp_filter_profile=pulumi.get(__ret__, 'sctp_filter_profile'),
        service_negate=pulumi.get(__ret__, 'service_negate'),
        services=pulumi.get(__ret__, 'services'),
        session_ttl=pulumi.get(__ret__, 'session_ttl'),
        spamfilter_profile=pulumi.get(__ret__, 'spamfilter_profile'),
        srcaddr6s=pulumi.get(__ret__, 'srcaddr6s'),
        srcaddr_negate=pulumi.get(__ret__, 'srcaddr_negate'),
        srcaddrs=pulumi.get(__ret__, 'srcaddrs'),
        srcintfs=pulumi.get(__ret__, 'srcintfs'),
        ssh_filter_profile=pulumi.get(__ret__, 'ssh_filter_profile'),
        ssh_policy_redirect=pulumi.get(__ret__, 'ssh_policy_redirect'),
        ssl_ssh_profile=pulumi.get(__ret__, 'ssl_ssh_profile'),
        status=pulumi.get(__ret__, 'status'),
        transparent=pulumi.get(__ret__, 'transparent'),
        users=pulumi.get(__ret__, 'users'),
        utm_status=pulumi.get(__ret__, 'utm_status'),
        uuid=pulumi.get(__ret__, 'uuid'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        videofilter_profile=pulumi.get(__ret__, 'videofilter_profile'),
        virtual_patch_profile=pulumi.get(__ret__, 'virtual_patch_profile'),
        voip_profile=pulumi.get(__ret__, 'voip_profile'),
        waf_profile=pulumi.get(__ret__, 'waf_profile'),
        webcache=pulumi.get(__ret__, 'webcache'),
        webcache_https=pulumi.get(__ret__, 'webcache_https'),
        webfilter_profile=pulumi.get(__ret__, 'webfilter_profile'),
        webproxy_forward_server=pulumi.get(__ret__, 'webproxy_forward_server'),
        webproxy_profile=pulumi.get(__ret__, 'webproxy_profile'),
        ztna_ems_tags=pulumi.get(__ret__, 'ztna_ems_tags'),
        ztna_tags_match_logic=pulumi.get(__ret__, 'ztna_tags_match_logic'))


@_utilities.lift_output_func(get_proxypolicy)
def get_proxypolicy_output(policyid: Optional[pulumi.Input[int]] = None,
                           vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProxypolicyResult]:
    """
    Use this data source to get information on an fortios firewall proxypolicy


    :param int policyid: Specify the policyid of the desired firewall proxypolicy.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
