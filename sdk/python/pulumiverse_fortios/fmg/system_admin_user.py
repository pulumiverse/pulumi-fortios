# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SystemAdminUserArgs', 'SystemAdminUser']

@pulumi.input_type
class SystemAdminUserArgs:
    def __init__(__self__, *,
                 userid: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 profileid: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 rpc_permit: Optional[pulumi.Input[str]] = None,
                 trusthost1: Optional[pulumi.Input[str]] = None,
                 trusthost2: Optional[pulumi.Input[str]] = None,
                 trusthost3: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemAdminUser resource.
        :param pulumi.Input[str] userid: User name.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] profileid: Profile id.
        :param pulumi.Input[str] radius_server: RADIUS server name.
        :param pulumi.Input[str] rpc_permit: Rpc permit, Enum: ["read-write", "none", "read"]
        :param pulumi.Input[str] trusthost1: Admin user trusted host IP, default 0.0.0.0 0.0.0.0 for all.
        :param pulumi.Input[str] trusthost2: Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        :param pulumi.Input[str] trusthost3: Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        :param pulumi.Input[str] user_type: User type, Enum: ["local", "radius", "ldap", "tacacs-plus", "pki-auth", "group"]
        """
        pulumi.set(__self__, "userid", userid)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if profileid is not None:
            pulumi.set(__self__, "profileid", profileid)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if rpc_permit is not None:
            pulumi.set(__self__, "rpc_permit", rpc_permit)
        if trusthost1 is not None:
            pulumi.set(__self__, "trusthost1", trusthost1)
        if trusthost2 is not None:
            pulumi.set(__self__, "trusthost2", trusthost2)
        if trusthost3 is not None:
            pulumi.set(__self__, "trusthost3", trusthost3)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter
    def userid(self) -> pulumi.Input[str]:
        """
        User name.
        """
        return pulumi.get(self, "userid")

    @userid.setter
    def userid(self, value: pulumi.Input[str]):
        pulumi.set(self, "userid", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def profileid(self) -> Optional[pulumi.Input[str]]:
        """
        Profile id.
        """
        return pulumi.get(self, "profileid")

    @profileid.setter
    def profileid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profileid", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        """
        RADIUS server name.
        """
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter(name="rpcPermit")
    def rpc_permit(self) -> Optional[pulumi.Input[str]]:
        """
        Rpc permit, Enum: ["read-write", "none", "read"]
        """
        return pulumi.get(self, "rpc_permit")

    @rpc_permit.setter
    def rpc_permit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpc_permit", value)

    @property
    @pulumi.getter
    def trusthost1(self) -> Optional[pulumi.Input[str]]:
        """
        Admin user trusted host IP, default 0.0.0.0 0.0.0.0 for all.
        """
        return pulumi.get(self, "trusthost1")

    @trusthost1.setter
    def trusthost1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost1", value)

    @property
    @pulumi.getter
    def trusthost2(self) -> Optional[pulumi.Input[str]]:
        """
        Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        """
        return pulumi.get(self, "trusthost2")

    @trusthost2.setter
    def trusthost2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost2", value)

    @property
    @pulumi.getter
    def trusthost3(self) -> Optional[pulumi.Input[str]]:
        """
        Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        """
        return pulumi.get(self, "trusthost3")

    @trusthost3.setter
    def trusthost3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost3", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[str]]:
        """
        User type, Enum: ["local", "radius", "ldap", "tacacs-plus", "pki-auth", "group"]
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_type", value)


@pulumi.input_type
class _SystemAdminUserState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 profileid: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 rpc_permit: Optional[pulumi.Input[str]] = None,
                 trusthost1: Optional[pulumi.Input[str]] = None,
                 trusthost2: Optional[pulumi.Input[str]] = None,
                 trusthost3: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 userid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemAdminUser resources.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] profileid: Profile id.
        :param pulumi.Input[str] radius_server: RADIUS server name.
        :param pulumi.Input[str] rpc_permit: Rpc permit, Enum: ["read-write", "none", "read"]
        :param pulumi.Input[str] trusthost1: Admin user trusted host IP, default 0.0.0.0 0.0.0.0 for all.
        :param pulumi.Input[str] trusthost2: Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        :param pulumi.Input[str] trusthost3: Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        :param pulumi.Input[str] user_type: User type, Enum: ["local", "radius", "ldap", "tacacs-plus", "pki-auth", "group"]
        :param pulumi.Input[str] userid: User name.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if profileid is not None:
            pulumi.set(__self__, "profileid", profileid)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if rpc_permit is not None:
            pulumi.set(__self__, "rpc_permit", rpc_permit)
        if trusthost1 is not None:
            pulumi.set(__self__, "trusthost1", trusthost1)
        if trusthost2 is not None:
            pulumi.set(__self__, "trusthost2", trusthost2)
        if trusthost3 is not None:
            pulumi.set(__self__, "trusthost3", trusthost3)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)
        if userid is not None:
            pulumi.set(__self__, "userid", userid)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def profileid(self) -> Optional[pulumi.Input[str]]:
        """
        Profile id.
        """
        return pulumi.get(self, "profileid")

    @profileid.setter
    def profileid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profileid", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        """
        RADIUS server name.
        """
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter(name="rpcPermit")
    def rpc_permit(self) -> Optional[pulumi.Input[str]]:
        """
        Rpc permit, Enum: ["read-write", "none", "read"]
        """
        return pulumi.get(self, "rpc_permit")

    @rpc_permit.setter
    def rpc_permit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpc_permit", value)

    @property
    @pulumi.getter
    def trusthost1(self) -> Optional[pulumi.Input[str]]:
        """
        Admin user trusted host IP, default 0.0.0.0 0.0.0.0 for all.
        """
        return pulumi.get(self, "trusthost1")

    @trusthost1.setter
    def trusthost1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost1", value)

    @property
    @pulumi.getter
    def trusthost2(self) -> Optional[pulumi.Input[str]]:
        """
        Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        """
        return pulumi.get(self, "trusthost2")

    @trusthost2.setter
    def trusthost2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost2", value)

    @property
    @pulumi.getter
    def trusthost3(self) -> Optional[pulumi.Input[str]]:
        """
        Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        """
        return pulumi.get(self, "trusthost3")

    @trusthost3.setter
    def trusthost3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost3", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[str]]:
        """
        User type, Enum: ["local", "radius", "ldap", "tacacs-plus", "pki-auth", "group"]
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_type", value)

    @property
    @pulumi.getter
    def userid(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "userid")

    @userid.setter
    def userid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userid", value)


class SystemAdminUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 profileid: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 rpc_permit: Optional[pulumi.Input[str]] = None,
                 trusthost1: Optional[pulumi.Input[str]] = None,
                 trusthost2: Optional[pulumi.Input[str]] = None,
                 trusthost3: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 userid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource supports Create/Read/Update/Delete admin user for FortiManager

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.SystemAdminUser("test1",
            description="local user",
            password="123",
            profileid="Standard_User",
            rpc_permit="read",
            trusthost1="1.1.1.1 255.255.255.255",
            user_type="local",
            userid="user1")
        test2 = fortios.fmg.SystemAdminUser("test2",
            description="api user",
            password="098",
            profileid="Standard_User",
            rpc_permit="read-write",
            trusthost1="2.2.2.2 255.255.255.255",
            userid="user2")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] profileid: Profile id.
        :param pulumi.Input[str] radius_server: RADIUS server name.
        :param pulumi.Input[str] rpc_permit: Rpc permit, Enum: ["read-write", "none", "read"]
        :param pulumi.Input[str] trusthost1: Admin user trusted host IP, default 0.0.0.0 0.0.0.0 for all.
        :param pulumi.Input[str] trusthost2: Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        :param pulumi.Input[str] trusthost3: Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        :param pulumi.Input[str] user_type: User type, Enum: ["local", "radius", "ldap", "tacacs-plus", "pki-auth", "group"]
        :param pulumi.Input[str] userid: User name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemAdminUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource supports Create/Read/Update/Delete admin user for FortiManager

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.SystemAdminUser("test1",
            description="local user",
            password="123",
            profileid="Standard_User",
            rpc_permit="read",
            trusthost1="1.1.1.1 255.255.255.255",
            user_type="local",
            userid="user1")
        test2 = fortios.fmg.SystemAdminUser("test2",
            description="api user",
            password="098",
            profileid="Standard_User",
            rpc_permit="read-write",
            trusthost1="2.2.2.2 255.255.255.255",
            userid="user2")
        ```

        :param str resource_name: The name of the resource.
        :param SystemAdminUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemAdminUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 profileid: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 rpc_permit: Optional[pulumi.Input[str]] = None,
                 trusthost1: Optional[pulumi.Input[str]] = None,
                 trusthost2: Optional[pulumi.Input[str]] = None,
                 trusthost3: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 userid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemAdminUserArgs.__new__(SystemAdminUserArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["password"] = password
            __props__.__dict__["profileid"] = profileid
            __props__.__dict__["radius_server"] = radius_server
            __props__.__dict__["rpc_permit"] = rpc_permit
            __props__.__dict__["trusthost1"] = trusthost1
            __props__.__dict__["trusthost2"] = trusthost2
            __props__.__dict__["trusthost3"] = trusthost3
            __props__.__dict__["user_type"] = user_type
            if userid is None and not opts.urn:
                raise TypeError("Missing required property 'userid'")
            __props__.__dict__["userid"] = userid
        super(SystemAdminUser, __self__).__init__(
            'fortios:fmg/systemAdminUser:SystemAdminUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            profileid: Optional[pulumi.Input[str]] = None,
            radius_server: Optional[pulumi.Input[str]] = None,
            rpc_permit: Optional[pulumi.Input[str]] = None,
            trusthost1: Optional[pulumi.Input[str]] = None,
            trusthost2: Optional[pulumi.Input[str]] = None,
            trusthost3: Optional[pulumi.Input[str]] = None,
            user_type: Optional[pulumi.Input[str]] = None,
            userid: Optional[pulumi.Input[str]] = None) -> 'SystemAdminUser':
        """
        Get an existing SystemAdminUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] profileid: Profile id.
        :param pulumi.Input[str] radius_server: RADIUS server name.
        :param pulumi.Input[str] rpc_permit: Rpc permit, Enum: ["read-write", "none", "read"]
        :param pulumi.Input[str] trusthost1: Admin user trusted host IP, default 0.0.0.0 0.0.0.0 for all.
        :param pulumi.Input[str] trusthost2: Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        :param pulumi.Input[str] trusthost3: Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        :param pulumi.Input[str] user_type: User type, Enum: ["local", "radius", "ldap", "tacacs-plus", "pki-auth", "group"]
        :param pulumi.Input[str] userid: User name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemAdminUserState.__new__(_SystemAdminUserState)

        __props__.__dict__["description"] = description
        __props__.__dict__["password"] = password
        __props__.__dict__["profileid"] = profileid
        __props__.__dict__["radius_server"] = radius_server
        __props__.__dict__["rpc_permit"] = rpc_permit
        __props__.__dict__["trusthost1"] = trusthost1
        __props__.__dict__["trusthost2"] = trusthost2
        __props__.__dict__["trusthost3"] = trusthost3
        __props__.__dict__["user_type"] = user_type
        __props__.__dict__["userid"] = userid
        return SystemAdminUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def profileid(self) -> pulumi.Output[Optional[str]]:
        """
        Profile id.
        """
        return pulumi.get(self, "profileid")

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> pulumi.Output[Optional[str]]:
        """
        RADIUS server name.
        """
        return pulumi.get(self, "radius_server")

    @property
    @pulumi.getter(name="rpcPermit")
    def rpc_permit(self) -> pulumi.Output[Optional[str]]:
        """
        Rpc permit, Enum: ["read-write", "none", "read"]
        """
        return pulumi.get(self, "rpc_permit")

    @property
    @pulumi.getter
    def trusthost1(self) -> pulumi.Output[Optional[str]]:
        """
        Admin user trusted host IP, default 0.0.0.0 0.0.0.0 for all.
        """
        return pulumi.get(self, "trusthost1")

    @property
    @pulumi.getter
    def trusthost2(self) -> pulumi.Output[Optional[str]]:
        """
        Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        """
        return pulumi.get(self, "trusthost2")

    @property
    @pulumi.getter
    def trusthost3(self) -> pulumi.Output[Optional[str]]:
        """
        Admin user trusted host IP, default 255.255.255.255 255.255.255.255 for none.
        """
        return pulumi.get(self, "trusthost3")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Output[Optional[str]]:
        """
        User type, Enum: ["local", "radius", "ldap", "tacacs-plus", "pki-auth", "group"]
        """
        return pulumi.get(self, "user_type")

    @property
    @pulumi.getter
    def userid(self) -> pulumi.Output[str]:
        """
        User name.
        """
        return pulumi.get(self, "userid")

