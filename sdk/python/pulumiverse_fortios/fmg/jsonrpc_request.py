# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['JsonrpcRequestArgs', 'JsonrpcRequest']

@pulumi.input_type
class JsonrpcRequestArgs:
    def __init__(__self__, *,
                 json_content: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a JsonrpcRequest resource.
        :param pulumi.Input[str] json_content: JSON RPC request, which should contain 'method' and 'params' parameters.
        :param pulumi.Input[str] comment: Comment.
        """
        pulumi.set(__self__, "json_content", json_content)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)

    @property
    @pulumi.getter(name="jsonContent")
    def json_content(self) -> pulumi.Input[str]:
        """
        JSON RPC request, which should contain 'method' and 'params' parameters.
        """
        return pulumi.get(self, "json_content")

    @json_content.setter
    def json_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "json_content", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)


@pulumi.input_type
class _JsonrpcRequestState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 json_content: Optional[pulumi.Input[str]] = None,
                 response: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering JsonrpcRequest resources.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] json_content: JSON RPC request, which should contain 'method' and 'params' parameters.
        :param pulumi.Input[str] response: JSON RPC request response data.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if json_content is not None:
            pulumi.set(__self__, "json_content", json_content)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="jsonContent")
    def json_content(self) -> Optional[pulumi.Input[str]]:
        """
        JSON RPC request, which should contain 'method' and 'params' parameters.
        """
        return pulumi.get(self, "json_content")

    @json_content.setter
    def json_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_content", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        JSON RPC request response data.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response", value)


class JsonrpcRequest(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 json_content: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource supports handling JSON RPC request for FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.JsonrpcRequest("test1", json_content=\"\"\"{
          "method": "add",
          "params": [
            {
              "data": [
                {
                  "action": "accept",
                  "dstaddr": ["all"],
                  "dstintf": "any",
                  "name": "policytest",
                  "schedule": "none",
                  "service": "ALL",
                  "srcaddr": "all",
                  "srcintf": "any",
                  "internet-service": "enable",
                  "internet-service-id": "Alibaba-Web",
                  "internet-service-src": "enable",
                  "internet-service-src-id": "Alibaba-Web",
                  "users": "guest",
                  "groups": "Guest-group"
                }
              ],
              "url": "/pm/config/adom/root/pkg/default/firewall/policy"
            }
          ]
        }

        \"\"\")
        test2 = fortios.fmg.JsonrpcRequest("test2", json_content=\"\"\"{
          "method": "add",
          "params": [
            {
              "data": [
                {
                  "ip": "192.168.1.2",
                  "name": "logserver4",
                  "port": "514"
                }
              ],
              "url": "/cli/global/system/syslog"
            }
          ]
        }

        \"\"\")
        test3 = fortios.fmg.JsonrpcRequest("test3", json_content=\"\"\"{
          "method": "get",
          "params": [
            {
              "url": "/cli/global/system/admin/user/APIUser"
            }
          ]
        }

        \"\"\")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] json_content: JSON RPC request, which should contain 'method' and 'params' parameters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: JsonrpcRequestArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource supports handling JSON RPC request for FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.JsonrpcRequest("test1", json_content=\"\"\"{
          "method": "add",
          "params": [
            {
              "data": [
                {
                  "action": "accept",
                  "dstaddr": ["all"],
                  "dstintf": "any",
                  "name": "policytest",
                  "schedule": "none",
                  "service": "ALL",
                  "srcaddr": "all",
                  "srcintf": "any",
                  "internet-service": "enable",
                  "internet-service-id": "Alibaba-Web",
                  "internet-service-src": "enable",
                  "internet-service-src-id": "Alibaba-Web",
                  "users": "guest",
                  "groups": "Guest-group"
                }
              ],
              "url": "/pm/config/adom/root/pkg/default/firewall/policy"
            }
          ]
        }

        \"\"\")
        test2 = fortios.fmg.JsonrpcRequest("test2", json_content=\"\"\"{
          "method": "add",
          "params": [
            {
              "data": [
                {
                  "ip": "192.168.1.2",
                  "name": "logserver4",
                  "port": "514"
                }
              ],
              "url": "/cli/global/system/syslog"
            }
          ]
        }

        \"\"\")
        test3 = fortios.fmg.JsonrpcRequest("test3", json_content=\"\"\"{
          "method": "get",
          "params": [
            {
              "url": "/cli/global/system/admin/user/APIUser"
            }
          ]
        }

        \"\"\")
        ```

        :param str resource_name: The name of the resource.
        :param JsonrpcRequestArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(JsonrpcRequestArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 json_content: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = JsonrpcRequestArgs.__new__(JsonrpcRequestArgs)

            __props__.__dict__["comment"] = comment
            if json_content is None and not opts.urn:
                raise TypeError("Missing required property 'json_content'")
            __props__.__dict__["json_content"] = json_content
            __props__.__dict__["response"] = None
        super(JsonrpcRequest, __self__).__init__(
            'fortios:fmg/jsonrpcRequest:JsonrpcRequest',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            json_content: Optional[pulumi.Input[str]] = None,
            response: Optional[pulumi.Input[str]] = None) -> 'JsonrpcRequest':
        """
        Get an existing JsonrpcRequest resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] json_content: JSON RPC request, which should contain 'method' and 'params' parameters.
        :param pulumi.Input[str] response: JSON RPC request response data.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _JsonrpcRequestState.__new__(_JsonrpcRequestState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["json_content"] = json_content
        __props__.__dict__["response"] = response
        return JsonrpcRequest(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="jsonContent")
    def json_content(self) -> pulumi.Output[str]:
        """
        JSON RPC request, which should contain 'method' and 'params' parameters.
        """
        return pulumi.get(self, "json_content")

    @property
    @pulumi.getter
    def response(self) -> pulumi.Output[str]:
        """
        JSON RPC request response data.
        """
        return pulumi.get(self, "response")

