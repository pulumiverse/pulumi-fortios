# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SystemAdomArgs', 'SystemAdom']

@pulumi.input_type
class SystemAdomArgs:
    def __init__(__self__, *,
                 action_when_conflicts_occur_during_policy_check: Optional[pulumi.Input[str]] = None,
                 auto_push_policy_packages_when_device_back_online: Optional[pulumi.Input[str]] = None,
                 central_management_fortiap: Optional[pulumi.Input[bool]] = None,
                 central_management_sdwan: Optional[pulumi.Input[bool]] = None,
                 central_management_vpn: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 perform_policy_check_before_every_install: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemAdom resource.
        :param pulumi.Input[str] action_when_conflicts_occur_during_policy_check: True or False.
        :param pulumi.Input[str] auto_push_policy_packages_when_device_back_online: True or False.
        :param pulumi.Input[bool] central_management_fortiap: True or False.
        :param pulumi.Input[bool] central_management_sdwan: True or False.
        :param pulumi.Input[bool] central_management_vpn: True or False.
        :param pulumi.Input[str] mode: Adom mode: Normal or Backup.
        :param pulumi.Input[str] name: Administrative Domain name.
        :param pulumi.Input[bool] perform_policy_check_before_every_install: True or False.
        :param pulumi.Input[int] status: Adom status. 0 means off and 1 means on.
        :param pulumi.Input[str] type: Domain type, Enum: ["FortiGate", "FortiCarrier], default is "FortiCarrier".
        """
        if action_when_conflicts_occur_during_policy_check is not None:
            pulumi.set(__self__, "action_when_conflicts_occur_during_policy_check", action_when_conflicts_occur_during_policy_check)
        if auto_push_policy_packages_when_device_back_online is not None:
            pulumi.set(__self__, "auto_push_policy_packages_when_device_back_online", auto_push_policy_packages_when_device_back_online)
        if central_management_fortiap is not None:
            pulumi.set(__self__, "central_management_fortiap", central_management_fortiap)
        if central_management_sdwan is not None:
            pulumi.set(__self__, "central_management_sdwan", central_management_sdwan)
        if central_management_vpn is not None:
            pulumi.set(__self__, "central_management_vpn", central_management_vpn)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if perform_policy_check_before_every_install is not None:
            pulumi.set(__self__, "perform_policy_check_before_every_install", perform_policy_check_before_every_install)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionWhenConflictsOccurDuringPolicyCheck")
    def action_when_conflicts_occur_during_policy_check(self) -> Optional[pulumi.Input[str]]:
        """
        True or False.
        """
        return pulumi.get(self, "action_when_conflicts_occur_during_policy_check")

    @action_when_conflicts_occur_during_policy_check.setter
    def action_when_conflicts_occur_during_policy_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_when_conflicts_occur_during_policy_check", value)

    @property
    @pulumi.getter(name="autoPushPolicyPackagesWhenDeviceBackOnline")
    def auto_push_policy_packages_when_device_back_online(self) -> Optional[pulumi.Input[str]]:
        """
        True or False.
        """
        return pulumi.get(self, "auto_push_policy_packages_when_device_back_online")

    @auto_push_policy_packages_when_device_back_online.setter
    def auto_push_policy_packages_when_device_back_online(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_push_policy_packages_when_device_back_online", value)

    @property
    @pulumi.getter(name="centralManagementFortiap")
    def central_management_fortiap(self) -> Optional[pulumi.Input[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "central_management_fortiap")

    @central_management_fortiap.setter
    def central_management_fortiap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "central_management_fortiap", value)

    @property
    @pulumi.getter(name="centralManagementSdwan")
    def central_management_sdwan(self) -> Optional[pulumi.Input[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "central_management_sdwan")

    @central_management_sdwan.setter
    def central_management_sdwan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "central_management_sdwan", value)

    @property
    @pulumi.getter(name="centralManagementVpn")
    def central_management_vpn(self) -> Optional[pulumi.Input[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "central_management_vpn")

    @central_management_vpn.setter
    def central_management_vpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "central_management_vpn", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Adom mode: Normal or Backup.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative Domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="performPolicyCheckBeforeEveryInstall")
    def perform_policy_check_before_every_install(self) -> Optional[pulumi.Input[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "perform_policy_check_before_every_install")

    @perform_policy_check_before_every_install.setter
    def perform_policy_check_before_every_install(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "perform_policy_check_before_every_install", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Adom status. 0 means off and 1 means on.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Domain type, Enum: ["FortiGate", "FortiCarrier], default is "FortiCarrier".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _SystemAdomState:
    def __init__(__self__, *,
                 action_when_conflicts_occur_during_policy_check: Optional[pulumi.Input[str]] = None,
                 auto_push_policy_packages_when_device_back_online: Optional[pulumi.Input[str]] = None,
                 central_management_fortiap: Optional[pulumi.Input[bool]] = None,
                 central_management_sdwan: Optional[pulumi.Input[bool]] = None,
                 central_management_vpn: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 perform_policy_check_before_every_install: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemAdom resources.
        :param pulumi.Input[str] action_when_conflicts_occur_during_policy_check: True or False.
        :param pulumi.Input[str] auto_push_policy_packages_when_device_back_online: True or False.
        :param pulumi.Input[bool] central_management_fortiap: True or False.
        :param pulumi.Input[bool] central_management_sdwan: True or False.
        :param pulumi.Input[bool] central_management_vpn: True or False.
        :param pulumi.Input[str] mode: Adom mode: Normal or Backup.
        :param pulumi.Input[str] name: Administrative Domain name.
        :param pulumi.Input[bool] perform_policy_check_before_every_install: True or False.
        :param pulumi.Input[int] status: Adom status. 0 means off and 1 means on.
        :param pulumi.Input[str] type: Domain type, Enum: ["FortiGate", "FortiCarrier], default is "FortiCarrier".
        """
        if action_when_conflicts_occur_during_policy_check is not None:
            pulumi.set(__self__, "action_when_conflicts_occur_during_policy_check", action_when_conflicts_occur_during_policy_check)
        if auto_push_policy_packages_when_device_back_online is not None:
            pulumi.set(__self__, "auto_push_policy_packages_when_device_back_online", auto_push_policy_packages_when_device_back_online)
        if central_management_fortiap is not None:
            pulumi.set(__self__, "central_management_fortiap", central_management_fortiap)
        if central_management_sdwan is not None:
            pulumi.set(__self__, "central_management_sdwan", central_management_sdwan)
        if central_management_vpn is not None:
            pulumi.set(__self__, "central_management_vpn", central_management_vpn)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if perform_policy_check_before_every_install is not None:
            pulumi.set(__self__, "perform_policy_check_before_every_install", perform_policy_check_before_every_install)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionWhenConflictsOccurDuringPolicyCheck")
    def action_when_conflicts_occur_during_policy_check(self) -> Optional[pulumi.Input[str]]:
        """
        True or False.
        """
        return pulumi.get(self, "action_when_conflicts_occur_during_policy_check")

    @action_when_conflicts_occur_during_policy_check.setter
    def action_when_conflicts_occur_during_policy_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_when_conflicts_occur_during_policy_check", value)

    @property
    @pulumi.getter(name="autoPushPolicyPackagesWhenDeviceBackOnline")
    def auto_push_policy_packages_when_device_back_online(self) -> Optional[pulumi.Input[str]]:
        """
        True or False.
        """
        return pulumi.get(self, "auto_push_policy_packages_when_device_back_online")

    @auto_push_policy_packages_when_device_back_online.setter
    def auto_push_policy_packages_when_device_back_online(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_push_policy_packages_when_device_back_online", value)

    @property
    @pulumi.getter(name="centralManagementFortiap")
    def central_management_fortiap(self) -> Optional[pulumi.Input[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "central_management_fortiap")

    @central_management_fortiap.setter
    def central_management_fortiap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "central_management_fortiap", value)

    @property
    @pulumi.getter(name="centralManagementSdwan")
    def central_management_sdwan(self) -> Optional[pulumi.Input[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "central_management_sdwan")

    @central_management_sdwan.setter
    def central_management_sdwan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "central_management_sdwan", value)

    @property
    @pulumi.getter(name="centralManagementVpn")
    def central_management_vpn(self) -> Optional[pulumi.Input[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "central_management_vpn")

    @central_management_vpn.setter
    def central_management_vpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "central_management_vpn", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Adom mode: Normal or Backup.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative Domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="performPolicyCheckBeforeEveryInstall")
    def perform_policy_check_before_every_install(self) -> Optional[pulumi.Input[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "perform_policy_check_before_every_install")

    @perform_policy_check_before_every_install.setter
    def perform_policy_check_before_every_install(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "perform_policy_check_before_every_install", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Adom status. 0 means off and 1 means on.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Domain type, Enum: ["FortiGate", "FortiCarrier], default is "FortiCarrier".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class SystemAdom(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_when_conflicts_occur_during_policy_check: Optional[pulumi.Input[str]] = None,
                 auto_push_policy_packages_when_device_back_online: Optional[pulumi.Input[str]] = None,
                 central_management_fortiap: Optional[pulumi.Input[bool]] = None,
                 central_management_sdwan: Optional[pulumi.Input[bool]] = None,
                 central_management_vpn: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 perform_policy_check_before_every_install: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource supports Create/Read/Update/Delete system adom for FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.SystemAdom("test1",
            action_when_conflicts_occur_during_policy_check="Continue",
            auto_push_policy_packages_when_device_back_online="Enable",
            central_management_fortiap=True,
            central_management_sdwan=False,
            central_management_vpn=False,
            mode="Normal",
            perform_policy_check_before_every_install=True,
            status=1,
            type="FortiCarrier")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action_when_conflicts_occur_during_policy_check: True or False.
        :param pulumi.Input[str] auto_push_policy_packages_when_device_back_online: True or False.
        :param pulumi.Input[bool] central_management_fortiap: True or False.
        :param pulumi.Input[bool] central_management_sdwan: True or False.
        :param pulumi.Input[bool] central_management_vpn: True or False.
        :param pulumi.Input[str] mode: Adom mode: Normal or Backup.
        :param pulumi.Input[str] name: Administrative Domain name.
        :param pulumi.Input[bool] perform_policy_check_before_every_install: True or False.
        :param pulumi.Input[int] status: Adom status. 0 means off and 1 means on.
        :param pulumi.Input[str] type: Domain type, Enum: ["FortiGate", "FortiCarrier], default is "FortiCarrier".
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemAdomArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource supports Create/Read/Update/Delete system adom for FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.SystemAdom("test1",
            action_when_conflicts_occur_during_policy_check="Continue",
            auto_push_policy_packages_when_device_back_online="Enable",
            central_management_fortiap=True,
            central_management_sdwan=False,
            central_management_vpn=False,
            mode="Normal",
            perform_policy_check_before_every_install=True,
            status=1,
            type="FortiCarrier")
        ```

        :param str resource_name: The name of the resource.
        :param SystemAdomArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemAdomArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_when_conflicts_occur_during_policy_check: Optional[pulumi.Input[str]] = None,
                 auto_push_policy_packages_when_device_back_online: Optional[pulumi.Input[str]] = None,
                 central_management_fortiap: Optional[pulumi.Input[bool]] = None,
                 central_management_sdwan: Optional[pulumi.Input[bool]] = None,
                 central_management_vpn: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 perform_policy_check_before_every_install: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemAdomArgs.__new__(SystemAdomArgs)

            __props__.__dict__["action_when_conflicts_occur_during_policy_check"] = action_when_conflicts_occur_during_policy_check
            __props__.__dict__["auto_push_policy_packages_when_device_back_online"] = auto_push_policy_packages_when_device_back_online
            __props__.__dict__["central_management_fortiap"] = central_management_fortiap
            __props__.__dict__["central_management_sdwan"] = central_management_sdwan
            __props__.__dict__["central_management_vpn"] = central_management_vpn
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            __props__.__dict__["perform_policy_check_before_every_install"] = perform_policy_check_before_every_install
            __props__.__dict__["status"] = status
            __props__.__dict__["type"] = type
        super(SystemAdom, __self__).__init__(
            'fortios:fmg/systemAdom:SystemAdom',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_when_conflicts_occur_during_policy_check: Optional[pulumi.Input[str]] = None,
            auto_push_policy_packages_when_device_back_online: Optional[pulumi.Input[str]] = None,
            central_management_fortiap: Optional[pulumi.Input[bool]] = None,
            central_management_sdwan: Optional[pulumi.Input[bool]] = None,
            central_management_vpn: Optional[pulumi.Input[bool]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            perform_policy_check_before_every_install: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'SystemAdom':
        """
        Get an existing SystemAdom resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action_when_conflicts_occur_during_policy_check: True or False.
        :param pulumi.Input[str] auto_push_policy_packages_when_device_back_online: True or False.
        :param pulumi.Input[bool] central_management_fortiap: True or False.
        :param pulumi.Input[bool] central_management_sdwan: True or False.
        :param pulumi.Input[bool] central_management_vpn: True or False.
        :param pulumi.Input[str] mode: Adom mode: Normal or Backup.
        :param pulumi.Input[str] name: Administrative Domain name.
        :param pulumi.Input[bool] perform_policy_check_before_every_install: True or False.
        :param pulumi.Input[int] status: Adom status. 0 means off and 1 means on.
        :param pulumi.Input[str] type: Domain type, Enum: ["FortiGate", "FortiCarrier], default is "FortiCarrier".
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemAdomState.__new__(_SystemAdomState)

        __props__.__dict__["action_when_conflicts_occur_during_policy_check"] = action_when_conflicts_occur_during_policy_check
        __props__.__dict__["auto_push_policy_packages_when_device_back_online"] = auto_push_policy_packages_when_device_back_online
        __props__.__dict__["central_management_fortiap"] = central_management_fortiap
        __props__.__dict__["central_management_sdwan"] = central_management_sdwan
        __props__.__dict__["central_management_vpn"] = central_management_vpn
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["perform_policy_check_before_every_install"] = perform_policy_check_before_every_install
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return SystemAdom(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="actionWhenConflictsOccurDuringPolicyCheck")
    def action_when_conflicts_occur_during_policy_check(self) -> pulumi.Output[Optional[str]]:
        """
        True or False.
        """
        return pulumi.get(self, "action_when_conflicts_occur_during_policy_check")

    @property
    @pulumi.getter(name="autoPushPolicyPackagesWhenDeviceBackOnline")
    def auto_push_policy_packages_when_device_back_online(self) -> pulumi.Output[Optional[str]]:
        """
        True or False.
        """
        return pulumi.get(self, "auto_push_policy_packages_when_device_back_online")

    @property
    @pulumi.getter(name="centralManagementFortiap")
    def central_management_fortiap(self) -> pulumi.Output[Optional[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "central_management_fortiap")

    @property
    @pulumi.getter(name="centralManagementSdwan")
    def central_management_sdwan(self) -> pulumi.Output[Optional[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "central_management_sdwan")

    @property
    @pulumi.getter(name="centralManagementVpn")
    def central_management_vpn(self) -> pulumi.Output[Optional[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "central_management_vpn")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[str]]:
        """
        Adom mode: Normal or Backup.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Administrative Domain name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="performPolicyCheckBeforeEveryInstall")
    def perform_policy_check_before_every_install(self) -> pulumi.Output[Optional[bool]]:
        """
        True or False.
        """
        return pulumi.get(self, "perform_policy_check_before_every_install")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[int]]:
        """
        Adom status. 0 means off and 1 means on.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Domain type, Enum: ["FortiGate", "FortiCarrier], default is "FortiCarrier".
        """
        return pulumi.get(self, "type")

