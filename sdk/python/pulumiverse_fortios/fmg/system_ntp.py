# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SystemNtpArgs', 'SystemNtp']

@pulumi.input_type
class SystemNtpArgs:
    def __init__(__self__, *,
                 server: pulumi.Input[str],
                 status: Optional[pulumi.Input[str]] = None,
                 sync_interval: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a SystemNtp resource.
        :param pulumi.Input[str] server: IP address/hostname of NTP Server.
        :param pulumi.Input[str] status: Enable/disable NTP.
        :param pulumi.Input[int] sync_interval: NTP sync interval (minute).
        """
        pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sync_interval is not None:
            pulumi.set(__self__, "sync_interval", sync_interval)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        IP address/hostname of NTP Server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NTP.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="syncInterval")
    def sync_interval(self) -> Optional[pulumi.Input[int]]:
        """
        NTP sync interval (minute).
        """
        return pulumi.get(self, "sync_interval")

    @sync_interval.setter
    def sync_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sync_interval", value)


@pulumi.input_type
class _SystemNtpState:
    def __init__(__self__, *,
                 server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_interval: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering SystemNtp resources.
        :param pulumi.Input[str] server: IP address/hostname of NTP Server.
        :param pulumi.Input[str] status: Enable/disable NTP.
        :param pulumi.Input[int] sync_interval: NTP sync interval (minute).
        """
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sync_interval is not None:
            pulumi.set(__self__, "sync_interval", sync_interval)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        IP address/hostname of NTP Server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NTP.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="syncInterval")
    def sync_interval(self) -> Optional[pulumi.Input[int]]:
        """
        NTP sync interval (minute).
        """
        return pulumi.get(self, "sync_interval")

    @sync_interval.setter
    def sync_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sync_interval", value)


class SystemNtp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_interval: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource supports modifying system ntp setting for FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.SystemNtp("test1",
            server="ntp1.fortinet.com",
            status="enable",
            sync_interval=30)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] server: IP address/hostname of NTP Server.
        :param pulumi.Input[str] status: Enable/disable NTP.
        :param pulumi.Input[int] sync_interval: NTP sync interval (minute).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemNtpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource supports modifying system ntp setting for FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.SystemNtp("test1",
            server="ntp1.fortinet.com",
            status="enable",
            sync_interval=30)
        ```

        :param str resource_name: The name of the resource.
        :param SystemNtpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemNtpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_interval: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemNtpArgs.__new__(SystemNtpArgs)

            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
            __props__.__dict__["status"] = status
            __props__.__dict__["sync_interval"] = sync_interval
        super(SystemNtp, __self__).__init__(
            'fortios:fmg/systemNtp:SystemNtp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            server: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            sync_interval: Optional[pulumi.Input[int]] = None) -> 'SystemNtp':
        """
        Get an existing SystemNtp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] server: IP address/hostname of NTP Server.
        :param pulumi.Input[str] status: Enable/disable NTP.
        :param pulumi.Input[int] sync_interval: NTP sync interval (minute).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemNtpState.__new__(_SystemNtpState)

        __props__.__dict__["server"] = server
        __props__.__dict__["status"] = status
        __props__.__dict__["sync_interval"] = sync_interval
        return SystemNtp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        IP address/hostname of NTP Server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable NTP.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="syncInterval")
    def sync_interval(self) -> pulumi.Output[Optional[int]]:
        """
        NTP sync interval (minute).
        """
        return pulumi.get(self, "sync_interval")

