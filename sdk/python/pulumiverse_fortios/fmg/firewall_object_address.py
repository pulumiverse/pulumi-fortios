# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['FirewallObjectAddressArgs', 'FirewallObjectAddress']

@pulumi.input_type
class FirewallObjectAddressArgs:
    def __init__(__self__, *,
                 adom: Optional[pulumi.Input[str]] = None,
                 allow_routing: Optional[pulumi.Input[str]] = None,
                 associated_intf: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallObjectAddress resource.
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[str] allow_routing: Enable/disable use of this address in the static route configuration. default is "disable".
        :param pulumi.Input[str] associated_intf: Network interface associated with address.
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[str] end_ip: Final IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name address.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] start_ip: First IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] subnet: IPv4 address/mask
        :param pulumi.Input[str] type: Type of address, Enum: ["ipmask", "iprange", "fqdn"].
        """
        if adom is not None:
            pulumi.set(__self__, "adom", adom)
        if allow_routing is not None:
            pulumi.set(__self__, "allow_routing", allow_routing)
        if associated_intf is not None:
            pulumi.set(__self__, "associated_intf", associated_intf)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def adom(self) -> Optional[pulumi.Input[str]]:
        """
        ADOM name. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @adom.setter
    def adom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom", value)

    @property
    @pulumi.getter(name="allowRouting")
    def allow_routing(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of this address in the static route configuration. default is "disable".
        """
        return pulumi.get(self, "allow_routing")

    @allow_routing.setter
    def allow_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_routing", value)

    @property
    @pulumi.getter(name="associatedIntf")
    def associated_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Network interface associated with address.
        """
        return pulumi.get(self, "associated_intf")

    @associated_intf.setter
    def associated_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "associated_intf", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Final IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Fully Qualified Domain Name address.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        First IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address/mask
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address, Enum: ["ipmask", "iprange", "fqdn"].
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _FirewallObjectAddressState:
    def __init__(__self__, *,
                 adom: Optional[pulumi.Input[str]] = None,
                 allow_routing: Optional[pulumi.Input[str]] = None,
                 associated_intf: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallObjectAddress resources.
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[str] allow_routing: Enable/disable use of this address in the static route configuration. default is "disable".
        :param pulumi.Input[str] associated_intf: Network interface associated with address.
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[str] end_ip: Final IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name address.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] start_ip: First IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] subnet: IPv4 address/mask
        :param pulumi.Input[str] type: Type of address, Enum: ["ipmask", "iprange", "fqdn"].
        """
        if adom is not None:
            pulumi.set(__self__, "adom", adom)
        if allow_routing is not None:
            pulumi.set(__self__, "allow_routing", allow_routing)
        if associated_intf is not None:
            pulumi.set(__self__, "associated_intf", associated_intf)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def adom(self) -> Optional[pulumi.Input[str]]:
        """
        ADOM name. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @adom.setter
    def adom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom", value)

    @property
    @pulumi.getter(name="allowRouting")
    def allow_routing(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of this address in the static route configuration. default is "disable".
        """
        return pulumi.get(self, "allow_routing")

    @allow_routing.setter
    def allow_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_routing", value)

    @property
    @pulumi.getter(name="associatedIntf")
    def associated_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Network interface associated with address.
        """
        return pulumi.get(self, "associated_intf")

    @associated_intf.setter
    def associated_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "associated_intf", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Final IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Fully Qualified Domain Name address.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        First IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address/mask
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address, Enum: ["ipmask", "iprange", "fqdn"].
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class FirewallObjectAddress(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adom: Optional[pulumi.Input[str]] = None,
                 allow_routing: Optional[pulumi.Input[str]] = None,
                 associated_intf: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource supports Create/Read/Update/Delete firewall object address for FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.FirewallObjectAddress("test1",
            associated_intf="any",
            comment="test obj address",
            fqdn="fqdn.google.com",
            type="fqdn")
        test2 = fortios.fmg.FirewallObjectAddress("test2",
            allow_routing="disable",
            associated_intf="any",
            comment="test obj address",
            subnet="2.2.2.0 255.255.255.0",
            type="ipmask")
        test3 = fortios.fmg.FirewallObjectAddress("test3",
            associated_intf="any",
            comment="test obj address",
            end_ip="2.2.2.100",
            start_ip="2.2.2.1",
            type="iprange")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[str] allow_routing: Enable/disable use of this address in the static route configuration. default is "disable".
        :param pulumi.Input[str] associated_intf: Network interface associated with address.
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[str] end_ip: Final IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name address.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] start_ip: First IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] subnet: IPv4 address/mask
        :param pulumi.Input[str] type: Type of address, Enum: ["ipmask", "iprange", "fqdn"].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FirewallObjectAddressArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource supports Create/Read/Update/Delete firewall object address for FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.FirewallObjectAddress("test1",
            associated_intf="any",
            comment="test obj address",
            fqdn="fqdn.google.com",
            type="fqdn")
        test2 = fortios.fmg.FirewallObjectAddress("test2",
            allow_routing="disable",
            associated_intf="any",
            comment="test obj address",
            subnet="2.2.2.0 255.255.255.0",
            type="ipmask")
        test3 = fortios.fmg.FirewallObjectAddress("test3",
            associated_intf="any",
            comment="test obj address",
            end_ip="2.2.2.100",
            start_ip="2.2.2.1",
            type="iprange")
        ```

        :param str resource_name: The name of the resource.
        :param FirewallObjectAddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallObjectAddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adom: Optional[pulumi.Input[str]] = None,
                 allow_routing: Optional[pulumi.Input[str]] = None,
                 associated_intf: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallObjectAddressArgs.__new__(FirewallObjectAddressArgs)

            __props__.__dict__["adom"] = adom
            __props__.__dict__["allow_routing"] = allow_routing
            __props__.__dict__["associated_intf"] = associated_intf
            __props__.__dict__["comment"] = comment
            __props__.__dict__["end_ip"] = end_ip
            __props__.__dict__["fqdn"] = fqdn
            __props__.__dict__["name"] = name
            __props__.__dict__["start_ip"] = start_ip
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["type"] = type
        super(FirewallObjectAddress, __self__).__init__(
            'fortios:fmg/firewallObjectAddress:FirewallObjectAddress',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adom: Optional[pulumi.Input[str]] = None,
            allow_routing: Optional[pulumi.Input[str]] = None,
            associated_intf: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            end_ip: Optional[pulumi.Input[str]] = None,
            fqdn: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            start_ip: Optional[pulumi.Input[str]] = None,
            subnet: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'FirewallObjectAddress':
        """
        Get an existing FirewallObjectAddress resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[str] allow_routing: Enable/disable use of this address in the static route configuration. default is "disable".
        :param pulumi.Input[str] associated_intf: Network interface associated with address.
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[str] end_ip: Final IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name address.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] start_ip: First IP address (inclusive) in the range for the address.
        :param pulumi.Input[str] subnet: IPv4 address/mask
        :param pulumi.Input[str] type: Type of address, Enum: ["ipmask", "iprange", "fqdn"].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallObjectAddressState.__new__(_FirewallObjectAddressState)

        __props__.__dict__["adom"] = adom
        __props__.__dict__["allow_routing"] = allow_routing
        __props__.__dict__["associated_intf"] = associated_intf
        __props__.__dict__["comment"] = comment
        __props__.__dict__["end_ip"] = end_ip
        __props__.__dict__["fqdn"] = fqdn
        __props__.__dict__["name"] = name
        __props__.__dict__["start_ip"] = start_ip
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["type"] = type
        return FirewallObjectAddress(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def adom(self) -> pulumi.Output[Optional[str]]:
        """
        ADOM name. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @property
    @pulumi.getter(name="allowRouting")
    def allow_routing(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable use of this address in the static route configuration. default is "disable".
        """
        return pulumi.get(self, "allow_routing")

    @property
    @pulumi.getter(name="associatedIntf")
    def associated_intf(self) -> pulumi.Output[Optional[str]]:
        """
        Network interface associated with address.
        """
        return pulumi.get(self, "associated_intf")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> pulumi.Output[Optional[str]]:
        """
        Final IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Output[Optional[str]]:
        """
        Fully Qualified Domain Name address.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> pulumi.Output[Optional[str]]:
        """
        First IP address (inclusive) in the range for the address.
        """
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[Optional[str]]:
        """
        IPv4 address/mask
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of address, Enum: ["ipmask", "iprange", "fqdn"].
        """
        return pulumi.get(self, "type")

