# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['FirewallSecurityPolicyArgs', 'FirewallSecurityPolicy']

@pulumi.input_type
class FirewallSecurityPolicyArgs:
    def __init__(__self__, *,
                 dstaddrs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 dstintfs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 schedules: pulumi.Input[Sequence[pulumi.Input[str]]],
                 services: pulumi.Input[Sequence[pulumi.Input[str]]],
                 srcaddrs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 srcintfs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 action: Optional[pulumi.Input[str]] = None,
                 adom: Optional[pulumi.Input[str]] = None,
                 application_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 av_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 per_ip_shapers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_protocol_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 traffic_shapers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 vpn_tunnels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 waf_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 webfilter_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a FirewallSecurityPolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dstaddrs: Destination address and adress group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dstintfs: Outgoing interface.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schedules: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] services: Service and service group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] srcaddrs: Source address and adress group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] srcintfs: Incoming interface.
        :param pulumi.Input[str] action: Policy action, default is deny. Enum: [allow, deny, ipsec].
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] application_lists: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] av_profiles: Name of an existing Antivirus profile.
        :param pulumi.Input[str] capture_packet: Enable/disable capture packets.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dnsfilter_profiles: Name of an existing DNS filter profile.
        :param pulumi.Input[str] fixedport: Enable/disable to prevent source NAT from changing a session's source port.
        :param pulumi.Input[str] fsso: Enable/disable Fortinet Single Sign-On.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Names of user groups that can authenticate with this policy.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
        :param pulumi.Input[str] internet_service: Enable/disable use of Destination Internet Services for this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_ids: Destination Internet Service ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_names: Destination Internet Service Name.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Source Internet Services for this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_src_ids: Source Internet Service ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_src_names: Source Internet Service Name.
        :param pulumi.Input[str] ippool: Enable/disable to use IP Pools for source NAT.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips_sensors: Name of an existing IPS sensor.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Enum: [disable, all, utm]
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts and ends. Enum: [disable, enable]
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT.
        :param pulumi.Input[str] package_name: The package name which the policy will be added to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] per_ip_shapers: Per-IP traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] poolnames: IP Pool names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] profile_groups: Name of profile group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
        :param pulumi.Input[str] rsso: Enable/disable RADIUS Single Sign-On.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_shaper_reverses: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_shapers: Traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Names of individual users that can authenticate with this policy.
        :param pulumi.Input[str] utm_status: Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] waf_profiles: Name of an existing Web application firewall profile.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] webfilter_profiles: Name of an existing Web filter profile.
        """
        pulumi.set(__self__, "dstaddrs", dstaddrs)
        pulumi.set(__self__, "dstintfs", dstintfs)
        pulumi.set(__self__, "schedules", schedules)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "srcaddrs", srcaddrs)
        pulumi.set(__self__, "srcintfs", srcintfs)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if adom is not None:
            pulumi.set(__self__, "adom", adom)
        if application_lists is not None:
            pulumi.set(__self__, "application_lists", application_lists)
        if av_profiles is not None:
            pulumi.set(__self__, "av_profiles", av_profiles)
        if capture_packet is not None:
            pulumi.set(__self__, "capture_packet", capture_packet)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dnsfilter_profiles is not None:
            pulumi.set(__self__, "dnsfilter_profiles", dnsfilter_profiles)
        if fixedport is not None:
            pulumi.set(__self__, "fixedport", fixedport)
        if fsso is not None:
            pulumi.set(__self__, "fsso", fsso)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names is not None:
            pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if ips_sensors is not None:
            pulumi.set(__self__, "ips_sensors", ips_sensors)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if per_ip_shapers is not None:
            pulumi.set(__self__, "per_ip_shapers", per_ip_shapers)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if profile_groups is not None:
            pulumi.set(__self__, "profile_groups", profile_groups)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if rsso is not None:
            pulumi.set(__self__, "rsso", rsso)
        if traffic_shaper_reverses is not None:
            pulumi.set(__self__, "traffic_shaper_reverses", traffic_shaper_reverses)
        if traffic_shapers is not None:
            pulumi.set(__self__, "traffic_shapers", traffic_shapers)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if vpn_tunnels is not None:
            pulumi.set(__self__, "vpn_tunnels", vpn_tunnels)
        if waf_profiles is not None:
            pulumi.set(__self__, "waf_profiles", waf_profiles)
        if webfilter_profiles is not None:
            pulumi.set(__self__, "webfilter_profiles", webfilter_profiles)

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Destination address and adress group names.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Outgoing interface.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def schedules(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter
    def services(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Service and service group names.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Source address and adress group names.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Incoming interface.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action, default is deny. Enum: [allow, deny, ipsec].
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def adom(self) -> Optional[pulumi.Input[str]]:
        """
        ADOM name. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @adom.setter
    def adom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom", value)

    @property
    @pulumi.getter(name="applicationLists")
    def application_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_lists")

    @application_lists.setter
    def application_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "application_lists", value)

    @property
    @pulumi.getter(name="avProfiles")
    def av_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profiles")

    @av_profiles.setter
    def av_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "av_profiles", value)

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable capture packets.
        """
        return pulumi.get(self, "capture_packet")

    @capture_packet.setter
    def capture_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capture_packet", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dnsfilterProfiles")
    def dnsfilter_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profiles")

    @dnsfilter_profiles.setter
    def dnsfilter_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dnsfilter_profiles", value)

    @property
    @pulumi.getter
    def fixedport(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to prevent source NAT from changing a session's source port.
        """
        return pulumi.get(self, "fixedport")

    @fixedport.setter
    def fixedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixedport", value)

    @property
    @pulumi.getter
    def fsso(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fortinet Single Sign-On.
        """
        return pulumi.get(self, "fsso")

    @fsso.setter
    def fsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Names of user groups that can authenticate with this policy.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
        """
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Destination Internet Services for this policy.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Destination Internet Service ID.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Destination Internet Service Name.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Source Internet Services for this policy.
        """
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Source Internet Service ID.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Source Internet Service Name.
        """
        return pulumi.get(self, "internet_service_src_names")

    @internet_service_src_names.setter
    def internet_service_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internet_service_src_names", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to use IP Pools for source NAT.
        """
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter(name="ipsSensors")
    def ips_sensors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensors")

    @ips_sensors.setter
    def ips_sensors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips_sensors", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable logging. Enum: [disable, all, utm]
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        """
        Record logs when a session starts and ends. Enum: [disable, enable]
        """
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source NAT.
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[pulumi.Input[str]]:
        """
        The package name which the policy will be added to.
        """
        return pulumi.get(self, "package_name")

    @package_name.setter
    def package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_name", value)

    @property
    @pulumi.getter(name="perIpShapers")
    def per_ip_shapers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shapers")

    @per_ip_shapers.setter
    def per_ip_shapers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "per_ip_shapers", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IP Pool names.
        """
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter(name="profileGroups")
    def profile_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_groups")

    @profile_groups.setter
    def profile_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "profile_groups", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter
    def rsso(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable RADIUS Single Sign-On.
        """
        return pulumi.get(self, "rsso")

    @rsso.setter
    def rsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso", value)

    @property
    @pulumi.getter(name="trafficShaperReverses")
    def traffic_shaper_reverses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverses")

    @traffic_shaper_reverses.setter
    def traffic_shaper_reverses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "traffic_shaper_reverses", value)

    @property
    @pulumi.getter(name="trafficShapers")
    def traffic_shapers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shapers")

    @traffic_shapers.setter
    def traffic_shapers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "traffic_shapers", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Names of individual users that can authenticate with this policy.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
        """
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter(name="vpnTunnels")
    def vpn_tunnels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "vpn_tunnels")

    @vpn_tunnels.setter
    def vpn_tunnels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vpn_tunnels", value)

    @property
    @pulumi.getter(name="wafProfiles")
    def waf_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profiles")

    @waf_profiles.setter
    def waf_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "waf_profiles", value)

    @property
    @pulumi.getter(name="webfilterProfiles")
    def webfilter_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profiles")

    @webfilter_profiles.setter
    def webfilter_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "webfilter_profiles", value)


@pulumi.input_type
class _FirewallSecurityPolicyState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 adom: Optional[pulumi.Input[str]] = None,
                 application_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 av_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 per_ip_shapers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_protocol_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 traffic_shaper_reverses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 traffic_shapers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 vpn_tunnels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 waf_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 webfilter_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering FirewallSecurityPolicy resources.
        :param pulumi.Input[str] action: Policy action, default is deny. Enum: [allow, deny, ipsec].
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] application_lists: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] av_profiles: Name of an existing Antivirus profile.
        :param pulumi.Input[str] capture_packet: Enable/disable capture packets.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dnsfilter_profiles: Name of an existing DNS filter profile.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dstaddrs: Destination address and adress group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dstintfs: Outgoing interface.
        :param pulumi.Input[str] fixedport: Enable/disable to prevent source NAT from changing a session's source port.
        :param pulumi.Input[str] fsso: Enable/disable Fortinet Single Sign-On.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Names of user groups that can authenticate with this policy.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
        :param pulumi.Input[str] internet_service: Enable/disable use of Destination Internet Services for this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_ids: Destination Internet Service ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_names: Destination Internet Service Name.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Source Internet Services for this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_src_ids: Source Internet Service ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_src_names: Source Internet Service Name.
        :param pulumi.Input[str] ippool: Enable/disable to use IP Pools for source NAT.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips_sensors: Name of an existing IPS sensor.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Enum: [disable, all, utm]
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts and ends. Enum: [disable, enable]
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT.
        :param pulumi.Input[str] package_name: The package name which the policy will be added to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] per_ip_shapers: Per-IP traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] poolnames: IP Pool names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] profile_groups: Name of profile group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
        :param pulumi.Input[str] rsso: Enable/disable RADIUS Single Sign-On.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schedules: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] services: Service and service group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] srcaddrs: Source address and adress group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] srcintfs: Incoming interface.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_shaper_reverses: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_shapers: Traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Names of individual users that can authenticate with this policy.
        :param pulumi.Input[str] utm_status: Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] waf_profiles: Name of an existing Web application firewall profile.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] webfilter_profiles: Name of an existing Web filter profile.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if adom is not None:
            pulumi.set(__self__, "adom", adom)
        if application_lists is not None:
            pulumi.set(__self__, "application_lists", application_lists)
        if av_profiles is not None:
            pulumi.set(__self__, "av_profiles", av_profiles)
        if capture_packet is not None:
            pulumi.set(__self__, "capture_packet", capture_packet)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dnsfilter_profiles is not None:
            pulumi.set(__self__, "dnsfilter_profiles", dnsfilter_profiles)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if fixedport is not None:
            pulumi.set(__self__, "fixedport", fixedport)
        if fsso is not None:
            pulumi.set(__self__, "fsso", fsso)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names is not None:
            pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if ips_sensors is not None:
            pulumi.set(__self__, "ips_sensors", ips_sensors)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if per_ip_shapers is not None:
            pulumi.set(__self__, "per_ip_shapers", per_ip_shapers)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if profile_groups is not None:
            pulumi.set(__self__, "profile_groups", profile_groups)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if rsso is not None:
            pulumi.set(__self__, "rsso", rsso)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if traffic_shaper_reverses is not None:
            pulumi.set(__self__, "traffic_shaper_reverses", traffic_shaper_reverses)
        if traffic_shapers is not None:
            pulumi.set(__self__, "traffic_shapers", traffic_shapers)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if vpn_tunnels is not None:
            pulumi.set(__self__, "vpn_tunnels", vpn_tunnels)
        if waf_profiles is not None:
            pulumi.set(__self__, "waf_profiles", waf_profiles)
        if webfilter_profiles is not None:
            pulumi.set(__self__, "webfilter_profiles", webfilter_profiles)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action, default is deny. Enum: [allow, deny, ipsec].
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def adom(self) -> Optional[pulumi.Input[str]]:
        """
        ADOM name. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @adom.setter
    def adom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom", value)

    @property
    @pulumi.getter(name="applicationLists")
    def application_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_lists")

    @application_lists.setter
    def application_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "application_lists", value)

    @property
    @pulumi.getter(name="avProfiles")
    def av_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profiles")

    @av_profiles.setter
    def av_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "av_profiles", value)

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable capture packets.
        """
        return pulumi.get(self, "capture_packet")

    @capture_packet.setter
    def capture_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capture_packet", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dnsfilterProfiles")
    def dnsfilter_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profiles")

    @dnsfilter_profiles.setter
    def dnsfilter_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dnsfilter_profiles", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Destination address and adress group names.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Outgoing interface.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def fixedport(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to prevent source NAT from changing a session's source port.
        """
        return pulumi.get(self, "fixedport")

    @fixedport.setter
    def fixedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixedport", value)

    @property
    @pulumi.getter
    def fsso(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fortinet Single Sign-On.
        """
        return pulumi.get(self, "fsso")

    @fsso.setter
    def fsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Names of user groups that can authenticate with this policy.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
        """
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Destination Internet Services for this policy.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Destination Internet Service ID.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Destination Internet Service Name.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Source Internet Services for this policy.
        """
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Source Internet Service ID.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Source Internet Service Name.
        """
        return pulumi.get(self, "internet_service_src_names")

    @internet_service_src_names.setter
    def internet_service_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internet_service_src_names", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to use IP Pools for source NAT.
        """
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter(name="ipsSensors")
    def ips_sensors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensors")

    @ips_sensors.setter
    def ips_sensors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips_sensors", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable logging. Enum: [disable, all, utm]
        """
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        """
        Record logs when a session starts and ends. Enum: [disable, enable]
        """
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source NAT.
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[pulumi.Input[str]]:
        """
        The package name which the policy will be added to.
        """
        return pulumi.get(self, "package_name")

    @package_name.setter
    def package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_name", value)

    @property
    @pulumi.getter(name="perIpShapers")
    def per_ip_shapers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shapers")

    @per_ip_shapers.setter
    def per_ip_shapers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "per_ip_shapers", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IP Pool names.
        """
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter(name="profileGroups")
    def profile_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_groups")

    @profile_groups.setter
    def profile_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "profile_groups", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter
    def rsso(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable RADIUS Single Sign-On.
        """
        return pulumi.get(self, "rsso")

    @rsso.setter
    def rsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Service and service group names.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Source address and adress group names.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Incoming interface.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter(name="trafficShaperReverses")
    def traffic_shaper_reverses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverses")

    @traffic_shaper_reverses.setter
    def traffic_shaper_reverses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "traffic_shaper_reverses", value)

    @property
    @pulumi.getter(name="trafficShapers")
    def traffic_shapers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shapers")

    @traffic_shapers.setter
    def traffic_shapers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "traffic_shapers", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Names of individual users that can authenticate with this policy.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
        """
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter(name="vpnTunnels")
    def vpn_tunnels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "vpn_tunnels")

    @vpn_tunnels.setter
    def vpn_tunnels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vpn_tunnels", value)

    @property
    @pulumi.getter(name="wafProfiles")
    def waf_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profiles")

    @waf_profiles.setter
    def waf_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "waf_profiles", value)

    @property
    @pulumi.getter(name="webfilterProfiles")
    def webfilter_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profiles")

    @webfilter_profiles.setter
    def webfilter_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "webfilter_profiles", value)


class FirewallSecurityPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 adom: Optional[pulumi.Input[str]] = None,
                 application_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 av_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 per_ip_shapers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_protocol_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 traffic_shaper_reverses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 traffic_shapers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 vpn_tunnels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 waf_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 webfilter_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        This resource supports Create/Read/Update/Delete firewall security policy on FortiManager which could be installed to the FortiGate later

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.FirewallSecurityPolicy("test1",
            action="accept",
            av_profiles=["g-default"],
            capture_packet="enable",
            comments="policy test",
            dnsfilter_profiles=["default"],
            dstaddrs=["all"],
            dstintfs=["any"],
            fixedport="enable",
            groups=["Guest-group"],
            ippool="disable",
            logtraffic="all",
            logtraffic_start="enable",
            nat="enable",
            package_name="dvm-test",
            profile_type="single",
            schedules=["always"],
            services=["ALL"],
            srcaddrs=["all"],
            srcintfs=["any"],
            traffic_shapers=["high-priority"],
            users=["guest"],
            utm_status="enable")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Policy action, default is deny. Enum: [allow, deny, ipsec].
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] application_lists: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] av_profiles: Name of an existing Antivirus profile.
        :param pulumi.Input[str] capture_packet: Enable/disable capture packets.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dnsfilter_profiles: Name of an existing DNS filter profile.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dstaddrs: Destination address and adress group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dstintfs: Outgoing interface.
        :param pulumi.Input[str] fixedport: Enable/disable to prevent source NAT from changing a session's source port.
        :param pulumi.Input[str] fsso: Enable/disable Fortinet Single Sign-On.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Names of user groups that can authenticate with this policy.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
        :param pulumi.Input[str] internet_service: Enable/disable use of Destination Internet Services for this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_ids: Destination Internet Service ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_names: Destination Internet Service Name.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Source Internet Services for this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_src_ids: Source Internet Service ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_src_names: Source Internet Service Name.
        :param pulumi.Input[str] ippool: Enable/disable to use IP Pools for source NAT.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips_sensors: Name of an existing IPS sensor.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Enum: [disable, all, utm]
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts and ends. Enum: [disable, enable]
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT.
        :param pulumi.Input[str] package_name: The package name which the policy will be added to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] per_ip_shapers: Per-IP traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] poolnames: IP Pool names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] profile_groups: Name of profile group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
        :param pulumi.Input[str] rsso: Enable/disable RADIUS Single Sign-On.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schedules: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] services: Service and service group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] srcaddrs: Source address and adress group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] srcintfs: Incoming interface.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_shaper_reverses: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_shapers: Traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Names of individual users that can authenticate with this policy.
        :param pulumi.Input[str] utm_status: Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] waf_profiles: Name of an existing Web application firewall profile.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] webfilter_profiles: Name of an existing Web filter profile.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallSecurityPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource supports Create/Read/Update/Delete firewall security policy on FortiManager which could be installed to the FortiGate later

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.FirewallSecurityPolicy("test1",
            action="accept",
            av_profiles=["g-default"],
            capture_packet="enable",
            comments="policy test",
            dnsfilter_profiles=["default"],
            dstaddrs=["all"],
            dstintfs=["any"],
            fixedport="enable",
            groups=["Guest-group"],
            ippool="disable",
            logtraffic="all",
            logtraffic_start="enable",
            nat="enable",
            package_name="dvm-test",
            profile_type="single",
            schedules=["always"],
            services=["ALL"],
            srcaddrs=["all"],
            srcintfs=["any"],
            traffic_shapers=["high-priority"],
            users=["guest"],
            utm_status="enable")
        ```

        :param str resource_name: The name of the resource.
        :param FirewallSecurityPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallSecurityPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 adom: Optional[pulumi.Input[str]] = None,
                 application_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 av_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 per_ip_shapers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_protocol_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 traffic_shaper_reverses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 traffic_shapers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 vpn_tunnels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 waf_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 webfilter_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallSecurityPolicyArgs.__new__(FirewallSecurityPolicyArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["adom"] = adom
            __props__.__dict__["application_lists"] = application_lists
            __props__.__dict__["av_profiles"] = av_profiles
            __props__.__dict__["capture_packet"] = capture_packet
            __props__.__dict__["comments"] = comments
            __props__.__dict__["dnsfilter_profiles"] = dnsfilter_profiles
            if dstaddrs is None and not opts.urn:
                raise TypeError("Missing required property 'dstaddrs'")
            __props__.__dict__["dstaddrs"] = dstaddrs
            if dstintfs is None and not opts.urn:
                raise TypeError("Missing required property 'dstintfs'")
            __props__.__dict__["dstintfs"] = dstintfs
            __props__.__dict__["fixedport"] = fixedport
            __props__.__dict__["fsso"] = fsso
            __props__.__dict__["groups"] = groups
            __props__.__dict__["inbound"] = inbound
            __props__.__dict__["internet_service"] = internet_service
            __props__.__dict__["internet_service_ids"] = internet_service_ids
            __props__.__dict__["internet_service_names"] = internet_service_names
            __props__.__dict__["internet_service_src"] = internet_service_src
            __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
            __props__.__dict__["internet_service_src_names"] = internet_service_src_names
            __props__.__dict__["ippool"] = ippool
            __props__.__dict__["ips_sensors"] = ips_sensors
            __props__.__dict__["logtraffic"] = logtraffic
            __props__.__dict__["logtraffic_start"] = logtraffic_start
            __props__.__dict__["name"] = name
            __props__.__dict__["nat"] = nat
            __props__.__dict__["package_name"] = package_name
            __props__.__dict__["per_ip_shapers"] = per_ip_shapers
            __props__.__dict__["poolnames"] = poolnames
            __props__.__dict__["profile_groups"] = profile_groups
            __props__.__dict__["profile_protocol_options"] = profile_protocol_options
            __props__.__dict__["profile_type"] = profile_type
            __props__.__dict__["rsso"] = rsso
            if schedules is None and not opts.urn:
                raise TypeError("Missing required property 'schedules'")
            __props__.__dict__["schedules"] = schedules
            if services is None and not opts.urn:
                raise TypeError("Missing required property 'services'")
            __props__.__dict__["services"] = services
            if srcaddrs is None and not opts.urn:
                raise TypeError("Missing required property 'srcaddrs'")
            __props__.__dict__["srcaddrs"] = srcaddrs
            if srcintfs is None and not opts.urn:
                raise TypeError("Missing required property 'srcintfs'")
            __props__.__dict__["srcintfs"] = srcintfs
            __props__.__dict__["traffic_shaper_reverses"] = traffic_shaper_reverses
            __props__.__dict__["traffic_shapers"] = traffic_shapers
            __props__.__dict__["users"] = users
            __props__.__dict__["utm_status"] = utm_status
            __props__.__dict__["vpn_tunnels"] = vpn_tunnels
            __props__.__dict__["waf_profiles"] = waf_profiles
            __props__.__dict__["webfilter_profiles"] = webfilter_profiles
        super(FirewallSecurityPolicy, __self__).__init__(
            'fortios:fmg/firewallSecurityPolicy:FirewallSecurityPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            adom: Optional[pulumi.Input[str]] = None,
            application_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            av_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            capture_packet: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dnsfilter_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            fixedport: Optional[pulumi.Input[str]] = None,
            fsso: Optional[pulumi.Input[str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            inbound: Optional[pulumi.Input[str]] = None,
            internet_service: Optional[pulumi.Input[str]] = None,
            internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            internet_service_src: Optional[pulumi.Input[str]] = None,
            internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ippool: Optional[pulumi.Input[str]] = None,
            ips_sensors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            logtraffic: Optional[pulumi.Input[str]] = None,
            logtraffic_start: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nat: Optional[pulumi.Input[str]] = None,
            package_name: Optional[pulumi.Input[str]] = None,
            per_ip_shapers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            profile_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            profile_protocol_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            profile_type: Optional[pulumi.Input[str]] = None,
            rsso: Optional[pulumi.Input[str]] = None,
            schedules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            traffic_shaper_reverses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            traffic_shapers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            utm_status: Optional[pulumi.Input[str]] = None,
            vpn_tunnels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            waf_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            webfilter_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'FirewallSecurityPolicy':
        """
        Get an existing FirewallSecurityPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Policy action, default is deny. Enum: [allow, deny, ipsec].
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] application_lists: Name of an existing Application list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] av_profiles: Name of an existing Antivirus profile.
        :param pulumi.Input[str] capture_packet: Enable/disable capture packets.
        :param pulumi.Input[str] comments: Comments.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dnsfilter_profiles: Name of an existing DNS filter profile.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dstaddrs: Destination address and adress group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dstintfs: Outgoing interface.
        :param pulumi.Input[str] fixedport: Enable/disable to prevent source NAT from changing a session's source port.
        :param pulumi.Input[str] fsso: Enable/disable Fortinet Single Sign-On.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Names of user groups that can authenticate with this policy.
        :param pulumi.Input[str] inbound: Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
        :param pulumi.Input[str] internet_service: Enable/disable use of Destination Internet Services for this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_ids: Destination Internet Service ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_names: Destination Internet Service Name.
        :param pulumi.Input[str] internet_service_src: Enable/disable use of Source Internet Services for this policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_src_ids: Source Internet Service ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internet_service_src_names: Source Internet Service Name.
        :param pulumi.Input[str] ippool: Enable/disable to use IP Pools for source NAT.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips_sensors: Name of an existing IPS sensor.
        :param pulumi.Input[str] logtraffic: Enable or disable logging. Enum: [disable, all, utm]
        :param pulumi.Input[str] logtraffic_start: Record logs when a session starts and ends. Enum: [disable, enable]
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] nat: Enable/disable source NAT.
        :param pulumi.Input[str] package_name: The package name which the policy will be added to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] per_ip_shapers: Per-IP traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] poolnames: IP Pool names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] profile_groups: Name of profile group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] profile_protocol_options: Name of an existing Protocol options profile.
        :param pulumi.Input[str] profile_type: Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
        :param pulumi.Input[str] rsso: Enable/disable RADIUS Single Sign-On.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schedules: Schedule name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] services: Service and service group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] srcaddrs: Source address and adress group names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] srcintfs: Incoming interface.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_shaper_reverses: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_shapers: Traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Names of individual users that can authenticate with this policy.
        :param pulumi.Input[str] utm_status: Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] waf_profiles: Name of an existing Web application firewall profile.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] webfilter_profiles: Name of an existing Web filter profile.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallSecurityPolicyState.__new__(_FirewallSecurityPolicyState)

        __props__.__dict__["action"] = action
        __props__.__dict__["adom"] = adom
        __props__.__dict__["application_lists"] = application_lists
        __props__.__dict__["av_profiles"] = av_profiles
        __props__.__dict__["capture_packet"] = capture_packet
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dnsfilter_profiles"] = dnsfilter_profiles
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dstintfs"] = dstintfs
        __props__.__dict__["fixedport"] = fixedport
        __props__.__dict__["fsso"] = fsso
        __props__.__dict__["groups"] = groups
        __props__.__dict__["inbound"] = inbound
        __props__.__dict__["internet_service"] = internet_service
        __props__.__dict__["internet_service_ids"] = internet_service_ids
        __props__.__dict__["internet_service_names"] = internet_service_names
        __props__.__dict__["internet_service_src"] = internet_service_src
        __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
        __props__.__dict__["internet_service_src_names"] = internet_service_src_names
        __props__.__dict__["ippool"] = ippool
        __props__.__dict__["ips_sensors"] = ips_sensors
        __props__.__dict__["logtraffic"] = logtraffic
        __props__.__dict__["logtraffic_start"] = logtraffic_start
        __props__.__dict__["name"] = name
        __props__.__dict__["nat"] = nat
        __props__.__dict__["package_name"] = package_name
        __props__.__dict__["per_ip_shapers"] = per_ip_shapers
        __props__.__dict__["poolnames"] = poolnames
        __props__.__dict__["profile_groups"] = profile_groups
        __props__.__dict__["profile_protocol_options"] = profile_protocol_options
        __props__.__dict__["profile_type"] = profile_type
        __props__.__dict__["rsso"] = rsso
        __props__.__dict__["schedules"] = schedules
        __props__.__dict__["services"] = services
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["srcintfs"] = srcintfs
        __props__.__dict__["traffic_shaper_reverses"] = traffic_shaper_reverses
        __props__.__dict__["traffic_shapers"] = traffic_shapers
        __props__.__dict__["users"] = users
        __props__.__dict__["utm_status"] = utm_status
        __props__.__dict__["vpn_tunnels"] = vpn_tunnels
        __props__.__dict__["waf_profiles"] = waf_profiles
        __props__.__dict__["webfilter_profiles"] = webfilter_profiles
        return FirewallSecurityPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[str]]:
        """
        Policy action, default is deny. Enum: [allow, deny, ipsec].
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def adom(self) -> pulumi.Output[Optional[str]]:
        """
        ADOM name. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @property
    @pulumi.getter(name="applicationLists")
    def application_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Name of an existing Application list.
        """
        return pulumi.get(self, "application_lists")

    @property
    @pulumi.getter(name="avProfiles")
    def av_profiles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Name of an existing Antivirus profile.
        """
        return pulumi.get(self, "av_profiles")

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable capture packets.
        """
        return pulumi.get(self, "capture_packet")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dnsfilterProfiles")
    def dnsfilter_profiles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Name of an existing DNS filter profile.
        """
        return pulumi.get(self, "dnsfilter_profiles")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Sequence[str]]:
        """
        Destination address and adress group names.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Output[Sequence[str]]:
        """
        Outgoing interface.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter
    def fixedport(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable to prevent source NAT from changing a session's source port.
        """
        return pulumi.get(self, "fixedport")

    @property
    @pulumi.getter
    def fsso(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable Fortinet Single Sign-On.
        """
        return pulumi.get(self, "fsso")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Names of user groups that can authenticate with this policy.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def inbound(self) -> pulumi.Output[Optional[str]]:
        """
        Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
        """
        return pulumi.get(self, "inbound")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> pulumi.Output[str]:
        """
        Enable/disable use of Destination Internet Services for this policy.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Destination Internet Service ID.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Destination Internet Service Name.
        """
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> pulumi.Output[str]:
        """
        Enable/disable use of Source Internet Services for this policy.
        """
        return pulumi.get(self, "internet_service_src")

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Source Internet Service ID.
        """
        return pulumi.get(self, "internet_service_src_ids")

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Source Internet Service Name.
        """
        return pulumi.get(self, "internet_service_src_names")

    @property
    @pulumi.getter
    def ippool(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable to use IP Pools for source NAT.
        """
        return pulumi.get(self, "ippool")

    @property
    @pulumi.getter(name="ipsSensors")
    def ips_sensors(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Name of an existing IPS sensor.
        """
        return pulumi.get(self, "ips_sensors")

    @property
    @pulumi.getter
    def logtraffic(self) -> pulumi.Output[Optional[str]]:
        """
        Enable or disable logging. Enum: [disable, all, utm]
        """
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> pulumi.Output[Optional[str]]:
        """
        Record logs when a session starts and ends. Enum: [disable, enable]
        """
        return pulumi.get(self, "logtraffic_start")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable source NAT.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> pulumi.Output[Optional[str]]:
        """
        The package name which the policy will be added to.
        """
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="perIpShapers")
    def per_ip_shapers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shapers")

    @property
    @pulumi.getter
    def poolnames(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        IP Pool names.
        """
        return pulumi.get(self, "poolnames")

    @property
    @pulumi.getter(name="profileGroups")
    def profile_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Name of profile group.
        """
        return pulumi.get(self, "profile_groups")

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Name of an existing Protocol options profile.
        """
        return pulumi.get(self, "profile_protocol_options")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> pulumi.Output[Optional[str]]:
        """
        Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter
    def rsso(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable RADIUS Single Sign-On.
        """
        return pulumi.get(self, "rsso")

    @property
    @pulumi.getter
    def schedules(self) -> pulumi.Output[Sequence[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Sequence[str]]:
        """
        Service and service group names.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Sequence[str]]:
        """
        Source address and adress group names.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Output[Sequence[str]]:
        """
        Incoming interface.
        """
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter(name="trafficShaperReverses")
    def traffic_shaper_reverses(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "traffic_shaper_reverses")

    @property
    @pulumi.getter(name="trafficShapers")
    def traffic_shapers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "traffic_shapers")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Names of individual users that can authenticate with this policy.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> pulumi.Output[Optional[str]]:
        """
        Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
        """
        return pulumi.get(self, "utm_status")

    @property
    @pulumi.getter(name="vpnTunnels")
    def vpn_tunnels(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "vpn_tunnels")

    @property
    @pulumi.getter(name="wafProfiles")
    def waf_profiles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Name of an existing Web application firewall profile.
        """
        return pulumi.get(self, "waf_profiles")

    @property
    @pulumi.getter(name="webfilterProfiles")
    def webfilter_profiles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Name of an existing Web filter profile.
        """
        return pulumi.get(self, "webfilter_profiles")

