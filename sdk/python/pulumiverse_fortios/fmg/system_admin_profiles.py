# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SystemAdminProfilesArgs', 'SystemAdminProfiles']

@pulumi.input_type
class SystemAdminProfilesArgs:
    def __init__(__self__, *,
                 profileid: pulumi.Input[str],
                 adom_policy_packages: Optional[pulumi.Input[str]] = None,
                 adom_switch: Optional[pulumi.Input[str]] = None,
                 assignment: Optional[pulumi.Input[str]] = None,
                 config_retrieve: Optional[pulumi.Input[str]] = None,
                 config_revert: Optional[pulumi.Input[str]] = None,
                 consistency_check: Optional[pulumi.Input[str]] = None,
                 deploy_management: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_ap: Optional[pulumi.Input[str]] = None,
                 device_config: Optional[pulumi.Input[str]] = None,
                 device_forticlient: Optional[pulumi.Input[str]] = None,
                 device_fortiswitch: Optional[pulumi.Input[str]] = None,
                 device_manager: Optional[pulumi.Input[str]] = None,
                 device_operation: Optional[pulumi.Input[str]] = None,
                 device_profile: Optional[pulumi.Input[str]] = None,
                 device_revision_deletion: Optional[pulumi.Input[str]] = None,
                 device_wan_link_load_balance: Optional[pulumi.Input[str]] = None,
                 fortiguard_center: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_advanced: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_firmware_managerment: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_licensing: Optional[pulumi.Input[str]] = None,
                 global_policy_packages: Optional[pulumi.Input[str]] = None,
                 import_policy_packages: Optional[pulumi.Input[str]] = None,
                 intf_mapping: Optional[pulumi.Input[str]] = None,
                 log_viewer: Optional[pulumi.Input[str]] = None,
                 policy_objects: Optional[pulumi.Input[str]] = None,
                 set_install_targets: Optional[pulumi.Input[str]] = None,
                 system_setting: Optional[pulumi.Input[str]] = None,
                 terminal_access: Optional[pulumi.Input[str]] = None,
                 vpn_manager: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemAdminProfiles resource.
        :param pulumi.Input[str] profileid: Profile name.
        :param pulumi.Input[str] adom_policy_packages: Adom policy packages.
        :param pulumi.Input[str] adom_switch: Administrator Domain.
        :param pulumi.Input[str] assignment: Assignment Permission.
        :param pulumi.Input[str] config_retrieve: Configuration Retrieve.
        :param pulumi.Input[str] config_revert: Revert Configuration from Revision History.
        :param pulumi.Input[str] consistency_check: Consistency check.
        :param pulumi.Input[str] deploy_management: Install to devices.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] device_ap: Manage AP.
        :param pulumi.Input[str] device_config: Manage device configurations.
        :param pulumi.Input[str] device_forticlient: Manage FortiClient.
        :param pulumi.Input[str] device_fortiswitch: Manage FortiSwitch.
        :param pulumi.Input[str] device_manager: Device Manager.
        :param pulumi.Input[str] device_operation: Device add/delete/edit.
        :param pulumi.Input[str] device_profile: Device profile permission.
        :param pulumi.Input[str] device_revision_deletion: Delete device revision.
        :param pulumi.Input[str] device_wan_link_load_balance: Manage WAN link load balance.
        :param pulumi.Input[str] fortiguard_center: FortiGuard Center.
        :param pulumi.Input[str] fortiguard_center_advanced: FortiGuard Center Advanced.
        :param pulumi.Input[str] fortiguard_center_firmware_managerment: FortiGuard Center Firmware Managerment.
        :param pulumi.Input[str] fortiguard_center_licensing: FortiGuard Center Licensing.
        :param pulumi.Input[str] global_policy_packages: Global policy packages.
        :param pulumi.Input[str] import_policy_packages: Import Policy Package.
        :param pulumi.Input[str] intf_mapping: Interface Mapping.
        :param pulumi.Input[str] log_viewer: Log Viewer.
        :param pulumi.Input[str] policy_objects: Policy objects permission.
        :param pulumi.Input[str] set_install_targets: Edit installation targets.
        :param pulumi.Input[str] system_setting: System Setting.
        :param pulumi.Input[str] terminal_access: Terminal access.
        :param pulumi.Input[str] vpn_manager: VPN Manager.
        """
        pulumi.set(__self__, "profileid", profileid)
        if adom_policy_packages is not None:
            pulumi.set(__self__, "adom_policy_packages", adom_policy_packages)
        if adom_switch is not None:
            pulumi.set(__self__, "adom_switch", adom_switch)
        if assignment is not None:
            pulumi.set(__self__, "assignment", assignment)
        if config_retrieve is not None:
            pulumi.set(__self__, "config_retrieve", config_retrieve)
        if config_revert is not None:
            pulumi.set(__self__, "config_revert", config_revert)
        if consistency_check is not None:
            pulumi.set(__self__, "consistency_check", consistency_check)
        if deploy_management is not None:
            pulumi.set(__self__, "deploy_management", deploy_management)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_ap is not None:
            pulumi.set(__self__, "device_ap", device_ap)
        if device_config is not None:
            pulumi.set(__self__, "device_config", device_config)
        if device_forticlient is not None:
            pulumi.set(__self__, "device_forticlient", device_forticlient)
        if device_fortiswitch is not None:
            pulumi.set(__self__, "device_fortiswitch", device_fortiswitch)
        if device_manager is not None:
            pulumi.set(__self__, "device_manager", device_manager)
        if device_operation is not None:
            pulumi.set(__self__, "device_operation", device_operation)
        if device_profile is not None:
            pulumi.set(__self__, "device_profile", device_profile)
        if device_revision_deletion is not None:
            pulumi.set(__self__, "device_revision_deletion", device_revision_deletion)
        if device_wan_link_load_balance is not None:
            pulumi.set(__self__, "device_wan_link_load_balance", device_wan_link_load_balance)
        if fortiguard_center is not None:
            pulumi.set(__self__, "fortiguard_center", fortiguard_center)
        if fortiguard_center_advanced is not None:
            pulumi.set(__self__, "fortiguard_center_advanced", fortiguard_center_advanced)
        if fortiguard_center_firmware_managerment is not None:
            pulumi.set(__self__, "fortiguard_center_firmware_managerment", fortiguard_center_firmware_managerment)
        if fortiguard_center_licensing is not None:
            pulumi.set(__self__, "fortiguard_center_licensing", fortiguard_center_licensing)
        if global_policy_packages is not None:
            pulumi.set(__self__, "global_policy_packages", global_policy_packages)
        if import_policy_packages is not None:
            pulumi.set(__self__, "import_policy_packages", import_policy_packages)
        if intf_mapping is not None:
            pulumi.set(__self__, "intf_mapping", intf_mapping)
        if log_viewer is not None:
            pulumi.set(__self__, "log_viewer", log_viewer)
        if policy_objects is not None:
            pulumi.set(__self__, "policy_objects", policy_objects)
        if set_install_targets is not None:
            pulumi.set(__self__, "set_install_targets", set_install_targets)
        if system_setting is not None:
            pulumi.set(__self__, "system_setting", system_setting)
        if terminal_access is not None:
            pulumi.set(__self__, "terminal_access", terminal_access)
        if vpn_manager is not None:
            pulumi.set(__self__, "vpn_manager", vpn_manager)

    @property
    @pulumi.getter
    def profileid(self) -> pulumi.Input[str]:
        """
        Profile name.
        """
        return pulumi.get(self, "profileid")

    @profileid.setter
    def profileid(self, value: pulumi.Input[str]):
        pulumi.set(self, "profileid", value)

    @property
    @pulumi.getter(name="adomPolicyPackages")
    def adom_policy_packages(self) -> Optional[pulumi.Input[str]]:
        """
        Adom policy packages.
        """
        return pulumi.get(self, "adom_policy_packages")

    @adom_policy_packages.setter
    def adom_policy_packages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom_policy_packages", value)

    @property
    @pulumi.getter(name="adomSwitch")
    def adom_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator Domain.
        """
        return pulumi.get(self, "adom_switch")

    @adom_switch.setter
    def adom_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom_switch", value)

    @property
    @pulumi.getter
    def assignment(self) -> Optional[pulumi.Input[str]]:
        """
        Assignment Permission.
        """
        return pulumi.get(self, "assignment")

    @assignment.setter
    def assignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment", value)

    @property
    @pulumi.getter(name="configRetrieve")
    def config_retrieve(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration Retrieve.
        """
        return pulumi.get(self, "config_retrieve")

    @config_retrieve.setter
    def config_retrieve(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_retrieve", value)

    @property
    @pulumi.getter(name="configRevert")
    def config_revert(self) -> Optional[pulumi.Input[str]]:
        """
        Revert Configuration from Revision History.
        """
        return pulumi.get(self, "config_revert")

    @config_revert.setter
    def config_revert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_revert", value)

    @property
    @pulumi.getter(name="consistencyCheck")
    def consistency_check(self) -> Optional[pulumi.Input[str]]:
        """
        Consistency check.
        """
        return pulumi.get(self, "consistency_check")

    @consistency_check.setter
    def consistency_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consistency_check", value)

    @property
    @pulumi.getter(name="deployManagement")
    def deploy_management(self) -> Optional[pulumi.Input[str]]:
        """
        Install to devices.
        """
        return pulumi.get(self, "deploy_management")

    @deploy_management.setter
    def deploy_management(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_management", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceAp")
    def device_ap(self) -> Optional[pulumi.Input[str]]:
        """
        Manage AP.
        """
        return pulumi.get(self, "device_ap")

    @device_ap.setter
    def device_ap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_ap", value)

    @property
    @pulumi.getter(name="deviceConfig")
    def device_config(self) -> Optional[pulumi.Input[str]]:
        """
        Manage device configurations.
        """
        return pulumi.get(self, "device_config")

    @device_config.setter
    def device_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_config", value)

    @property
    @pulumi.getter(name="deviceForticlient")
    def device_forticlient(self) -> Optional[pulumi.Input[str]]:
        """
        Manage FortiClient.
        """
        return pulumi.get(self, "device_forticlient")

    @device_forticlient.setter
    def device_forticlient(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_forticlient", value)

    @property
    @pulumi.getter(name="deviceFortiswitch")
    def device_fortiswitch(self) -> Optional[pulumi.Input[str]]:
        """
        Manage FortiSwitch.
        """
        return pulumi.get(self, "device_fortiswitch")

    @device_fortiswitch.setter
    def device_fortiswitch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_fortiswitch", value)

    @property
    @pulumi.getter(name="deviceManager")
    def device_manager(self) -> Optional[pulumi.Input[str]]:
        """
        Device Manager.
        """
        return pulumi.get(self, "device_manager")

    @device_manager.setter
    def device_manager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_manager", value)

    @property
    @pulumi.getter(name="deviceOperation")
    def device_operation(self) -> Optional[pulumi.Input[str]]:
        """
        Device add/delete/edit.
        """
        return pulumi.get(self, "device_operation")

    @device_operation.setter
    def device_operation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_operation", value)

    @property
    @pulumi.getter(name="deviceProfile")
    def device_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Device profile permission.
        """
        return pulumi.get(self, "device_profile")

    @device_profile.setter
    def device_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_profile", value)

    @property
    @pulumi.getter(name="deviceRevisionDeletion")
    def device_revision_deletion(self) -> Optional[pulumi.Input[str]]:
        """
        Delete device revision.
        """
        return pulumi.get(self, "device_revision_deletion")

    @device_revision_deletion.setter
    def device_revision_deletion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_revision_deletion", value)

    @property
    @pulumi.getter(name="deviceWanLinkLoadBalance")
    def device_wan_link_load_balance(self) -> Optional[pulumi.Input[str]]:
        """
        Manage WAN link load balance.
        """
        return pulumi.get(self, "device_wan_link_load_balance")

    @device_wan_link_load_balance.setter
    def device_wan_link_load_balance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_wan_link_load_balance", value)

    @property
    @pulumi.getter(name="fortiguardCenter")
    def fortiguard_center(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Center.
        """
        return pulumi.get(self, "fortiguard_center")

    @fortiguard_center.setter
    def fortiguard_center(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_center", value)

    @property
    @pulumi.getter(name="fortiguardCenterAdvanced")
    def fortiguard_center_advanced(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Center Advanced.
        """
        return pulumi.get(self, "fortiguard_center_advanced")

    @fortiguard_center_advanced.setter
    def fortiguard_center_advanced(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_center_advanced", value)

    @property
    @pulumi.getter(name="fortiguardCenterFirmwareManagerment")
    def fortiguard_center_firmware_managerment(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Center Firmware Managerment.
        """
        return pulumi.get(self, "fortiguard_center_firmware_managerment")

    @fortiguard_center_firmware_managerment.setter
    def fortiguard_center_firmware_managerment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_center_firmware_managerment", value)

    @property
    @pulumi.getter(name="fortiguardCenterLicensing")
    def fortiguard_center_licensing(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Center Licensing.
        """
        return pulumi.get(self, "fortiguard_center_licensing")

    @fortiguard_center_licensing.setter
    def fortiguard_center_licensing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_center_licensing", value)

    @property
    @pulumi.getter(name="globalPolicyPackages")
    def global_policy_packages(self) -> Optional[pulumi.Input[str]]:
        """
        Global policy packages.
        """
        return pulumi.get(self, "global_policy_packages")

    @global_policy_packages.setter
    def global_policy_packages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_policy_packages", value)

    @property
    @pulumi.getter(name="importPolicyPackages")
    def import_policy_packages(self) -> Optional[pulumi.Input[str]]:
        """
        Import Policy Package.
        """
        return pulumi.get(self, "import_policy_packages")

    @import_policy_packages.setter
    def import_policy_packages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_policy_packages", value)

    @property
    @pulumi.getter(name="intfMapping")
    def intf_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Interface Mapping.
        """
        return pulumi.get(self, "intf_mapping")

    @intf_mapping.setter
    def intf_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intf_mapping", value)

    @property
    @pulumi.getter(name="logViewer")
    def log_viewer(self) -> Optional[pulumi.Input[str]]:
        """
        Log Viewer.
        """
        return pulumi.get(self, "log_viewer")

    @log_viewer.setter
    def log_viewer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_viewer", value)

    @property
    @pulumi.getter(name="policyObjects")
    def policy_objects(self) -> Optional[pulumi.Input[str]]:
        """
        Policy objects permission.
        """
        return pulumi.get(self, "policy_objects")

    @policy_objects.setter
    def policy_objects(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_objects", value)

    @property
    @pulumi.getter(name="setInstallTargets")
    def set_install_targets(self) -> Optional[pulumi.Input[str]]:
        """
        Edit installation targets.
        """
        return pulumi.get(self, "set_install_targets")

    @set_install_targets.setter
    def set_install_targets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_install_targets", value)

    @property
    @pulumi.getter(name="systemSetting")
    def system_setting(self) -> Optional[pulumi.Input[str]]:
        """
        System Setting.
        """
        return pulumi.get(self, "system_setting")

    @system_setting.setter
    def system_setting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_setting", value)

    @property
    @pulumi.getter(name="terminalAccess")
    def terminal_access(self) -> Optional[pulumi.Input[str]]:
        """
        Terminal access.
        """
        return pulumi.get(self, "terminal_access")

    @terminal_access.setter
    def terminal_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terminal_access", value)

    @property
    @pulumi.getter(name="vpnManager")
    def vpn_manager(self) -> Optional[pulumi.Input[str]]:
        """
        VPN Manager.
        """
        return pulumi.get(self, "vpn_manager")

    @vpn_manager.setter
    def vpn_manager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_manager", value)


@pulumi.input_type
class _SystemAdminProfilesState:
    def __init__(__self__, *,
                 adom_policy_packages: Optional[pulumi.Input[str]] = None,
                 adom_switch: Optional[pulumi.Input[str]] = None,
                 assignment: Optional[pulumi.Input[str]] = None,
                 config_retrieve: Optional[pulumi.Input[str]] = None,
                 config_revert: Optional[pulumi.Input[str]] = None,
                 consistency_check: Optional[pulumi.Input[str]] = None,
                 deploy_management: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_ap: Optional[pulumi.Input[str]] = None,
                 device_config: Optional[pulumi.Input[str]] = None,
                 device_forticlient: Optional[pulumi.Input[str]] = None,
                 device_fortiswitch: Optional[pulumi.Input[str]] = None,
                 device_manager: Optional[pulumi.Input[str]] = None,
                 device_operation: Optional[pulumi.Input[str]] = None,
                 device_profile: Optional[pulumi.Input[str]] = None,
                 device_revision_deletion: Optional[pulumi.Input[str]] = None,
                 device_wan_link_load_balance: Optional[pulumi.Input[str]] = None,
                 fortiguard_center: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_advanced: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_firmware_managerment: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_licensing: Optional[pulumi.Input[str]] = None,
                 global_policy_packages: Optional[pulumi.Input[str]] = None,
                 import_policy_packages: Optional[pulumi.Input[str]] = None,
                 intf_mapping: Optional[pulumi.Input[str]] = None,
                 log_viewer: Optional[pulumi.Input[str]] = None,
                 policy_objects: Optional[pulumi.Input[str]] = None,
                 profileid: Optional[pulumi.Input[str]] = None,
                 set_install_targets: Optional[pulumi.Input[str]] = None,
                 system_setting: Optional[pulumi.Input[str]] = None,
                 terminal_access: Optional[pulumi.Input[str]] = None,
                 vpn_manager: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemAdminProfiles resources.
        :param pulumi.Input[str] adom_policy_packages: Adom policy packages.
        :param pulumi.Input[str] adom_switch: Administrator Domain.
        :param pulumi.Input[str] assignment: Assignment Permission.
        :param pulumi.Input[str] config_retrieve: Configuration Retrieve.
        :param pulumi.Input[str] config_revert: Revert Configuration from Revision History.
        :param pulumi.Input[str] consistency_check: Consistency check.
        :param pulumi.Input[str] deploy_management: Install to devices.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] device_ap: Manage AP.
        :param pulumi.Input[str] device_config: Manage device configurations.
        :param pulumi.Input[str] device_forticlient: Manage FortiClient.
        :param pulumi.Input[str] device_fortiswitch: Manage FortiSwitch.
        :param pulumi.Input[str] device_manager: Device Manager.
        :param pulumi.Input[str] device_operation: Device add/delete/edit.
        :param pulumi.Input[str] device_profile: Device profile permission.
        :param pulumi.Input[str] device_revision_deletion: Delete device revision.
        :param pulumi.Input[str] device_wan_link_load_balance: Manage WAN link load balance.
        :param pulumi.Input[str] fortiguard_center: FortiGuard Center.
        :param pulumi.Input[str] fortiguard_center_advanced: FortiGuard Center Advanced.
        :param pulumi.Input[str] fortiguard_center_firmware_managerment: FortiGuard Center Firmware Managerment.
        :param pulumi.Input[str] fortiguard_center_licensing: FortiGuard Center Licensing.
        :param pulumi.Input[str] global_policy_packages: Global policy packages.
        :param pulumi.Input[str] import_policy_packages: Import Policy Package.
        :param pulumi.Input[str] intf_mapping: Interface Mapping.
        :param pulumi.Input[str] log_viewer: Log Viewer.
        :param pulumi.Input[str] policy_objects: Policy objects permission.
        :param pulumi.Input[str] profileid: Profile name.
        :param pulumi.Input[str] set_install_targets: Edit installation targets.
        :param pulumi.Input[str] system_setting: System Setting.
        :param pulumi.Input[str] terminal_access: Terminal access.
        :param pulumi.Input[str] vpn_manager: VPN Manager.
        """
        if adom_policy_packages is not None:
            pulumi.set(__self__, "adom_policy_packages", adom_policy_packages)
        if adom_switch is not None:
            pulumi.set(__self__, "adom_switch", adom_switch)
        if assignment is not None:
            pulumi.set(__self__, "assignment", assignment)
        if config_retrieve is not None:
            pulumi.set(__self__, "config_retrieve", config_retrieve)
        if config_revert is not None:
            pulumi.set(__self__, "config_revert", config_revert)
        if consistency_check is not None:
            pulumi.set(__self__, "consistency_check", consistency_check)
        if deploy_management is not None:
            pulumi.set(__self__, "deploy_management", deploy_management)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_ap is not None:
            pulumi.set(__self__, "device_ap", device_ap)
        if device_config is not None:
            pulumi.set(__self__, "device_config", device_config)
        if device_forticlient is not None:
            pulumi.set(__self__, "device_forticlient", device_forticlient)
        if device_fortiswitch is not None:
            pulumi.set(__self__, "device_fortiswitch", device_fortiswitch)
        if device_manager is not None:
            pulumi.set(__self__, "device_manager", device_manager)
        if device_operation is not None:
            pulumi.set(__self__, "device_operation", device_operation)
        if device_profile is not None:
            pulumi.set(__self__, "device_profile", device_profile)
        if device_revision_deletion is not None:
            pulumi.set(__self__, "device_revision_deletion", device_revision_deletion)
        if device_wan_link_load_balance is not None:
            pulumi.set(__self__, "device_wan_link_load_balance", device_wan_link_load_balance)
        if fortiguard_center is not None:
            pulumi.set(__self__, "fortiguard_center", fortiguard_center)
        if fortiguard_center_advanced is not None:
            pulumi.set(__self__, "fortiguard_center_advanced", fortiguard_center_advanced)
        if fortiguard_center_firmware_managerment is not None:
            pulumi.set(__self__, "fortiguard_center_firmware_managerment", fortiguard_center_firmware_managerment)
        if fortiguard_center_licensing is not None:
            pulumi.set(__self__, "fortiguard_center_licensing", fortiguard_center_licensing)
        if global_policy_packages is not None:
            pulumi.set(__self__, "global_policy_packages", global_policy_packages)
        if import_policy_packages is not None:
            pulumi.set(__self__, "import_policy_packages", import_policy_packages)
        if intf_mapping is not None:
            pulumi.set(__self__, "intf_mapping", intf_mapping)
        if log_viewer is not None:
            pulumi.set(__self__, "log_viewer", log_viewer)
        if policy_objects is not None:
            pulumi.set(__self__, "policy_objects", policy_objects)
        if profileid is not None:
            pulumi.set(__self__, "profileid", profileid)
        if set_install_targets is not None:
            pulumi.set(__self__, "set_install_targets", set_install_targets)
        if system_setting is not None:
            pulumi.set(__self__, "system_setting", system_setting)
        if terminal_access is not None:
            pulumi.set(__self__, "terminal_access", terminal_access)
        if vpn_manager is not None:
            pulumi.set(__self__, "vpn_manager", vpn_manager)

    @property
    @pulumi.getter(name="adomPolicyPackages")
    def adom_policy_packages(self) -> Optional[pulumi.Input[str]]:
        """
        Adom policy packages.
        """
        return pulumi.get(self, "adom_policy_packages")

    @adom_policy_packages.setter
    def adom_policy_packages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom_policy_packages", value)

    @property
    @pulumi.getter(name="adomSwitch")
    def adom_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator Domain.
        """
        return pulumi.get(self, "adom_switch")

    @adom_switch.setter
    def adom_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom_switch", value)

    @property
    @pulumi.getter
    def assignment(self) -> Optional[pulumi.Input[str]]:
        """
        Assignment Permission.
        """
        return pulumi.get(self, "assignment")

    @assignment.setter
    def assignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment", value)

    @property
    @pulumi.getter(name="configRetrieve")
    def config_retrieve(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration Retrieve.
        """
        return pulumi.get(self, "config_retrieve")

    @config_retrieve.setter
    def config_retrieve(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_retrieve", value)

    @property
    @pulumi.getter(name="configRevert")
    def config_revert(self) -> Optional[pulumi.Input[str]]:
        """
        Revert Configuration from Revision History.
        """
        return pulumi.get(self, "config_revert")

    @config_revert.setter
    def config_revert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_revert", value)

    @property
    @pulumi.getter(name="consistencyCheck")
    def consistency_check(self) -> Optional[pulumi.Input[str]]:
        """
        Consistency check.
        """
        return pulumi.get(self, "consistency_check")

    @consistency_check.setter
    def consistency_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consistency_check", value)

    @property
    @pulumi.getter(name="deployManagement")
    def deploy_management(self) -> Optional[pulumi.Input[str]]:
        """
        Install to devices.
        """
        return pulumi.get(self, "deploy_management")

    @deploy_management.setter
    def deploy_management(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_management", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceAp")
    def device_ap(self) -> Optional[pulumi.Input[str]]:
        """
        Manage AP.
        """
        return pulumi.get(self, "device_ap")

    @device_ap.setter
    def device_ap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_ap", value)

    @property
    @pulumi.getter(name="deviceConfig")
    def device_config(self) -> Optional[pulumi.Input[str]]:
        """
        Manage device configurations.
        """
        return pulumi.get(self, "device_config")

    @device_config.setter
    def device_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_config", value)

    @property
    @pulumi.getter(name="deviceForticlient")
    def device_forticlient(self) -> Optional[pulumi.Input[str]]:
        """
        Manage FortiClient.
        """
        return pulumi.get(self, "device_forticlient")

    @device_forticlient.setter
    def device_forticlient(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_forticlient", value)

    @property
    @pulumi.getter(name="deviceFortiswitch")
    def device_fortiswitch(self) -> Optional[pulumi.Input[str]]:
        """
        Manage FortiSwitch.
        """
        return pulumi.get(self, "device_fortiswitch")

    @device_fortiswitch.setter
    def device_fortiswitch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_fortiswitch", value)

    @property
    @pulumi.getter(name="deviceManager")
    def device_manager(self) -> Optional[pulumi.Input[str]]:
        """
        Device Manager.
        """
        return pulumi.get(self, "device_manager")

    @device_manager.setter
    def device_manager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_manager", value)

    @property
    @pulumi.getter(name="deviceOperation")
    def device_operation(self) -> Optional[pulumi.Input[str]]:
        """
        Device add/delete/edit.
        """
        return pulumi.get(self, "device_operation")

    @device_operation.setter
    def device_operation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_operation", value)

    @property
    @pulumi.getter(name="deviceProfile")
    def device_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Device profile permission.
        """
        return pulumi.get(self, "device_profile")

    @device_profile.setter
    def device_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_profile", value)

    @property
    @pulumi.getter(name="deviceRevisionDeletion")
    def device_revision_deletion(self) -> Optional[pulumi.Input[str]]:
        """
        Delete device revision.
        """
        return pulumi.get(self, "device_revision_deletion")

    @device_revision_deletion.setter
    def device_revision_deletion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_revision_deletion", value)

    @property
    @pulumi.getter(name="deviceWanLinkLoadBalance")
    def device_wan_link_load_balance(self) -> Optional[pulumi.Input[str]]:
        """
        Manage WAN link load balance.
        """
        return pulumi.get(self, "device_wan_link_load_balance")

    @device_wan_link_load_balance.setter
    def device_wan_link_load_balance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_wan_link_load_balance", value)

    @property
    @pulumi.getter(name="fortiguardCenter")
    def fortiguard_center(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Center.
        """
        return pulumi.get(self, "fortiguard_center")

    @fortiguard_center.setter
    def fortiguard_center(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_center", value)

    @property
    @pulumi.getter(name="fortiguardCenterAdvanced")
    def fortiguard_center_advanced(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Center Advanced.
        """
        return pulumi.get(self, "fortiguard_center_advanced")

    @fortiguard_center_advanced.setter
    def fortiguard_center_advanced(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_center_advanced", value)

    @property
    @pulumi.getter(name="fortiguardCenterFirmwareManagerment")
    def fortiguard_center_firmware_managerment(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Center Firmware Managerment.
        """
        return pulumi.get(self, "fortiguard_center_firmware_managerment")

    @fortiguard_center_firmware_managerment.setter
    def fortiguard_center_firmware_managerment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_center_firmware_managerment", value)

    @property
    @pulumi.getter(name="fortiguardCenterLicensing")
    def fortiguard_center_licensing(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Center Licensing.
        """
        return pulumi.get(self, "fortiguard_center_licensing")

    @fortiguard_center_licensing.setter
    def fortiguard_center_licensing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_center_licensing", value)

    @property
    @pulumi.getter(name="globalPolicyPackages")
    def global_policy_packages(self) -> Optional[pulumi.Input[str]]:
        """
        Global policy packages.
        """
        return pulumi.get(self, "global_policy_packages")

    @global_policy_packages.setter
    def global_policy_packages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_policy_packages", value)

    @property
    @pulumi.getter(name="importPolicyPackages")
    def import_policy_packages(self) -> Optional[pulumi.Input[str]]:
        """
        Import Policy Package.
        """
        return pulumi.get(self, "import_policy_packages")

    @import_policy_packages.setter
    def import_policy_packages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_policy_packages", value)

    @property
    @pulumi.getter(name="intfMapping")
    def intf_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Interface Mapping.
        """
        return pulumi.get(self, "intf_mapping")

    @intf_mapping.setter
    def intf_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intf_mapping", value)

    @property
    @pulumi.getter(name="logViewer")
    def log_viewer(self) -> Optional[pulumi.Input[str]]:
        """
        Log Viewer.
        """
        return pulumi.get(self, "log_viewer")

    @log_viewer.setter
    def log_viewer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_viewer", value)

    @property
    @pulumi.getter(name="policyObjects")
    def policy_objects(self) -> Optional[pulumi.Input[str]]:
        """
        Policy objects permission.
        """
        return pulumi.get(self, "policy_objects")

    @policy_objects.setter
    def policy_objects(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_objects", value)

    @property
    @pulumi.getter
    def profileid(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "profileid")

    @profileid.setter
    def profileid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profileid", value)

    @property
    @pulumi.getter(name="setInstallTargets")
    def set_install_targets(self) -> Optional[pulumi.Input[str]]:
        """
        Edit installation targets.
        """
        return pulumi.get(self, "set_install_targets")

    @set_install_targets.setter
    def set_install_targets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_install_targets", value)

    @property
    @pulumi.getter(name="systemSetting")
    def system_setting(self) -> Optional[pulumi.Input[str]]:
        """
        System Setting.
        """
        return pulumi.get(self, "system_setting")

    @system_setting.setter
    def system_setting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_setting", value)

    @property
    @pulumi.getter(name="terminalAccess")
    def terminal_access(self) -> Optional[pulumi.Input[str]]:
        """
        Terminal access.
        """
        return pulumi.get(self, "terminal_access")

    @terminal_access.setter
    def terminal_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terminal_access", value)

    @property
    @pulumi.getter(name="vpnManager")
    def vpn_manager(self) -> Optional[pulumi.Input[str]]:
        """
        VPN Manager.
        """
        return pulumi.get(self, "vpn_manager")

    @vpn_manager.setter
    def vpn_manager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_manager", value)


class SystemAdminProfiles(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adom_policy_packages: Optional[pulumi.Input[str]] = None,
                 adom_switch: Optional[pulumi.Input[str]] = None,
                 assignment: Optional[pulumi.Input[str]] = None,
                 config_retrieve: Optional[pulumi.Input[str]] = None,
                 config_revert: Optional[pulumi.Input[str]] = None,
                 consistency_check: Optional[pulumi.Input[str]] = None,
                 deploy_management: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_ap: Optional[pulumi.Input[str]] = None,
                 device_config: Optional[pulumi.Input[str]] = None,
                 device_forticlient: Optional[pulumi.Input[str]] = None,
                 device_fortiswitch: Optional[pulumi.Input[str]] = None,
                 device_manager: Optional[pulumi.Input[str]] = None,
                 device_operation: Optional[pulumi.Input[str]] = None,
                 device_profile: Optional[pulumi.Input[str]] = None,
                 device_revision_deletion: Optional[pulumi.Input[str]] = None,
                 device_wan_link_load_balance: Optional[pulumi.Input[str]] = None,
                 fortiguard_center: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_advanced: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_firmware_managerment: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_licensing: Optional[pulumi.Input[str]] = None,
                 global_policy_packages: Optional[pulumi.Input[str]] = None,
                 import_policy_packages: Optional[pulumi.Input[str]] = None,
                 intf_mapping: Optional[pulumi.Input[str]] = None,
                 log_viewer: Optional[pulumi.Input[str]] = None,
                 policy_objects: Optional[pulumi.Input[str]] = None,
                 profileid: Optional[pulumi.Input[str]] = None,
                 set_install_targets: Optional[pulumi.Input[str]] = None,
                 system_setting: Optional[pulumi.Input[str]] = None,
                 terminal_access: Optional[pulumi.Input[str]] = None,
                 vpn_manager: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource supports Create/Read/Update/Delete admin profiles for FortiManager

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.SystemAdminProfiles("test1",
            adom_policy_packages="read",
            adom_switch="read",
            assignment="read",
            config_retrieve="read",
            config_revert="read",
            consistency_check="read-write",
            deploy_management="read",
            description="11",
            device_ap="none",
            device_config="read",
            device_forticlient="read",
            device_fortiswitch="read",
            device_manager="read-write",
            device_operation="read",
            device_profile="read",
            device_revision_deletion="read",
            device_wan_link_load_balance="read",
            fortiguard_center="read",
            fortiguard_center_advanced="read",
            fortiguard_center_firmware_managerment="read",
            fortiguard_center_licensing="read",
            global_policy_packages="read-write",
            import_policy_packages="read",
            intf_mapping="read-write",
            log_viewer="read",
            policy_objects="read-write",
            profileid="terraform-test1",
            set_install_targets="read-write",
            system_setting="read",
            terminal_access="read",
            vpn_manager="read")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adom_policy_packages: Adom policy packages.
        :param pulumi.Input[str] adom_switch: Administrator Domain.
        :param pulumi.Input[str] assignment: Assignment Permission.
        :param pulumi.Input[str] config_retrieve: Configuration Retrieve.
        :param pulumi.Input[str] config_revert: Revert Configuration from Revision History.
        :param pulumi.Input[str] consistency_check: Consistency check.
        :param pulumi.Input[str] deploy_management: Install to devices.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] device_ap: Manage AP.
        :param pulumi.Input[str] device_config: Manage device configurations.
        :param pulumi.Input[str] device_forticlient: Manage FortiClient.
        :param pulumi.Input[str] device_fortiswitch: Manage FortiSwitch.
        :param pulumi.Input[str] device_manager: Device Manager.
        :param pulumi.Input[str] device_operation: Device add/delete/edit.
        :param pulumi.Input[str] device_profile: Device profile permission.
        :param pulumi.Input[str] device_revision_deletion: Delete device revision.
        :param pulumi.Input[str] device_wan_link_load_balance: Manage WAN link load balance.
        :param pulumi.Input[str] fortiguard_center: FortiGuard Center.
        :param pulumi.Input[str] fortiguard_center_advanced: FortiGuard Center Advanced.
        :param pulumi.Input[str] fortiguard_center_firmware_managerment: FortiGuard Center Firmware Managerment.
        :param pulumi.Input[str] fortiguard_center_licensing: FortiGuard Center Licensing.
        :param pulumi.Input[str] global_policy_packages: Global policy packages.
        :param pulumi.Input[str] import_policy_packages: Import Policy Package.
        :param pulumi.Input[str] intf_mapping: Interface Mapping.
        :param pulumi.Input[str] log_viewer: Log Viewer.
        :param pulumi.Input[str] policy_objects: Policy objects permission.
        :param pulumi.Input[str] profileid: Profile name.
        :param pulumi.Input[str] set_install_targets: Edit installation targets.
        :param pulumi.Input[str] system_setting: System Setting.
        :param pulumi.Input[str] terminal_access: Terminal access.
        :param pulumi.Input[str] vpn_manager: VPN Manager.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemAdminProfilesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource supports Create/Read/Update/Delete admin profiles for FortiManager

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.SystemAdminProfiles("test1",
            adom_policy_packages="read",
            adom_switch="read",
            assignment="read",
            config_retrieve="read",
            config_revert="read",
            consistency_check="read-write",
            deploy_management="read",
            description="11",
            device_ap="none",
            device_config="read",
            device_forticlient="read",
            device_fortiswitch="read",
            device_manager="read-write",
            device_operation="read",
            device_profile="read",
            device_revision_deletion="read",
            device_wan_link_load_balance="read",
            fortiguard_center="read",
            fortiguard_center_advanced="read",
            fortiguard_center_firmware_managerment="read",
            fortiguard_center_licensing="read",
            global_policy_packages="read-write",
            import_policy_packages="read",
            intf_mapping="read-write",
            log_viewer="read",
            policy_objects="read-write",
            profileid="terraform-test1",
            set_install_targets="read-write",
            system_setting="read",
            terminal_access="read",
            vpn_manager="read")
        ```

        :param str resource_name: The name of the resource.
        :param SystemAdminProfilesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemAdminProfilesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adom_policy_packages: Optional[pulumi.Input[str]] = None,
                 adom_switch: Optional[pulumi.Input[str]] = None,
                 assignment: Optional[pulumi.Input[str]] = None,
                 config_retrieve: Optional[pulumi.Input[str]] = None,
                 config_revert: Optional[pulumi.Input[str]] = None,
                 consistency_check: Optional[pulumi.Input[str]] = None,
                 deploy_management: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_ap: Optional[pulumi.Input[str]] = None,
                 device_config: Optional[pulumi.Input[str]] = None,
                 device_forticlient: Optional[pulumi.Input[str]] = None,
                 device_fortiswitch: Optional[pulumi.Input[str]] = None,
                 device_manager: Optional[pulumi.Input[str]] = None,
                 device_operation: Optional[pulumi.Input[str]] = None,
                 device_profile: Optional[pulumi.Input[str]] = None,
                 device_revision_deletion: Optional[pulumi.Input[str]] = None,
                 device_wan_link_load_balance: Optional[pulumi.Input[str]] = None,
                 fortiguard_center: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_advanced: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_firmware_managerment: Optional[pulumi.Input[str]] = None,
                 fortiguard_center_licensing: Optional[pulumi.Input[str]] = None,
                 global_policy_packages: Optional[pulumi.Input[str]] = None,
                 import_policy_packages: Optional[pulumi.Input[str]] = None,
                 intf_mapping: Optional[pulumi.Input[str]] = None,
                 log_viewer: Optional[pulumi.Input[str]] = None,
                 policy_objects: Optional[pulumi.Input[str]] = None,
                 profileid: Optional[pulumi.Input[str]] = None,
                 set_install_targets: Optional[pulumi.Input[str]] = None,
                 system_setting: Optional[pulumi.Input[str]] = None,
                 terminal_access: Optional[pulumi.Input[str]] = None,
                 vpn_manager: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemAdminProfilesArgs.__new__(SystemAdminProfilesArgs)

            __props__.__dict__["adom_policy_packages"] = adom_policy_packages
            __props__.__dict__["adom_switch"] = adom_switch
            __props__.__dict__["assignment"] = assignment
            __props__.__dict__["config_retrieve"] = config_retrieve
            __props__.__dict__["config_revert"] = config_revert
            __props__.__dict__["consistency_check"] = consistency_check
            __props__.__dict__["deploy_management"] = deploy_management
            __props__.__dict__["description"] = description
            __props__.__dict__["device_ap"] = device_ap
            __props__.__dict__["device_config"] = device_config
            __props__.__dict__["device_forticlient"] = device_forticlient
            __props__.__dict__["device_fortiswitch"] = device_fortiswitch
            __props__.__dict__["device_manager"] = device_manager
            __props__.__dict__["device_operation"] = device_operation
            __props__.__dict__["device_profile"] = device_profile
            __props__.__dict__["device_revision_deletion"] = device_revision_deletion
            __props__.__dict__["device_wan_link_load_balance"] = device_wan_link_load_balance
            __props__.__dict__["fortiguard_center"] = fortiguard_center
            __props__.__dict__["fortiguard_center_advanced"] = fortiguard_center_advanced
            __props__.__dict__["fortiguard_center_firmware_managerment"] = fortiguard_center_firmware_managerment
            __props__.__dict__["fortiguard_center_licensing"] = fortiguard_center_licensing
            __props__.__dict__["global_policy_packages"] = global_policy_packages
            __props__.__dict__["import_policy_packages"] = import_policy_packages
            __props__.__dict__["intf_mapping"] = intf_mapping
            __props__.__dict__["log_viewer"] = log_viewer
            __props__.__dict__["policy_objects"] = policy_objects
            if profileid is None and not opts.urn:
                raise TypeError("Missing required property 'profileid'")
            __props__.__dict__["profileid"] = profileid
            __props__.__dict__["set_install_targets"] = set_install_targets
            __props__.__dict__["system_setting"] = system_setting
            __props__.__dict__["terminal_access"] = terminal_access
            __props__.__dict__["vpn_manager"] = vpn_manager
        super(SystemAdminProfiles, __self__).__init__(
            'fortios:fmg/systemAdminProfiles:SystemAdminProfiles',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adom_policy_packages: Optional[pulumi.Input[str]] = None,
            adom_switch: Optional[pulumi.Input[str]] = None,
            assignment: Optional[pulumi.Input[str]] = None,
            config_retrieve: Optional[pulumi.Input[str]] = None,
            config_revert: Optional[pulumi.Input[str]] = None,
            consistency_check: Optional[pulumi.Input[str]] = None,
            deploy_management: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device_ap: Optional[pulumi.Input[str]] = None,
            device_config: Optional[pulumi.Input[str]] = None,
            device_forticlient: Optional[pulumi.Input[str]] = None,
            device_fortiswitch: Optional[pulumi.Input[str]] = None,
            device_manager: Optional[pulumi.Input[str]] = None,
            device_operation: Optional[pulumi.Input[str]] = None,
            device_profile: Optional[pulumi.Input[str]] = None,
            device_revision_deletion: Optional[pulumi.Input[str]] = None,
            device_wan_link_load_balance: Optional[pulumi.Input[str]] = None,
            fortiguard_center: Optional[pulumi.Input[str]] = None,
            fortiguard_center_advanced: Optional[pulumi.Input[str]] = None,
            fortiguard_center_firmware_managerment: Optional[pulumi.Input[str]] = None,
            fortiguard_center_licensing: Optional[pulumi.Input[str]] = None,
            global_policy_packages: Optional[pulumi.Input[str]] = None,
            import_policy_packages: Optional[pulumi.Input[str]] = None,
            intf_mapping: Optional[pulumi.Input[str]] = None,
            log_viewer: Optional[pulumi.Input[str]] = None,
            policy_objects: Optional[pulumi.Input[str]] = None,
            profileid: Optional[pulumi.Input[str]] = None,
            set_install_targets: Optional[pulumi.Input[str]] = None,
            system_setting: Optional[pulumi.Input[str]] = None,
            terminal_access: Optional[pulumi.Input[str]] = None,
            vpn_manager: Optional[pulumi.Input[str]] = None) -> 'SystemAdminProfiles':
        """
        Get an existing SystemAdminProfiles resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adom_policy_packages: Adom policy packages.
        :param pulumi.Input[str] adom_switch: Administrator Domain.
        :param pulumi.Input[str] assignment: Assignment Permission.
        :param pulumi.Input[str] config_retrieve: Configuration Retrieve.
        :param pulumi.Input[str] config_revert: Revert Configuration from Revision History.
        :param pulumi.Input[str] consistency_check: Consistency check.
        :param pulumi.Input[str] deploy_management: Install to devices.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] device_ap: Manage AP.
        :param pulumi.Input[str] device_config: Manage device configurations.
        :param pulumi.Input[str] device_forticlient: Manage FortiClient.
        :param pulumi.Input[str] device_fortiswitch: Manage FortiSwitch.
        :param pulumi.Input[str] device_manager: Device Manager.
        :param pulumi.Input[str] device_operation: Device add/delete/edit.
        :param pulumi.Input[str] device_profile: Device profile permission.
        :param pulumi.Input[str] device_revision_deletion: Delete device revision.
        :param pulumi.Input[str] device_wan_link_load_balance: Manage WAN link load balance.
        :param pulumi.Input[str] fortiguard_center: FortiGuard Center.
        :param pulumi.Input[str] fortiguard_center_advanced: FortiGuard Center Advanced.
        :param pulumi.Input[str] fortiguard_center_firmware_managerment: FortiGuard Center Firmware Managerment.
        :param pulumi.Input[str] fortiguard_center_licensing: FortiGuard Center Licensing.
        :param pulumi.Input[str] global_policy_packages: Global policy packages.
        :param pulumi.Input[str] import_policy_packages: Import Policy Package.
        :param pulumi.Input[str] intf_mapping: Interface Mapping.
        :param pulumi.Input[str] log_viewer: Log Viewer.
        :param pulumi.Input[str] policy_objects: Policy objects permission.
        :param pulumi.Input[str] profileid: Profile name.
        :param pulumi.Input[str] set_install_targets: Edit installation targets.
        :param pulumi.Input[str] system_setting: System Setting.
        :param pulumi.Input[str] terminal_access: Terminal access.
        :param pulumi.Input[str] vpn_manager: VPN Manager.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemAdminProfilesState.__new__(_SystemAdminProfilesState)

        __props__.__dict__["adom_policy_packages"] = adom_policy_packages
        __props__.__dict__["adom_switch"] = adom_switch
        __props__.__dict__["assignment"] = assignment
        __props__.__dict__["config_retrieve"] = config_retrieve
        __props__.__dict__["config_revert"] = config_revert
        __props__.__dict__["consistency_check"] = consistency_check
        __props__.__dict__["deploy_management"] = deploy_management
        __props__.__dict__["description"] = description
        __props__.__dict__["device_ap"] = device_ap
        __props__.__dict__["device_config"] = device_config
        __props__.__dict__["device_forticlient"] = device_forticlient
        __props__.__dict__["device_fortiswitch"] = device_fortiswitch
        __props__.__dict__["device_manager"] = device_manager
        __props__.__dict__["device_operation"] = device_operation
        __props__.__dict__["device_profile"] = device_profile
        __props__.__dict__["device_revision_deletion"] = device_revision_deletion
        __props__.__dict__["device_wan_link_load_balance"] = device_wan_link_load_balance
        __props__.__dict__["fortiguard_center"] = fortiguard_center
        __props__.__dict__["fortiguard_center_advanced"] = fortiguard_center_advanced
        __props__.__dict__["fortiguard_center_firmware_managerment"] = fortiguard_center_firmware_managerment
        __props__.__dict__["fortiguard_center_licensing"] = fortiguard_center_licensing
        __props__.__dict__["global_policy_packages"] = global_policy_packages
        __props__.__dict__["import_policy_packages"] = import_policy_packages
        __props__.__dict__["intf_mapping"] = intf_mapping
        __props__.__dict__["log_viewer"] = log_viewer
        __props__.__dict__["policy_objects"] = policy_objects
        __props__.__dict__["profileid"] = profileid
        __props__.__dict__["set_install_targets"] = set_install_targets
        __props__.__dict__["system_setting"] = system_setting
        __props__.__dict__["terminal_access"] = terminal_access
        __props__.__dict__["vpn_manager"] = vpn_manager
        return SystemAdminProfiles(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adomPolicyPackages")
    def adom_policy_packages(self) -> pulumi.Output[Optional[str]]:
        """
        Adom policy packages.
        """
        return pulumi.get(self, "adom_policy_packages")

    @property
    @pulumi.getter(name="adomSwitch")
    def adom_switch(self) -> pulumi.Output[Optional[str]]:
        """
        Administrator Domain.
        """
        return pulumi.get(self, "adom_switch")

    @property
    @pulumi.getter
    def assignment(self) -> pulumi.Output[Optional[str]]:
        """
        Assignment Permission.
        """
        return pulumi.get(self, "assignment")

    @property
    @pulumi.getter(name="configRetrieve")
    def config_retrieve(self) -> pulumi.Output[Optional[str]]:
        """
        Configuration Retrieve.
        """
        return pulumi.get(self, "config_retrieve")

    @property
    @pulumi.getter(name="configRevert")
    def config_revert(self) -> pulumi.Output[Optional[str]]:
        """
        Revert Configuration from Revision History.
        """
        return pulumi.get(self, "config_revert")

    @property
    @pulumi.getter(name="consistencyCheck")
    def consistency_check(self) -> pulumi.Output[Optional[str]]:
        """
        Consistency check.
        """
        return pulumi.get(self, "consistency_check")

    @property
    @pulumi.getter(name="deployManagement")
    def deploy_management(self) -> pulumi.Output[Optional[str]]:
        """
        Install to devices.
        """
        return pulumi.get(self, "deploy_management")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceAp")
    def device_ap(self) -> pulumi.Output[Optional[str]]:
        """
        Manage AP.
        """
        return pulumi.get(self, "device_ap")

    @property
    @pulumi.getter(name="deviceConfig")
    def device_config(self) -> pulumi.Output[Optional[str]]:
        """
        Manage device configurations.
        """
        return pulumi.get(self, "device_config")

    @property
    @pulumi.getter(name="deviceForticlient")
    def device_forticlient(self) -> pulumi.Output[Optional[str]]:
        """
        Manage FortiClient.
        """
        return pulumi.get(self, "device_forticlient")

    @property
    @pulumi.getter(name="deviceFortiswitch")
    def device_fortiswitch(self) -> pulumi.Output[Optional[str]]:
        """
        Manage FortiSwitch.
        """
        return pulumi.get(self, "device_fortiswitch")

    @property
    @pulumi.getter(name="deviceManager")
    def device_manager(self) -> pulumi.Output[Optional[str]]:
        """
        Device Manager.
        """
        return pulumi.get(self, "device_manager")

    @property
    @pulumi.getter(name="deviceOperation")
    def device_operation(self) -> pulumi.Output[Optional[str]]:
        """
        Device add/delete/edit.
        """
        return pulumi.get(self, "device_operation")

    @property
    @pulumi.getter(name="deviceProfile")
    def device_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Device profile permission.
        """
        return pulumi.get(self, "device_profile")

    @property
    @pulumi.getter(name="deviceRevisionDeletion")
    def device_revision_deletion(self) -> pulumi.Output[Optional[str]]:
        """
        Delete device revision.
        """
        return pulumi.get(self, "device_revision_deletion")

    @property
    @pulumi.getter(name="deviceWanLinkLoadBalance")
    def device_wan_link_load_balance(self) -> pulumi.Output[Optional[str]]:
        """
        Manage WAN link load balance.
        """
        return pulumi.get(self, "device_wan_link_load_balance")

    @property
    @pulumi.getter(name="fortiguardCenter")
    def fortiguard_center(self) -> pulumi.Output[Optional[str]]:
        """
        FortiGuard Center.
        """
        return pulumi.get(self, "fortiguard_center")

    @property
    @pulumi.getter(name="fortiguardCenterAdvanced")
    def fortiguard_center_advanced(self) -> pulumi.Output[Optional[str]]:
        """
        FortiGuard Center Advanced.
        """
        return pulumi.get(self, "fortiguard_center_advanced")

    @property
    @pulumi.getter(name="fortiguardCenterFirmwareManagerment")
    def fortiguard_center_firmware_managerment(self) -> pulumi.Output[Optional[str]]:
        """
        FortiGuard Center Firmware Managerment.
        """
        return pulumi.get(self, "fortiguard_center_firmware_managerment")

    @property
    @pulumi.getter(name="fortiguardCenterLicensing")
    def fortiguard_center_licensing(self) -> pulumi.Output[Optional[str]]:
        """
        FortiGuard Center Licensing.
        """
        return pulumi.get(self, "fortiguard_center_licensing")

    @property
    @pulumi.getter(name="globalPolicyPackages")
    def global_policy_packages(self) -> pulumi.Output[Optional[str]]:
        """
        Global policy packages.
        """
        return pulumi.get(self, "global_policy_packages")

    @property
    @pulumi.getter(name="importPolicyPackages")
    def import_policy_packages(self) -> pulumi.Output[Optional[str]]:
        """
        Import Policy Package.
        """
        return pulumi.get(self, "import_policy_packages")

    @property
    @pulumi.getter(name="intfMapping")
    def intf_mapping(self) -> pulumi.Output[Optional[str]]:
        """
        Interface Mapping.
        """
        return pulumi.get(self, "intf_mapping")

    @property
    @pulumi.getter(name="logViewer")
    def log_viewer(self) -> pulumi.Output[Optional[str]]:
        """
        Log Viewer.
        """
        return pulumi.get(self, "log_viewer")

    @property
    @pulumi.getter(name="policyObjects")
    def policy_objects(self) -> pulumi.Output[Optional[str]]:
        """
        Policy objects permission.
        """
        return pulumi.get(self, "policy_objects")

    @property
    @pulumi.getter
    def profileid(self) -> pulumi.Output[str]:
        """
        Profile name.
        """
        return pulumi.get(self, "profileid")

    @property
    @pulumi.getter(name="setInstallTargets")
    def set_install_targets(self) -> pulumi.Output[Optional[str]]:
        """
        Edit installation targets.
        """
        return pulumi.get(self, "set_install_targets")

    @property
    @pulumi.getter(name="systemSetting")
    def system_setting(self) -> pulumi.Output[Optional[str]]:
        """
        System Setting.
        """
        return pulumi.get(self, "system_setting")

    @property
    @pulumi.getter(name="terminalAccess")
    def terminal_access(self) -> pulumi.Output[Optional[str]]:
        """
        Terminal access.
        """
        return pulumi.get(self, "terminal_access")

    @property
    @pulumi.getter(name="vpnManager")
    def vpn_manager(self) -> pulumi.Output[Optional[str]]:
        """
        VPN Manager.
        """
        return pulumi.get(self, "vpn_manager")

