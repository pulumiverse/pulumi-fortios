# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SystemLicenseForticareArgs', 'SystemLicenseForticare']

@pulumi.input_type
class SystemLicenseForticareArgs:
    def __init__(__self__, *,
                 registration_code: pulumi.Input[str],
                 target: pulumi.Input[str],
                 adom: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemLicenseForticare resource.
        :param pulumi.Input[str] registration_code: Registration code.
        :param pulumi.Input[str] target: Target name, which is managed by FortiManager.
        :param pulumi.Input[str] adom: ADOM that the target device belongs to. default is 'root'.
        """
        pulumi.set(__self__, "registration_code", registration_code)
        pulumi.set(__self__, "target", target)
        if adom is not None:
            pulumi.set(__self__, "adom", adom)

    @property
    @pulumi.getter(name="registrationCode")
    def registration_code(self) -> pulumi.Input[str]:
        """
        Registration code.
        """
        return pulumi.get(self, "registration_code")

    @registration_code.setter
    def registration_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "registration_code", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Target name, which is managed by FortiManager.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def adom(self) -> Optional[pulumi.Input[str]]:
        """
        ADOM that the target device belongs to. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @adom.setter
    def adom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom", value)


@pulumi.input_type
class _SystemLicenseForticareState:
    def __init__(__self__, *,
                 adom: Optional[pulumi.Input[str]] = None,
                 registration_code: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemLicenseForticare resources.
        :param pulumi.Input[str] adom: ADOM that the target device belongs to. default is 'root'.
        :param pulumi.Input[str] registration_code: Registration code.
        :param pulumi.Input[str] target: Target name, which is managed by FortiManager.
        """
        if adom is not None:
            pulumi.set(__self__, "adom", adom)
        if registration_code is not None:
            pulumi.set(__self__, "registration_code", registration_code)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def adom(self) -> Optional[pulumi.Input[str]]:
        """
        ADOM that the target device belongs to. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @adom.setter
    def adom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom", value)

    @property
    @pulumi.getter(name="registrationCode")
    def registration_code(self) -> Optional[pulumi.Input[str]]:
        """
        Registration code.
        """
        return pulumi.get(self, "registration_code")

    @registration_code.setter
    def registration_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_code", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Target name, which is managed by FortiManager.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


class SystemLicenseForticare(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adom: Optional[pulumi.Input[str]] = None,
                 registration_code: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource supports uploading FortiCare registration code to FortiGate through FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.SystemLicenseForticare("test1",
            registration_code="jn3t3Nw7qckQzt955Htkfj5hwQ6aaa",
            target="fortigate-test")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adom: ADOM that the target device belongs to. default is 'root'.
        :param pulumi.Input[str] registration_code: Registration code.
        :param pulumi.Input[str] target: Target name, which is managed by FortiManager.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemLicenseForticareArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource supports uploading FortiCare registration code to FortiGate through FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.SystemLicenseForticare("test1",
            registration_code="jn3t3Nw7qckQzt955Htkfj5hwQ6aaa",
            target="fortigate-test")
        ```

        :param str resource_name: The name of the resource.
        :param SystemLicenseForticareArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemLicenseForticareArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adom: Optional[pulumi.Input[str]] = None,
                 registration_code: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemLicenseForticareArgs.__new__(SystemLicenseForticareArgs)

            __props__.__dict__["adom"] = adom
            if registration_code is None and not opts.urn:
                raise TypeError("Missing required property 'registration_code'")
            __props__.__dict__["registration_code"] = registration_code
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
        super(SystemLicenseForticare, __self__).__init__(
            'fortios:fmg/systemLicenseForticare:SystemLicenseForticare',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adom: Optional[pulumi.Input[str]] = None,
            registration_code: Optional[pulumi.Input[str]] = None,
            target: Optional[pulumi.Input[str]] = None) -> 'SystemLicenseForticare':
        """
        Get an existing SystemLicenseForticare resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adom: ADOM that the target device belongs to. default is 'root'.
        :param pulumi.Input[str] registration_code: Registration code.
        :param pulumi.Input[str] target: Target name, which is managed by FortiManager.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemLicenseForticareState.__new__(_SystemLicenseForticareState)

        __props__.__dict__["adom"] = adom
        __props__.__dict__["registration_code"] = registration_code
        __props__.__dict__["target"] = target
        return SystemLicenseForticare(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def adom(self) -> pulumi.Output[Optional[str]]:
        """
        ADOM that the target device belongs to. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @property
    @pulumi.getter(name="registrationCode")
    def registration_code(self) -> pulumi.Output[str]:
        """
        Registration code.
        """
        return pulumi.get(self, "registration_code")

    @property
    @pulumi.getter
    def target(self) -> pulumi.Output[str]:
        """
        Target name, which is managed by FortiManager.
        """
        return pulumi.get(self, "target")

