# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DevicemanagerScriptArgs', 'DevicemanagerScript']

@pulumi.input_type
class DevicemanagerScriptArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 adom: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DevicemanagerScript resource.
        :param pulumi.Input[str] content: Script content, only cli script is supported now
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] name: Script name.
        :param pulumi.Input[str] target: Script target, Enum: ["device_database", "remote_device", "adom_database"]
        """
        pulumi.set(__self__, "content", content)
        if adom is not None:
            pulumi.set(__self__, "adom", adom)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Script content, only cli script is supported now
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def adom(self) -> Optional[pulumi.Input[str]]:
        """
        ADOM name. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @adom.setter
    def adom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Script name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Script target, Enum: ["device_database", "remote_device", "adom_database"]
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class _DevicemanagerScriptState:
    def __init__(__self__, *,
                 adom: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DevicemanagerScript resources.
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[str] content: Script content, only cli script is supported now
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] name: Script name.
        :param pulumi.Input[str] target: Script target, Enum: ["device_database", "remote_device", "adom_database"]
        """
        if adom is not None:
            pulumi.set(__self__, "adom", adom)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def adom(self) -> Optional[pulumi.Input[str]]:
        """
        ADOM name. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @adom.setter
    def adom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Script content, only cli script is supported now
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Script name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Script target, Enum: ["device_database", "remote_device", "adom_database"]
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


class DevicemanagerScript(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adom: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource supports Create/Read/Update/Delete devicemanager script for FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.DevicemanagerScript("test1",
            content=\"\"\"config system interface 
         edit port3 
        \\x09 set vdom "root"
        \\x09 set ip 10.7.0.200 255.255.0.0 
        \\x09 set allowaccess ping http https
        \\x09 next 
         end
        \"\"\",
            description="description",
            target="remote_device")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[str] content: Script content, only cli script is supported now
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] name: Script name.
        :param pulumi.Input[str] target: Script target, Enum: ["device_database", "remote_device", "adom_database"]
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DevicemanagerScriptArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource supports Create/Read/Update/Delete devicemanager script for FortiManager.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.fmg.DevicemanagerScript("test1",
            content=\"\"\"config system interface 
         edit port3 
        \\x09 set vdom "root"
        \\x09 set ip 10.7.0.200 255.255.0.0 
        \\x09 set allowaccess ping http https
        \\x09 next 
         end
        \"\"\",
            description="description",
            target="remote_device")
        ```

        :param str resource_name: The name of the resource.
        :param DevicemanagerScriptArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DevicemanagerScriptArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adom: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DevicemanagerScriptArgs.__new__(DevicemanagerScriptArgs)

            __props__.__dict__["adom"] = adom
            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["target"] = target
        super(DevicemanagerScript, __self__).__init__(
            'fortios:fmg/devicemanagerScript:DevicemanagerScript',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adom: Optional[pulumi.Input[str]] = None,
            content: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            target: Optional[pulumi.Input[str]] = None) -> 'DevicemanagerScript':
        """
        Get an existing DevicemanagerScript resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adom: ADOM name. default is 'root'.
        :param pulumi.Input[str] content: Script content, only cli script is supported now
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] name: Script name.
        :param pulumi.Input[str] target: Script target, Enum: ["device_database", "remote_device", "adom_database"]
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DevicemanagerScriptState.__new__(_DevicemanagerScriptState)

        __props__.__dict__["adom"] = adom
        __props__.__dict__["content"] = content
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["target"] = target
        return DevicemanagerScript(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def adom(self) -> pulumi.Output[Optional[str]]:
        """
        ADOM name. default is 'root'.
        """
        return pulumi.get(self, "adom")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        Script content, only cli script is supported now
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Script name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def target(self) -> pulumi.Output[Optional[str]]:
        """
        Script target, Enum: ["device_database", "remote_device", "adom_database"]
        """
        return pulumi.get(self, "target")

