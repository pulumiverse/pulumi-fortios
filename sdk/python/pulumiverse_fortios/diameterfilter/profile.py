# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ProfileArgs', 'Profile']

@pulumi.input_type
class ProfileArgs:
    def __init__(__self__, *,
                 cmd_flags_reserve_set: Optional[pulumi.Input[str]] = None,
                 command_code_invalid: Optional[pulumi.Input[str]] = None,
                 command_code_range: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 message_length_invalid: Optional[pulumi.Input[str]] = None,
                 missing_request_action: Optional[pulumi.Input[str]] = None,
                 monitor_all_messages: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol_version_invalid: Optional[pulumi.Input[str]] = None,
                 request_error_flag_set: Optional[pulumi.Input[str]] = None,
                 track_requests_answers: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Profile resource.
        :param pulumi.Input[str] cmd_flags_reserve_set: Action to be taken for messages with cmd flag reserve bits set. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] command_code_invalid: Action to be taken for messages with invalid command code. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] command_code_range: Valid range for command codes (0-16777215).
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] log_packet: Enable/disable packet log for triggered diameter settings. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] message_length_invalid: Action to be taken for invalid message length. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] missing_request_action: Action to be taken for answers without corresponding request. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] monitor_all_messages: Enable/disable logging for all User Name and Result Code AVP messages. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] protocol_version_invalid: Action to be taken for invalid protocol version. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] request_error_flag_set: Action to be taken for request messages with error flag set. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] track_requests_answers: Enable/disable validation that each answer has a corresponding request. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if cmd_flags_reserve_set is not None:
            pulumi.set(__self__, "cmd_flags_reserve_set", cmd_flags_reserve_set)
        if command_code_invalid is not None:
            pulumi.set(__self__, "command_code_invalid", command_code_invalid)
        if command_code_range is not None:
            pulumi.set(__self__, "command_code_range", command_code_range)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if message_length_invalid is not None:
            pulumi.set(__self__, "message_length_invalid", message_length_invalid)
        if missing_request_action is not None:
            pulumi.set(__self__, "missing_request_action", missing_request_action)
        if monitor_all_messages is not None:
            pulumi.set(__self__, "monitor_all_messages", monitor_all_messages)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol_version_invalid is not None:
            pulumi.set(__self__, "protocol_version_invalid", protocol_version_invalid)
        if request_error_flag_set is not None:
            pulumi.set(__self__, "request_error_flag_set", request_error_flag_set)
        if track_requests_answers is not None:
            pulumi.set(__self__, "track_requests_answers", track_requests_answers)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="cmdFlagsReserveSet")
    def cmd_flags_reserve_set(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for messages with cmd flag reserve bits set. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "cmd_flags_reserve_set")

    @cmd_flags_reserve_set.setter
    def cmd_flags_reserve_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmd_flags_reserve_set", value)

    @property
    @pulumi.getter(name="commandCodeInvalid")
    def command_code_invalid(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for messages with invalid command code. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "command_code_invalid")

    @command_code_invalid.setter
    def command_code_invalid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_code_invalid", value)

    @property
    @pulumi.getter(name="commandCodeRange")
    def command_code_range(self) -> Optional[pulumi.Input[str]]:
        """
        Valid range for command codes (0-16777215).
        """
        return pulumi.get(self, "command_code_range")

    @command_code_range.setter
    def command_code_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_code_range", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet log for triggered diameter settings. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter(name="messageLengthInvalid")
    def message_length_invalid(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for invalid message length. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "message_length_invalid")

    @message_length_invalid.setter
    def message_length_invalid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_length_invalid", value)

    @property
    @pulumi.getter(name="missingRequestAction")
    def missing_request_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for answers without corresponding request. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "missing_request_action")

    @missing_request_action.setter
    def missing_request_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "missing_request_action", value)

    @property
    @pulumi.getter(name="monitorAllMessages")
    def monitor_all_messages(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging for all User Name and Result Code AVP messages. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "monitor_all_messages")

    @monitor_all_messages.setter
    def monitor_all_messages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_all_messages", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="protocolVersionInvalid")
    def protocol_version_invalid(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for invalid protocol version. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "protocol_version_invalid")

    @protocol_version_invalid.setter
    def protocol_version_invalid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_version_invalid", value)

    @property
    @pulumi.getter(name="requestErrorFlagSet")
    def request_error_flag_set(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for request messages with error flag set. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "request_error_flag_set")

    @request_error_flag_set.setter
    def request_error_flag_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_error_flag_set", value)

    @property
    @pulumi.getter(name="trackRequestsAnswers")
    def track_requests_answers(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable validation that each answer has a corresponding request. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "track_requests_answers")

    @track_requests_answers.setter
    def track_requests_answers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_requests_answers", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ProfileState:
    def __init__(__self__, *,
                 cmd_flags_reserve_set: Optional[pulumi.Input[str]] = None,
                 command_code_invalid: Optional[pulumi.Input[str]] = None,
                 command_code_range: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 message_length_invalid: Optional[pulumi.Input[str]] = None,
                 missing_request_action: Optional[pulumi.Input[str]] = None,
                 monitor_all_messages: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol_version_invalid: Optional[pulumi.Input[str]] = None,
                 request_error_flag_set: Optional[pulumi.Input[str]] = None,
                 track_requests_answers: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Profile resources.
        :param pulumi.Input[str] cmd_flags_reserve_set: Action to be taken for messages with cmd flag reserve bits set. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] command_code_invalid: Action to be taken for messages with invalid command code. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] command_code_range: Valid range for command codes (0-16777215).
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] log_packet: Enable/disable packet log for triggered diameter settings. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] message_length_invalid: Action to be taken for invalid message length. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] missing_request_action: Action to be taken for answers without corresponding request. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] monitor_all_messages: Enable/disable logging for all User Name and Result Code AVP messages. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] protocol_version_invalid: Action to be taken for invalid protocol version. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] request_error_flag_set: Action to be taken for request messages with error flag set. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] track_requests_answers: Enable/disable validation that each answer has a corresponding request. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if cmd_flags_reserve_set is not None:
            pulumi.set(__self__, "cmd_flags_reserve_set", cmd_flags_reserve_set)
        if command_code_invalid is not None:
            pulumi.set(__self__, "command_code_invalid", command_code_invalid)
        if command_code_range is not None:
            pulumi.set(__self__, "command_code_range", command_code_range)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if message_length_invalid is not None:
            pulumi.set(__self__, "message_length_invalid", message_length_invalid)
        if missing_request_action is not None:
            pulumi.set(__self__, "missing_request_action", missing_request_action)
        if monitor_all_messages is not None:
            pulumi.set(__self__, "monitor_all_messages", monitor_all_messages)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol_version_invalid is not None:
            pulumi.set(__self__, "protocol_version_invalid", protocol_version_invalid)
        if request_error_flag_set is not None:
            pulumi.set(__self__, "request_error_flag_set", request_error_flag_set)
        if track_requests_answers is not None:
            pulumi.set(__self__, "track_requests_answers", track_requests_answers)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="cmdFlagsReserveSet")
    def cmd_flags_reserve_set(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for messages with cmd flag reserve bits set. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "cmd_flags_reserve_set")

    @cmd_flags_reserve_set.setter
    def cmd_flags_reserve_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmd_flags_reserve_set", value)

    @property
    @pulumi.getter(name="commandCodeInvalid")
    def command_code_invalid(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for messages with invalid command code. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "command_code_invalid")

    @command_code_invalid.setter
    def command_code_invalid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_code_invalid", value)

    @property
    @pulumi.getter(name="commandCodeRange")
    def command_code_range(self) -> Optional[pulumi.Input[str]]:
        """
        Valid range for command codes (0-16777215).
        """
        return pulumi.get(self, "command_code_range")

    @command_code_range.setter
    def command_code_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_code_range", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet log for triggered diameter settings. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter(name="messageLengthInvalid")
    def message_length_invalid(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for invalid message length. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "message_length_invalid")

    @message_length_invalid.setter
    def message_length_invalid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_length_invalid", value)

    @property
    @pulumi.getter(name="missingRequestAction")
    def missing_request_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for answers without corresponding request. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "missing_request_action")

    @missing_request_action.setter
    def missing_request_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "missing_request_action", value)

    @property
    @pulumi.getter(name="monitorAllMessages")
    def monitor_all_messages(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging for all User Name and Result Code AVP messages. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "monitor_all_messages")

    @monitor_all_messages.setter
    def monitor_all_messages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_all_messages", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="protocolVersionInvalid")
    def protocol_version_invalid(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for invalid protocol version. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "protocol_version_invalid")

    @protocol_version_invalid.setter
    def protocol_version_invalid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_version_invalid", value)

    @property
    @pulumi.getter(name="requestErrorFlagSet")
    def request_error_flag_set(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for request messages with error flag set. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "request_error_flag_set")

    @request_error_flag_set.setter
    def request_error_flag_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_error_flag_set", value)

    @property
    @pulumi.getter(name="trackRequestsAnswers")
    def track_requests_answers(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable validation that each answer has a corresponding request. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "track_requests_answers")

    @track_requests_answers.setter
    def track_requests_answers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "track_requests_answers", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Profile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cmd_flags_reserve_set: Optional[pulumi.Input[str]] = None,
                 command_code_invalid: Optional[pulumi.Input[str]] = None,
                 command_code_range: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 message_length_invalid: Optional[pulumi.Input[str]] = None,
                 missing_request_action: Optional[pulumi.Input[str]] = None,
                 monitor_all_messages: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol_version_invalid: Optional[pulumi.Input[str]] = None,
                 request_error_flag_set: Optional[pulumi.Input[str]] = None,
                 track_requests_answers: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure Diameter filter profiles. Applies to FortiOS Version `>= 7.4.2`.

        ## Import

        DiameterFilter Profile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:diameterfilter/profile:Profile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:diameterfilter/profile:Profile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cmd_flags_reserve_set: Action to be taken for messages with cmd flag reserve bits set. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] command_code_invalid: Action to be taken for messages with invalid command code. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] command_code_range: Valid range for command codes (0-16777215).
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] log_packet: Enable/disable packet log for triggered diameter settings. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] message_length_invalid: Action to be taken for invalid message length. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] missing_request_action: Action to be taken for answers without corresponding request. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] monitor_all_messages: Enable/disable logging for all User Name and Result Code AVP messages. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] protocol_version_invalid: Action to be taken for invalid protocol version. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] request_error_flag_set: Action to be taken for request messages with error flag set. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] track_requests_answers: Enable/disable validation that each answer has a corresponding request. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure Diameter filter profiles. Applies to FortiOS Version `>= 7.4.2`.

        ## Import

        DiameterFilter Profile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:diameterfilter/profile:Profile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:diameterfilter/profile:Profile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cmd_flags_reserve_set: Optional[pulumi.Input[str]] = None,
                 command_code_invalid: Optional[pulumi.Input[str]] = None,
                 command_code_range: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 message_length_invalid: Optional[pulumi.Input[str]] = None,
                 missing_request_action: Optional[pulumi.Input[str]] = None,
                 monitor_all_messages: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol_version_invalid: Optional[pulumi.Input[str]] = None,
                 request_error_flag_set: Optional[pulumi.Input[str]] = None,
                 track_requests_answers: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProfileArgs.__new__(ProfileArgs)

            __props__.__dict__["cmd_flags_reserve_set"] = cmd_flags_reserve_set
            __props__.__dict__["command_code_invalid"] = command_code_invalid
            __props__.__dict__["command_code_range"] = command_code_range
            __props__.__dict__["comment"] = comment
            __props__.__dict__["log_packet"] = log_packet
            __props__.__dict__["message_length_invalid"] = message_length_invalid
            __props__.__dict__["missing_request_action"] = missing_request_action
            __props__.__dict__["monitor_all_messages"] = monitor_all_messages
            __props__.__dict__["name"] = name
            __props__.__dict__["protocol_version_invalid"] = protocol_version_invalid
            __props__.__dict__["request_error_flag_set"] = request_error_flag_set
            __props__.__dict__["track_requests_answers"] = track_requests_answers
            __props__.__dict__["vdomparam"] = vdomparam
        super(Profile, __self__).__init__(
            'fortios:diameterfilter/profile:Profile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cmd_flags_reserve_set: Optional[pulumi.Input[str]] = None,
            command_code_invalid: Optional[pulumi.Input[str]] = None,
            command_code_range: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            log_packet: Optional[pulumi.Input[str]] = None,
            message_length_invalid: Optional[pulumi.Input[str]] = None,
            missing_request_action: Optional[pulumi.Input[str]] = None,
            monitor_all_messages: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol_version_invalid: Optional[pulumi.Input[str]] = None,
            request_error_flag_set: Optional[pulumi.Input[str]] = None,
            track_requests_answers: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Profile':
        """
        Get an existing Profile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cmd_flags_reserve_set: Action to be taken for messages with cmd flag reserve bits set. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] command_code_invalid: Action to be taken for messages with invalid command code. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] command_code_range: Valid range for command codes (0-16777215).
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] log_packet: Enable/disable packet log for triggered diameter settings. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] message_length_invalid: Action to be taken for invalid message length. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] missing_request_action: Action to be taken for answers without corresponding request. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] monitor_all_messages: Enable/disable logging for all User Name and Result Code AVP messages. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] protocol_version_invalid: Action to be taken for invalid protocol version. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] request_error_flag_set: Action to be taken for request messages with error flag set. Valid values: `allow`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] track_requests_answers: Enable/disable validation that each answer has a corresponding request. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProfileState.__new__(_ProfileState)

        __props__.__dict__["cmd_flags_reserve_set"] = cmd_flags_reserve_set
        __props__.__dict__["command_code_invalid"] = command_code_invalid
        __props__.__dict__["command_code_range"] = command_code_range
        __props__.__dict__["comment"] = comment
        __props__.__dict__["log_packet"] = log_packet
        __props__.__dict__["message_length_invalid"] = message_length_invalid
        __props__.__dict__["missing_request_action"] = missing_request_action
        __props__.__dict__["monitor_all_messages"] = monitor_all_messages
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol_version_invalid"] = protocol_version_invalid
        __props__.__dict__["request_error_flag_set"] = request_error_flag_set
        __props__.__dict__["track_requests_answers"] = track_requests_answers
        __props__.__dict__["vdomparam"] = vdomparam
        return Profile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cmdFlagsReserveSet")
    def cmd_flags_reserve_set(self) -> pulumi.Output[str]:
        """
        Action to be taken for messages with cmd flag reserve bits set. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "cmd_flags_reserve_set")

    @property
    @pulumi.getter(name="commandCodeInvalid")
    def command_code_invalid(self) -> pulumi.Output[str]:
        """
        Action to be taken for messages with invalid command code. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "command_code_invalid")

    @property
    @pulumi.getter(name="commandCodeRange")
    def command_code_range(self) -> pulumi.Output[str]:
        """
        Valid range for command codes (0-16777215).
        """
        return pulumi.get(self, "command_code_range")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> pulumi.Output[str]:
        """
        Enable/disable packet log for triggered diameter settings. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @property
    @pulumi.getter(name="messageLengthInvalid")
    def message_length_invalid(self) -> pulumi.Output[str]:
        """
        Action to be taken for invalid message length. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "message_length_invalid")

    @property
    @pulumi.getter(name="missingRequestAction")
    def missing_request_action(self) -> pulumi.Output[str]:
        """
        Action to be taken for answers without corresponding request. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "missing_request_action")

    @property
    @pulumi.getter(name="monitorAllMessages")
    def monitor_all_messages(self) -> pulumi.Output[str]:
        """
        Enable/disable logging for all User Name and Result Code AVP messages. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "monitor_all_messages")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="protocolVersionInvalid")
    def protocol_version_invalid(self) -> pulumi.Output[str]:
        """
        Action to be taken for invalid protocol version. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "protocol_version_invalid")

    @property
    @pulumi.getter(name="requestErrorFlagSet")
    def request_error_flag_set(self) -> pulumi.Output[str]:
        """
        Action to be taken for request messages with error flag set. Valid values: `allow`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "request_error_flag_set")

    @property
    @pulumi.getter(name="trackRequestsAnswers")
    def track_requests_answers(self) -> pulumi.Output[str]:
        """
        Enable/disable validation that each answer has a corresponding request. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "track_requests_answers")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

