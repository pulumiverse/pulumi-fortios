# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ProfileIcapHeaderArgs',
    'ProfileRespmodForwardRuleArgs',
    'ProfileRespmodForwardRuleHeaderGroupArgs',
    'ProfileRespmodForwardRuleHttpRespStatusCodeArgs',
    'ServergroupServerListArgs',
]

@pulumi.input_type
class ProfileIcapHeaderArgs:
    def __init__(__self__, *,
                 base64_encoding: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] base64_encoding: Enable/disable use of base64 encoding of HTTP content. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] content: HTTP header content.
        :param pulumi.Input[int] id: HTTP forwarded header ID.
        :param pulumi.Input[str] name: HTTP forwarded header name.
        """
        if base64_encoding is not None:
            pulumi.set(__self__, "base64_encoding", base64_encoding)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="base64Encoding")
    def base64_encoding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of base64 encoding of HTTP content. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "base64_encoding")

    @base64_encoding.setter
    def base64_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base64_encoding", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP forwarded header ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP forwarded header name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileRespmodForwardRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 header_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileRespmodForwardRuleHeaderGroupArgs']]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 http_resp_status_codes: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileRespmodForwardRuleHttpRespStatusCodeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to be taken for ICAP server. Valid values: `forward`, `bypass`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileRespmodForwardRuleHeaderGroupArgs']]] header_groups: HTTP header group. The structure of `header_group` block is documented below.
        :param pulumi.Input[str] host: Address object for the host.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileRespmodForwardRuleHttpRespStatusCodeArgs']]] http_resp_status_codes: HTTP response status code. The structure of `http_resp_status_code` block is documented below.
        :param pulumi.Input[str] name: Address name.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if header_groups is not None:
            pulumi.set(__self__, "header_groups", header_groups)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_resp_status_codes is not None:
            pulumi.set(__self__, "http_resp_status_codes", http_resp_status_codes)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for ICAP server. Valid values: `forward`, `bypass`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="headerGroups")
    def header_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileRespmodForwardRuleHeaderGroupArgs']]]]:
        """
        HTTP header group. The structure of `header_group` block is documented below.
        """
        return pulumi.get(self, "header_groups")

    @header_groups.setter
    def header_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileRespmodForwardRuleHeaderGroupArgs']]]]):
        pulumi.set(self, "header_groups", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Address object for the host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpRespStatusCodes")
    def http_resp_status_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileRespmodForwardRuleHttpRespStatusCodeArgs']]]]:
        """
        HTTP response status code. The structure of `http_resp_status_code` block is documented below.
        """
        return pulumi.get(self, "http_resp_status_codes")

    @http_resp_status_codes.setter
    def http_resp_status_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileRespmodForwardRuleHttpRespStatusCodeArgs']]]]):
        pulumi.set(self, "http_resp_status_codes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProfileRespmodForwardRuleHeaderGroupArgs:
    def __init__(__self__, *,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] case_sensitivity: Enable/disable case sensitivity when matching header. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] header: HTTP header regular expression.
        :param pulumi.Input[str] header_name: HTTP header.
        :param pulumi.Input[int] id: ID.
        """
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable case sensitivity when matching header. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "case_sensitivity")

    @case_sensitivity.setter
    def case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_sensitivity", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header regular expression.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ProfileRespmodForwardRuleHttpRespStatusCodeArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] code: HTTP response status code.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP response status code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ServergroupServerListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: ICAP server name.
        :param pulumi.Input[int] weight: Optionally assign a weight of the forwarding server for weighted load balancing (1 - 100, default = 10).
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        ICAP server name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Optionally assign a weight of the forwarding server for weighted load balancing (1 - 100, default = 10).
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


